
//////////////
//15.1 - Global Object
//////////////
extern NaN: number;
extern Infinity: number;
extern undefined: any;
extern eval(x: string): any;
extern parseInt(string: string): number;
extern parseInt(string: string, radix: string): number;  //TODO: Are overloaded externs okay?
extern parseFloat(string: string): number;
extern isNaN(number: number): bool;
extern isFinite(number: number): bool;
extern decodeURI(encodedURI: string): string;
extern decodeURIComponent(encodedURIComponent: string): string;
extern encodeURI(uri: string): string;
extern encodeURIComponent(uriComponent: string): string;



//////////////
//15.2 - Global Object
//////////////
extern class Object() {  
	// TODO:  This is presumably the base class of all classes with undeclared base
	// TODO:  It also seems to be the corresponding type for runtime things typed as Object


}
module Object {
  public new(): Object;
  public new(value: any): Object;
  public (): Object;  
  public (value: any): Object;  

  public getPrototypeOf(o: Object): 
}

//////////////
//15.9 - Date
//////////////
extern class Date(value: number) {
  // TODO: .constructor? I assume is implict in class definition, and has an anonymous interface type corresponding to the Date module

  public toString(): string;
  public toDateString(): string;
  public toTimeString(): string;
  public toLocaleString(): string;
  public toLocaleDateString(): string;
  public toLocaleTimeString(): string;
  public valueOf(): number;
  public getTime(): number;
  public getFullYear(): number;
  public getUTCFullYear(): number;
  public getMonth(): number;
  public getUTCMonth(): number;
  public getDate(): number;
  public getUTCDate(): number;
  public getDay(): number;
  public getUTCDay(): number;
  public getHours(): number;
  public getUTCHours(): number;
  public getMinutes(): number;
  public getUTCMinutes(): number;
  public getSeconds(): number;
  public getUTCSeconds(): number;
  public getMilliseconds(): number;
  public getUTCMilliseconds(): number;
  public getTimezoneOffset(): number;
  public setTime(time: number);
  public setMilliseconds(ms: number);
  public setUTCMilliseconds(ms: number);
  public setSeconds(): number;
  public setUTCSeconds(): number;
  public setMinutes(): number;
  public setUTCMinutes(): number;
  public setHours(): number;
  public setUTCHours(): number;
  public setDate(): number;
  public setUTCDate(): number;
  public setMonth(): number;
  public setUTCMonth(): number;
  public setFullYear(): number;
  public setUTCFullYear(): number;
  public toUTCString(): string;
  public toISOString(): string;
  public toJSON(): string;

}
extern module Date {
  // Called as a function
  public (): string;
  
  // Called as a constructor
  public new() : Date;
  public new(year: number, month: number): Date;
  public new(year: number, month: number, date: number): Date;
  public new(year: number, month: number, date: number, hours: number): Date;
  public new(year: number, month: number, date: number, hours: number, minutes: number): Date;
  public new(year: number, month: number, date: number, hours: number, minutes: number, seconds: number): Date;
  public new(year: number, month: number, date: number, hours: number, minutes: number, seconds: number, ms: number): Date;
  // TODO: Does the "implementation" constructor signature need to be repeated here - I think so
  public new(value: number);

  // TODO: Is there a .prototype property?  I believe that is implict in the definition Date as a class, and it's value is actually "any"

  public parse(string: string): number;
  public UTC(year: number, month: number): number;
  public UTC(year: number, month: number, date: number): number;
  public UTC(year: number, month: number, date: number, hours: number): number;
  public UTC(year: number, month: number, date: number, hours: number, minutes: number): number;
  public UTC(year: number, month: number, date: number, hours: number, minutes: number, seconds: number): number;
  public UTC(year: number, month: number, date: number, hours: number, minutes: number, seconds: number, ms: number): number;
  public now(): number;

}