{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Closing per Bill's comments",
    "ClosedDate": "2013-03-04T16:18:51.643-08:00",
    "CommentCount": 5,
    "Custom": null,
    "Description": "While in the process of creating a definition file for underscore.js I discovered a function named any. Since any is a reserved keyword I either have to exclude the function from the definition file or simply define underscore as:\r\n```TypeScript\r\ndeclare var _: any;\r\n\r\n```\r\n\r\nhttp://underscorejs.org/#any\r\n\r\nIt would be very nice to have the ability to use escape reserved keywords like C# using the @ symbol or something similar.",
    "LastUpdatedDate": "2013-07-10T12:42:54.937-07:00",
    "PlannedForRelease": "TypeScript 0.9.0",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-04T00:02:41.817-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Reserved keywords as function names",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 7,
    "Id": 80
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I agree with allowing @-escaped keywords to be used as identifiers. If I had a nickel for everytime JS has complained about me using \"var package\" and \"var class\", so I end up using ugly \"var pkg\" and \"var klass\" which is sorta dumb.",
      "PostedDate": "2012-10-04T00:34:27.483-07:00",
      "Id": 78523
    },
    {
      "Message": "The @ has already been approved from at-name syntax, which provides a syntactic initializer form for Symbols.  Per the standard, \"class\" has always been a future reserved word, but \"package\" is only future reserved in strict mode, but \"any\" shouldn't be a reserved word at all.",
      "PostedDate": "2012-10-04T09:30:42.187-07:00",
      "Id": 78566
    },
    {
      "Message": "This is a big deal. I have interfaces and classes that need functions named \"export\". Maybe use backticks if y'all aren't worried about clashing w/ ECMA quasi-literals.",
      "PostedDate": "2012-12-30T12:52:05.763-08:00",
      "Id": 85063
    },
    {
      "Message": "The keywords in question here should be \"contextual keywords\" so that they can be used in any location where they do not need to be interpreted as keywords/types.  The two cases mentioned here should be allowed, barring bugs in the compiler.",
      "PostedDate": "2013-02-26T13:30:59.393-08:00",
      "Id": 91598
    },
    {
      "Message": "class & export are future reserved keywords as per http://es5.github.com/#x7.6.1.2.  I can use them as members, but not identifier.  For example, the below is perfectly valid code:\n\ninterface Foo {\n\texport: string;\n\tclass: number;\n}\nvar x: Foo;\nx.class = 5;\nx.export = \"hi\";\n\nThe keyword 'any' is not reserved, and indeed the below is perfectly valid in TypeScript:\n\nvar any: Event;\nany.bubbles = false;\n\nI believe this is behaving as expected.  Please reopen if I am mistaken.",
      "PostedDate": "2013-02-26T17:50:55.483-08:00",
      "Id": 91631
    }
  ]
}