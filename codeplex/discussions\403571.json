[
  {
    "Id": "943149",
    "ThreadId": "403571",
    "Html": "\r\n<p>The with statement is only partially supported:</p>\r\n<p>&nbsp;</p>\r\n<pre>module a{\n\texport function b():void{\n\t\talert(&quot;yo&quot;);\n\t}\n}\n\nwith (a){\n\tb();\t\n}\n</pre>\r\n<p>&nbsp;</p>\r\n<p>It works, but as the compiler says &quot;all symbols within a 'with' block will be typed as 'any'&quot;.</p>\r\n<p>Can we expect this to change? It would be really nice to be able to have the types also within 'with's.</p>\r\n<p>(Edit: I just realized that 'with' is not allowed in Ecmascript 5 strict mode.)</p>\r\n",
    "PostedDate": "2012-11-16T22:45:59.93-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944634",
    "ThreadId": "403571",
    "Html": "\r\n<p>This is unlikely to change.&nbsp;</p>\r\n<p>As you pointed out, it's fallen out of favor (it's in the Bad Parts in Crockford's book\r\n<a href=\"http://oreilly.com/javascript/excerpts/javascript-good-parts/bad-parts.html\">\r\nhttp://oreilly.com/javascript/excerpts/javascript-good-parts/bad-parts.html</a>).&nbsp;</p>\r\n",
    "PostedDate": "2012-11-20T08:15:09.8-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944687",
    "ThreadId": "403571",
    "Html": "\r\n<p>So you are saying that we can't use one of the features in Javascript when using TypeScript?</p>\r\n<p>That is pretty much crap because I have variables that need to be casted and the structure of the modules will make it pretty long.&nbsp;And I have to set multiple properties inside those variables. Which and without the with statement it forces me to repeat\r\n it 10 times in a row.</p>\r\n",
    "PostedDate": "2012-11-20T09:21:11.56-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "945197",
    "ThreadId": "403571",
    "Html": "\r\n<p>One way to think of TypeScript is a linting tool for JavaScript (plus a few features).&nbsp; You can always ignore the suggestions TypeScript has - in a sense type errors are really only type warnings.&nbsp; For example, you might want to do:</p>\r\n<p>var x = {} + {}</p>\r\n<p>It's perfectly valid JavaScript.&nbsp; TypeScript will give you a warning, but it will still output the JavaScript you requested.</p>\r\n<p>Conversely, TypeScript doesn't give you typing help in a few cases and instead goes to 'any'.&nbsp; This helps to simplify typechecking so that&nbsp;the compiler&nbsp;can use type inference more often, and to help that inference be pretty efficient.&nbsp; It's a trade-off.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-11-21T08:04:22.42-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1100043",
    "ThreadId": "403571",
    "Html": "Sorry to bring up this old thread, but couldn't find a more recent one that deals with the <code>with</code> statement.\r<br />\n<br />\nShouldn't the compiler just give a warning instead of an error? \r<br />\n(That brings up the question if there is the concept of warnings in the context of the TS compiler?)\r<br />\n<br />\nCurrently, the compiler outputs &quot;error TS2135: All symbols within a with block will be resolved to 'any'.&quot; and sets the <code>errorlevel</code> to <code>1</code> (on Windows). \r<br />\n<br />\nAlso, as with <code>eval</code>, I guess there are situations where it is OK to use <code>with</code>. Just because it is on Crockford's 'bad parts' list doesn't mean it is a complete no-go. After all, he discourages the use of the <code>++</code> operator, blockless statements (e.g. IF without braces), and to some parts even the <code>new</code> operator :).\r<br />\n<br />\nI am not arguing in favor of full support for <code>with</code>, just allow it to be used without causing the compile to 'fail' (in the broader sense).<br />\n",
    "PostedDate": "2013-09-27T02:57:02.897-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1100251",
    "ThreadId": "403571",
    "Html": "The 'error' at present is basically a warning, similar to all of our type checking related errors. That is, the compiler gives you the error but still emits JS to the best of its ability. At some point it will make sense to do a proper error/warning division and 'warn as error' and all that good stuff.<br />\n",
    "PostedDate": "2013-09-27T12:08:04.153-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1103538",
    "ThreadId": "403571",
    "Html": "Since TypeScript is statically typed, it can safely resolve symbols inside <code>with</code> block and rewrite code to not depend on JavaScripts's <code>with</code> thus avoiding its inherent issues. I have requested this in <a href=\"https://typescript.codeplex.com/workitem/1753\" rel=\"nofollow\">#1753</a>.<br />\n",
    "PostedDate": "2013-10-04T01:50:19.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1103757",
    "ThreadId": "403571",
    "Html": "The nature of a 'with' statement makes this largely impossible. From your example:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">with</span> (foo) {\n   bar();\n}\r\n</pre></div>to<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\nfoo.bar();\r\n</pre></div>These are not equivalent. If foo does not have a bar() property then bar() could be a global function. If nested within other with statements or scopes it could be even hairier. The same logic here <a href=\"http://www.yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/\" rel=\"nofollow\">http://www.yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/</a> for why the 'with' statement can introduce ambiguity in JavaScript makes the TypeScript compiler unable to safely type code within a 'with' statement by anything other than 'any'. As noted in that blog post, it is simpler and safer to just use a var to alias a long dotted name (or sometimes an import alias in TypeScript).<br />\n",
    "PostedDate": "2013-10-04T11:20:43.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1103773",
    "ThreadId": "403571",
    "Html": "If <code>foo</code> does not have bar property then <code>bar</code> either resolves statically to symbol in outer scope or compilation fails - just as if there was no <code>with</code> block around it.\r<br />\n<br />\nAmbiguity exist only in absence of static type information. But since typescript compiler knows type of <code>foo</code> and knows the set of possible members of <code>foo</code>, it can safely rewrite <code>bar()</code> into <code>foo.bar()</code> if it exists in <code>foo</code>.\r<br />\nObviously generated code would depend on the type of <code>foo</code> and expressions resulting in <code>any</code> have to be prohibited.<br />\n",
    "PostedDate": "2013-10-04T11:57:04.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1104632",
    "ThreadId": "403571",
    "Html": "The compiler doesn't know the complete set of members of <code>foo</code>, only a minimum subset. For example:<br />\n<pre><code>interface Things {\n    foo: number;\n    bar: number;\n}\n\nvar x: Things;\nif(Math.random() &gt; 0.5) {\n    x = { foo: 3, bar: 5, baz: 10 };\n} else {\n    x = { foo: 3, bar: 5 };\n}\n\nvar baz = 'what';\nwith(x) {\n    console.log(baz); // ???\n}</code></pre>\n\n",
    "PostedDate": "2013-10-07T09:35:02.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1104641",
    "ThreadId": "403571",
    "Html": "I don't know why you would assume that <code>baz</code> inside <code>with(x)</code> should be somehow resolved dynamically.<br />\n<br />\nSince <code>x</code> is <code>Things</code> and <code>Things</code> does not have <code>baz</code> then <code>baz</code> inside <code>with</code> refers to <code>var baz</code> from outer scope.<br />\n<br />\nBut I agree that it's not really that important and I'd rather see progress on other language features.<br />\n",
    "PostedDate": "2013-10-07T09:57:37.53-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1104649",
    "ThreadId": "403571",
    "Html": "By &quot;outer scope&quot; I mean whatever's outside with() block.<br />\n",
    "PostedDate": "2013-10-07T10:05:42.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1104743",
    "ThreadId": "403571",
    "Html": "A core language principle is that we don't change the semantics of existing JavaScript code.<br />\n",
    "PostedDate": "2013-10-07T12:54:15.97-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1104749",
    "ThreadId": "403571",
    "Html": "Ha! But the semantics would be preserved.\r<br />\n<br />\nOnly some programs that are valid javascript would fail to compile but that is no different from the way typescript works already (e.g. adding <code>console.log(x.baz)</code> in toplevel above would fail to compile even though it's a valid js).<br />\n",
    "PostedDate": "2013-10-07T13:13:00.913-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1104750",
    "ThreadId": "403571",
    "Html": "<strong>mwisnicki wrote:</strong><br />\n<blockquote>\nHa! But the semantics would be preserved.<br />\n</blockquote>\nAh sorry, I'm mistaken. When x.baz is defined js would print &quot;10&quot; while ts would print &quot;what&quot;.<br />\n",
    "PostedDate": "2013-10-07T13:14:21.223-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]