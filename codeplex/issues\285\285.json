{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:21.703-07:00",
    "CommentCount": 5,
    "Custom": null,
    "Description": "Is there a way to create non-anonymous AMD Modules in Typescript. When I define a module like this:\r\n\r\n```\r\nexport module Bootstrapper {\r\n  export function run() {\r\n    var i = 0;\r\n  }\r\n}\r\n\r\n```\r\n\r\nthe generated code is:\r\n\r\n```\r\ndefine([\"require\", \"exports\"], function(require, exports) {\r\n  (function (Bootstrapper) {\r\n    function run() {\r\n        var i = 0;\r\n    }\r\n    Bootstrapper.run = run;\r\n  })(exports.Bootstrapper || (exports.Bootstrapper = {}));\r\n})\r\n```\r\n\r\nHow can I define a non-anomymous module like this:\r\n\r\n```\r\ndefine('bootstrapper', [\"require\", \"exports\"], function(require, exports) {\r\n  (function (Bootstrapper) {\r\n    function run() {\r\n        var i = 0;\r\n    }\r\n    Bootstrapper.run = run;\r\n  })(exports.Bootstrapper || (exports.Bootstrapper = {}));\r\n})\r\n```\r\n\r\nThanks in advance",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 2.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-18T12:01:10.113-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Create non-anonymous AMD Modules",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 28,
    "Id": 285
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "The request here is to be able to emit an AMD module definition that uses an explicit module name.  In the past, syntax like the following has been considered for this:\n\nmodule \"bootstrapper\" {\n  export function run() { }\n}",
      "PostedDate": "2012-10-18T12:03:00.04-07:00",
      "Id": 80371
    },
    {
      "Message": "I would consider this essential for creating offline SPA apps since all the js assets would likely be bundled and cached.\n\nFor reference here's the original stack overflow post:\n\nhttp://stackoverflow.com/questions/12956270/create-non-anonymous-amd-modules-in-typescript\n",
      "PostedDate": "2012-12-18T06:30:02.397-08:00",
      "Id": 84499
    },
    {
      "Message": "I would like to use ASP.NET bundling features to bundle/minify a set of the AMD JS files generated from TypeScript that I know will be needed on the initial load of the page.  I have seen it suggested to use r.js to bundle the AMD JS files but this is a pain in a pure Visual Studio environment.",
      "PostedDate": "2013-09-25T09:48:50-07:00",
      "Id": 115625
    },
    {
      "Message": "There is no build specification for AMD currently, and different tools do it differently, so the idea that you need to generate non-anonymous modules for generating built layers of modules (“essential for creating offline SPA apps”) is thankfully not accurate, and in fact will complicate things like the `map` option if performed.\n\nIn considering TypeScript to be a language and compiler, I think more advanced applications like AMD layer builds ought to be done by things like r.js, Dojo builder, etc. instead, to avoid trying to do too much at once, but that’s just my opinion.",
      "PostedDate": "2013-12-18T16:21:03.537-08:00",
      "Id": 128007
    },
    {
      "Message": "This feature was recently added to the TypeScript master branch via [this pull request](https://github.com/Microsoft/TypeScript/pull/1158). Declaring an AMD module name is done with the following reference comment:\n\n```\n/// <amd-module name='MyModuleName'/>\n```\n\nwill now produce the following JavaScript:\n\n```\ndefine(\"MyModuleName\", [\"require\", \"exports\"], function (require, exports) { ... }\n```",
      "PostedDate": "2014-11-18T19:58:32.253-08:00",
      "Id": 166076
    }
  ]
}