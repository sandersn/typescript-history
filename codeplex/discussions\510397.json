[
  {
    "Id": "1180048",
    "ThreadId": "510397",
    "Html": "I am trying to write a javascript game in typescript. I come from a webdev, AS3 and C# background and have done a lot of small stuff in JS. What I want is to build the app like I did in AS3 and C#: modules containing classes in seperate files.\r<br />\n<br />\nIt would be optimal to compile this to a single minimized js file, but any other solution where I can use multiple files in development without having to declare them all in html would also be welcome. \r<br />\n<br />\nI'm quite confused by the answers i find online. There are wildly different approaches, with editing .csproj, placing ///&lt;reference in one file, using import statements, compiling to AMD with requirejs, and all other kinds of ways. Most of them say to call a command line like &quot;tsc --out final.js app.ts&quot; which i don't even know how to execute in visual studio.\r<br />\n<br />\nSo what is the best way to write a typescript app in a similar way to AS3 or C#, and being able to include it easily in a web-page, using visual studio 2012 with the latest version of typescript (0.9.5 now i think)? Is there some documentation I'm missing?<br />\n",
    "PostedDate": "2014-01-19T02:24:05.707-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1187752",
    "ThreadId": "510397",
    "Html": "If you're in Visual Studio 2013 with TypeScript 0.9.5 installed, you can create a project and then edit the project properties by right clicking the project and then selecting &quot;TypeScript Build&quot; on the properties page.  From there you can select &quot;Combine JavaScript Output into file&quot; and set the file you want to compile to.  If you're in Visual Studio 2012, you can still configure this, but you'll need to unload the project, edit it, and set the property TypeScriptOutFile, like this<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">PropertyGroup</span> <span style=\"color:Red;\">Condition</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&#39;$(Configuration)&#39; == &#39;Debug&#39;</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TypeScriptTarget</span><span style=\"color:Blue;\">&gt;</span>ES5<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">TypeScriptTarget</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TypeScriptRemoveComments</span><span style=\"color:Blue;\">&gt;</span>false<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">TypeScriptRemoveComments</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TypeScriptSourceMap</span><span style=\"color:Blue;\">&gt;</span>true<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">TypeScriptSourceMap</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TypeScriptModuleKind</span><span style=\"color:Blue;\">&gt;</span>AMD<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">TypeScriptModuleKind</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TypeScriptOutFile</span><span style=\"color:Blue;\">&gt;</span>myoutput.js<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">TypeScriptOutFile</span><span style=\"color:Blue;\">&gt;</span>\n  <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">PropertyGroup</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div>You will still need to run the resulting .js through a minifier, as the compiler is meant to be just part of the toolchain rather than the whole thing.  It outputs a clean .js file you can use as in put to the next part of the toolchain.\r<br />\n<br />\nThe different approaches to how you handle .js files comes from JavaScript itself, which TypeScript builds on.  As you grow to larger scripts, you may want to investigate some of the other solutions, like module loaders, which help you break large codebases into more modular components that can be loaded as they are needed.<br />\n",
    "PostedDate": "2014-01-21T08:22:29.627-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1188079",
    "ThreadId": "510397",
    "Html": "Ok, I tried to do what you describe:\r<br />\nI pasted the propertygroup in my csproj file, reloaded it and built the project. But myoutput.js was nowhere to be found. I also don't understand how visual studio could know what to compile and where to put myoutput.js. Am I missing something?<br />\n",
    "PostedDate": "2014-01-21T10:20:19.52-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]