{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "If you're compiling bar.ts with --out, you should see that Foo is initialized above Bar (please reactivate the issue if you're seeing otherwise).\n\nIf you're compiling to Foo.js / Bar.js, it is up to you to load the scripts in the correct order, same if you were writing vanilla JS.",
    "ClosedDate": "2013-01-03T09:54:57.857-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "When one class uses the static field of another class in its static field, the dependencies are not correctly interpreted by the TypeScript compiler and the files may be combined in the wrong order:\r\n\r\nThe first file, Foo.ts, declares a class Foo with a static field x, with value 'Foo':\r\n\r\nclass Foo {\r\n\tstatic x = 'Foo';\r\n}\r\n\r\nThe second file, Bar.ts, references Foo.ts and uses Foo.x to initialize its static var x:\r\n\r\n///<reference path=\"Foo.ts\"/>\r\nclass Bar {\r\n\tstatic x = Foo.x + 'Bar';\r\n}\r\n\r\nWhen compiled, the javascript generated from Bar.ts can end up *before* the javascript for Foo.ts, causing a runtime error when Bar tries to reference Foo's static var x.\r\n\r\nIf this is by design, what is a better alternative or workaround?",
    "LastUpdatedDate": "2013-01-03T09:54:57.857-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-01-02T15:31:38.117-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Single file output does not order static dependencies correctly",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 588
  },
  "FileAttachments": [],
  "Comments": []
}