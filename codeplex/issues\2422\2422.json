{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Yep, you guys got it, not the greatest experience but these are the constraints JavaScript places on us.",
    "ClosedDate": "2014-04-11T14:56:50.857-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "The following does not produce a edit or compile time error in Typescript, but produces an undefined value for the variable in question. This behavior is evident in the Eclispe Typescript plugin by Palantir as well as the editor for www.typescriptlang.org, so I believe it is a compiler issue.\r\n\r\n\r\n```\r\nclass Test {\r\nstatic go(){\r\n    console.log(cat);\r\n\r\n    // commenting this out reveals error in editor, leaving it in hides preceding usage\r\n    var cat = 1;\r\n}\r\n}\r\nTest.go();\r\n```\r\n",
    "LastUpdatedDate": "2014-04-11T14:56:50.857-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-04-11T10:51:44.593-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Declare var after usage, no error",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2422
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This isn't a typescript bug, this is a javascript, um, feature. Javascript hoists variable declarations, see here: http://www.kenneth-truyers.net/2013/04/20/javascript-hoisting-explained/ and other places for descriptions. If you want to check for or prevent this in your code, you may want to use tslint -- https://github.com/palantir/tslint -- the \"no-use-before-declare\" prevents this common mistake, and there is already an eclipse plugin for it -- https://github.com/palantir/eclipse-tslint . ",
      "PostedDate": "2014-04-11T11:23:17.433-07:00",
      "Id": 141519
    },
    {
      "Message": "Sorry, I should have remembered that I have to consider all of JS. I think using Typescript is making me intolerant of JS 'features'. Clearly you can't enforce this in Typescript itself, as long as ECMAScript allows for it.\n\nThanks for the tslint tip.",
      "PostedDate": "2014-04-11T11:50:17.247-07:00",
      "Id": 141523
    },
    {
      "Message": "I'm curious as to why anyone might code that way to begin with? ;)",
      "PostedDate": "2014-04-11T12:50:53.217-07:00",
      "Id": 141530
    },
    {
      "Message": "Temporarily use wider scope, then reign that in with local scope. I'd declare the local with another name to begin with and conditionally set that. I cannot produce a compelling use case at the moment.\n\nBut I think it exists as a 'feature', because it works off of global scoping rules, combined with a desire to *not* read ahead in the JS to see if there *maybe* could be a local declaration lower down. This way we have enough JS rope to hang ourselves with, and future generations.",
      "PostedDate": "2014-04-11T13:22:54.243-07:00",
      "Id": 141534
    }
  ]
}