{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-11-15T10:59:30.82-08:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "    class List<a> {\r\n    }\r\n\r\n    function map <T, U> (xs: List<T>, f: (x: T) => U): List<U> {\r\n       return null\r\n    }\r\n\r\n    // Assign List<string> to List<number>\r\n    function f () {\r\n       var defs: List<number>\r\n       defs = map<number, string>(\r\n          defs,\r\n          (def: number) => { return \"string\" }\r\n       )\r\n    }\r\n",
    "LastUpdatedDate": "2013-11-19T15:48:25.243-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-11-15T09:02:35.11-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Type checking doesn't work",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1896
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Same problem without the explict `<number, string>` arguments to `map`",
      "PostedDate": "2013-11-15T09:03:44.997-08:00",
      "Id": 123187
    },
    {
      "Message": "This is by design if you change List<a> to \n\n````\nclass List<a>{ \n    someprop: a;\n}\n````\n\nRyan has a good explanation here: \n\nhttps://typescript.codeplex.com/workitem/1866",
      "PostedDate": "2013-11-15T10:59:24.97-08:00",
      "Id": 123202
    },
    {
      "Message": "Yikes. This is not a good outcome of the decision to mingle structural and nominal types!\n\nWhy is List<a> even legal? It doesn't make any sense at all.",
      "PostedDate": "2013-11-16T06:07:01.183-08:00",
      "Id": 123271
    },
    {
      "Message": "We considered making unconsumed generic parameters illegal, but decided to err on the side of being more permissive. It certainly seems to make a lot of confusion.",
      "PostedDate": "2013-11-19T15:48:25.243-08:00",
      "Id": 123591
    }
  ]
}