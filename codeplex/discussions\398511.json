[
  {
    "Id": "923554",
    "ThreadId": "398511",
    "Html": "\r\n<p>Within a class using jQuery's .ajax function I did this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        connect(callback?: (connected: bool) =&gt; <span style=\"color:blue\">void</span>) {\r\n            $.ajax(<span style=\"color:blue\">this</span>.url &#43; <span style=\"color:#a31515\">&quot;/connect&quot;</span>, $.extend(<span style=\"color:blue\">true</span>, {}, <span style=\"color:blue\">this</span>.ajaxSettings, {\r\n                success: (data) =&gt; {\r\n                    <span style=\"color:blue\">this</span>.errorChecker(data, (data) =&gt; {\r\n                        <span style=\"color:blue\">if</span> (callback != <span style=\"color:blue\">null</span>) {\r\n                            callback(data);\r\n                        }\r\n                    });\r\n                },\r\n                timeout: <span style=\"color:blue\">this</span>.timeout,\r\n                error: () =&gt; {\r\n                    <span style=\"color:blue\">if</span> (callback != <span style=\"color:blue\">null</span>) {\r\n                        callback(<span style=\"color:blue\">false</span>);\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Which the type script compiler compiles into this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            VAS.prototype.connect = <span style=\"color:blue\">function</span> (callback) {\r\n                $.ajax(<span style=\"color:blue\">this</span>.url &#43; <span style=\"color:#a31515\">&quot;/connect&quot;</span>, $.extend(<span style=\"color:blue\">true</span>, {\r\n                }, <span style=\"color:blue\">this</span>.ajaxSettings, {\r\n                    success: <span style=\"color:blue\">function</span> (data) {\r\n                        _this.errorChecker(data, <span style=\"color:blue\">function</span> (data) {\r\n                            <span style=\"color:blue\">if</span>(callback != <span style=\"color:blue\">null</span>) {\r\n                                callback(data);\r\n                            }\r\n                        });\r\n                    },\r\n                    timeout: <span style=\"color:blue\">this</span>.timeout,\r\n                    error: <span style=\"color:blue\">function</span> () {\r\n                        <span style=\"color:blue\">if</span>(callback != <span style=\"color:blue\">null</span>) {\r\n                            callback(<span style=\"color:blue\">false</span>);\r\n                        }\r\n                    }\r\n                }));\r\n            };\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Note the line with</p>\r\n<pre>_this.errorChecker<br><br>The compiler correctly notices that _this should refer to this instance of the object, but it fails to include the _this=this line at the start of the function. Is this a bug? If I remove the $.extend part and just create the ajaxSettings object as a whole, it correctly adds the _this = this line.</pre>\r\n",
    "PostedDate": "2012-10-08T10:17:06.987-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923648",
    "ThreadId": "398511",
    "Html": "<p>It is not the extend, it is the extra parameter to extend that breaks it:</p>\r\n<p>$.extend(true, {}, { success: (data) =&gt; { this.process(data); }});</p>\r\n<p>works fine.</p>\r\n<p>I played a bit with the definition of extend, turn out if definition variant is used where the interface is defined with variable number of parameters and the actual parameter count exceeds the one in the definition, the _this variable is not created.</p>\r\n<p>for example we an change the definition of extend as follow:</p>\r\n<p>&nbsp;extend(deep: bool, target: any, obj1: any, obj2: any, obj3: any, ...objs: any[]): Object;\r\n<div style=\"color: black; background-color: white;\">\r\n<pre> extend(deep: bool, target: any, obj1: any, obj2: any, obj3: any, ...objs: any[]): Object;\r\n</pre>\r\n</div>\r\n</p>\r\n<p>and then define the call as:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>  connect(url) {\r\n    $.ajax(<span style=\"color: blue;\">this</span>.url + <span style=\"color: #a31515;\">'/conect'</span>, $.extend(<span style=\"color: blue;\">true</span>, {one: 1}, { two: 2}, {three: 3},{\r\n      four: 4},{\r\n      success: (data:string) =&gt; {\r\n        <span style=\"color: blue;\">this</span>.process(data);\r\n      }\r\n    }));\r\n  }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Because the parameters in the call are less than or equal to the ones in the definition, _this is created, If we add one more object (i.e. hit beyond the defined ones even though the last one is defined as many) we do not get the _this assignment.</p>\r\n<p>&nbsp;</p>\r\n<p>Clearly a bug when compiling to calls with variable length parameters.</p>\r\n<p>&nbsp;</p>\r\n<p>You should file a bug.</p>",
    "PostedDate": "2012-10-08T12:49:40.123-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924201",
    "ThreadId": "398511",
    "Html": "<p>Tracking with issue:&nbsp;<a href=\"http://typescript.codeplex.com/workitem/181\">http://typescript.codeplex.com/workitem/181</a></p>\r\n<p>Thanks for narrowing down the problem, pstj.</p>",
    "PostedDate": "2012-10-09T11:39:24.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]