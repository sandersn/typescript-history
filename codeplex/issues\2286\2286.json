{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Please post these sorts of things on Stack Overflow or the forums. The issue tracker is for issues, not questions. Thanks!",
    "ClosedDate": "2014-03-10T10:03:39.363-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "My codes:\r\n\r\n```\r\ninterface DelegateFun {\r\n    (a: number): number;\r\n    (a: number, b: number): number;\r\n}\r\n```\r\nI can say：\r\n```\r\nvar a: DelegateFun = (a) =>\r\n{\r\n    return a;\r\n};\r\n```\r\nBut I cannot say：\r\nvar a:DelegateFun=(a,b)=>{……};\r\nIt seems that if you define more than one object type in an interface, __only the object type with less parameters will be the default one, others will be ignored, right?__\r\n\r\nAnother question is：__Can such interfaces be implemented directly by a class？If not, where's the usage of such interfaces with more than one object types?__",
    "LastUpdatedDate": "2014-03-10T10:03:39.363-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-03-09T23:00:58.953-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Interface used as an object type……",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2286
  },
  "FileAttachments": [],
  "Comments": []
}