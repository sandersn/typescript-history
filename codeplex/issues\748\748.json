{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:56.02-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "An extremely common pattern in C# are publicly read-only properties of the form:\r\n\r\n```\r\nclass Foo {\r\n    public Bar Bar { get; private set; }\r\n\r\n    public Foo(Bar bar){\r\n        Bar = bar;\r\n    }\r\n}\r\n```\r\n\r\nIn TS/JS it is much harder to do this kind of thing because there is no shorthand for making getters/setters. Add in having all properties, parameters, and methods documented and the size of the code balloons for what is conceptually a simply concept. \r\n\r\nI think it would be extremely useful for making readonly/immutable TS types to introduce two additional shorthands:\r\n\r\n1st, the same kind of get/set shorthand as C# that allows you to quickly create stock get/set methods with different accessibility levels:\r\n```\r\nclass Foo {\r\n    public Bar: Bar { get; private set; }\r\n}\r\n```\r\n\r\n2nd, perhaps a `readonly` keyword that could be appended to the existing `public` keyword in constructor parameters:\r\n```\r\nclass Foo {\r\n    constructor(public readonly Foo: Foo) { }\r\n}\r\n```\r\nThis would make a property Foo that is assigned in the constructor and is publicly readonly.\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-02-21T10:48:10.707-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Additional property creation shorthands",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 748
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestions, I've assigned this to Jonathan who handles these. We're aware of some of the pain in this area and have done some thinking on it in the past as far as things like a readonly modifier.",
      "PostedDate": "2013-02-21T12:59:01.12-08:00",
      "Id": 91113
    },
    {
      "Message": "I like the idea of `readonly` for properties defined as part of constructor arguments.\n\nThis is a pattern that we use frequently.\n\nReadonly would also be applicable when the access modifier for those arguments is private.",
      "PostedDate": "2013-02-21T13:47:59.543-08:00",
      "Id": 91118
    }
  ]
}