{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:40.817-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "When the compiler comes across an error (non-syntax error), it shows an error message, the exit status is 1.  However, the output file is always written.\r\n\r\nIn some cases, this behaviour is useful (e.g. if you are not concerned about type errors).  However for projects that want strict type checking this will confuse many build systems (particularly those that are based on source and destination file timestamps), for obvious reasons.\r\n\r\nWhen the build re-runs, if there are no changes to the erroneous files and nothing to tell the build system to re-run the compiler on the broken files.  The build then appears to pass.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-09T18:01:23.287-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Compiler always writes .js files, confuses build system",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 10,
    "Id": 1325
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Here is a simple example makefile showing up the problem:\n\n    test.01.typeerror.js : test.01.typeerror.ts\n\ttsc test.01.typeerror.ts\n\n\nIdeally, it would be great if the compiler had two modes dictating behavior when a type error is encountered.\n\n1. (for people who don't care about type errors) write the .js output and exit with status 0\n\n2. (for the case where you want strict type checking) exit with non-zero code and don't write the file.\n\nEach of these feels like much more intuitive behavior, in line with how most other compilers and tools seem to work.  We've added flags (--failonerror and --ignoretypeerrors) for these two modes:\n\n  https://github.com/turbulenz/typescript\n\nbut I doubt these changes are very future-proof.  It would be great to have these flags, or similar, done properly by the typescript team in the main line.\n",
      "PostedDate": "2013-07-09T18:07:43.783-07:00",
      "Id": 105596
    },
    {
      "Message": "Thanks for the report. We're aware of a desire for a simple 'warnings as error' type flag and we're hoping to add one for scenarios like this. Marked as active.",
      "PostedDate": "2013-07-11T17:06:51.733-07:00",
      "Id": 105785
    },
    {
      "Message": "Changing to a suggestion as we will revisit this in a future version.",
      "PostedDate": "2013-07-30T18:34:03.647-07:00",
      "Id": 108002
    }
  ]
}