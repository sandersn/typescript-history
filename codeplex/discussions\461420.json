[
  {
    "Id": "1104586",
    "ThreadId": "461420",
    "Html": "Apologies if I'm bringing up an old topic here:\r<br />\n<br />\nThe are times I prefer to inline my object types rather than give them a name.  This is especially true in declaration files because I'd rather not give names to types that don't really exist.  For example:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">module</span> esri.dijit {\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">class</span> Basemap {\n        id: <span style=\"color:Blue;\">string</span>;\n        thumbnailUrl: <span style=\"color:Blue;\">string</span>;\n        title: <span style=\"color:Blue;\">string</span>;\n        <span style=\"color:Blue;\">constructor</span>(params?: {\n            id?: <span style=\"color:Blue;\">string</span>;\n            layers: esri.dijit.BasemapLayer[];\n            thumbnailUrl?: <span style=\"color:Blue;\">string</span>;\n            title?: <span style=\"color:Blue;\">string</span>;\n        });\n        getLayers(): esri.layers.Layer[];\n    }\n}\r\n</pre></div>Similarly sometimes I have a function that takes in a known type, but for whatever reason also expects an extra member in there.  Here's a slightly contrived example:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">function</span> processError(error) {\n    console.log(error.code + <span style=\"color:#A31515;\">&quot;: &quot;</span> + error.message);\n}\r\n</pre></div>What I would like to be able to do is this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">function</span> processError(error: {code: <span style=\"color:Blue;\">number</span>;} <span style=\"color:Blue;\">extends</span> Error): <span style=\"color:Blue;\">void</span> {\n    console.log(error.code + <span style=\"color:#A31515;\">&quot;: &quot;</span> + error.message);\n}\r\n</pre></div>note the <code>extends</code> keyword after the object type.  Instead what I have to do is this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> ErrorWithCode <span style=\"color:Blue;\">extends</span> Error {\n    code: <span style=\"color:Blue;\">number</span>;\n}\n<span style=\"color:Blue;\">function</span> processError(error: ErrorWithCode): <span style=\"color:Blue;\">void</span> {\n    console.log(error.code + <span style=\"color:#A31515;\">&quot;: &quot;</span> + error.message);\n}\r\n</pre></div>which I consider less elegant if the type is only used in one place.\r<br />\n<br />\nCould we see this usage of extends become legal for improved code elegance?  Is there some ambiguity or confusion I'm not thinking of?<br />\n",
    "PostedDate": "2013-10-07T08:35:15.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1106037",
    "ThreadId": "461420",
    "Html": "My friend pointed out that I was vague in what I meant about &quot;types that don't really exist.&quot;\r<br />\n<br />\nInside my example:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">module</span> esri.dijit {\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">class</span> Basemap {\n        id: <span style=\"color:Blue;\">string</span>;\n        thumbnailUrl: <span style=\"color:Blue;\">string</span>;\n        title: <span style=\"color:Blue;\">string</span>;\n        <span style=\"color:Blue;\">constructor</span>(params?: {\n            id?: <span style=\"color:Blue;\">string</span>;\n            layers: esri.dijit.BasemapLayer[];\n            thumbnailUrl?: <span style=\"color:Blue;\">string</span>;\n            title?: <span style=\"color:Blue;\">string</span>;\n        });\n        getLayers(): esri.layers.Layer[];\n    }\n}\r\n</pre></div>That <code>params</code> field in the constructor is an object for passing in optional parameters and that's what I'm referring to.  Another good name for it would be anonymous type.<br />\n",
    "PostedDate": "2013-10-10T08:24:02.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1106586",
    "ThreadId": "461420",
    "Html": "To summarize, are you asking for a way of creating a type literal that extends a named type?\r<br />\n<br />\nWhile I can see some utility to this, I think the resulting code would actually look more complicated than just giving those types a name, but perhaps you have some common patterns in mind where this actually ends up being cleaner than using a name?<br />\n",
    "PostedDate": "2013-10-11T13:55:19.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1106605",
    "ThreadId": "461420",
    "Html": "Yeah I think that's a good summary of what I'm asking for.\r<br />\n<br />\nHere's one real-world example from a declaration file I have where I think it might make sense:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">class</span> Locator {\n        <span style=\"color:Green;\">// ... snip</span>\n        on(event: <span style=\"color:Blue;\">string</span>, handler: (event: { target: Locator; }) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;address-to-locations-complete&quot;</span>, handler: (event: { target: Locator; id: <span style=\"color:Blue;\">string</span>; addresses: esri.tasks.AddressCandidate[]; }) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;addresses-to-locations-complete&quot;</span>, handler: (event: { target: Locator; id: <span style=\"color:Blue;\">string</span>; addresses: esri.tasks.AddressCandidate[]; }) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;error&quot;</span>, handler: (event: { target: Locator; id: <span style=\"color:Blue;\">string</span>; error: Error; }) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;location-to-address-complete&quot;</span>, handler: (event: { target: Locator; id: <span style=\"color:Blue;\">string</span>; address: esri.tasks.AddressCandidate; }) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n    }\r\n</pre></div>This is a pattern for event handling where a single function attaches the listener, and the shape of the handler is determined by the name of the event.  (Overload on constants is awesome btw.)  The handler takes a single object which has a default property and may have more depending on the event.  Right now the code doesn't really capture the relationship because the <code>target: Locator</code> element is repeated.\r<br />\n<br />\nI think the following would look nicer:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">interface</span> LocatorEvent {\n        target: Locator;\n        id: <span style=\"color:Blue;\">string</span>;\n    }\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">interface</span> ErrorEvent {  <span style=\"color:Green;\">// common to many classes</span>\n        error: Error;\n    }\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">class</span> Locator {\n        <span style=\"color:Green;\">// ... snip</span>\n        on(event: <span style=\"color:Blue;\">string</span>, handler: (event: LocatorEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;address-to-locations-complete&quot;</span>, handler: (event: { addresses: esri.tasks.AddressCandidate[]; } <span style=\"color:Blue;\">extends</span> LocatorEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;addresses-to-locations-complete&quot;</span>, handler: (event: { addresses: esri.tasks.AddressCandidate[]; } <span style=\"color:Blue;\">extends</span> LocatorEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;error&quot;</span>, handler: (event: {} <span style=\"color:Blue;\">extends</span> LocatorEvent, ErrorEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;location-to-address-complete&quot;</span>, handler: (event: { address: esri.tasks.AddressCandidate; } <span style=\"color:Blue;\">extends</span> LocatorEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n    }\r\n</pre></div>This is less concise than the code that doesn't capture the relationship of the <code>LocatorEvent</code> but it's more concise than the code that gives every handler parameter a named type.\r<br />\n<br />\nThe other thing I don't like about naming a type here is that in a concrete class the interface declarations are either at the top or the bottom.  If the class is large that puts them far away from their usage which is less than ideal.\r<br />\n<br />\nIf that's not convincing I'll come up with an example later when I find it where such a type is used within a function and never exposed to the outside world.<br />\n",
    "PostedDate": "2013-10-11T16:02:29.25-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1106855",
    "ThreadId": "461420",
    "Html": "@Grajkowski,\r<br />\n<br />\nTo be honest I don't see much gain in writing<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> LocatorEvent {\n        target: Locator;\n        id: <span style=\"color:Blue;\">string</span>;\n}\n<span style=\"color:Blue;\">interface</span> ErrorEvent {\n        error: Error;\n}\n<span style=\"color:Blue;\">class</span> Locator {\n   on(event: <span style=\"color:#A31515;\">&quot;error&quot;</span>, handler: (event: {} <span style=\"color:Blue;\">extends</span> LocatorEvent, ErrorEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n}\r\n</pre></div>instead of <br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> LocatorEvent {\n    target: Locator;\n    id: <span style=\"color:Blue;\">string</span>;\n}\n<span style=\"color:Blue;\">interface</span> ErrorEvent <span style=\"color:Blue;\">extends</span> LocatorEvent  {\n   error: Error;\n}\n<span style=\"color:Blue;\">class</span> Locator {\n     on(event: <span style=\"color:#A31515;\">&quot;error&quot;</span>, handler: (event: ErrorEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n}\r\n</pre></div>Even if they are being used only within a single file, explicitly modelling the parameters is probably the right thing to do.<br />\n",
    "PostedDate": "2013-10-13T05:33:39.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1107729",
    "ThreadId": "461420",
    "Html": "@nabog I think the parameters are explicitly modeled either way.  The difference is type doesn't have a name (pros and cons) and less typing (always a win).\r<br />\n<br />\nHow much typing does it save?  Well a bunch of this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">interface</span> ErrorEvent {   <span style=\"color:Green;\">// common to many classes</span>\n        error: Error;\n    }\n    \n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">interface</span> LocatorEvent {\n        target: Locator;\n        id: <span style=\"color:Blue;\">string</span>;\n    }\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">interface</span> LocatorAddressToLocationsCompleteEvent <span style=\"color:Blue;\">extends</span> LocatorEvent {\n        addresses: esri.tasks.AddressCandidate[];\n    }\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">interface</span> LocatorAdressesToLocationsCompleteEvent <span style=\"color:Blue;\">extends</span> LocatorEvent {\n        addresses: esri.tasks.AddressCandidate[];\n    }\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">interface</span> LocatorErrorEvent <span style=\"color:Blue;\">extends</span> ErrorEvent, LocatorEvent {\n    }\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">interface</span> LocatorLocationToAddressCompleteEvent {\n        address: esri.tasks.AddressCandidate;\n    }\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">class</span> Locator {\n        <span style=\"color:Green;\">// ... snip</span>\n        on(event: <span style=\"color:Blue;\">string</span>, handler: (event: LocatorEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;address-to-locations-complete&quot;</span>, handler: LocatorAddressToLocationsCompleteEvent): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;addresses-to-locations-complete&quot;</span>, handler: (event: AdressesToLocationsCompleteEvent): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;error&quot;</span>, handler: (event: LocatorErrorEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n        on(event: <span style=\"color:#A31515;\">&quot;location-to-address-complete&quot;</span>, handler: (event: LocatorLocationToAddressCompleteEvent) =&gt; <span style=\"color:Blue;\">void</span> ): <span style=\"color:Blue;\">void</span>;\n    }\r\n</pre></div>And this is the example with a small number of events.  Yeah it's not the end of the world but it strikes me as less elegant.\r<br />\n<br />\nEither way this isn't a make-or-break feature.  I just think it would be nice to have.<br />\n",
    "PostedDate": "2013-10-15T08:19:50.577-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1107767",
    "ThreadId": "461420",
    "Html": "@Grajkowski, I follow you.\r<br />\n<br />\nWhat does the calling code look like? I'd assume:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> locator = <span style=\"color:Blue;\">new</span> Locator();\nlocator.on(<span style=\"color:#A31515;\">&quot;error&quot;</span>, event =&gt; {\n    <span style=\"color:Green;\">// Handle error</span>\n});\r\n</pre></div>But what if the caller doesn't want to use a lambda?<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">function</span> errorHandler(event: LocatorErrorEvent){\n    <span style=\"color:Green;\">// handle error</span>\n}\n<span style=\"color:Blue;\">var</span> locator = <span style=\"color:Blue;\">new</span> Locator();\nlocator.on(<span style=\"color:#A31515;\">&quot;error&quot;</span>, errorHandler);\r\n</pre></div>If the type LocatorErrorEvent is not defined (i.e. only defined inline as per your suggestion) then the caller has to type the errorHandler parameter manually themselves or leave it at <code>any</code>.\r<br />\n<br />\n(BTW I think you have defined LocatorAddressToLocationsCompleteEvent twice in your code)<br />\n",
    "PostedDate": "2013-10-15T09:25:39.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1107796",
    "ThreadId": "461420",
    "Html": "<blockquote>\nBut what if the caller doesn't want to use a lambda?<br />\n</blockquote>\nThen they have to type out or copy and paste the types.  This for example does kind of suck:<br />\n<pre><code>function errorHandler(event: {} extends LocatorEvent, ErrorEvent): void {\n    // handle error\n}\nfunction completeHandler(event: { addresses: esri.tasks.AddressCandidate[]; } extends LocatorEvent): void {\n    // handle complete\n}\nvar locator = new Locator();\nlocator.on(&quot;error&quot;, errorHandler);\nlocator.on(&quot;address-to-locations-complete&quot;, completeHandler);\n</code></pre>\n\nHowever the fewer &quot;invented&quot; types that don't occur in the original JavaScript the easier it is to switch between declaration files.  If someone else were to write declaration files for the same library they would likely use different names and might not even name all the same concepts.<br />\n<blockquote>\nI think you have defined LocatorAddressToLocationsCompleteEvent twice in your code<br />\n</blockquote>\nLocatorAddressToLocationsCompleteEvent and LocatorAdressesToLocationsCompleteEvent just look very very similar.<br />\n",
    "PostedDate": "2013-10-15T10:17:31.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]