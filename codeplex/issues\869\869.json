{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Type errors *are* warnings.\n\nThe issue tracker isn't a productive place to have language design discussions -- please start a forum thread if you have concrete proposals for how we should change type rules. Thanks!",
    "ClosedDate": "2013-04-08T10:21:04.663-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "Consider this piece of code:\r\n\r\n```\r\nfunction f(x) {\r\n\tif (x > 6)\r\n\t\treturn 3;\r\n\treturn \"xxxx\";\r\n}\r\n```\r\n\r\nIt's correct JS but I get \"Incompatible return type\" in TS. Shouldn't TS compiler infer \"any\" type for the function f?",
    "LastUpdatedDate": "2013-04-08T10:21:04.663-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-04-05T04:02:36.563-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "JS code that does not pass through TS compiler",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 869
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "@paulb\n\nWhich makes typescript intrusive, this might be a bad case, but this gets really annoying...\n\nvar x = {};\nx.name = \"TypeScript\";\nx.conclusion = \"is intrusive to my work\";\nx.whatWasItSurposeTo = \"allow me to sprinkle types on where i wanted them\";\nx.whatDoesItDo = \"make me sprinkle any on almost every thing in order for it to stay happy\";\n\nIn Conclusion, typescript is a superset of a subset of javascript, not a pure superset...\n\nThe above is an example... Another:\n\n['$state', function($state) { }] //ERROR, incompatible types in array... Which javascript allows for, and which is a very common way to work with Dependency Injection in AngularJS...\n\nSo... I am not rooting so much for typescript anymore, until you figure out that you should actually fix this... \nIn the posters case here...\n\n\nThis could generate a Warning, not an error:\n```\nfunction f(x) {\n    if (x > 6)\n        return 3;\n    return \"xxxx\";\n}\n```\n\nThis would say fine, you really meant it:\n```\nfunction f(x):any {\n    if (x > 6)\n        return 3;\n    return \"xxxx\";\n}\n```\n\nThis would generate an error:\n```\nfunction f(x):number {\n    if (x > 6)\n        return 3;\n    return \"xxxx\";\n}\n```",
      "PostedDate": "2013-04-07T11:36:33.033-07:00",
      "Id": 96289
    },
    {
      "Message": "I completely agree with jmelgaard. As he pointed out \"typescript is a superset of a subset of javascript, not a pure superset\" (which Anders Hejlsberg said to be true in his introductory video).\nDon't get me wrong. I really like TypeScript and I see great value in it but as jmelgaard explained due to such restrictions it would be hard to port current code to TypeScript.",
      "PostedDate": "2013-04-08T01:49:40.883-07:00",
      "Id": 96317
    },
    {
      "Message": "This helps you find obvious bugs in your js code. If you want to support returning two different types from a method you have to annotate the function with the 'any' return type.\n\r\n\r** Closed by paulb 04/05/2013 11:42AM",
      "PostedDate": "2013-04-05T11:42:54.837-07:00",
      "Id": 96318
    }
  ]
}