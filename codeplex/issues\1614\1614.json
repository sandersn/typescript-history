{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Some or all of these issues have been fixed. Please file new issues if you're still seeing similar behavior with the current develop bits and your project. I can confirm that the original issue now emits a correctly qualified name for dateConversion, likewise for the first comment about the issue in db.ts.",
    "ClosedDate": "2013-10-07T14:49:50.527-07:00",
    "CommentCount": 9,
    "Custom": null,
    "Description": "I tried to compile my open source project jRiappTS (recently converted to use generics) with 0.9.1.1 version of the compiler. But the result javascript is incorrect in some places.\r\nFor example, at line 439 in  collection.ts file and also it is module, there's code\r\n```\r\n    static getEmptyFieldInfo(fieldName: string) {\r\n                    var fieldInfo: IFieldInfo = {\r\n                        isPrimaryKey: 0,\r\n                        isRowTimeStamp: false,\r\n                        dataType: DATA_TYPE.None,\r\n                        isNullable: true,\r\n                        maxLength: -1,\r\n                        isReadOnly: false,\r\n                        isAutoGenerated: false,\r\n                        allowClientDefault: false,\r\n//next line compiles incorrectly, ommiting module's namespace\r\n                        dateConversion: consts.DATE_CONVERSION.None,\r\n                        isClientOnly: true,\r\n                        isCalculated: false,\r\n                        isNeedOriginal: false,\r\n                        dependentOn: null,\r\n                        range: null,\r\n                        regex: null,\r\n                        isNavigation: false,\r\n                        fieldName: fieldName\r\n                    };\r\n                    return fieldInfo;\r\n                }\r\n```\r\n\r\nthe \r\n```\r\nconsts \r\n```\r\ndefined inside the collection module as exported variable:\r\n\r\n```\r\n export var consts = {\r\n                DATA_TYPE: MOD.consts.DATA_TYPE,\r\n                DATE_CONVERSION: MOD.consts.DATE_CONVERSION,\r\n                SORT_ORDER: { ASC: 0, DESC: 1 },\r\n                COLL_CHANGE_TYPE: { REMOVE: '0', ADDED: '1', RESET: '2', REMAP_KEY: '3' },\r\n            };\r\n```\r\n\r\n, so the output should be\r\n```\r\ncollection.consts.DATE_CONVERSION.None \r\n```\r\nbut instead it is compiled to\r\n```\r\nconsts.DATE_CONVERSION.None,\r\n```\r\nwhich is not correct and caused error when i used the compiled result \r\nat runtime.",
    "LastUpdatedDate": "2014-01-10T10:34:33.287-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-28T09:23:41.99-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Incorrect compilation result",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 3,
    "Id": 1614
  },
  "FileAttachments": [
    {
      "FileId": 722582,
      "FileName": "jriappTS3.zip",
      "DownloadUrl": ".\\722582"
    },
    {
      "FileId": 724030,
      "FileName": "jriappTS4.zip",
      "DownloadUrl": ".\\724030"
    },
    {
      "FileId": 724437,
      "FileName": "newbugs.zip",
      "DownloadUrl": ".\\724437"
    }
  ],
  "Comments": [
    {
      "Message": "But there's more\nin db.ts file at line  478\nthere's code\n```\n     var tmp = ArrayHelper.clone(val);\n```\nit is compiled to\n```\n   var tmp = ArrayHelper.clone(val);\n```\nbut should be compiled (as in previous version of the compiler)\n```\n   var tmp = RIAPP.ArrayHelper.clone(val);\n```\nit is strange, because in other places it is compiled normally",
      "PostedDate": "2013-08-28T09:56:34-07:00",
      "Id": 111417
    },
    {
      "Message": "Is there a copy of this solution available that doesn't have compile errors?",
      "PostedDate": "2013-09-03T14:00:43.56-07:00",
      "Id": 111982
    },
    {
      "Message": "I attached jriappts4.zip, which produces correct result on compilation.\r\nI just added full namespaces code\r\nlike\r\n```\r\n  static getEmptyFieldInfo(fieldName: string) {\r\n                    var fieldInfo: IFieldInfo = {\r\n                        isPrimaryKey: 0,\r\n                        isRowTimeStamp: false,\r\n                        dataType: DATA_TYPE.None,\r\n                        isNullable: true,\r\n                        maxLength: -1,\r\n                        isReadOnly: false,\r\n                        isAutoGenerated: false,\r\n                        allowClientDefault: false,\r\n//now it produces correct output, but should be without adding the 'collection' part\r\n                        dateConversion: collection.consts.DATE_CONVERSION.None,\r\n                        isClientOnly: true,\r\n                        isCalculated: false,\r\n                        isNeedOriginal: false,\r\n                        dependentOn: null,\r\n                        range: null,\r\n                        regex: null,\r\n                        isNavigation: false,\r\n                        fieldName: fieldName\r\n                    };\r\n                    return fieldInfo;\r\n                }\r\n```\r\nthe compiler works unreliably, because nobody can predict when and where it will produce the incorrect result. Just near it i used consts without 'collection' part, and that it compiled to normal result.",
      "PostedDate": "2013-09-03T20:49:20.637-07:00",
      "Id": 112000
    },
    {
      "Message": "P.S. - and of course you can take the version which produces correct javascript from https://github.com/BBGONE/jRIAppTS/tree/generics\nbut it uses workarounds, which i described above (using variable full name, where i don't need it to do).",
      "PostedDate": "2013-09-04T01:15:05.387-07:00",
      "Id": 112015
    },
    {
      "Message": "More bad news.\nJust to support that the 0.9.1.1 version of the compiler unreliable, i have found one more bad (incorrect output) in another my code.  The full namespace arbitrary ommited.\nBaseObject outputted as simply BaseObject, although it should be RIAPP.BaseObject.\nThe bug of the same type, which i submiited above with the two examples.\n\nAnd of course, when i use the result javascript, there's an error, that BaseObject is undefined.",
      "PostedDate": "2013-09-04T02:34:17.007-07:00",
      "Id": 112021
    },
    {
      "Message": "To show the latest observed bugs (incorrect compilation result), i attached one more zipped solution newbugs.zip.\r\nOpen it in VS2012, open in designer files jriapp.ts, and SVM2\\ais.ts, then rebuild it.\r\nThen look in the result ais.js file. There are several incorrectly produced code snippets.\r\n\r\nfirst look (__to show correct compilation__) at line 37 in ais.ts\r\n```\r\n export class BaseFilter extends MOD.mvvm.BaseViewModel\r\n```\r\nit is compiled correctly: BaseFilter is derived from RIAPP.MOD.mvvm.BaseViewModel.\r\n\r\nThen, the compilation turns wrong, and started to produce wrong results\r\nat line 294\r\n```\r\n export class WebSocketsVM extends BaseObject \r\n```\r\ncompiled to  WebSocketsVM  is derived from  BaseObject  (should be RIAPP.BaseObject)\r\n\r\nthen at line 427\r\n```\r\nexport class BaseUploadVM extends MOD.mvvm.BaseViewModel implements MOD.utils.IEditable\r\n```\r\ncompiled to BaseUploadVM is derived from MOD.mvvm.BaseViewModel (should be RIAPP.MOD.mvvm.BaseViewModel)\r\n\r\nat line 808\r\n```\r\nexport class MessageVM extends MOD.mvvm.BaseViewModel\r\n```\r\ncompiled to MessageVM is derived from MOD.mvvm.BaseViewModel (should be RIAPP.MOD.mvvm.BaseViewModel)\r\n\r\nat line 1225\r\n```\r\nexport class ThisApplication extends Application\r\n```\r\ncompiled to ThisApplication is derived from Application (should be RIAPP.Application)\r\n\r\nat line 1303\r\n```\r\n get TEXT() { return localizable.TEXT; }\r\n```\r\nis compiled to\r\n```\r\n  Object.defineProperty(ThisApplication.prototype, \"TEXT\", {\r\n                get: function () {\r\n                    return localizable.TEXT;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n```\r\nbut should be\r\n```\r\n  Object.defineProperty(ThisApplication.prototype, \"TEXT\", {\r\n                get: function () {\r\n                    return RIAPP.localizable.TEXT;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n```",
      "PostedDate": "2013-09-04T03:32:03.827-07:00",
      "Id": 112026
    },
    {
      "Message": "Thanks for the report. I can definitely repro the first issue you're seeing, hopefully the other cases are the same root cause. We'll investigate.",
      "PostedDate": "2013-09-04T18:57:06.97-07:00",
      "Id": 112549
    },
    {
      "Message": "Is this the same issue in 5 lines?\n \nmodule test{\n  export var publicFoo = 1;\n  export function seeFoo(someParameter){\n    var someParameter= publicFoo; // transpiles to publicFoo\n    var f            = publicFoo; // transpiles to test.publicFoo\n  }\n}",
      "PostedDate": "2013-09-11T05:17:37.397-07:00",
      "Id": 113154
    },
    {
      "Message": "To @ChrisFCarroll\nMaybe not, in my case,  i tried to simplify my solution, removing some code in the classes, and it started to compile normally. Althougth, maybe it can be reproduced in less lines, like you did.\nI suggest after fixing your case to try to compile my projects to see if the bug had been fixed.",
      "PostedDate": "2013-09-11T09:24:40.683-07:00",
      "Id": 113188
    }
  ]
}