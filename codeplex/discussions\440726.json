[
  {
    "Id": "1032305",
    "ThreadId": "440726",
    "Html": "I expected the following to compile: <br />\n<pre><code>var declarativeTree = [ 1, [ 2 ]];\n</code></pre>\n\n<pre><code>var proceduralTree = [];\ntree.push(1);\ntree.push([2]);\n</code></pre>\n\nBut the compiler issues an error for the declarative case saying it cannot infer the array type. The procedural case works fine. \r<br />\n<br />\nThanks,\r<br />\nChris<br />\n",
    "PostedDate": "2013-04-18T01:56:41.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032500",
    "ThreadId": "440726",
    "Html": "You can declare your array to contain any type and then it's ok with that:<br />\n<pre><code>var declarativeTree: any[] = [1, [2]];</code></pre>\n\n",
    "PostedDate": "2013-04-18T08:01:57.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032503",
    "ThreadId": "440726",
    "Html": "It does seem like the compiler could infer the &quot;any&quot; type for mixed-type array literals; maybe generating a warning for times when you've done it by mistake.<br />\n",
    "PostedDate": "2013-04-18T08:06:01.153-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032565",
    "ThreadId": "440726",
    "Html": "Ah! Thanks. I was just groping for the correct syntax. Such a newbee.<br />\n",
    "PostedDate": "2013-04-18T09:36:03.417-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032864",
    "ThreadId": "440726",
    "Html": "Unfortunetly the team doesn't seem keen on fixing issues like this.\r<br />\n<br />\nThere has been many issues created that ask's to treat more things as Any as soon as it can't be treated as otherwise, but it's always rejected with &quot;It's by Design&quot;...\r<br />\n<br />\nI just happen to think that this is a bad design decision, as when we try to run existing large projects through typescript, this is one of the biggest error generators, and it should be clear that these things appear to be common practice on javascript projects, since large projects like Angular, Ember, jQuery, Backbone, Grunt and so forth all generates errors that could be avoided with a more lose approach to typing.\r<br />\n<br />\nPersonally I would rather have that everything was treated as any, unless I specifically asked for it to be something... Than everything being restricted to it's first declaration...<br />\n",
    "PostedDate": "2013-04-19T01:20:47.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1033131",
    "ThreadId": "440726",
    "Html": "\r\n<div dir=\"ltr\">Seems like a bug to be. TypeScript failed to infer the correct type. The correct type is Any. If that is not what the developer wanted she'd find out soon enough because her intellisense for the array would be typed as any and she wouldn't get\r\n any of the properties of the type she was expecting on the element types. If anything this should be a warning.\r\n</div>\r\n<div><br>\r\n<br>\r\n<div></div>\r\n</div>\r\n",
    "PostedDate": "2013-04-19T09:52:54.963-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]