{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:56.427-07:00",
    "CommentCount": 6,
    "Custom": null,
    "Description": "This would generally be a bug IMO:\r\n\r\n```\r\nvar foo;\r\n\r\nconsole.log(foo.bar()); // Should raise compilation error?\r\n```\r\n\r\nIdeally we should get \"Error: Use of unassigned local variable 'foo'\"\r\n\r\nBetter:\r\n\r\n```\r\nvar foo = undefined;\r\nconsole.log(foo.bar()); // Stupid but okay\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-02-17T14:04:54.447-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Use of unassigned local variable should generate error?",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 732
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "@danquirk,\n\nI've re-opened the issue because I feel the suggestion was possibly misunderstood. The issue is not about type safety. It is to avoid runtime errors from accessing variables that have not been initialised.",
      "PostedDate": "2013-02-19T06:38:14.323-08:00",
      "Id": 90771
    },
    {
      "Message": "This would make it very difficult to work with dynamic (expando) types or anything otherwise typed as 'any' which is prevalent with JavaScript idioms. You could get the type of safety you want if you declaration of foo were explicitly typed or else when it was inferred from usage as a non-any type.\n\r\n\r** Closed by danquirk 02/18/2013 6:50PM",
      "PostedDate": "2013-02-18T18:50:24.213-08:00",
      "Id": 90773
    },
    {
      "Message": "Please see my comment.",
      "PostedDate": "2013-02-19T06:38:45.76-08:00",
      "Id": 90774
    },
    {
      "Message": "This is what the \"-cflowu\" command-line option does (though it won't flag this particular case unless it's inside a function because it's difficult to reason about the global scope).\n\r\n\r** Closed by RyanCavanaugh 02/19/2013 8:39AM",
      "PostedDate": "2013-02-19T08:39:44.417-08:00",
      "Id": 90789
    },
    {
      "Message": "Great! Thanks. I wonder whether you can point me in the direction of the documentation for the -cflowu option? (Google doesn't know anything about it).\n\nJust tried and got this error\n\n```\n    function foo() {\n\n        var bar;\n        var f = () => bar = 10; //use of variable 'bar' that is not definitely assigned\n        var g = bar + 1;\n    }\n\n```\n\nNot sure that is right.",
      "PostedDate": "2013-02-19T09:30:23.767-08:00",
      "Id": 90790
    },
    {
      "Message": "Assigning to Jonathan for suggestion management -- this feature might not make it in for v1",
      "PostedDate": "2013-02-19T18:27:06.173-08:00",
      "Id": 90878
    }
  ]
}