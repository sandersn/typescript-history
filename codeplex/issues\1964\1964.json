{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:40.923-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "If we want to enable the fluent pattern in jQuery promises and deferreds, we need to write two separate interfaces.\r\n```\r\ninterface JQueryPromise {\r\n    always(...alwaysCallbacks: Array<{ (): void; }>): JQueryPromise;\r\n    done(...doneCallbacks: Array<{ (): void; }>): JQueryPromise;\r\n    fail(...failCallbacks: Array<{ (): void; }>): JQueryPromise;\r\n    progress(...progressCallbacks: Array<{ (): void; }>): JQueryPromise;\r\n    state(): string;\r\n    promise(target?: any): JQueryPromise;\r\n    then<UValue, UReject>(\r\n        doneCallbacks: { (): UValue; },\r\n        failCallbacks: { (): UReject; },\r\n        progressCallbacks?: { (): void; }): JQueryPromiseVR<UValue, UReject>;\r\n\r\n    then<UValue>(\r\n        doneCallbacks: { (): UValue; },\r\n        failCallbacks?: { (): void; },\r\n        progressCallbacks?: { (): void; }): JQueryPromiseV<UValue>;\r\n\r\n    then<UReject>(\r\n        doneCallbacks: { (): void; },\r\n        failCallbacks: { (): UReject; },\r\n        progressCallbacks?: { (): void; }): JQueryPromiseR<UReject>;\r\n\r\n    then(\r\n        doneCallbacks: { (): void; },\r\n        failCallbacks?: { (): void; },\r\n        progressCallbacks?: { (): void; }): JQueryPromise;\r\n}\r\n\r\ninterface JQueryDeferred {\r\n    notify(...params: any[]): JQueryDeferred;\r\n    notifyWith(context: any): JQueryDeferred;\r\n\r\n    always(...alwaysCallbacks: Array<{ (): void; }>): JQueryDeferred;\r\n    done(...doneCallbacks: Array<{ (): void; }>): JQueryDeferred;\r\n    fail(...failCallbacks: Array<{ (): void; }>): JQueryDeferred;\r\n    progress(...progressCallbacks: Array<{ (): void; }>): JQueryDeferred;\r\n    promise(target?: any): JQueryPromise;\r\n    reject(...args: Array<any>): JQueryDeferred;\r\n    rejectWith(context: any): JQueryDeferred;\r\n    resolve(): JQueryDeferred;\r\n    resolveWith(context: any): JQueryDeferred;\r\n    state(): string;\r\n    then<UValue, UReject>(\r\n        doneCallbacks: { (): UValue; },\r\n        failCallbacks: { (): UReject; },\r\n        progressCallbacks?: { (): void; }): JQueryPromiseVR<UValue, UReject>;\r\n\r\n    then<UValue>(\r\n        doneCallbacks: { (): UValue; },\r\n        failCallbacks?: { (): void; },\r\n        progressCallbacks?: { (): void; }): JQueryPromiseV<UValue>;\r\n\r\n    then<UReject>(\r\n        doneCallbacks: { (): void; },\r\n        failCallbacks: { (): UReject; },\r\n        progressCallbacks?: { (): void; }): JQueryPromiseR<UReject>;\r\n\r\n    then(\r\n        doneCallbacks: { (): void; },\r\n        failCallbacks?: { (): void; },\r\n        progressCallbacks?: { (): void; }): JQueryPromise;\r\n}\r\n\r\n```\r\n\r\nIf we can somehow describe that the return type of a method is the static type of the instance, we can save a lot of duplication in the above typing. For example:\r\n```\r\ninterface JQueryPromise {\r\n    always(...alwaysCallbacks: Array<{ (): void; }>): this;\r\n    done(...doneCallbacks: Array<{ (): void; }>): this;\r\n    fail(...failCallbacks: Array<{ (): void; }>): this;\r\n    progress(...progressCallbacks: Array<{ (): void; }>): this;\r\n    state(): string;\r\n    promise(target?: any): JQueryPromise;\r\n    then<UValue, UReject>(\r\n        doneCallbacks: { (): UValue; },\r\n        failCallbacks: { (): UReject; },\r\n        progressCallbacks?: { (): void; }): JQueryPromiseVR<UValue, UReject>;\r\n\r\n    then<UValue>(\r\n        doneCallbacks: { (): UValue; },\r\n        failCallbacks?: { (): void; },\r\n        progressCallbacks?: { (): void; }): JQueryPromiseV<UValue>;\r\n\r\n    then<UReject>(\r\n        doneCallbacks: { (): void; },\r\n        failCallbacks: { (): UReject; },\r\n        progressCallbacks?: { (): void; }): JQueryPromiseR<UReject>;\r\n\r\n    then(\r\n        doneCallbacks: { (): void; },\r\n        failCallbacks?: { (): void; },\r\n        progressCallbacks?: { (): void; }): JQueryPromise;\r\n}\r\n\r\ninterface JQueryDeferred extends JQueryPromise {\r\n    notify(...params: any[]): this;\r\n    notifyWith(context: any): this;\r\n\r\n    reject(...args: Array<any>): this;\r\n    rejectWith(context: any): this;\r\n    resolve(): this;\r\n    resolveWith(context: any): this;\r\n}\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-04T12:21:03.64-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Support stating that the return type is static type of the instance. Useful for describing fluent types.",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 1964
  },
  "FileAttachments": [],
  "Comments": []
}