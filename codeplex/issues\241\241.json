{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "What JamGyamfi said - you'll need to extend the interface to make the new method recognized by the compiler.",
    "ClosedDate": "2012-10-15T13:49:55.377-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "When I use the following code,  Compiler say The property 'addOne' does not exist on value of type 'Number'.\r\n\r\nNumber.prototype.addOne = function ()\r\n{\r\n    return this + 1;\r\n};",
    "LastUpdatedDate": "2013-08-13T13:57:40.937-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-12T04:04:36.397-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "TypeScript is not support adding new extention method",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 241
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Actually this works in TypeScript.\nYou need to declare addOne in an interface.\n\ninterface Number\n{\n\taddOne() :number;\n}\n\nNumber.prototype.addOne = function(){\n\treturn this+1;\n}\n\ncreates the following code:\n\nNumber.prototype.addOne = function () {\n    return this + 1;\n};\n",
      "PostedDate": "2012-10-12T04:33:17.47-07:00",
      "Id": 79598
    },
    {
      "Message": "@RyanCavanaugh I agree. Because prototype function works like extension method in C#. I think we should not need to create interface for this kind of pattern. Or we need some flag to allow/disallow prototype function without defined interface.",
      "PostedDate": "2012-10-15T14:48:26.603-07:00",
      "Id": 80038
    }
  ]
}