{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "We don't expose the constructor property because the prototype of a class is typed as the containing class.\n\nThe workaround is to cast the prototype:\n````\nvar x = (<any>Error.prototype).constructor.call();\n````",
    "ClosedDate": "2013-06-28T11:12:17.863-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "The TS compiler raises on error on:\r\n    var tmp = Error.prototype.constructor.call();\r\n\r\n\"error TS2094: The property 'constructor' does not exist on value of type 'Error'.\"\r\n\r\nwhile is has no reason to http://es5.github.io/#x15.11.4.1",
    "LastUpdatedDate": "2013-08-13T11:38:38.61-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-06-28T01:19:57.893-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Error.prototype.constructor not recognized",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1264
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "From trying to TS-ify https://github.com/wycats/handlebars.js/blob/8e2416dabb2056c07357a55b9259322f0d794ada/lib/handlebars/utils.js#L10",
      "PostedDate": "2013-06-28T01:30:29.57-07:00",
      "Id": 104496
    },
    {
      "Message": "> The workaround is to cast the prototype:\n> var x = (<any>Error.prototype).constructor.call();\n\nThis is not very satisfying. I thought one of the premise of TypeScript was to be a superset of JavaScript. Here, you're saying that there are exceptions. How many others are they? Are they documented somewhere?\nWhen porting a big codebase to TypeScript, how many of these workarounds have to be applied?",
      "PostedDate": "2013-06-28T11:38:35.493-07:00",
      "Id": 104559
    }
  ]
}