[
  {
    "Id": "987174",
    "ThreadId": "429692",
    "Html": "\r\n<p>So the stated roadmap of TypeScript is to realign with ECMAScript 6 in the next few months. My question is, what ECMAScript 6 syntax has changed that will require changes in TypeScript?</p>\r\n<p>I know this information is available with some digging, but it would be helpful to get a heads up on exactly what syntax we can expect to change.</p>\r\n<p>Thanks.</p>\r\n",
    "PostedDate": "2013-01-15T09:42:40.907-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "987636",
    "ThreadId": "429692",
    "Html": "\r\n<p>It probably could be better said as &quot;realign, if necessary&quot;.&nbsp; There isn't an implication that there will be realignment needed.&nbsp; We're aware that the ECMAScript spec is still in flux, and the committee could still uncover issues they want to address or syntax\r\n they want to improve.&nbsp; If that happens, we'll also try to align on the TypeScript side for any change that affects the bits of ES6 we've incorporated into TypeScript.</p>\r\n",
    "PostedDate": "2013-01-16T08:15:06.653-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "987638",
    "ThreadId": "429692",
    "Html": "\r\n<p>Ah, ok. Previous comments I had read gave me the impression that there had already been changes to the ECMAScript 6 proposal that would&nbsp;necessitate&nbsp;changes in TypeScript.</p>\r\n",
    "PostedDate": "2013-01-16T08:17:04.11-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "988380",
    "ThreadId": "429692",
    "Html": "\r\n<p>One of the areas where TypeScript is differentiates from the ES6 proposals is the way modules are handled. Especially the import functionality of external modules differ quit a bit. Overall I would say the current ES6 proposal seems more flexible and overall\r\n a nice solution (but I guess also a bit harder to implement).</p>\r\n<p>Is this in scope to be realigned or is this ES6 proposal still&nbsp;considered&nbsp;to be too much in flux?</p>\r\n<p>//Peter</p>\r\n",
    "PostedDate": "2013-01-17T12:28:26.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "988828",
    "ThreadId": "429692",
    "Html": "\r\n<p>That's right - modules are the biggest area of current disconnect between TypeScript and ES6 - in part because the ES6 modules proposals have been more of a moving target than other parts of ES6.&nbsp; We're working with the committee, and the champions of the\r\n module work in particular, on stabilizing the ES6 design, and then on aligning TypeScript with that.&nbsp;</p>\r\n<p>Possibly relevant to this thread, I presented feedback from our experience with TypeScript at the ECMAScript working group meeting last November.&nbsp; Slides from that discussion are at\r\n<a href=\"http://sdrv.ms/W21q9e\">http://sdrv.ms/W21q9e</a>, and notes from the discussion are at&nbsp;<a href=\"https://github.com/rwldrn/tc39-notes/blob/master/es6/2012-11/nov-28.md#experience-with-typescript\">https://github.com/rwldrn/tc39-notes/blob/master/es6/2012-11/nov-28.md#experience-with-typescript</a>.</p>\r\n",
    "PostedDate": "2013-01-18T09:36:47.987-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "988944",
    "ThreadId": "429692",
    "Html": "\r\n<div>Luke, thanks for sharing. I wasn't aware the ES6 meeting notes are available online, very insightful. Also a good set of slides, which recaps many of the comments heard on this forum.<br>\r\nHowever one thing I never really get is the &quot;preference&quot; for the C# await keyword. Once generators have landed in JavaScript, the difference is would be:<br>\r\n<br>\r\nawait doSomeAsyncStuff(); // Special keyword in TypeScript<br>\r\n<br>\r\nversus<br>\r\n<br>\r\nawait(doSomeAsyncStuff); // Some third party library<br>\r\n<br>\r\n<br>\r\nIs there something else that I'm missing that the await keyword would bring that a third party library couldn't deliver?<br>\r\n<br>\r\n<br>\r\nBTW: I hope ES6 isn't going for the @ prefix for private variables. <br>\r\n<br>\r\n<br>\r\n// Peter<br>\r\n<br>\r\n<br>\r\nOn 01/18/2013 06:36 PM, LukeH wrote:<br>\r\n</div>\r\n<blockquote type=\"cite\">\r\n<p>From: LukeH</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<p>That's right - modules are the biggest area of current disconnect between TypeScript and ES6 - in part because the ES6 modules proposals have been more of a moving target than other parts of ES6. We're working with the committee, and the champions of the\r\n module work in particular, on stabilizing the ES6 design, and then on aligning TypeScript with that.\r\n</p>\r\n<p>Possibly relevant to this thread, I presented feedback from our experience with TypeScript at the ECMAScript working group meeting last November. Slides from that discussion are at\r\n<a href=\"http://sdrv.ms/W21q9e\">http://sdrv.ms/W21q9e</a>, and notes from the discussion are at\r\n<a href=\"https://github.com/rwldrn/tc39-notes/blob/master/es6/2012-11/nov-28.md#experience-with-typescript\">\r\nhttps://github.com/rwldrn/tc39-notes/blob/master/es6/2012-11/nov-28.md#experience-with-typescript</a>.</p>\r\n</div>\r\n</blockquote>\r\n<br>\r\n",
    "PostedDate": "2013-01-18T12:48:52.12-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "988995",
    "ThreadId": "429692",
    "Html": "\r\n<p>@LukeH - Thanks, that was interesting and useful. I wasn't able to see your slides on SkyDrive, however. I only wish the committee would maybe consider using public/private keywords on modules instead of export. The inconsistency between visibility modifiers\r\n on classes and modules drives me crazy.</p>\r\n<p>@jbaroncom - I don't think you understand what the await keyword does (in C# at least). It causes the compiler to rewrite the method into one or more callbacks where the callback is the body of the method below the await keyword. Library-based solutions\r\n alone cannot come close to the elegance of this. In fact, the await keyword is <em>\r\ncomplimentary</em>&nbsp;to the use of a promise-based library, not competitory to it.</p>\r\n",
    "PostedDate": "2013-01-18T14:39:48.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "989106",
    "ThreadId": "429692",
    "Html": "\r\n<div>@MgSam,<br>\r\n<br>\r\nThanks for the info about C# await functionality. However I didn't mean JavaScript promises or callback kind of libraries versus C# await. I really meant libraries using the ES6 generator functionality (now only available in firefox/mozilla). These libraries\r\n are also complementary to promises or callbacks just as the C# await is.<br>\r\n<br>\r\nOnce these generators land in ES6, you should be able to do similar things as the C# await keyword. You can see an example on taskjs.org how this could work. As far as I call tell:<br>\r\n<br>\r\n- Await functionality cannot be implemented without generator support in JS. At least not while still being able to compile to &quot;recognizable&quot; JavaScript. Even the Dart team shied away from this ;)<br>\r\n- Once ES6 generators have landed, the same functionality could also be done with a plain JS/TS library and doesn't require a special new keyword.<br>\r\n<br>\r\n<br>\r\nP.S One thing where an await keyword could perhaps have the upper hand, is that retaining type information in the compiler is more easy.<br>\r\n<br>\r\n<br>\r\n// Peter<br>\r\n<br>\r\nOn 01/18/2013 11:39 PM, MgSam wrote:<br>\r\n</div>\r\n<blockquote type=\"cite\">\r\n<p>From: MgSam</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<p>@LukeH - Thanks, that was interesting and useful. I wasn't able to see your slides on SkyDrive, however. I only wish the committee would maybe consider using public/private keywords on modules instead of export. The inconsistency between visibility modifiers\r\n on classes and modules drives me crazy.</p>\r\n<p>@jbaroncom - I don't think you understand what the await keyword does (in C# at least). It causes the compiler to rewrite the method into one or more callbacks where the callback is the body of the method below the await keyword. Library-based solutions\r\n alone cannot come close to the elegance of this. In fact, the await keyword is <em>\r\ncomplimentary</em> to the use of a promise-based library, not competitory to it.</p>\r\n</div>\r\n</blockquote>\r\n<br>\r\n",
    "PostedDate": "2013-01-19T05:38:32.067-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "989306",
    "ThreadId": "429692",
    "Html": "\r\n<p>@jbaroncom</p>\r\n<p>Depends on how tolerant you are about JS being &quot;recognizable&quot;. I prototyped <a href=\"https://github.com/Sage/streamlinejs/blob/await/examples/diskUsage/diskUsageAwait5._js\">\r\n&quot;await&quot; syntax in streamline.js</a>. The output is polluted by a fair amount of callback handling code but once you abstract that out (I could output comments to ease that) you recognize the original code. Unlike other transforms, the\r\n<a href=\"http://bjouhier.wordpress.com/2011/05/24/yield-resume-vs-asynchronous-callbacks/\">\r\nstreamline transform</a> does not move code around; it just inserts callback handling logic around it (*).</p>\r\n<p>(*) unfortunately this is not completely true and the transform has to move entire functions around because of hoisting.</p>\r\n<p>Theoretically, <a href=\"http://smellegantcode.wordpress.com/2012/12/28/a-pure-library-approach-to-asyncawait-in-standard-javascript/\">\r\nasync/await can even be implemented in pure JS</a>: . This is not a viable way to do it but the idea is interesting.</p>\r\n<p>Anyway, these are just stopgap solutions. I hope that something similar to the\r\n<a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:deferred_functions\">&quot;deferrred functions&quot;</a> proposal will make it into a future version of JS.</p>\r\n<p>Bruno</p>\r\n",
    "PostedDate": "2013-01-20T03:29:42.43-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "989324",
    "ThreadId": "429692",
    "Html": "\r\n<div>@bjouhier,<br>\r\n<br>\r\nI guess indeed it all depends on the definition of &quot;recognizable&quot;. Your streamline library is a great piece of work and very close to how a developer would write this code (idiomatic code how they like to call it nowadays).\r\n<br>\r\n<br>\r\nBut I believe that many developers have an difficulty wrapping their heads around the concept async programming. So no matter how good the transformation is, they won't understand the result. For example I think many developers would have a hard time writing\r\n an async recursive directory walker. So when your library would transform an sync version in to a async version, they also will not fully understand what is going on. That is were generators can abstract through a library and not a transformation and thereby\r\n don't dazzle the developers.<br>\r\n<br>\r\nBTW, there an example on-line that shows how to &quot;deferred like functions&quot; can be implemented with generators and concurrency as a library.<br>\r\n<br>\r\n<a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:async_functions\">http://wiki.ecmascript.org/doku.php?id=strawman:async_functions</a><br>\r\n<br>\r\n<br>\r\n// Peter<br>\r\n<br>\r\n<br>\r\nOn 01/20/2013 12:29 PM, bjouhier wrote:<br>\r\n</div>\r\n<blockquote type=\"cite\">\r\n<p>From: bjouhier</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<p>@jbaroncom</p>\r\n<p>Depends on how tolerant you are about JS being &quot;recognizable&quot;. I prototyped <a href=\"https://github.com/Sage/streamlinejs/blob/await/examples/diskUsage/diskUsageAwait5._js\">\r\n&quot;await&quot; syntax in streamline.js</a>. The output is polluted by a fair amount of callback handling code but once you abstract that out (I could output comments to ease that) you recognize the original code. Unlike other transforms, the\r\n<a href=\"http://bjouhier.wordpress.com/2011/05/24/yield-resume-vs-asynchronous-callbacks/\">\r\nstreamline transform</a> does not move code around; it just inserts callback handling logic around it (*).</p>\r\n<p>(*) unfortunately this is not completely true and the transform has to move entire functions around because of hoisting.</p>\r\n<p>Theoretically, <a href=\"http://smellegantcode.wordpress.com/2012/12/28/a-pure-library-approach-to-asyncawait-in-standard-javascript/\">\r\nasync/await can even be implemented in pure JS</a>: . This is not a viable way to do it but the idea is interesting.</p>\r\n<p>Anyway, these are just stopgap solutions. I hope that something similar to the\r\n<a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:deferred_functions\">&quot;deferrred functions&quot;</a> proposal will make it into a future version of JS.</p>\r\n<p>Bruno</p>\r\n<p></p>\r\n<p></p>\r\n<p></p>\r\n</div>\r\n</blockquote>\r\n<br>\r\n",
    "PostedDate": "2013-01-20T05:50:02.363-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "989993",
    "ThreadId": "429692",
    "Html": "\r\n<p>@jbaroncom</p>\r\n<p>I'm completely with you on the difficulty to grasp async programming (I wouldn't have developed streamline otherwise). And yes, generators make it much easier to implement sync-style on top of callback oriented APIs. I actually implemented an alternate backend\r\n for streamline that transformes async calls into yield expressions, and I created a small\r\n<a href=\"http://sage.github.com/streamlinejs/examples/streamlineMe/yieldMe.html\">\r\ndemo</a> (works only in firefox).</p>\r\n<p>I'm a bit concerned about potential performance issues due to the fact that every call must allocate a generator. How costly is this compared to generating a callback closure? How costly is the yield itself? (I'm assuming it is some kind fo longjmp but it\r\n can probably be implemented more efficiently in a JS VM). I haven't run any benchmarks as I've been waiting for generators to land into V8 and node. So, if you have hints on this I'm interested.</p>\r\n<p>Bruno</p>\r\n",
    "PostedDate": "2013-01-21T13:56:46.89-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "990535",
    "ThreadId": "429692",
    "Html": "\r\n<div>@bjouhier,<br>\r\n<br>\r\nJust played around a bit with the yield demo, nicely done!!! I guess you are right about the possible overhead. But in most JS applications, the async usage is typically course grained. It is not like many applications read from a socket a byte at the time.\r\n And even is this were the case, this could still be done with typical callback semantics and abstracted in some class.\r\n<br>\r\n<br>\r\nI didn't do any real performance measurement. I did some test in the past with co-routines versus callbacks in Lua, but that doesn't really translate to this type of overhead.<br>\r\nJust like you I'm also waiting for generators to land in V8 soon (and other engines) to start playing around with it a bit more. Good thing is that I already saw that someone made a patch to TS to support the required syntax changes. So the playing around with\r\n the generators could even be done in TS.<br>\r\n<br>\r\n// Peter<br>\r\n<br>\r\nOn 01/21/2013 10:56 PM, bjouhier wrote:<br>\r\n</div>\r\n<blockquote type=\"cite\">\r\n<p>From: bjouhier</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<p>@jbaroncom</p>\r\n<p>I'm completely with you on the difficulty to grasp async programming (I wouldn't have developed streamline otherwise). And yes, generators make it much easier to implement sync-style on top of callback oriented APIs. I actually implemented an alternate backend\r\n for streamline that transformes async calls into yield expressions, and I created a small\r\n<a href=\"http://sage.github.com/streamlinejs/examples/streamlineMe/yieldMe.html\">\r\ndemo</a> (works only in firefox).</p>\r\n<p>I'm a bit concerned about potential performance issues due to the fact that every call must allocate a generator. How costly is this compared to generating a callback closure? How costly is the yield itself? (I'm assuming it is some kind fo longjmp but it\r\n can probably be implemented more efficiently in a JS VM). I haven't run any benchmarks as I've been waiting for generators to land into V8 and node. So, if you have hints on this I'm interested.</p>\r\n<p>Bruno</p>\r\n</div>\r\n</blockquote>\r\n<br>\r\n",
    "PostedDate": "2013-01-22T13:09:02.69-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]