[
  {
    "Id": "1032683",
    "ThreadId": "440831",
    "Html": "I am trying to understand how to use references with declaration files but am having newbee problems. I have one file &quot;app.ts&quot; that references a declaration file &quot;assert.d.ts&quot; located in a sub directory. This compiles fine but at runtime the implementation file &quot;assert.js&quot; is not found even though it is next to the declaration file. I arranged my files like this:\r<br />\n<br />\napp.ts<br />\n<pre><code>/// &lt;reference path='./lib/assert.d.ts' /&gt;\nimport assert = module(&quot;assert&quot;);\nassert.condition(false);</code></pre>\n\nlib/assert.d.ts<br />\n<pre><code>module &quot;assert&quot; {\n    function condition(o);\n}</code></pre>\n\nlib/assert.js<br />\n<pre><code>define([&quot;require&quot;, &quot;exports&quot;], function (require, exports) {\n    function condition(o) {\n        alert(o);\n    }\n    exports.condition = condition;\n})</code></pre>\n\nIf I move the assert files into the same directory as app.js then everything works. However I'd like to move 3ed party libraries into a separate lib folder. How can I do this?\r<br />\n<br />\nThanks,\r<br />\nChris<br />\n",
    "PostedDate": "2013-04-18T13:17:11.033-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1034238",
    "ThreadId": "440831",
    "Html": "The assert.js that you're trying to load will need to be visible to the module loader you're using.  The file path you're declaring is what's (I believe) relative to the .js file being loaded, though it's been a little while since I've tried it.<br />\n\r<br />\nYou can use TypeScript to also create the external module rather than trying to load an existing one via the .js file as well.  This might be a simpler option if you're starting from scratch.<br />\n",
    "PostedDate": "2013-04-22T17:48:10.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]