{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Fixed in the develop branch",
    "ClosedDate": "2013-11-11T09:27:56.153-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "There may be more than one reason why this is hard, but for starters, try the following in the playground:\r\n\r\n```typescript\r\ninterface IPromise<T> {\r\n\tthen<U>(_:(_:T) => IPromise<U>): IPromise<U>;\r\n\tthen<U>(_:(_:T) => U): IPromise<U>;\r\n}\r\n\r\ndeclare class Promise<T> implements IPromise<T> {\r\n\tpublic then<U>(_:(_:T) => IPromise<U>): Promise<U>;\r\n\tpublic then<U>(_:(_:T) => U): Promise<U>;\r\n\tpublic cancel(): void;\r\n}\r\n\r\nfunction f(): Promise<number> {\r\n\treturn new Promise<string>().then(() => {\r\n\t\treturn new Promise<number>();\r\n\t});\r\n}\r\n```\r\n\r\nI think that the ```return new Promise<number>``` should be resolved with the ```public then<U>(_:(_:T) => IPromise<U>): Promise<U>;``` option in ```class Promise```, but it doesn't work.\r\n\r\nRemoving ```cancel``` from the Promise class lets it work, but matching against the interface ought to work whether or not the class extends it.",
    "LastUpdatedDate": "2013-11-11T09:27:56.153-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-11-09T00:01:19.05-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Can't make Windows.Foundation.IPromise and WinJS.Promise work together",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1877
  },
  "FileAttachments": [],
  "Comments": []
}