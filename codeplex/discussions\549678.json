[
  {
    "Id": "1259799",
    "ThreadId": "549678",
    "Html": "Is there any way to get the TS compiler to allow unqualified references to properties of the window object that are declared in an extension to the Window interface? For example:<br />\n<pre><code>// accepted, because window.name has type string\nconsole.log(name);\n\n// rejected, because the Window interface doesn't have an &quot;x&quot; property\n// and no local variable called &quot;x&quot; has been declared\nconsole.log(x);\n\ninterface Window {\n    foo: number;\n}\n\n// accepted\nwindow.foo = 4;\n\n// rejected: &quot;could not find symbol 'foo'&quot;\nconsole.log(foo);</code></pre>\n\nIntuitively, I would expect that adding a property onto the Window interface would make that property accessible globally (without explicitly referring to it as a property of the window object) - that seems to be how the built-in Window interface behaves, and it would mirror the runtime behavior of the window object. Is there any way to get the typechecker to accept that without having to declare each property twice (once in the extended Window interface and once in a &quot;declare var&quot; statement)?<br />\n",
    "PostedDate": "2014-06-25T12:13:27.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1259804",
    "ThreadId": "549678",
    "Html": "Oh, upon further investigation it seems that lib.d.ts actually does declare all of the Window properties twice, so I guess I have my answer there.<br />\n",
    "PostedDate": "2014-06-25T12:19:29.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]