{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "\"true + null\" is also legal JavaScript code that yields a number, but we don't allow it just because it happens to do something that appears to \"work\". The great majority of the time when you pass a non-string to parseInt, it's because you made a programming error.",
    "ClosedDate": "2013-02-25T16:35:51.34-08:00",
    "CommentCount": 5,
    "Custom": "library typings",
    "Description": "I've encountered a few cases, but I'll focus on one: parseInt\r\n\r\nAccording to the spec:\r\n\"STRING: The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.\"  https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/parseInt\r\n\r\n\r\nThat means parseInt(1.3) is an absolutely acceptable, however Typescript's complains because it expects a string as the first parameter:\r\n\r\n\"(s: string,radix?: number) => number\"",
    "LastUpdatedDate": "2017-11-27T11:51:34.097-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-06T09:13:30.967-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Javascript default behaviors are not preserved",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 137
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "hm,\nmb becouse TypeScript have a Strong and Static typing.\ni think it is not bug.",
      "PostedDate": "2012-10-06T10:43:20.027-07:00",
      "Id": 78831
    },
    {
      "Message": "@SowingSadness that is completely irrelevant.  The standard says both options are acceptable.  Typescript is enforcing a nonexistent constraint in the underlying javascript.  They could have just called it something different (and left the original function with the original semantics)",
      "PostedDate": "2012-10-06T13:54:02.427-07:00",
      "Id": 78849
    },
    {
      "Message": "Seems like the type should be changed to \"any\"",
      "PostedDate": "2012-10-06T16:34:45.18-07:00",
      "Id": 78869
    },
    {
      "Message": "I'd say it's by design, similarly to the type of alert: (message?: string) => void. Anders Hejlsberg discusses the type of alert in his TypeScript introduction ( http://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript ). The rationale is to give functions like alert stricter but less general types that aligns with common sense usage.\n\nIn case of parseInt, the idea of the function is really to convert strings into integral numbers. If you want to convert some other object to an integer, you'd have to explicitly convert it to a string first.\n\nBy the way, why would you want to use something like parseInt(1.3)? Based on the output parseInt() for floating numbers, I think you should rather use Math.floor(1.3).",
      "PostedDate": "2012-10-07T02:29:50.567-07:00",
      "Id": 78885
    },
    {
      "Message": "@ShinNoNoir put that way, I definitely agree.",
      "PostedDate": "2012-10-07T08:36:21.857-07:00",
      "Id": 78903
    }
  ]
}