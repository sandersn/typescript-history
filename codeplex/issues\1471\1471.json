{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:26.72-07:00",
    "CommentCount": 19,
    "Custom": null,
    "Description": "2 unrelated TS files which both create an interface on the Window object clash.  Add these 2 files to a project:\r\n\r\nIndex2.ts:\r\n\r\n    interface Window {\r\n        pageData: {\r\n            someStuff: string;\r\n        };\r\n    }\r\n\r\n\r\nIndex1.ts:\r\n\r\n    interface Window {\r\n        pageData: {\r\n            otherStuff: string;\r\n        };\r\n    }\r\n\r\nAnd the \"Duplicate identifier 'pageData'\" error will present itself.  Take a look at the screenshot to see this in action.  Note there is *no* relation between these 2 files.  And yet they are clashing. This error only started presenting after the upgrade to TS 0.9.1.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-09T05:52:39.337-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Duplicate identifier error being caused by unrelated TypeScript file interfaces clashing",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 26,
    "Id": 1471
  },
  "FileAttachments": [
    {
      "FileId": 715969,
      "FileName": "screenshot.png",
      "DownloadUrl": ".\\715969"
    },
    {
      "FileId": 715970,
      "FileName": "Index1.ts",
      "DownloadUrl": ".\\715970"
    },
    {
      "FileId": 715971,
      "FileName": "Index2.ts",
      "DownloadUrl": ".\\715971"
    }
  ],
  "Comments": [
    {
      "Message": "This error only started presenting after the upgrade to TS 0.9.1.",
      "PostedDate": "2013-08-09T05:53:17.637-07:00",
      "Id": 109177
    },
    {
      "Message": "Fix it. This is rubbish!!!!",
      "PostedDate": "2013-08-09T06:17:07.38-07:00",
      "Id": 109180
    },
    {
      "Message": "Thanks for the feedback. Add noted in [the breaking changes](https://typescript.codeplex.com/wikipage?title=Known%20breaking%20changes%20between%200.8%20and%200.9&referringTitle=Documentation) this is by design. \r\n\r\n_In Visual Studio, all TypeScript files in a project are considered to be referencing each other\r\nDescription: Previously, all TypeScript files in a project had to reference each other explicitly. With 0.9.1, they now implicitly reference all other TypeScript files in the project. For existing projects that fit multiple projects into a single projects, these will now have to be separate projects.\r\n\r\nReason: This greatly simplifies using TypeScript in the project context. \r\n_\r\n\r\nBut marking as a suggestion for Jon so we can take a look if we need to adjust the behavior here.",
      "PostedDate": "2013-08-09T11:27:10.02-07:00",
      "Id": 109230
    },
    {
      "Message": "Hi @paulb,\n\nThanks for pointing me to the documentation - I hadn't caught that.  I can kind of see how this is useful *most* of the time but it creates a real interface collision issue with my current project.  \n\nIn a number of different pages in our application we pass properties from the server into our JavaScript through the use of a JavaScript object literal called pageData which lives globally on the window.  To take advantage of the strong typing that TypeScript offers we model this by adding a pageData interface like this:\n\n    interface Window {\n        pageData: {\n            these: string;\n            are: number;\n            my: number;\n            properties: string;\n        };\n    }\n\nThis interface is redeclared in each different TS file depending on the properties being passed in.  And with TS 0.9.1 this is problematic.  I could remove these interfaces and fall back to life without typings - but that's not really why I'm using TypeScript!\n\nWhat do you advise as the best way forward for my situation for now? Just turn down the typings?  ",
      "PostedDate": "2013-08-09T13:11:54.43-07:00",
      "Id": 109249
    },
    {
      "Message": "Please add option to turn this behaviour off.\n\nIn my project I have multiple classes with same name. Where class represents single language. Concrete file is selected based on current user language. But with this beheviour I must have for every language, new project (for 100 languages itÂ´s 100projects only for languages!).",
      "PostedDate": "2013-08-15T00:36:37.077-07:00",
      "Id": 109987
    },
    {
      "Message": "Please add option to turn this behaviour off.\n\nWe have a project with unit tests and E2E angular tests (Jasmine and AngularJs Scenario). Application, unit tests and browser tests have diffrent HTML for load them. We cant separate this into diffrent projects.  \n\nWithout this we cant migrate to 0.9.1\n",
      "PostedDate": "2013-09-17T05:19:12.293-07:00",
      "Id": 114779
    },
    {
      "Message": "We have a [similar issue](https://github.com/borisyankov/DefinitelyTyped/issues/919) with Bootstrap and JQueryUI where both define \"button\" and \"tooltip\" methods with the same signature under the jquery interface.\n\nThis should be handled by just allowing duplicated identifiers in interfaces. Interfaces already can extend each other, if they have the same name and different arguments, there are no errors. So, it makes sense that if they are exactly the same, typescript should just ignore the others as this won't cause any errors anywhere.\n\nThe implementation of this is not part of typescript, so the actual result of the method call will depend on how we include our 3rd party libraries, typescript shouldn't care about that.\n\n",
      "PostedDate": "2013-10-19T04:20:52.517-07:00",
      "Id": 118917
    },
    {
      "Message": "The automatic grouping of all the files in a project to implicitly reference each other definitely does make it harder to have multiple \"projects\" per project, where only some files can see other files.  \n\nI'm amenable to adding an option to turn off the implicit referencing, as I think that would help, but it sounds like it's worth digging in a bit here to see if that's the only issue or if there another one around just working with two .d.ts files that try to describe similar extensions (like the discussion about jqueryui.d.ts and bootstrap.d.ts at https://github.com/borisyankov/DefinitelyTyped/issues/919)",
      "PostedDate": "2013-10-23T13:57:07.113-07:00",
      "Id": 119408
    },
    {
      "Message": "Hi jonturner,\n\nIt sounds like these are 2 different but related issues.  I'd distinguish them like this:\n\n1. The implicit project referencing all TypeScript files behaviour that has been introduced means that it is impossible to have different TypeScript files which define the same interfaces / classes etc because they will collide.  \n\n2.  Different JavaScript libraries already exist that implement extensions with the _same_ signatures.  jQuery UI and Bootstrap colliding is a good example of this as they have crossover with the button extensions (as well as others - tooltip etc).  The implicit project referencing all TypeScript files behaviour means that it is impossible to use these side by side in a project even if they aren't being used side by side in each page.  Problematic.\n\nFor my part I can avoid #1 through namespacing (though it sounds like others have more serious issues with this).  #2 is much more problematic though and is further evidence that, in my opinion, this is not a helpful feature.  One project that I'm working on currently uses jQuery UI.   There may be a move to switch to Bootstrap in the future and this behaviour means we either have to convert the whole project in one go, or not use TypeScript for the Bootstrap until we've pulled out the jQuery UI.  Neither of those options is great.\n\nFurther to this, I'm planning to start using the -out compiler switch in Visual Studio when support is added so I can better structure my code. See links below:\n\nhttps://typescript.codeplex.com/workitem/1799\nhttps://typescript.codeplex.com/workitem/1816\n\nEssentially I want to move from having a number of related classes / interfaces etc defined in a single file to multiple files which will be brought together through the magic of -out.\n\nAnyway, use of the -out switch implicitly depends on the presence of  ``` /// <reference ``` tags.  So since I will need these anyway the implicit reference all behaviour doesn't appear to provide any real wins.  At least for my own use cases.  Since I'm pretty clear in my own mind what the disadvantages of this feature are I'd genuinely be interested to hear what the advantages are.  \n\nI just re-read this post - I hope this doesn't come across \"snarky\" - that's __honestly__ not my intention.  I think you guys are doing great work but I think that this particular feature whilst added with noble intent is honestly more of a hindrance than a help...  That's my rather long winded tuppence.",
      "PostedDate": "2013-10-24T01:41:31.32-07:00",
      "Id": 119484
    },
    {
      "Message": "A simple idea: why not have optional reference tags?\n\nIf the file has at least one <reference> tag, use that instead of automatic reference.\n\n\n",
      "PostedDate": "2013-10-24T03:39:04.033-07:00",
      "Id": 119495
    },
    {
      "Message": "My preference would be to pull this feature entirely for the reasons I've stated.  \n\nBut maybe nvivo's suggestion is a good compromise for those people who value it...",
      "PostedDate": "2013-10-25T01:44:35.887-07:00",
      "Id": 119619
    },
    {
      "Message": "Ok, so I'll say this very clear: PLEASE DON'T REMOVE AUTOMATIC REFERENCES!\n\nIt was one of the best things that could have done, and for large projects, no one deserves to go back to reference hell.\n\nIt makes perfect sense that you can see things inside its own project without referencing each file. It only needs some adjustments. ",
      "PostedDate": "2013-10-25T02:08:00.143-07:00",
      "Id": 119622
    },
    {
      "Message": "@johnny_reilly, just an aftertought: in your case, it is quite simple to solve your problem without stripping features from the language.\n\n1. You can move the interface to a unique file if the declaration is the same (from your example, it is). Some refactoring might allow you to use the same interface even with different members.\n\n2. You can declare your code inside a module, the interface will be private to the module and you can have as many interfaces with the same name, provided that you don't mark them with \"export\". I have each page code inside a different module (ie: \"Project.Views.PageName\"), and it solves all these name clashes. You can have as many classes and interfaces you need with the same names, and export only what you need to be seen from outside. \n\nI agree your pages are unrelated, but I think the main problem is with things we cannot control. Bootstrap and jquery-ui are two of the most used libraries in the world, and those are things we cannot change. In my own project I can just change the names things in a way they don't collide.",
      "PostedDate": "2013-10-25T02:39:37.79-07:00",
      "Id": 119627
    },
    {
      "Message": "@nvivo, @jonturner,\n\nIâve rambled for too long; hereâs the TLDR: \n\nJonâs suggestion of âadding an option to turn off the implicit referencingâ would definitely work for me and Iâd really appreciate it if it were added.  Iâm sure others would to.  To be honest I kind of think this option should be off by default as I think the feature is confusing but clearly mine is not the only view out there!\n\nBelow are the other thoughts I had on the topic â but itâs the TLDR that matters.\n\n@nvivo I agree with you about using namespacing to resolve my own interface collision issue.  This is what Iâve done.  And for what itâs worth, even if this feature was dropped Iâd keep the namespacing as I think it aids comprehension of how the interfaces are used.\n\nThe collisions of jQuery UI / Bootstrap issue isnât affecting me at present (although it may in the future).  But it points, in my own opinion, to the problems this feature causes.  I would imagine the same issues may present in other circumstances â eg lo-dash and underscore colliding for instance?\n\nI suppose I find it a generally confusing feature as well; the ```/// <reference``` tags specifically state what a TypeScript file is dependent upon. (For those of a C# bent itâs like ```using``` statements.) And thatâs helpful to me.  I know others who feel the same way.  \n\nThe other thing that I havenât mentioned previously is that this is a Visual Studio specific feature rather than a language / compiler feature.  So if I added a file called test.ts that looked like this:\n\n```ts\nvar x: JQuery = $(\"#test\");\nx.show();\n\n```\n\nto a project that also contained the jQuery typings and compiled Iâd be fine.  But if I was to take the same file try and compile directly Iâd get this:\n\n```\nC:\\Program Files (x86)\\Microsoft SDKs\\TypeScript>tsc \"C:\\Test.ts\"\nC:/Test.ts(1,8): error TS2095: Could not find symbol 'JQuery'.\nC:/Test.ts(1,17): error TS2095: Could not find symbol '$'.\n ```\n\nAgain I guess find this slightly counter-intuitive behaviour.\n",
      "PostedDate": "2013-10-25T04:20:17.517-07:00",
      "Id": 119635
    },
    {
      "Message": "Please disregard my comment about ```/// <reference``` tags being like ```using``` statements - they're not.  My bad.",
      "PostedDate": "2013-10-25T09:26:20.027-07:00",
      "Id": 119679
    },
    {
      "Message": "And this is where I \"about face\"...\n\nI've been mulling this over for the last week or two and finally migrating over to using the implicit referencing ([after experiencing a few hiccups](https://typescript.codeplex.com/workitem/1855)).  I now have to say that I've come to change my view.\n\nWhilst I still think the collisions of jQuery UI / Bootstrap etc are a problem I'd say it's probably niche.  The likelihood of anyone having jQuery UI and Bootstrap or Underscore and Lo-Dash in a project for anymore than a transitional period is probably unlikely.  And hence this is probably an edge case.\n\nThe other, and frankly more significant, thing that has brought me to this point of view is the [future improved support of the -out compiler flag in Visual Studio](https://typescript.codeplex.com/workitem/1799).  I've mentioned it before but I'm planning to move from having a number of related classes / interfaces etc defined in a single file to multiple files which will be brought together through the magic of -out.\n\nThe way I anticipate this working is through having one bootstrapper file (```bootstrapper.ts``` perhaps) which uses ```/// <reference``` tags at the top to reference the TS files that I want the output of included in the compilation step.  So if in ```bootstrapper.ts``` I'm referencing artefacts in ```aModule.ts``` and ```aClass.ts``` (and I've got ```/// <reference``` tags  in ```bootstrapper.ts``` pointing to these) then the output of ```bootstrapper.ts``` will also include the output of ```aModule.ts``` and ```aClass.ts``` as well.\n\nI have other modules of TypeScript which I bundle elsewhere.  I __don't__ want the output of them included with the output of ```bootstrapper.ts```.  Happily with implicit referencing I don't have to.  I just omit the ```/// <reference``` tags for this and that's dealt with.\n\nSo, in the end, I think implicit referencing is a __good thing__.  I think that @jonturners suggestion of \"adding an option to turn off the implicit referencing\" would probably help and would be useful.   But I think that the default behaviour of implicit referencing is wholly worthwhile.  Sorry it took me a while to reach this conclusion!",
      "PostedDate": "2013-11-04T05:32:06.447-08:00",
      "Id": 121698
    },
    {
      "Message": "@johnny_reilly - Just with respect to Bootstrap + jquery-ui being in the same project as a niche case - I don't think that's the case. They solve quite different sets of problems, and I think it's very, very common to use them together.",
      "PostedDate": "2013-11-08T10:30:03.49-08:00",
      "Id": 122423
    },
    {
      "Message": "This is not what we deserve.",
      "PostedDate": "2014-02-19T01:22:40.863-08:00",
      "Id": 134047
    },
    {
      "Message": "@kerem,\n\nSurely that's a bit melodramatic and presumptuous, don't you think? :-)",
      "PostedDate": "2014-02-19T01:42:10.56-08:00",
      "Id": 134050
    }
  ]
}