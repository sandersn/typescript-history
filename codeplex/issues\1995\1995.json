{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "The fix should be visible in the upcoming release. Thanks!",
    "ClosedDate": "2014-03-31T17:32:30.627-07:00",
    "CommentCount": 23,
    "Custom": null,
    "Description": "Hi,\r\n\r\nAfter upgrading from TypeScript 0.9.1 to 0.9.5, I am now receiving the following error when I compile: \r\n\r\n```\r\nVSTSC : tsc.js(37574, 25) Microsoft JScript runtime error : Unable to get value of the property 'wrapsSomeTypeParameter': object is null or undefined\r\n```\r\nI'm having difficult figuring out what could be causing this problem and now I'm dead in the water.\r\n\r\nAny help would be greatly appreciated.\r\n\r\nThanks,\r\nRichard",
    "LastUpdatedDate": "2017-11-27T11:51:34.217-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "High",
      "Severity": 150,
      "Id": 3
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-09T12:21:43.573-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Receiving 'wrapSomeTypeParameter' Error on build after upgrading to TypeScript 0.9.5",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 6,
    "Id": 1995
  },
  "FileAttachments": [
    {
      "FileId": 766719,
      "FileName": "Issue1995_Repro.zip",
      "DownloadUrl": ".\\766719"
    }
  ],
  "Comments": [
    {
      "Message": "This looks like a bug in the compiler. Can you share the sources you're seeing this in, preferably reduced as much as possible.\n\nThanks, Paul",
      "PostedDate": "2013-12-09T16:11:09.477-08:00",
      "Id": 126693
    },
    {
      "Message": "I'll have to try to put together a repro because I can't share the original source. The project is very large and has a lot of dependencies so this could be quite difficult to repro. \n\nI hope I can recreate the repro because at the moment, there is no way around this problem so it will be impossible to move to TS 0.9.5 unless we resolve this.\n\nthanks",
      "PostedDate": "2013-12-09T17:06:05.007-08:00",
      "Id": 126695
    },
    {
      "Message": "Hi,\nI was able to move my code to 0.9.5, but while refactoring  I got the same error:\n4>VSTSC : tsc.js(37574, 25) JavaScript runtime error : Unable to get property 'wrapsSomeTypeParameter' of undefined or null reference\n\nIt will be difficult to prepare repro because the project has 120+ ts files but at the end it comes to this:\nIf I remove following first line from sys.ts I get tsc error.\n/// <reference path=\"../../ts-definitions/DefinitelyTyped/Q/Q.d.ts\" />\n\nI discovered this while removing all references from project, because they are implicit. I can remove all of them, but not the one from sys.ts, and sys.ts is not even using Q promises.\n\nSo for now I left this reference and I’m able to compile project.\n",
      "PostedDate": "2013-12-10T06:46:20.41-08:00",
      "Id": 126775
    },
    {
      "Message": "I´m getting the same error, also in a very large solution. I´m using Q and Breeze. Removing Q is not an option for me, but even then, the VSTSC error seems to persist even if I remove the reference to Q.",
      "PostedDate": "2013-12-10T08:15:43.643-08:00",
      "Id": 126790
    },
    {
      "Message": "we're having the same issue... if you still need repro we can share our project privately... ",
      "PostedDate": "2013-12-10T08:29:10.77-08:00",
      "Id": 126793
    },
    {
      "Message": "Unfortunately we've seen this in a couple of scenarios - one we've already fixed, and another we're investigating.  The compiler fix did make it in to 0.9.5 ( http://typescript.codeplex.com/SourceControl/changeset/1dbbb8486e65de84ff21f129ef9905944d632a3f ). The remaining issue we are chasing down has only manifested itself to date (to us anyway) in the language service in Visual Studio.  Can you please confirm for me if you are seeing this error during compilation, or while working in VS.\n\nWe'll continue to investigate and try to have a solution shortly.",
      "PostedDate": "2013-12-10T08:42:57.07-08:00",
      "Id": 126794
    },
    {
      "Message": "We are also using Q and breeze. I think the problem may be related to a function that returns a Q Promise:\n\n```\nexport module X.Y {\n  export class Foo {       \n    static submit(): Q.Promise<any> {\n      return Q(null); // Causes the 'wrapsSomeTypeParameter' error.\n    }\n    ...\n```\n\nIf you change the line to the following, the error seems to go away:\n\n```\n      return Q<any>(null); // The 'wrapsSomeTypeParameter' error is gone.\n\n```\n",
      "PostedDate": "2013-12-10T10:08:59.65-08:00",
      "Id": 126823
    },
    {
      "Message": "Sorry, I got ahead of myself. I have one correction to the above example. Changing the code to use ```return Q<any>(null);``` didn't actually fix the problem. However, changing the code to the following does prevent the 'wrapsSomeTypeParameter' compiler error from happening:\n\n```\nexport module X.Y {\n  export class Foo {       \n    static submit(): Q.Promise<any> {\n      return null; // Prevents the 'wrapsSomeTypeParameter' error but isn't what I want to do.\n    }\n```\n\nAny ideas why?\n\nThanks",
      "PostedDate": "2013-12-10T10:38:03.877-08:00",
      "Id": 126830
    },
    {
      "Message": "I have attached a simplified project that I believe should repro this problem. \r\n\r\nThe main issue this problem is causing in large projects is there is no way to know what part of the codebase is causing the compiler to blow up. This makes it almost impossible to locate and fix what's causing the compiler error. ",
      "PostedDate": "2013-12-10T13:10:06.257-08:00",
      "Id": 126884
    },
    {
      "Message": "@RWHepburn\nyes, I don’t think that is possible to prepare just simple two line ts that will reproduce this error. In my case it’s total illogical, in one file I must keep reference to Q.d.ts, removing it will produce this errror.\n",
      "PostedDate": "2013-12-11T03:41:22.843-08:00",
      "Id": 126965
    },
    {
      "Message": "I have a large application, and only in 8 paces in my app I was doing a:\n\n__return Q(xxx); // the function returns Q.Promise<typeof xxx>__\n\nI replaced that line with __return null;__ and the compilation started working. Obviously my app does not work as expected but the problem seems to be related with that. \n\n",
      "PostedDate": "2013-12-11T06:50:06.8-08:00",
      "Id": 126975
    },
    {
      "Message": "@EdvinV \nI was actually able to reproduce the issue. I attached a sample project (see the File Attachments link at the top of this thread) which demonstrates one of the ways to reproduce the problem. It certainly looks like there are other ways to generate the error. ",
      "PostedDate": "2013-12-11T10:06:29.99-08:00",
      "Id": 127004
    },
    {
      "Message": "I could make the compiler and application work changing the\n\n__returnQ(_[xxx]_);__\n\ncall for\n\n__return Q.fcall(function() : _[typeof xxx]_ { return _[xxx]_; })__",
      "PostedDate": "2013-12-11T10:23:56.163-08:00",
      "Id": 127011
    },
    {
      "Message": "In my case ```return Q.resolve(null)``` seems to work around the problem. \n\nUnfortunately, there must be some other cases which are causing this error in my codebase. Even after fixing these issues, I still am getting the error and I'm having difficulty locating the cause. ",
      "PostedDate": "2013-12-11T11:25:14.72-08:00",
      "Id": 127022
    },
    {
      "Message": "For those people who are using Q, here is another similar scenario  that causes the 'wrapSomeTypeParameter' TS compiler error:\n\n```\n// Converts a JQueryPromise to convert a Q Promise.\nreturn Q($.ajax({\n  url: settings.url,\n  type: 'GET',\n  contentType: 'application/json',\n  dataType: 'json'\n})).fail(handleError);\n```\n\nIf I modify the code as follows, then I can finally get my compile to succeed:\n\n```\nreturn Q.when($.ajax({\n  url: settings.url,\n  type: 'GET',\n  contentType: 'application/json',\n  dataType: 'json'\n})).fail(handleError);\n```",
      "PostedDate": "2013-12-11T12:03:54.293-08:00",
      "Id": 127032
    },
    {
      "Message": "Hi Guys,\n\nIs there an update on this issue? I'm experiencing the exact same problem as I attempt to upgrade our project from TS 0.9.1.1 to 0.9.5 as well.",
      "PostedDate": "2014-01-02T03:19:28.657-08:00",
      "Id": 128844
    },
    {
      "Message": "Hi all, \n\nIt's been a painful 3 hours but I'm now compiling against TS 0.9.5 without issue.\n\n@billti - regarding your question:\n\n> Can you please confirm for me if you are seeing this error during compilation, or while working in VS.\n\nI saw this error during compilation.  It was the first thing I experienced when attempting to compile for the first time after the upgrade to 0.9.5.  Until I came upon a workaround it was the only thing I experienced :-(  \n\nFollowing the suggestion by @EdwinV that this appears to be an issue that occurs when using the Q typings from DefinitelyTyped.  I discovered a workaround which I thought I'd share:\n\n1. Open up your csproj (or equivalent) file in a text editor and identify the *___first___ *```TypeScriptCompile``` file mentioned in the project file.\n2.  Open the identified file and add a reference to Q, like so: (your path may well be different)\n```\n/// <reference path=\"../../../../typings/q/q.d.ts\" />\n```\n\net voila - the problem vanishes.\n\nI don't know why this resolves the issue but it does in my case.  Perhaps there's something wrong with the Q.d.ts definitions?  If someone can point out what the problem is I'll see if I can get a fix applied to Q.d.ts.\n\nAlternatively I did wonder if this was related to the [overload resolution changes which required using a _references.ts file to enforce ordering](https://typescript.codeplex.com/discussions/472172).  However, attempting to use a _references.ts file instead of my workaround above did not work and so I've abandoned it.\n\n@billti - I'd love to hear the result of the investigation that you mentioned on December 10th.  Is there anything to report?",
      "PostedDate": "2014-01-02T06:51:21.11-08:00",
      "Id": 128852
    },
    {
      "Message": "Workaround #2 \n\nHi Guys,\n\nThe workaround I reported yesterday works but has unpleasantly side effects.  Namely the TypeScript language service in Visual Studio 2013 no longer resolves any of the typing definition file artefacts.  It doesn’t know what Q is, it doesn’t know what Knockout is etc.  This could be resolved by adding a _references.ts file to the project.  There didn’t need to be any references in the  _references.ts file at all – but the creation the file made the TypeScript language service work as you would expect.\n\nAt this point I thought I was home and dry.  I wasn’t.\n\nWhilst it worked on Visual Studio 2013, when I passed a shelveset of my changes to a team member who was still running Visual Studio 2012 the the TypeScript language service would not work under any circumstances.\n\nI decided to take a look at the Q typings at this point to see what was so upsetting about them.  The one thing that was obvious was that these typings make use of [Declaration Merging](http://blogs.msdn.com/b/typescript/archive/2013/06/18/announcing-typescript-0-9.aspx)\n\nQ.d.ts before\n\n```ts\ndeclare function Q<T>(promise: Q.IPromise<T>): Q.Promise<T>;\ndeclare function Q<T>(promise: JQueryPromise<T>): Q.Promise<T>;\ndeclare function Q<T>(value: T): Q.Promise<T>;\n\ndeclare module Q {\n    //… functions etc in here\n}\n\ndeclare module \"q\" {\n    export = Q;\n}\n```\n\nQ.d.ts after:\n```ts\ninterface QIPromise<T> {\n    //… functions etc in here\n}\n \ninterface QDeferred<T> {\n    //… functions etc in here\n}\n \ninterface QPromise<T> {\n    //… functions etc in here\n}\n \ninterface QPromiseState<T> {\n    //… functions etc in here\n}\n \ninterface QStatic {\n \n    <T>(promise: QIPromise<T>): QPromise<T>;\n    <T>(promise: JQueryPromise<T>): QPromise<T>;\n    <T>(value: T): QPromise<T>;\n \n    //… other functions etc continue here\n}\n \ndeclare module \"q\" {\n    export = Q;\n}\ndeclare var Q: QStatic;\n```\n\nI discovered that whilst I could now compile I could not \n",
      "PostedDate": "2014-01-03T03:41:54.56-08:00",
      "Id": 128954
    },
    {
      "Message": "Workaround #2  - please ignore previous post (I hit save too early)\n\nHi Guys,\n\nThe workaround I reported yesterday works up to a point but has problems.  Namely the TypeScript language service in Visual Studio 2013 no longer resolves any of the typing definition file artefacts.  It doesn’t know what Q is, it doesn’t know what Knockout is etc.  This could be resolved by adding a _references.ts file to the project.  There didn’t need to be any references in the  _references.ts file at all – but the creation the file made the TypeScript language service work as you would expect.\n\nAt this point I thought I was home and dry.  I wasn’t.\n\nWhilst it worked on Visual Studio 2013, when I passed a shelveset of my changes to a team member who was still running Visual Studio 2012.  For him, and for me when I tested on my own install of VS 2012, the TypeScript language service would not work under any circumstances.\n\nI decided to take a look at the Q typings at this point to see what was so upsetting about them.  The one obvious difference from most typings was that these typings make use of [Declaration Merging](http://blogs.msdn.com/b/typescript/archive/2013/06/18/announcing-typescript-0-9.aspx) – they declare a function Q (with 3 overloads) and subsequently declare a module with the same name.  Most other libraries appear to define interfaces and expose a variable with them.  I refactored the Q typings to use this approach.  \n\nQ.d.ts looked like this before:\n\n```ts\ndeclare function Q<T>(promise: Q.IPromise<T>): Q.Promise<T>;\ndeclare function Q<T>(promise: JQueryPromise<T>): Q.Promise<T>;\ndeclare function Q<T>(value: T): Q.Promise<T>;\n\ndeclare module Q {\n    //… functions etc in here\n}\n\ndeclare module \"q\" {\n    export = Q;\n}\n```\n\nAnd after my changes it looked like this:\n\n```ts\ninterface QIPromise<T> {\n    //… functions etc in here\n}\n \ninterface QDeferred<T> {\n    //… functions etc in here\n}\n \ninterface QPromise<T> {\n    //… functions etc in here\n}\n \ninterface QPromiseState<T> {\n    //… functions etc in here\n}\n \ninterface QStatic {\n \n    <T>(promise: QIPromise<T>): QPromise<T>;\n    <T>(promise: JQueryPromise<T>): QPromise<T>;\n    <T>(value: T): QPromise<T>;\n \n    //… other functions etc continue here\n}\n \ndeclare module \"q\" {\n    export = Q;\n}\ndeclare var Q: QStatic;\n```\n\nUsing this approach meant I could do away with my explicit reference to Q.d.ts in the first ```TypeScriptCompile``` file in my project.  I also had to add a _references.ts file to get the TypeScript language service working again. I’m not sure why this was required – it sounds like implicit referencing may not be working as expected in TS 0.9.5.  This approach works both on  Visual Studio 2012 and Visual Studio 2013 according to my testing.  I did notice that I had to open _references.ts in VS 2013 before the TypeScript language service started resolving which was odd.  But at least all is working now.\n\nSo it sounds like there is a problem with Declaration Merging in TS 0.9.5.  Would you guys be able to take a look please?\n\nI'll raise a pull request with Definitely Typed and submit the amended typings and a link back to this post for explanation.  \n",
      "PostedDate": "2014-01-03T03:57:18.85-08:00",
      "Id": 128955
    },
    {
      "Message": "The pull request for new Q typings can be found here [here](https://github.com/borisyankov/DefinitelyTyped/pull/1497).  I've asked for input for other users of the Q typings / the original typing authors before any merge is done.\n\nBut those that want to make the move regardless (like me) can take a look at the commit for details:\n\nhttps://github.com/johnnyreilly/DefinitelyTyped/commit/cb29b66f4d5eeb465a764896f9e92dd3592a28d4",
      "PostedDate": "2014-01-03T04:37:19.893-08:00",
      "Id": 128956
    },
    {
      "Message": "I also had to update the Breeze typings - the relevant commit is here:\n\nhttps://github.com/borisyankov/DefinitelyTyped/commit/1e1dc2b35a98265f1919069b59f74308d114946e\n\nBoth are associated with the pull request:\n\nhttps://github.com/borisyankov/DefinitelyTyped/pull/1497/commits ",
      "PostedDate": "2014-01-03T23:28:56.72-08:00",
      "Id": 129059
    },
    {
      "Message": "I've commented on the issue here and what I did to work around it: https://github.com/borisyankov/DefinitelyTyped/pull/1497#issuecomment-31589760\n\nI don't think the ideal solution is to change the Q typings due to the impact it can have on peoples code. What we really need is a proper fix for this. \n\nThe TypeScript team has a repro for this bug so hopefully we'll see a fix soon. There are code workarounds (see above) we can make in the meantime that hopefully will get most people through this patchy spot we are in.",
      "PostedDate": "2014-01-13T10:15:31.917-08:00",
      "Id": 130295
    },
    {
      "Message": "In the end I [cancelled the Pull Request](https://github.com/borisyankov/DefinitelyTyped/pull/1497#issuecomment-31662473) on the Q typings.  The amended typings are still available if anyone has need of them in the following GitHub repo:\n\nhttps://github.com/johnnyreilly/Q-TS-0.9.5-WorkAround\n",
      "PostedDate": "2014-01-14T02:57:22.807-08:00",
      "Id": 130376
    }
  ]
}