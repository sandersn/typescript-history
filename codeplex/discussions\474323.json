[
  {
    "Id": "1136944",
    "ThreadId": "474323",
    "Html": "Is it possible (or could it be added) that the generated .js file is nested under the corresponding .ts file in Visual Studio in the same way that minified .min.js files are nested under their corresponding .js files?<br />\n",
    "PostedDate": "2013-12-16T17:03:15.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1137631",
    "ThreadId": "474323",
    "Html": "Earlier versions of TypeScript did have this behavior, and we also treated the .js files as part of the project.  We simplified the VS experience to focus on the TypeScript, but you can still approximate the old behavior by clicking the &quot;Show All Files&quot; button in the Solution Explorer.  While this won't nest the .js files under the .ts files, it will let you see the .js files that have been output in the directory.  \r<br />\n",
    "PostedDate": "2013-12-18T09:29:08.597-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1137784",
    "ThreadId": "474323",
    "Html": "Ah I see. Yeah I like to have my generated JS files included in the project as they are the end game for me (JS is after all what the browser is consuming) but it can start to look cluttered since every TS file generates 2 additional files. I feel like Typescript is just the means to get to the JS almost like what a T4 template is to C#. Maybe this feeling will evolve in time. Thanks.<br />\n",
    "PostedDate": "2013-12-18T12:49:40.517-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1220367",
    "ThreadId": "474323",
    "Html": "I agree. I want the js and map files nested in the project as well. This also makes things difficult with source control since I also want then added to my repository. When vs doesn't add them as part of the project, i have to do a custom add of the file outside of the ide to make sure they are committed. The T4 argument is a good one here since the edmx files don't hide the generated classes from the solution...the same should be true for Typescript. Even if its auto generated, we still want to see it and version it. Thanks!<br />\n",
    "PostedDate": "2014-03-07T09:30:28.333-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1220654",
    "ThreadId": "474323",
    "Html": "Enter Mads' File Nesting extension:\r<br />\n<br />\n<a href=\"http://visualstudiogallery.msdn.microsoft.com/3ebde8fb-26d8-4374-a0eb-1e4e2665070c\" rel=\"nofollow\">http://visualstudiogallery.msdn.microsoft.com/3ebde8fb-26d8-4374-a0eb-1e4e2665070c</a><br />\n",
    "PostedDate": "2014-03-08T13:53:23.723-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1220657",
    "ThreadId": "474323",
    "Html": "exactly what i'm using :) Just wish i didn't have to &quot;show all files&quot;, include each .js and .map file in the solution, add them to source, and then manually nest them using the nesting extension. It's workable for sure, but an awful lot of steps for functionality that was already in place in the earlier version. Would love for the team to reconsider or perhaps make it a configurable option on how to treat the gen files.<br />\n",
    "PostedDate": "2014-03-08T14:04:34.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1220666",
    "ThreadId": "474323",
    "Html": "It used to be in an earlier VS update, but they took it out because of the limitation in the DTE project system. When you deleted a parent node, it wouldn't support keeping the child nodes, nor could you delete nested files. <br />\n",
    "PostedDate": "2014-03-08T15:22:11.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1229875",
    "ThreadId": "474323",
    "Html": "Just upgrade... And also shocked to see this feature have gone away.\r<br />\n<br />\nThis also makes other tools complain when you try to reference the js files, as they are not part of the solution.\r<br />\nBut maybe the new &quot;Url picker&quot; in Update 2 can make up for that by saying &quot;Hey so you wanted the file &quot;myfile.ts&quot; but I know that referencing that from html makes no sense at all, so ill just put in &quot;myfile.js&quot; instead... But I somehow doubt that... Besides... Update 2 isn't viable for me atm. as it breaks all our ongoing web projects.<br />\n",
    "PostedDate": "2014-04-03T06:06:17.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1264173",
    "ThreadId": "474323",
    "Html": "<blockquote>\nEarlier versions of TypeScript did have this behavior, and we also treated the .js files as part of the project.<br />\n</blockquote>\n@jonturner Why is this not available anymore? Publishing the JS file won't even work since it is not part of the project by default.\r<br />\n<br />\nIt's very easy for a dev to add a new TS file and forget to show hidden files, then include in project, then modify the .csproj to group the 3 files together so it looks pretty.\r<br />\n<br />\nThis is introducing bugs that are not known until we publish our code to the web server! Not good!<br />\n",
    "PostedDate": "2014-07-09T15:43:28.623-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1264196",
    "ThreadId": "474323",
    "Html": "The issue is that the way VS is designed to work is like so: When an item is added to Solution Explorer for a project under source control the dependent item(s) are also added to source control. If your dependent item is the compilation output then it's going to be locked for writing by source control. So when you simply build your project the TS files will attempt to write to checked in JS files which will cause the build to fail. Alternatively each build would have to check out every single JS file in your tree. I'm not sure I follow how you're checking in the JS and TS and having things work.<br />\n",
    "PostedDate": "2014-07-09T18:10:27.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1264497",
    "ThreadId": "474323",
    "Html": "@danquirk In regards to trying to compile files that are checked in and having the compile fail fail because it is locked (TS -&gt; JS), how does this work with other file types that generate code in VS? For example, ASPX and DBML files generate a &quot;.designer.cs&quot; file (as well as other &quot;parent&quot; file types). It has to check the file out if there are changes so the compile doesn't fail, correct?\r<br />\n<br />\nI think understand your question, but there seems to be a methodology for handling this situation. I can do a full rebuild on a checked-in project and it doesn't fail because it is not checked in. Admittedly, I am making this statement from memory as we are no longer using VSS/TFS and SVN does not lock checked-in files on disk.<br />\n",
    "PostedDate": "2014-07-10T09:44:42.623-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1264521",
    "ThreadId": "474323",
    "Html": "Output files should not be included in a Visual Studio solution or in any source control system.\r<br />\n<br />\nThose files are just noise - the same as .dlls for C# projects.\r<br />\n<br />\nIt is only necessary to have faith in the compiler, so that the existence of the source files (.ts files) will always imply the existence of the corresponding output files (.js files).\r<br />\n<br />\nWhen it comes to deployment it is only necessary to <br />\n<ul>\n<li>Compile all projects</li>\n<li>Harvest the output</li>\n<li>\nDeploy the output to a server<br />\n</li>\n</ul>\nSimilarly for coding and debugging, it's only necessary to compile the source file in order to have the .js file magically appear.\r<br />\n<br />\nIt's understandable that people new to TypeScript may not think that way, but wanting to hang on to the .js files doesn't make a lot of sense.<br />\n",
    "PostedDate": "2014-07-10T10:38:26.69-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1264974",
    "ThreadId": "474323",
    "Html": "@JimFoster\r<br />\n<br />\nI'm not super familiar with every different codegen tool in VS but it seems a little different here. As nabog said, think about the .js like a .dll that is built by your C# project. You would never check the .dll in because you're going to have to check in a new version literally every time you change anything. The same thing would happen with your TypeScript solution now. When you change a single file you still need to emit JS for every file. So now you've got many JS files marked as changed in source control, only some of which are actually changed.\r<br />\n<br />\nThat said, I totally get the desire for the UI change, which is what the linked extension is doing, separate from issues with source control (which is our current issue just because of how VS/Solution Explorer is designed at the moment).<br />\n",
    "PostedDate": "2014-07-11T13:47:25.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1265505",
    "ThreadId": "474323",
    "Html": "@danquirk\r<br />\n<br />\nI guess what I am getting at is <em>not including</em> the generated code in the solution (whether or not it is checked in to source control) appears to be inconsistent with how Visual Studio works (whether or not that is a good thing). Every other component I can <em>think</em> of in VS that generates source code from another object includes that generated source as a child item under the main item (such as .aspx -&gt; .aspx.Designer.cs). Now, that said, I just realized that in other modules that generate code <strong>must</strong> include the generated code in the project or it will never get complied--not an issue directly with JS as it is never complied, but just served.\r<br />\n<br />\nBut, for me, it also boils down to the fact that there is no option for TS to generate minified JS files. Since I don't want to stream &quot;fat&quot;, JS to users, I am forced to manually include the JS files in my project anyway and use other tools (Web Essentials in my case) to minify the JS. \r<br />\n<br />\nIf TS offered a minified option, then I am not sure if I personally would care as much if the JS files were included in the solution.<br />\n",
    "PostedDate": "2014-07-14T07:03:08.957-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1316547",
    "ThreadId": "474323",
    "Html": "This is very unfortunate. I'm creating a sandboxed SharePoint solution that contains typescript source files. The js files needs to be included in the project, because if they are no included, they will not be in the wsp solution file. And I need the js files in the wsp solution file. If the js file is not checked out, the build process fails. So I need to check out all js files before build the project. It makes more difficult to work in a team. <br />\n<br />\nSo please, please, bring back this feature.<br />\n",
    "PostedDate": "2014-10-26T00:06:46.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1324704",
    "ThreadId": "474323",
    "Html": "like @jesuslpm, I need the js files included to publish my web app to remote IIS. Sorry for spamming this discussion. Is there a place where this feature can be voted on ?<br />\n",
    "PostedDate": "2014-11-21T05:33:52.667-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1343190",
    "ThreadId": "474323",
    "Html": "You can create an ItemTemplate with the needed functionality.\r<br />\nI opened an issue to WebEssentials, <a href=\"https://github.com/ligershark/side-waffle/issues/216\" rel=\"nofollow\">https://github.com/ligershark/side-waffle/issues/216</a>\r<br />\nMaybe you have time to look how to integrate it ?<br />\n",
    "PostedDate": "2015-01-19T02:42:48.32-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]