[
  {
    "Id": "1159970",
    "ThreadId": "491988",
    "Html": "Just posted this question over at SO:\r<br />\n<br />\n<a href=\"http://stackoverflow.com/questions/21082111/tooling-available-to-automatically-resolve-and-order-typescript-dependencies-wit\" rel=\"nofollow\">http://stackoverflow.com/questions/21082111/tooling-available-to-automatically-resolve-and-order-typescript-dependencies-wit</a>\r<br />\n<br />\nCurious if there are plans/thoughts to put this on the roadmap.\r<br />\n<br />\nThanks!\r<br />\nDavid<br />\n",
    "PostedDate": "2014-01-12T22:25:30.25-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1160380",
    "ThreadId": "491988",
    "Html": "I think a much simpler approach would be to use external modules with require.js. Then you don't even need to think about references but you have both - separate small files during development and one concatenated file after build.\r<br />\n<br />\nWhen using external modules (import X = require('X')) TS compiler automatically compiles other modules into separate files and finds all referenced files. After compiling ts -&gt; js you can use require.js to concatenate and minify all used files.\r<br />\n<br />\nI built a sample application to demonstrate this approach. It uses grunt to execute tasks: <a href=\"https://github.com/wiktor-k/ts-amd\" rel=\"nofollow\">https://github.com/wiktor-k/ts-amd</a><br />\n",
    "PostedDate": "2014-01-13T01:07:19.497-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1161509",
    "ThreadId": "491988",
    "Html": "Thanks for the feedback. Jumping to external modules (skipping internal ones altogether) actually sounds more complicated to me, if I'm just trying to stay with the &quot;namespace-like&quot; internal modules and use the VS tooling to &quot;see&quot; all classes in the namespace. Perhaps I'm caught in a void here - haven't really tried to deal with external modules yet (just getting started with the language); seemed to understand from the documentation that you could/should stay with internal ones if you don't need more than that.<br />\n",
    "PostedDate": "2014-01-13T08:09:37.96-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1164297",
    "ThreadId": "491988",
    "Html": "When I started working with TypeScript I also chose internal modules but honestly I had the exact same problem as you have - references dependency hell :)\r<br />\n<br />\nAs I've been using require.js previously (and it's good in keeping JavaScript dependencies clean and separate) switching to external modules was not a problem for me. TypeScript makes it even easier and more readable than AMD modules in JavaScript. But I understand it's more work to understand and setup at first.\r<br />\n<br />\nI wonder what kind of workflow is used by the bigger Microsoft projects that use TypeScript (for example the Windows 8 apps).<br />\n",
    "PostedDate": "2014-01-14T01:22:02.89-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1165139",
    "ThreadId": "491988",
    "Html": "Thanks - appreciate the advice. I wonder the same...perhaps when we're post-1.0, we'll see some samples for guidance on larger application structures.<br />\n",
    "PostedDate": "2014-01-14T06:38:36.53-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]