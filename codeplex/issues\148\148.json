{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:42.91-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "Add an option to enable highlighting of code which has the type 'any'.\r\n\r\nThis would make porting code to TypeScript much easier, and allows you to spot those places where type inference has failed.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-07T02:14:18.77-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Add 'any' highlighting to Visual Studio",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 148
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Works for me in VS 2012 Express for the Web with the TypeScript plugin.",
      "PostedDate": "2012-10-07T02:44:24.69-07:00",
      "Id": 78887
    },
    {
      "Message": "To clarify, I don't mean being able to check the type is any, that works fine for me.\n\nThe proposal is for actual highlighting, similar to error highlighting. For example, underline 'any' code in blue.\n\nThe use case is that when porting code to typescript, it is a hassle having to check every value in a function and every function definition manually, in order to see if the types are being propagated. It would also help to point out where TypeScript can, and can't, infer types, in a way that makes it trivial to understand.",
      "PostedDate": "2012-10-07T18:56:19.133-07:00",
      "Id": 78940
    },
    {
      "Message": "That's a neat idea.",
      "PostedDate": "2012-10-11T17:36:11.933-07:00",
      "Id": 79564
    }
  ]
}