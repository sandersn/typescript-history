[
  {
    "Id": "1242449",
    "ThreadId": "544557",
    "Html": "Hello,\r<br />\n<br />\nI am currently running into one issue after the other regarding the generation of API documentation with typescript and jsdoc3. My approach is to have jsdoc parse the compiled javascript code that is generated from my typescript source.\r<br />\n<br />\nTypescript's idea seems to be all about supporting tooling to enable the developer to work better and with higher quality on Javascript projects. At least for me, a good API documentation of the code I provide to other developers is very important to enable them to work better with my code. Documentation generation is also tooling like the IDE.\r<br />\n<br />\nPerhaps my approach using jsdoc is wrong and there are other tools available, but telling from my research there are none available. Please hint me to alternatives if I missed them.\r<br />\n<br />\nI want to give a brief explanation of the most annoying issues I encountered so far:<br />\n<ul>\n<li>It's not possible to put jsdoc comments on property declarations.\r<br />\n  Property declarations are not directly generated javascript. So I need to assign a value explicitly in the constructor and put the property documentation there.</li>\n<li>It's not possible to document interfaces.\r<br />\n  Interfaces are only hints to the compiler and result in no generated javascript to be picked up by jsdoc. So there is also no workaround possible as I can tell so far.</li>\n<li>\nYou need to provide a hell of a lot of redundant information in the jsdoc comments\r<br />\n  For an example, you need to specify the @type {string}, and also provide a full qualified @member OuterNameSpace.InnerNameSpace.ClassName#propertyName tag as well as define an @constructor Namespace.Classname tag to hint jsdoc so that it can generate the correct documentation. This information is redundant in the comments, as it's already stated clearly in the code and could be extracted.<br />\n</li>\n</ul>\nAll of these issues are not solvable by jsdoc, since the needed information is not available in the resulting javascript anymore.\r<br />\n<br />\nSo this leads to my proposal:\r<br />\nThe Typescript compiler should be extended in terms of generating the corresponding code that will lead to full-featured jsdoc comments in a compiled javascript file.\r<br />\n<br />\nTake, for example, this code as I'd like to comment it:<br />\n<pre><code>/**\n* My Module\n* @summary some summary\n*/\nmodule MyModule {\n\n  /**\n  * Explanation of this specific interface\n  */\n   export interface SomeInterface {\n    /**\n    * Explanation of this specific property\n    */\n    someProperty: string;\n    /**\n    * This method does someting\n    * @param arg1 Provides the object to work on\n    * @returns The result of something happened on arg1\n    */\n    doSomething(arg1: someType): SomeOtherType;\n   }\n\n  /**\n  * Explanation of this specific class\n  */\n  export class MyClass implements SomeInterface {\n    public someProperty: string;\n\n    constructor() { // do something; }\n\n    /**\n    * Some additional information for this implementation of {@Link SomeInterface.doSomething}\n    */\n    public doSomething(arg1: someType): SomeOtherType { // ...  }\n  }\n}</code></pre>\n\nIn an ideal world, I'd like to tell the compiler &quot;Generate extended docs&quot; via some parameter. This would result in some extra generated javascript (like i.e. an empty class &quot;ISomeInterface&quot; with full jsdoc for the properties.\r<br />\n<br />\nIt should also automatically add the correct {typeName} tags to the @params and @returns comments. It also should add the correct @member tags to the property and method documentations.\r<br />\n<br />\nFor the properties, it then should move the comment block from the declaration to the first usage of the property in the constructor or to the initial assignment.\r<br />\n<br />\nIf the developer specifies a tag that could be auto-generated by the compiler, it would simply be omitted (and the compiler would emit a hint that this information is redundant).\r<br />\n<br />\nThe ideal result would be a fully annotated and automatically extended documentation that would run through jsdoc and provide us with a full-featured API documentation, without the hazzle I currently go through.<br />\n",
    "PostedDate": "2014-05-07T02:32:43.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1242812",
    "ThreadId": "544557",
    "Html": "I've had an idea in the back of my head at trying to document typescript applications using <a href=\"https://github.com/angular/dgeni\" rel=\"nofollow\">https://github.com/angular/dgeni</a>.  It should theoretically be possible to take the AST generated by the typescript compiler, and build a plugin for dgeni that would pull out the type information and then supply the expected tags.\r<br />\n<br />\nI think this method would be something that would be agnostic to the typescript compiler itself, and would be something that could be managed outside of the compiler.  Again I haven't looked at the implementation details of what would need to be done, but that is something I might start looking at some weekend.<br />\n",
    "PostedDate": "2014-05-07T16:30:27.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]