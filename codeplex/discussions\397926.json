[
  {
    "Id": "921400",
    "ThreadId": "397926",
    "Html": "\r\n<p>See&nbsp;<a href=\"http://en.wikipedia.org/wiki/Immutable_object\">http://en.wikipedia.org/wiki/Immutable_object</a>&nbsp;:</p>\r\n<p>&quot;<span>In&nbsp;</span><a title=\"Object-oriented computer programming\" href=\"http://en.wikipedia.org/wiki/Object-oriented_computer_programming\">object-oriented</a><span>&nbsp;and&nbsp;</span><a title=\"Functional programming\" href=\"http://en.wikipedia.org/wiki/Functional_programming\">functional</a><span>&nbsp;programming,\r\n an&nbsp;</span><strong>immutable object</strong><span>&nbsp;is an&nbsp;</span><a title=\"Object (computer science)\" href=\"http://en.wikipedia.org/wiki/Object_(computer_science)\">object</a><span>&nbsp;whose state cannot be modified after it is created.</span>&quot;</p>\r\n<p>For example for variable and member declarations:</p>\r\n<p></p>\r\n<pre>const MAX = 43;</pre>\r\n<p></p>\r\n<p>But also for function parameters:</p>\r\n<p></p>\r\n<pre>function foo( const bar : Bar ) { ... }</pre>\r\n<p></p>\r\n<p>Thanks!</p>\r\n",
    "PostedDate": "2012-10-03T11:07:58.717-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921506",
    "ThreadId": "397926",
    "Html": "<p>The type system in TypeScript focuses on ECMAScript interfaces and features, so we likely won't support creating constants if&nbsp;ECMAScript doesn't support it.</p>\r\n<p>That said, ES5 does allow you to create readonly fields (eg, using the Object.defineProperty), which we could look into supporting.</p>",
    "PostedDate": "2012-10-03T13:41:21.813-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]