{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2014-01-30T17:56:05.72-08:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Objects can be made immutable at runtime with Object.freeze, but this can cost a lot to freeze lots of objects.\r\nit'd be nice if the TS compiler warned about attempts to write to an object which is aimed at being immutable.",
    "LastUpdatedDate": "2014-01-30T17:56:05.72-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-01-30T05:16:50.793-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Add Immutable and DeeplyImmutable interfaces",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 2137
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "The only way to really support this would be to add a notion of 'readable' and 'writeable' to the type system in an extremely pervasive fashion. We have looked into support for 'readonly' modifiers and similar concepts in the past (it's certainly desirable) but it's a complicated design challenge for a number of reasons. It's still possible that we might add it in the future but it would be a significant new language addition and not something you should expect to see anytime soon. It is not as simple as just adding a couple types and special casing assignment rules to them.",
      "PostedDate": "2014-01-30T17:56:03.63-08:00",
      "Id": 132187
    }
  ]
}