{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:27.41-07:00",
    "CommentCount": 7,
    "Custom": null,
    "Description": "I'm really enjoying TypeScript right now, but have since ran into a quality of life issue when trying to assemble a Node app together.  (More like a Node template project atm).\r\n\r\nBy default, currently the sample project sets the default module system to AMD.  When working on Node.js files, using CommonJS would work better without having to delve into workarounds, but when working with client-side pages, AMD is still the way to go.\r\n\r\nOne of the possible solutions I had was to implement two separate (or three) TypeScript module related Build Actions that one can set in the file properties?\r\n\r\nSomething like TypeScript - CommonJS, TypeScript - AMD and TypeScript - Default (determined globally).\r\n\r\nThanks for the great product.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-03-29T09:58:02.353-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Build Action to allow type of module",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2365
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Are you using visual studio? Then you may want to try out Node tools: https://nodejstools.codeplex.com/",
      "PostedDate": "2014-03-30T04:50:53.573-07:00",
      "Id": 139991
    },
    {
      "Message": "It's a neat idea, but it doesn't solve the underlying problem.  I want to use TypeScript with Node for very specific reasons that simple intellisense on JavaScript doesn't solve.  There's an inherent limitation on code inference on vanilla JavaScript.\n\nAnd there's no TypeScript support built into the IDE anyways.  Thanks for alerting me to the toolset, but ultimately you missed the point of my request.\n",
      "PostedDate": "2014-03-30T11:46:51.213-07:00",
      "Id": 140006
    },
    {
      "Message": "I meant to say no native TypeScript support in the default project types provided by nodejstools.",
      "PostedDate": "2014-03-30T11:47:56.39-07:00",
      "Id": 140007
    },
    {
      "Message": "TypeScript, in fact, is supported. You need the dev build. See: https://nodejstools.codeplex.com/wikipage?title=TypeScript\n",
      "PostedDate": "2014-03-30T12:56:00.567-07:00",
      "Id": 140008
    },
    {
      "Message": "Thanks for pointing me to it, but the issue still stands, there's no real way of allowing two separate modes of module compilation within the same project.  I'm curious if you know if the folks at nodejstools are working on this feature or if it's a better idea for me to pose TypeScript issues on the nodejstool forums?\n\nPlease, let me know where I should be posting TypeScript issues to.",
      "PostedDate": "2014-03-30T17:05:17.42-07:00",
      "Id": 140018
    },
    {
      "Message": "Not sure exactly how this would work, marking as a suggestion for future investigation. Might be worth making a forum post to brainstorm a little bit.",
      "PostedDate": "2014-04-01T18:46:59.167-07:00",
      "Id": 140241
    },
    {
      "Message": "With typescript 1.0, I see there's an --outDir parameter for specifying the output directory.\n\nUsing MSBuild project scripting, you should be able to run two compilations with different outDirs and module settings.\n\nMaybe clone and modify your Microsoft.TypeScript.targets file in C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v12.0\\TypeScript ?\n\nhave (some) docs for MSBuild http://msdn.microsoft.com/en-us/library/ms171466.aspx  too.",
      "PostedDate": "2014-04-03T09:13:31.723-07:00",
      "Id": 140420
    }
  ]
}