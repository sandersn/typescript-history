[
  {
    "Id": "920445",
    "ThreadId": "397660",
    "Html": "\r\n<p>Would be nice to get support voor XML Documentation inside TypeScript.<br>\r\nSomething like this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> Point {\r\n   <span style=\"color:green\">/// &lt;summary&gt;This is a Point class.&lt;/summary&gt;</span>\r\n\r\n    constructor (<span style=\"color:blue\">public</span> x: number, <span style=\"color:blue\">public</span> y: number) { \r\n        <span style=\"color:green\">/// &lt;summary&gt;Creates a new Point object&lt;/summary&gt;</span>\r\n        <span style=\"color:green\">/// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt;</span>\r\n        <span style=\"color:green\">/// &lt;param name=&quot;y&quot;&gt;&lt;/param&gt;</span>\r\n    }\r\n}</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2012-10-02T02:11:59.11-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920484",
    "ThreadId": "397660",
    "Html": "<p>You beat me to it :-). XML Documentation inside TypeScript would be very useful.</p>",
    "PostedDate": "2012-10-02T03:48:19.117-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920505",
    "ThreadId": "397660",
    "Html": "<p>We definitely would like to do this, but we're leaning towards using JSDoc formatting.</p>",
    "PostedDate": "2012-10-02T04:42:22.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920519",
    "ThreadId": "397660",
    "Html": "<p>What I like about the XML Documentation is when you type \"///\" it gives you a skeleton comment with parameters and return types etc.</p>\r\n<p>I agree JSDoc makes sense in the produced javascript since it is ..... javascript after all. But from a typescript side the autogeneration of xml documentation could be very useful unless you can come up with \"///\" producing jsdoc notation ?</p>\r\n<p>Of course Visual studio will need to parse the jsdoc and understand it.</p>",
    "PostedDate": "2012-10-02T05:00:34.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920522",
    "ThreadId": "397660",
    "Html": "<p>I would love to see support for JSDoc in here. Especially if VS2012 could be made to understand what the JSDoc was saying in the same way as intellisense includes information from XML documentation.</p>",
    "PostedDate": "2012-10-02T05:04:57.637-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920540",
    "ThreadId": "397660",
    "Html": "<p>JSDoc would even be better then Xml Documentation :)</p>",
    "PostedDate": "2012-10-02T05:39:48.69-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920565",
    "ThreadId": "397660",
    "Html": "\r\n<p>IMO, JSDoc is also much nicer than Xml documentation. In addition, I always thought having the docs inside of the functions was bizarre looking. (I understand the &quot;benefit&quot; is that you then have access to those docs at runtime, but how many people have ever\r\n used that feature?)</p>\r\n<p>Would love to see you guys fully support /** */ style comments for XML doc generation in C# as well.</p>\r\n",
    "PostedDate": "2012-10-02T06:34:30.937-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920675",
    "ThreadId": "397660",
    "Html": "<p>+1 for jsdoc or vsdoc-style&nbsp;comments. I don't really care which you support. I just&nbsp;want my comments to&nbsp;augment Intellisense in Visual Studio, of course.</p>\r\n<p>Also, I would love to see tooling for API generation within Visual Studio. Right now, there is basically jsdocToolkit for jsdoc and absolutely nothing available for vsdoc-style comments.</p>",
    "PostedDate": "2012-10-02T09:12:41.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920708",
    "ThreadId": "397660",
    "Html": "<p>Oh, yes! &nbsp;Please switch to JSDoc instead of VSDoc. &nbsp;It would be nice to be able to have these in a separate \".d.ts\" file as well, if desired.</p>\r\n<p>~~James</p>",
    "PostedDate": "2012-10-02T10:05:26.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921043",
    "ThreadId": "397660",
    "Html": "<p>With a UserVoice site it would be easier to gauge the interest for feature requests like these.</p>\r\n<p>I think it may be better to have a TypeScript documentation format, which then converts to VSDoc or JSDoc. Some elements of JSDoc seem repetitive since typing can be inferred from the code. Two main arguments for the (additional) doc syntax would be IntelliSense support and standalone documentation.</p>",
    "PostedDate": "2012-10-02T23:37:19.39-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921148",
    "ThreadId": "397660",
    "Html": "<p>Please refrain from using any xml style comments. They are verbose, even when they are&nbsp;auto-generated. Please use the documentation style that is specific for node.js/javascript projects as used by the community.</p>",
    "PostedDate": "2012-10-03T02:57:36.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921230",
    "ThreadId": "397660",
    "Html": "<p>Agreed with @mr_much_win. &nbsp;Also, do NOT invent yet another documentation format as @bgever suggests... that would be ridiculous. &nbsp;Instead, I'd try to just have TypeScript auto-generate the known type info and inject it into existing JSDoc annotations.</p>",
    "PostedDate": "2012-10-03T06:24:49.43-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921263",
    "ThreadId": "397660",
    "Html": "<p>XML Documentation is more clear than JSDoc as it does not require two additional lines for opening and closing tags and does not require obsolete information to have 'correct' documentation. JSDoc is often used because you usually do not have any notion of types, but with TypeScript we do, and thus makes that notion completely&nbsp;irrelevant.</p>",
    "PostedDate": "2012-10-03T07:17:28.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921270",
    "ThreadId": "397660",
    "Html": "\r\n<p>Personally, I feel that JSDoc's &quot;two additional lines for opening and closing tags&quot; (/**, */) are a small price to pay versus the verbosity of XML.</p>\r\n<p>Which is not to mention that the XML format requires `&lt;summary&gt;&lt;/summary&gt;` opening and closing tags that the JSDoc format does not (implied if untagged), so I'd say the line count is a break-even, if not worse (more lines) for the XML.</p>\r\n",
    "PostedDate": "2012-10-03T07:36:55.09-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921273",
    "ThreadId": "397660",
    "Html": "\r\n<p>The real trouble is that by perpetuating the Microsoft XML comment style, you're continuing to keep Microsoft operating differently than [probably] every other JavaScript consumer in the world (who use JSDoc). Since TypeScript is supposed to be more focused\r\n on Microsoft becoming a part of the community, and trying to keep in sync with the evolving ECMAScript 6 syntax, keeping this specifically different seems like it would be a poor choice that again keeps Microsoft at a distance from the actual community.</p>\r\n",
    "PostedDate": "2012-10-03T07:40:00.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921305",
    "ThreadId": "397660",
    "Html": "<p>+1 for JSDoc instead of XML docs.</p>",
    "PostedDate": "2012-10-03T08:20:09.94-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921680",
    "ThreadId": "397660",
    "Html": "<p>+1 jsdoc</p>\r\n<p>- Infinity xmldoc</p>",
    "PostedDate": "2012-10-03T23:23:50.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921696",
    "ThreadId": "397660",
    "Html": "<p>TypeScript is not the same but similar to JavaScript. The JSDoc parser would need to be aware of TypeScript language constructs. Therefore, using plain JSDoc would not be optimal. Apples and pears, both fruit.</p>\r\n<p>Using a similar syntax to JSDoc would be useful, but should allow (optionally?) to&nbsp;omit&nbsp;certain tags and elements like @constructor and type specifications, since they can be inferred from the code. The TypeScript compiler should be able to complete the 'JSDoc compatible format' to fully native JSDoc in the generated JavaScript. JSDoc toolkits can then be used as usual.</p>\r\n<p>I also tend towards JSDoc, even though I'm very used to the XML documentation syntax from C#. However, to put the declaration inside code-blocks feels weird, and does not match the mental model for XML documentation in C# anyway.</p>",
    "PostedDate": "2012-10-04T00:07:02.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "929834",
    "ThreadId": "397660",
    "Html": "<p>+1 JSDoc (simplified, since a lot of what JSDoc (or even XMLDoc) covers with it's&nbsp;annotations are already present in the TypeScript language itself).</p>\r\n<p>JSDOc is already a standard, and most IDEs recognize it. It would be&nbsp;simpler&nbsp;to extend current JSDoc&nbsp;parsers&nbsp;to support TypeScript and thus help it spread quicker, not only on Microsoft's platform, but everywhere.</p>\r\n<p>Microsoft is doing so well by not drifting away from standards lately that, IMHO, it would be a shame to drop the ball on this one.</p>",
    "PostedDate": "2012-10-20T10:27:29.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "930281",
    "ThreadId": "397660",
    "Html": "<p>Take my vote for JSDoc!!! As it's a lot more \"precise\" and&nbsp;concrete. Also it would be great to get it <strong>autogenerated </strong>in the compiled js-files!&nbsp;</p>",
    "PostedDate": "2012-10-21T23:59:41.987-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "937778",
    "ThreadId": "397660",
    "Html": "<p>VSDoc is an unfortunate historical mistake, JSDoc is the way to go. Great to hear it's gonna be supported.</p>",
    "PostedDate": "2012-11-07T01:44:10.46-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "937816",
    "ThreadId": "397660",
    "Html": "<p>I would argue that VSDoc comments should be used in the .ts files and that these should automatically generate JSDoc comments in the generated .js files.</p>\r\n<p>VSDoc comments would go hand-in-hand with the VS extension which has already been made. There is no point it users who are already experiences with VS learning a new documentation format.</p>\r\n<p>&nbsp;</p>\r\n<p>Another option is for the compiler to support both as the input type, but always generate JSDoc comments in the&nbsp;generated .js files.</p>",
    "PostedDate": "2012-11-07T02:46:42.923-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "937824",
    "ThreadId": "397660",
    "Html": "<p>I would also prefer JSDoc instead of XML docs, as it is much more widely used &amp; supported. (Not to mention verbosity of XML docs.)</p>",
    "PostedDate": "2012-11-07T03:05:32.24-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "937858",
    "ThreadId": "397660",
    "Html": "<p>I want JSDoc in the output too, but in the actual TS files I want whatever VS supports natively. If that means VSDoc then so be it. It's more important for me that the code comments work in VS while coding. I don't want to maintain both JS and VS docs of course, but if it's the only way for now I'll do so until VS supports JSDoc natively.</p>",
    "PostedDate": "2012-11-07T04:26:30.703-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "937902",
    "ThreadId": "397660",
    "Html": "<p>Good point, PhotonStorm. TypeScript team should probably try to persuade the JS tooling team that JSDoc is what the world is using for JavaScript doc comments, not VSDoc :) (Visual Studio could easily support both to maintain backwards compatibility.)</p>",
    "PostedDate": "2012-11-07T05:35:13.737-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "938557",
    "ThreadId": "397660",
    "Html": "<p>That's true. I would definitely expect the TypeScript team to add JSDoc support to VS if they are going to centralize on it &mdash; which they should, and which their architect already voiced a preference for in this thread.</p>",
    "PostedDate": "2012-11-08T07:02:08.023-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "939824",
    "ThreadId": "397660",
    "Html": "<p>No-one has yet provided a compelling reason why to choose JSDoc over VSDoc other than some very subjective \"it's just better\" or \"it's more widely used\" comments, or arguing towards verbosity (although my counter argument is that that verbosity begets greater legibility). It's like saying lets get rid of HTML in lieu of JavaScript just because HTML is verbose.</p>\r\n<p>So here's my reasons why I think VSDoc would be a better bet for the TypeScript side of the argument (but I would agree that it should convert to JSDoc as best as possible when compiling to JS).</p>\r\n<ol>\r\n<li>VSDoc is widely used within the VISUAL STUDIO software dev community (C# and VB predominantly and starting to creep into C++ thankfully). One can argue that the tooling (such as ReSharper and so on) is already there and strongly supports VSDoc. Requiring Yet Another Documentation Format for people to learn and maintain is just silly. One can argue that there are likely more people out there who understand and use VSDoc on a daily basis compared to those who use JSDoc - so I disagree with&nbsp;the \"it's more widely used\" argument entirely.</li>\r\n<li>Visual Studio has wide support for VSDoc.</li>\r\n<li>Just like HTML, XML is a good way of describing document snippets (which documentation is) and is easy to parse visually. VSDoc is a document snippet format, JSDoc isn't and is therefore the better bet.</li>\r\n</ol>\r\n<p>And then just to respond to some of the comments:</p>\r\n<p>\"It's a lot more 'precise' and concrete.\" - How-so? How is JSDoc more precise than VSDoc? They describe the same things in similar (but different) ways. JSDoc is no more or less 'precise' than VSDoc.</p>\r\n<p>\"VSDoc is a historical mistake.\" - Again, how-so? What makes VSDoc a \"mistake\" according to your view? Is it a mistake purely because it's not JSDoc? How is JSDoc superior, and give hard facts, not opinions.</p>\r\n<p>\"JSDoc is more widely supported compared to VSDoc\" -&nbsp;By which segment of the current and potential future community? I would argue that VSDoc is far more widely supported than JSDoc purely because it's used by a HUGE portion of the current programming community *outside* of web and JavaScript development. If you're only choosing to look at a very small segment of the overall development community (ie. JavaScript developers only vs. .NET and C++ developers for example)&nbsp;then JSDoc is certainly more popular/readily supported.</p>\r\n<p>\"JSDoc should become the new standard for Visual Studio\" - For what reason? VSDoc is already very powerful and capable. What benefits would introducing JSDoc have to the hundreds of thousands to millions of developers who are already familiar with VSDoc? What 'issues' would be solved by replacing VSDoc with JSDoc as the standard? Lets not be unrealistic.</p>\r\n<p>My feeling is that one of the following options should be chosen:</p>\r\n<ol>\r\n<li>VSDoc as the documentation syntax for TypeScript, which can compile down to equivalent JSDoc into the JS files.</li>\r\n<li>The option for either VSDoc or JSDoc syntax in TypeScript (perhaps with compiler flag), with JSDoc being \"copied\" over to the JS and VSDoc being converted.</li>\r\n</ol>\r\n<p>I think option 2 is probably the best since those familiar with either documentation system can then rapidly document in a familiar way while being secure in the knowledge that their documentation will be easily consumable by those tools that understand the JS side of the equation.</p>",
    "PostedDate": "2012-11-11T02:05:00.993-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "939832",
    "ThreadId": "397660",
    "Html": "<p>Tharaxis, don't confuse XML Documentation Comments in C# and VSDoc which is an xmldoc-inspired syntax created specifically for JavaScript. What is probably OK in C# is so very not OK in JavaScript.</p>\r\n<p>In the world of JavaScript libraries, they are either not doc-commented at all, or use JSDoc. Just have a look around. Most of the JavaScript community *today* doesn't use Visual Studio - they love tools like WebStorm, Sublime Text, Vim etc. They are also often on OSes other than Windows so a large part of the community will never get to use Visual Studio, and they will always be using JSDoc, not VSDoc.</p>\r\n<p>If TypeScript / Visual Studio wants to be a welcome citizen in this community, they cannot try to force some proprietary, mostly unknown format on it. If you look at TypeScript syntax, I think it is evident that it has been very smartly designed - although they (at least Anders) have .NET / C# very deep under their skin, they rightly decided not to push .NET conventions, quite to the contrary, TypeScript feels very natural for JavaScript developers. It is only logical that they do the same with doc comments, and it was great to see that the team is aware of this (see the comment of Anders above).</p>",
    "PostedDate": "2012-11-11T03:04:03.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "939836",
    "ThreadId": "397660",
    "Html": "<p>One of the main benefits that TypeScript sells itself on is its ability for JS and TS to coexist happily in the same file. Being able to use any of the hundreds of thousands of JS libs out there without having to convert them all to TS first. By ignoring the documentation standard that they use we then have to manually convert all of those docs to VSDoc format just to be able to use them easily in VS after which they would then be converted back to JSDoc again on build. That seems nuts really.</p>\r\n<p>&nbsp;</p>\r\n<p>I agree there are lots of VSDoc tools in existence, and I've nothing against the format (despite its verbosity) and I don't want to see JSDoc replace it across the board, but TypeScript is a unique case and needs handling as such.</p>",
    "PostedDate": "2012-11-11T03:17:52.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "939837",
    "ThreadId": "397660",
    "Html": "<p>You know, I must say I did get my lines crossed. If you are referring to the current JS documentation syntax within Visual Studio, I agree, it's horrible and should not be used whatsoever. I agree in the sense that any JS output should not use that and should rather conform to whatever community standard has already been set up (in this case that \"standard\" would be JSDoc) - ANY documentation format defined within TypeScript should ultimately output JSDoc.</p>\r\n<p>*However* let me rather retool my original argument then. I feel that the documentation syntax already utilized within C# and so on is what should ultimately be treated as a first-class documentation syntax within <em><strong>TypeScript </strong></em>- it's widely used, widely supported within the tools MS will want to directly target (namely their own), and is widely understood within a large community of developers who maybe want to do JS, but don't know how or have not liked the peculiarities of the language. This does *not* mean that JSDoc cannot also be welcome within that environment, just that MS should not choose to forget their existing developers - if anything it's their existing developers that they're trying to appeal to with this.</p>\r\n<p>Lets not get confused here however, TypeScript is *not* JavaScript, even if it's incredibly close&nbsp;- so it is unnecessary to too strongly foist JS conventions on to the language - a language, mind you that is trying to expand the community of those that understand and can produce JS to those who traditionally would not use the language due to its inability to scale to large projects or conform to a more statically-typed idiom. Sure, TypeScript is for existing JS developers, but it's more specifically for those developers who don't do JS now, but would like to (but have skill in other aspects of development that vanilla JS does not tend towards). Sure, the goal right now is to bring the ideas behind ECMAScript 6 to browsers today (but all the static typing goodness is already outside of spec), but while that is a good starting point I think it's a little too limiting - eventually, if MS supports TS as a first-class language within their tools&nbsp;(which I do hope will happen and believe will) they will eventually try and make it do more.</p>\r\n<p>Finally, let us not confuse personal desires with those of the \"community\" (let each man speak for themselves, I say), and I find it slightly insulting, arrogant and short-sighted&nbsp;that you believe that the community would ignore TS (a useful tool in its own right) purely because it happened to have a different documentation syntax to what they're already familiar with - I would not stop using TS just because it chose JSDoc for example. Maybe individuals would - that would be their loss however - but I feel having an inclusive approach where both documentation styles are supported would be more valuable. I've been a part of this \"community\" (what community exactly - the JS community??) for approaching 11 years now and your desires certainly don't mirror mine.</p>",
    "PostedDate": "2012-11-11T03:34:15.007-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "939841",
    "ThreadId": "397660",
    "Html": "<p>Hi photonstorm</p>\r\n<p>I agree, there are many libraries that use JSDoc right now, and getting some intellisense within the typescript editors that reflect what is described in the JSDoc comments would be awesome. TypeScript consists of multiple \"spheres\" however that documentation would touch.</p>\r\n<ol>\r\n<li>When consuming JS libraries, providing intellisense through JSDoc makes sense since the community is already using this.</li>\r\n<li>When compiling TS to JS, outputting JSDoc makes sense since the community expects this for their own tools.</li>\r\n<li>When consuming TS definitions (used predominantly to describe existing JS&nbsp;libraries), nothing has been defined - being able to generate documentation FROM JSDoc however would be great.</li>\r\n<li>When consuming TS libraries, nothing has been defined.</li>\r\n</ol>\r\n<p>For points 3 and 4, there is no documentation format yet, so there is no need to settle on one or the other, and as long as the resulting JavaScript contains JSDoc and only JSDoc I see no reason for there to be an argument on the matter other than for the purposes of starting holy wars. It eventually comes down which is easier to implement and easier to use. I suspect going JSDoc throughout would mean easier implementation (since you only have to worry about 1 documentation standard instead of 2), but it does serve to get in the way of those who are established within the C#/.NET way of doing things - since MS has decided to also roll out this documentation format for C++ I see no reason that this documentation format would not become a first-class citizen within TS.</p>",
    "PostedDate": "2012-11-11T03:45:03.96-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "939842",
    "ThreadId": "397660",
    "Html": "<p>I did not say that the JS community would reject TypeScript only because of the doc comments syntax. I said that IMO, TypeScript should try to feel as natural as possible to JS developers, including doc comments syntax. That is all.</p>",
    "PostedDate": "2012-11-11T03:45:20.683-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "939844",
    "ThreadId": "397660",
    "Html": "<p>broekb, on that I can agree. No harm no foul.</p>",
    "PostedDate": "2012-11-11T03:51:56.333-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940236",
    "ThreadId": "397660",
    "Html": "\r\n<p>Keep in mind that the TypeScript editor is Microsoft-supported in not only Visual Studio but also in\r\n<a href=\"http://blogs.msdn.com/b/interoperability/archive/2012/10/01/sublime-text-vi-emacs-typescript-enabled.aspx\">\r\nSublimeText2, Emacs, and Vim</a>. &nbsp;The likelihood of developers utilizing those latter three IDEs/editors knowing the VSDoc comment style (vs. the defacto standard JSDoc) is pretty much zero. &nbsp;However, again, in trying to be part of the greater JS\r\n community, Microsoft added support for these non-Microsoft IDEs/editors in an attempt to gain more foothold and feedback because they\r\n<em>know</em>&nbsp;that most of the JS community doesn't use Visual Studio for JavaScript development.<br>\r\n<br>\r\nDon't get me wrong: I love Visual Studio for C# and ASP.NET development but its Intellisense for JS is total crap without having Resharper 6&#43; installed. &nbsp;For JS development, I fallback to the very excellent WebStorm instead.</p>\r\n",
    "PostedDate": "2012-11-12T04:15:32.987-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "947915",
    "ThreadId": "397660",
    "Html": "\r\n<p>&#43;1 jsdoc</p>\r\n<p>I believe Anders and the TypeScript team made the right call when choosing to make TypeScript a&nbsp;super-set&nbsp;of the javascript language. &nbsp;It allows for almost seamless transition between the two languages. &nbsp;Choosing jsdoc for the comment\r\n documenting system follows this philosophy. &nbsp;A majority of the great javascript libraries and components are currently written outside of VisualStudio and even Windows. &nbsp;These libraries, when documented, almost always chose jsdoc. &nbsp;</p>\r\n<p>Microsoft has been know for the 3 Es. I'd like to seem the focus heavily on Embracing and only when all viable community based solutions haven been considered and attempted,&nbsp;Extend. &nbsp;</p>\r\n<p>Top jsdoc feature requests:</p>\r\n<ul>\r\n<li>Intellisense should display descriptions &amp; metadata retrieved from jsdoc, like it does from C# commented with ///\r\n</li><li>Visual Studio IDE should add&nbsp;snippet&nbsp;creation support for jsdoc, similar to&nbsp;typing&nbsp;/// in C#.\r\n</li><li>Add typescript compiler option to include jsdoc comments in compiled js files\r\n</li><li>Automatically include jsdoc tags which can be infered from the source, such as @namespace, @module, @class, @constructor, @method, @param {types} []\r\n</li><li>Add typescript&nbsp;compiler&nbsp;option to add warnings for undocumented symbols\r\n</li></ul>\r\n<p>Pie in the sky feature requests&nbsp;(either):</p>\r\n<ul>\r\n<li>Add&nbsp;real-time&nbsp;jdsoc to&nbsp;declaration&nbsp;interpretation </li><li>Create a tool which can export typescript&nbsp;declaration&nbsp;files from jdsoc\r\n</li></ul>\r\n<p>I am currently working on an open source project to solve the last feature. &nbsp;My goal is to be able to export typescript declaration files from libraries documented with jsdoc. &nbsp;This would save the DefinitlyTyped community a great deal of time.\r\n &nbsp;Also, if it is a simple as running a node app during build, it may encourage the javascript library authors to embrace generating and distributing declaration files with their assemblies.</p>\r\n<p><a href=\"https://github.com/joshheyse/jsdocts\">https://github.com/joshheyse/jsdocts</a></p>\r\n",
    "PostedDate": "2012-11-27T12:30:52.803-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "950161",
    "ThreadId": "397660",
    "Html": "\r\n<p>There is point to the suggestion for a new document format. Here is a comparision of JSDoc and VSDoc using an\r\n<a href=\"http://www.2ality.com/2011/08/jsdoc-intro.html\">example from a JSDoc tutorial</a>:</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Stats: lines = 4, characters = 248</span>\r\nmodule VSDoc {\r\n\r\n    export function repeat(str: <span style=\"color:blue\">string</span>, times: number = 1): <span style=\"color:blue\">string</span> {\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span><span style=\"color:green\">Repeat &lt;tt&gt;str&lt;/tt&gt; several times.&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;str&quot; <span style=\"color:#ff0000\">type=&quot;String&quot;</span>&gt;</span><span style=\"color:green\">The string to repeat.&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;times&quot; <span style=\"color:#ff0000\">type=&quot;Number&quot; default=&quot;1&quot;</span>&gt;</span><span style=\"color:green\">How many times to repeat the string.&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:#ff0000\">&lt;returns type=&quot;String&quot; /&gt;</span>\r\n\r\n        <span style=\"color:blue\">if</span> (times &lt; 1) {\r\n            times = 1;\r\n        }\r\n        <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Array(times + 1).<span style=\"color:blue\">join</span>(str);\r\n    }\r\n}\r\n\r\n<span style=\"color:green\">// Stats: lines = 6, characters = 172</span>\r\nmodule JSDoc {\r\n\r\n    <span style=\"color:green\">/**\r\n     * Repeat &lt;tt&gt;str&lt;/tt&gt; several times.\r\n     * @param <span style=\"color:#ff0000\">{string}</span> str The string to repeat.\r\n     * @param <span style=\"color:#ff0000\">{number}</span> [times<span style=\"color:#ff0000\">=1</span>] How many times to repeat the string.\r\n     * <span style=\"color:#ff0000\">@returns {string}</span>\r\n     */</span>\r\n    export function repeat(str: <span style=\"color:blue\">string</span>, times: number = 1): <span style=\"color:blue\">string</span> {\r\n        <span style=\"color:blue\">if</span> (times &lt; 1) {\r\n            times = 1;\r\n        }\r\n        <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Array(times + 1).<span style=\"color:blue\">join</span>(str);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>From the above it is clear that VSDoc is more verbose in terms of the number of characters in the body of the documentation, but JSDoc requires 2 additional lines. More importantly both types carry rather a lot of redundant baggage - highlighted in red above.\r\n Clearly it does not make sense to simply institute either of these documentation formats in their present form. The documentation above relates to a single function, and it's not too difficult to imagine how this will play out when applied to 20,000 lines\r\n of code.</p>\r\n<p>Removing the redundant information from the JSDoc example, and making a slight change to the document line prefix we have:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Stats: lines = 3, characters = 129</span>\r\nmodule TSDoc {\r\n\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Repeat &lt;tt&gt;str&lt;/tt&gt; several times.</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> @param str The string to repeat.</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> @param times How many times to repeat the string.</span>\r\n    export function repeat(str: <span style=\"color:blue\">string</span>, times: number = 1): <span style=\"color:blue\">string</span> {\r\n        <span style=\"color:blue\">if</span> (times &lt; 1) {\r\n            times = 1;\r\n        }\r\n        <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Array(times + 1).<span style=\"color:blue\">join</span>(str);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>The new format has half the number of lines as JSDoc and 25% fewer characters. The format is also, one hopes, not too foreign for either the JSDoc or the VSDoc camps.</p>\r\n<p>I strongly urge the TS team not to sully TypeScripts reputation by implementing JSDoc. There is a large body of respectable people out there that has never used JSDoc; and the block comment syntax (and all the corresponding asterisks) appear rather clumsy\r\n and old fashioned - harking back to stuff found lurking in C++ header files. The horror!&nbsp;</p>\r\n<p>Of course the compiler can be made to emit one or the other documentation formats into the compiled JavaScript file.</p>\r\n<p>Thanks.</p>\r\n<p>Noel</p>\r\n",
    "PostedDate": "2012-12-02T06:18:01.967-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "982169",
    "ThreadId": "397660",
    "Html": "\r\n<p>Dont really mind&nbsp;which&nbsp;one, but this would be really useful!</p>\r\n",
    "PostedDate": "2013-01-01T14:38:16.97-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "983968",
    "ThreadId": "397660",
    "Html": "\r\n<p>@nabog: wow, that's a really excelent implementation . &nbsp; hope mr H and the typescript crew read it and strongly consider!</p>\r\n<p>&nbsp;</p>\r\n<p>i think the best would be to support your /// format, in addition to parsing &quot;normal&quot; jsdocs that may be pasted in from legacy js codebases.</p>\r\n",
    "PostedDate": "2013-01-07T22:41:48.403-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "984133",
    "ThreadId": "397660",
    "Html": "\r\n<p>This is currently being worked on for the next release.&nbsp; I do like nabog's suggestions, but we ultimately were concerned that it mixes JSDoc style with a VSDoc triple slash, which might be confusing.&nbsp; Agreed we do want to simplify and not require the type\r\n in the JSDoc, so it's now optional, giving you this for the above:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>module TSDoc {\r\n\r\n    <span style=\"color:green\">/** Repeat str several times. <br>     </span><span style=\"color:green\"> * @param str The string to repeat. <br>      * @param times How many times to repeat the string. <br>      */</span>\r\n    <span style=\"color:blue\">export</span> <span style=\"color:blue\">function</span> repeat(str: string, times: number = 1): string {\r\n        <span style=\"color:blue\">if</span> (times &lt; 1) {\r\n            times = 1;\r\n        }\r\n        <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Array(times + 1).join(str);\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2013-01-08T08:52:16.93-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "984174",
    "ThreadId": "397660",
    "Html": "\r\n<p>Perhaps we can do away with the asterisk on each line as well? They seem to perform a purely decorative function and are made redundant by the fact that each subsequent line after the title begins with @param.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>module TSDoc {\n\n   <span style=\"color:green\">/** Repeat str several times. \n       @param str The string to repeat. \n       @param times How many times to repeat the string. \n    */</span>\n    <span style=\"color:blue\">export</span> <span style=\"color:blue\">function</span> repeat(str: string, times: number = 1): string {\n        <span style=\"color:blue\">if</span> (times &lt; 1) {\n            times = 1;\n        }\n        <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Array(times &#43; 1).join(str);\n    }\n}\n</pre>\r\n</div>\r\n",
    "PostedDate": "2013-01-08T11:52:11.957-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "984277",
    "ThreadId": "397660",
    "Html": "\r\n<p>@jonturner: Excellent to see feedback from the dev team, and I'm happy to see you consider compatibility and clarity over efficiency.</p>\r\n<p>For the provided TSDoc example, how would this look in the generated JavaScript file? Will there be JSDoc comments, and will those be completed with type information inferred from the code&nbsp;and&nbsp;overridden&nbsp;if types are explicitly&nbsp;defined in the TSDoc comments?</p>\r\n",
    "PostedDate": "2013-01-08T18:57:27.35-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "984592",
    "ThreadId": "397660",
    "Html": "\r\n<p>@nabog, each subsequent line doesn't necessarily start with an @param.&nbsp; For example, you could have a multiline comment for one of your params.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>module TSDoc {\r\n\r\n    <span style=\"color:green\">/** Repeat str several times.\r\n      * @param str The string to repeat.       \r\n      * @param times How many times to repeat the string. \r\n      * Values of zero or below are silently ignored.\r\n      */</span>\r\n    <span style=\"color:blue\">export</span> <span style=\"color:blue\">function</span> repeat(str: string, times: number = 1): string {\r\n        <span style=\"color:blue\">if</span> (times &lt; 1) {\r\n            times = 1;\r\n        }\r\n        <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Array(times + 1).join(str);\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;@bgever, for this next release we're mostly focusing on getting the IDE experience in place, so that you'll be able to see the parsed comments as part of the intellisense experience.&nbsp; For comment preservation, we aren't currently working on outputting fleshed\r\n out JSDoc.&nbsp; Do you have places in your project you'll need this?</p>\r\n",
    "PostedDate": "2013-01-09T10:21:52.14-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "984681",
    "ThreadId": "397660",
    "Html": "\r\n<p>@jonturner, well yes. That did occur to me.</p>\r\n<p>I presume that in order to parse the block comment one needs to know the following:</p>\r\n<p>- What is the title string? Answer: Parse from the beginning until the first @param.</p>\r\n<p>- What is the first parameter? Answer: Parse from the first @param until the next @param</p>\r\n<p>Repeat until the closing slash.</p>\r\n<p>It's not clear why the asterisk on each line is necessary.</p>\r\n<p>It seems to be purely a whim on the part of the inventor of this monstrosity! :)</p>\r\n<p>&nbsp;</p>\r\n<p>Noel</p>\r\n",
    "PostedDate": "2013-01-09T13:33:14.177-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "984744",
    "ThreadId": "397660",
    "Html": "\r\n<p>agree with nabog,</p>\r\n<p>though since i'm a VS user, if VS could auto-format my asterisk's (similar to how it does c# ///&lt;docs&gt; ) that'd be fine by me.</p>\r\n",
    "PostedDate": "2013-01-09T17:09:18.037-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "984762",
    "ThreadId": "397660",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>jonturner wrote:</strong>\r\n<p>&nbsp;@bgever, for this next release we're mostly focusing on getting the IDE experience in place, so that you'll be able to see the parsed comments as part of the intellisense experience.&nbsp; For comment preservation, we aren't currently working on outputting fleshed\r\n out JSDoc.&nbsp; Do you have places in your project you'll need this?</p>\r\n</blockquote>\r\n<p>I can see places where it would be useful to have comment preservation, although I personally do not have a big need for this now;</p>\r\n<ul>\r\n<li>While debugging generated JS via browser tools, the comments will assist a lot.\r\n</li><li>JS developers will find it easier to make dependencies on TS generated scripts.\r\n</li><li>JSDoc automatic documentation generators will work on the generated JS, without having to support TS.\r\n</li></ul>\r\n",
    "PostedDate": "2013-01-09T18:56:13.177-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985188",
    "ThreadId": "397660",
    "Html": "\r\n<p>If TypeScript is going to support JSDoc it should support JSDoc- period. Not some variant of it. One of the main benefits of having it support JSDoc is so there's compatibility with existing tools (including Google's Closure compiler).</p>\r\n<p>I think something the compiler could and should do is insert the type into the comments upon compilation.&nbsp;</p>\r\n<p>Thus,</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:green\">/** Repeat str several times. \n  * @param str The string to repeat. \n  * @param times How many times to repeat the string. \n  */</span>\n <span style=\"color:blue\">function</span> repeat(str: string, times: number = 1): string {\n    <span style=\"color:blue\">if</span> (times &lt; 1) {\n        times = 1;\n    }\n    <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Array(times &#43; 1).join(str);\n}\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>becomes</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">/** Repeat str several times. \n  * @param str {String} The string to repeat. \n  * @param times {Number} How many times to repeat the string. \n  */</span>\n <span style=\"color:blue\">function</span> repeat(str, times): string {\n\n    <span style=\"color:blue\">if</span>(times === undefined) times = 1\n    <span style=\"color:blue\">if</span> (times &lt; 1) {\n        times = 1;\n    }\n    <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Array(times &#43; 1).join(str);\n}\n</pre>\r\n</div>\r\nafter it's compiled. This would save time and synchronization issues on the part of the developer. The last thing I want is to have to remember to change the type in both the method signature and in the JSDoc comments every time I make a change.\r\n<p></p>\r\n",
    "PostedDate": "2013-01-10T15:04:27.567-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985202",
    "ThreadId": "397660",
    "Html": "\r\n<p>@mgsam: especially since the doc system jonturner describes is so close to jsdoc, &nbsp;I assume that this simplification, AND &quot;full&quot; JSDoc will be supported.</p>\r\n",
    "PostedDate": "2013-01-10T16:55:49.287-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985739",
    "ThreadId": "397660",
    "Html": "\r\n<p>@MgSam I should have also mentioned that the @param we support does also allow you to put in the type as is specified in other JSDoc implementations, so it does align there.&nbsp; We don't have support for other @ attributes, yet, but more may come as needed.</p>\r\n<p>There's a feature request tracking JSDoc and VSDoc output, so that might be a good addition to add to that (if you haven't already).</p>\r\n",
    "PostedDate": "2013-01-11T16:38:09.473-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985836",
    "ThreadId": "397660",
    "Html": "\r\n<p>@jonturner:</p>\r\n<p>I like what I'm seeing.&nbsp;</p>\r\n<p>I would like to suggest that in Visual Studio, these comment blocks be collapsible regions (just as they currently are in C#).</p>\r\n<p>Nick</p>\r\n",
    "PostedDate": "2013-01-12T00:49:13.153-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985929",
    "ThreadId": "397660",
    "Html": "\r\n<p>They've gone for JSDoc, naturally.</p>\r\n<p>http://typescript.codeplex.com/discussions/429373</p>\r\n",
    "PostedDate": "2013-01-12T09:54:58.303-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "991475",
    "ThreadId": "397660",
    "Html": "\r\n<p>XML is a <span style=\"text-decoration:underline\">fantastic</span> format for programs to create, so that other programs can consume.</p>\r\n<p>If a person ever has to read raw XML, then that is a tragedy.</p>\r\n<p>If a person ever has to hand-create XML or hand-modify XML, then that is a dismal state of affairs.&nbsp; Only in dire and rare circumstances should that ever be necessary.</p>\r\n<p>That includes snippets of inline XML&nbsp;as&nbsp;source code documentation.</p>\r\n<p>+1 JSDoc</p>\r\n",
    "PostedDate": "2013-01-24T04:32:40.757-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1061871",
    "ThreadId": "397660",
    "Html": "Guys, <br />\n<br />\nI know it's a small &quot;thing&quot; but I'm not getting auto indentation or other Intelli-type stuff (like adding another line of comments on pressing enter) in VStudio 2012 for JSDoc comments.<br />\n<br />\nDoes this happen to you also or is this clash with another one of my plugins?<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2013-06-27T02:31:36.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1062247",
    "ThreadId": "397660",
    "Html": "i had a number of problems with 0.9.0 performance, which could cause intellisence to misbehave.\r<br />\n<br />\nor, if you are using plugins like resharper, that could cause issues too\r<br />\n<br />\nsome things to try:    clean your solution, close visual studio, delete .suo file.\r<br />\n<br />\nyou could also try 0.8.3.1, if you can live without generics it's much more stable<br />\n",
    "PostedDate": "2013-06-27T18:41:28.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069584",
    "ThreadId": "397660",
    "Html": "I just created a tutorial on how to create TypeScript documentation with YUIDoc's: <a href=\"http://www.codebelt.com/typescript/generate-documentation-for-typescript/\" rel=\"nofollow\">http://www.codebelt.com/typescript/generate-documentation-for-typescript/</a><br />\n",
    "PostedDate": "2013-07-17T08:58:42.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069843",
    "ThreadId": "397660",
    "Html": "good effort, but I'd expect a proper typescript doc system to take advantage of the typings / metadata typescript provides.   to me, needing to re-implement the signatures inside a documentation block is a non-starter<br />\n",
    "PostedDate": "2013-07-17T21:54:32.27-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1092935",
    "ThreadId": "397660",
    "Html": "Hey, there's a ton of people who like XML comments better than JSDoc.\r<br />\n<br />\nCan't we just have both please?<br />\n",
    "PostedDate": "2013-09-15T15:12:05.277-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1140758",
    "ThreadId": "397660",
    "Html": "After reading this topic I agree that JSDoc makes more sense. It is more clear and TypeScript is almost Javascript. Makes sense to keep only one.<br />\n<pre><code>    /// &lt;summary&gt; Text text and more text\n    /// new lines as well\n    /// &lt;param&gt; The name is on the method, so is the type\n    /// cool\n    /// &lt;param&gt; Another parameter\n    /// nice\n    /// &lt;param&gt; Hey I don't exist, compilation error?\n    /// &lt;remarks&gt; This looks nice\n    /// or not?\n    /// &lt;returns&gt; Something, you know my type it is just below\n    Foo(public x: number, public y: number): Bar\n    { \n    }</code></pre>\n\n<pre><code>    /// @summary Text text and more text\n    /// new lines as well\n    /// @param The name is on the method, so is the type\n    /// cool\n    /// @param Another parameter\n    /// nice\n    /// @param Hey I don't exist, compilation error?\n    /// @remarks This looks nice\n    /// or not?\n    /// @returns Something, you know my type it is just bellow\n    Foo(public x: number, public y: number): Bar\n    { \n    }</code></pre>\n\nI wrote the above codes to check what is looks like, I was also thinking what it would be like in C#. I'm guessing both look awful...<br />\n",
    "PostedDate": "2013-12-22T19:28:26.633-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1201560",
    "ThreadId": "397660",
    "Html": "I personally would prefer XML documentation, with a schema specialized for TypeScript constructs such as generics which aren't supported in JavaScript.\r<br />\n<br />\nEither way, for this to be useful, there has to be a way to have the documentation template automatically generated, in much the same way /// comments are.<br />\n",
    "PostedDate": "2014-02-01T00:04:44.677-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]