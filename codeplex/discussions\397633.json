[
  {
    "Id": "920337",
    "ThreadId": "397633",
    "Html": "\r\n<p>As Anders explains in the video on Channel 9, TypeScript seems to be trying to&nbsp;preemptively&nbsp;support some of ECMAScript 6's features (C#-style lambdas, classes, etc.). Are there any plans to support &quot;let&quot; (and thus enforce block scoping) or &quot;const&quot;\r\n (to declare constants)? These are both nice features that seem like they could be supported in TypeScript with a relatively small footprint.</p>\r\n<p>Furthermore, on the subject of a &quot;const&quot;, it seems like this a great area where the compiler could optionally perform an optimization by replacing all the constants with their actual values. Perhaps a compilation flag?</p>\r\n",
    "PostedDate": "2012-10-01T19:56:43.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920558",
    "ThreadId": "397633",
    "Html": "<p>TypeScript aims to generate simple and clean JavaScript code which can run in ECMAScript3 compatible environments.&nbsp; One of the challenges with supporting block-scoped let/const in ES3/ES5 environments is that they can require a thicker layer of code generation to run in existing JavaScript engines with correct semantics.&nbsp; For example, let inside a loop is allocated fresh per loop body, which requires generating an additional closure to model on ES3/ES5.&nbsp; Also, name shadowing in nested scopes is legal with let, but would require either renaming (which we avoid so far in TypeScript) or more additional closure generation.&nbsp;</p>\r\n<p>We expect to ultimately add support for ES6 features like 'let' and 'const' at the very least targeting ES6 runtime environments in the future.&nbsp; However, due to the code generation (and therefore performance predictability, debuggability, etc.), it's not as clear yet that we'll be able to introduce let/const support targeting ES3/ES5.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-02T06:18:32.077-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922874",
    "ThreadId": "397633",
    "Html": "<p>I understand the need to ensure for compatibility for existing (and future JavaScript), but couldn't a typed 'var' be subject to 'use before set' checking?</p>\r\n<p>so:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>{\r\n     x = 10;\r\n     <span style=\"color: blue;\">var</span> x : number;  <span style=\"color: green;\">// illegal</span>\r\n}\r\n</pre>\r\n</div>\r\n<p>This way you know that the developer is using TypeScript and is not using regular JS.&nbsp; For ES6 the typed var declaration could be generated as a let statement.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-06T09:53:20.787-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922993",
    "ThreadId": "397633",
    "Html": "<p>We also use let and const in our server-side and XUL application based on Mozilla's SpiderMonkey. SpiderMonkey supports let and const.</p>\r\n<p>So it would be nice if TypeScript could at least just leave these keywords in the resulting JavaScript and handle it internally like var.</p>",
    "PostedDate": "2012-10-07T01:36:48.403-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "936182",
    "ThreadId": "397633",
    "Html": "<p>+1</p>\r\n<p>Also working with Mozilla code. For me it would be enough to have a command-line option that turns off errors for \"let\" and \"const\", so that i can compile with VS</p>",
    "PostedDate": "2012-11-03T16:22:16.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "957584",
    "ThreadId": "397633",
    "Html": "\r\n<p>TypeScript's compiler (tsc) targets ES3 and ES5.</p>\r\n<p>The <strong>const </strong>keyword was introduced with JavaScript 1.5 (2000).&nbsp; TypeScript does not target JS1.5 (2000) through JS1.8.6 (present).</p>\r\n<p>My expectation is that TypeScript will target ES6 sometime after ES6 becomes an approved standard.&nbsp;&nbsp;Assuming ES6 includes\r\n<strong>const </strong>and <strong>let </strong>&lt;<a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-12.2.1\">http://people.mozilla.org/~jorendorff/es6-draft.html#sec-12.2.1</a>&gt; as anticipated.</p>\r\n<p>I don't know what the expectation is for TypeScript to&nbsp;retcon those ES6 features for ES3 and ES5 targets.&nbsp; Or if the compiler will error for ES6-isms that are not retcon'd for ES3 and ES5; or silently fallback to just\r\n<strong>var</strong>.</p>\r\n",
    "PostedDate": "2012-12-18T04:56:58.163-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "957612",
    "ThreadId": "397633",
    "Html": "\r\n<p>It seems unlikely they would silently fall back to <em>var</em> in the case of\r\n<em>let, </em>as the two keywords have different scoping rules.</p>\r\n",
    "PostedDate": "2012-12-18T05:48:19.467-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]