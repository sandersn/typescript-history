[
  {
    "Id": "1226945",
    "ThreadId": "540212",
    "Html": "Trying my best to pick the right terminology:<br />\n<ul>\n<li>Is there a semantic difference in defining a method of an interface using function syntax compared to lambda syntax?</li>\n<li>\nIf so, is this by design?<br />\n</li>\n</ul>\nConsider an external module:<br />\n<pre><code>// some interface with a method\nexport interface Foo {\n    bar(): void;\n}\n\n// function at a module level with the same name as the method but different signature\nexport function bar(value: string): void {\n}\n\nvar one: Foo = {\n    bar() {\n        bar('Hey!'); // doesn't work\n    }\n};\n\nvar another: Foo = {\n    bar: () =&gt; bar('Hey!') // works\n};</code></pre>\n\n",
    "PostedDate": "2014-03-26T08:16:36.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1227046",
    "ThreadId": "540212",
    "Html": "Looks like a bug, they should be equivalent. This discussion has been copied to a work item. Click <a href=\"https://typescript.codeplex.com/workitem/2358\" rel=\"nofollow\">here</a> to go to the work item and continue the discussion.<br />\n",
    "PostedDate": "2014-03-26T11:10:37.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]