{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex issues and suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some issues and feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:20:16.27-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "Shouldn't every object inherit functions from Object? I tried Object.prototype.isPrototypeOf in my own class object:\r\n\r\n    static isMatrix(object: any) {\r\n        return this.prototype.isPrototypeOf(object);\r\n    }\r\n\r\n... but ended with\r\n\r\n    static isMatrix(object: any) {\r\n        return (<Object>this.prototype).isPrototypeOf(object);\r\n    }\r\n\r\n... which seems redundant for me. Numbers and strings also inherit from Object in JavaScript, but TypeScript seems not declare this properly.\r\n\r\n**Update:**\r\n\r\nActually *this.prototype.isPrototypeOf* does not cause any error and is correctly detected as *Object.isPrototypeOf*. However, I still cannot see .isPrototypeOf method in auto-completion list. Is this just a VS2013 bug?\r\n",
    "LastUpdatedDate": "2014-07-28T15:20:16.27-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-06-29T10:01:19.887-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Inheritance from \"Object\" object",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2586
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I believe this is just to cut down on the noise in the completion lists.\n\nFrom my experience the properties and methods of Object are not what one is looking for when an object is \"dotted\" 99% of the time.\n\nNote that in spite of it not being displayed the compiler does not produce an error:\n\n```TypeScript\nvar foo = {}; \n\nvar bar = foo.hasOwnProperty('foo'); // No error\n\nvar baz = foo.hasOwnProperty2('foo'); // Error: hasOwnProperty2 does not exist...\n```\n\nI prefer it this way.",
      "PostedDate": "2014-06-30T02:30:59.347-07:00",
      "Id": 151121
    },
    {
      "Message": "I understand that, but it's somewhat confusing for who finds those methods. Anyway, I don't use those ones very often, either.",
      "PostedDate": "2014-07-01T12:37:33.753-07:00",
      "Id": 151277
    },
    {
      "Message": "I would anyway prefer to see them at least at the bottom of the list, rather than completely missing them...",
      "PostedDate": "2014-07-01T12:45:58.043-07:00",
      "Id": 151279
    },
    {
      "Message": "I personally think that if TypeScript wants to stay true to JavaScript (just adding mostly a type layer), it shouldn't hide methods _expected_ by JS developers (those inherited by the prototype naturally).  I think it should show by default, and an intellisense option be added to hide it if necessary.\n",
      "PostedDate": "2014-07-01T21:25:47.657-07:00",
      "Id": 151317
    }
  ]
}