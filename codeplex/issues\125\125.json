{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:22.11-07:00",
    "CommentCount": 17,
    "Custom": null,
    "Description": "I would like to know if the \"protected\" keyword will be implemented eventually ?\r\nRight now, it doesn't seems to work.\r\n\r\nBy the way, great job ! I really like TypeScript :D",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 1.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-05T13:44:25.373-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "protected keyword",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 171,
    "Id": 125
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "It was part of the at-name proposal, but has been deferred to ES7 and will have it's own strawman. The proposal begins here http://wiki.ecmascript.org/doku.php?id=strawman:syntactic_support_for_private_names#class_protected_name_declarations",
      "PostedDate": "2012-10-05T16:41:18.367-07:00",
      "Id": 78764
    },
    {
      "Message": "If added to TypeScript, 'protected' would be similar to TypeScript's current 'private' in that it would not have any runtime manifestation at least when targeting ES3/ES5.  That said, we are hesitant to continue to add complexity to the ad-hoc visibility options - especially before seeing what the runtime options that could support these look like in ES6/ES7 plans.  ",
      "PostedDate": "2012-12-02T22:29:59.117-08:00",
      "Id": 83436
    },
    {
      "Message": "In the short term would be happy to have protected as the equivalent of\n```\n#define protected public\n```\n\ni.e.just to signal intent until a more rigorous solution can be implemented as per LukeH's comment.",
      "PostedDate": "2013-03-20T14:26:36.31-07:00",
      "Id": 93825
    },
    {
      "Message": "+1 for \"#define protected public\" and compile-time scope validation",
      "PostedDate": "2013-03-22T02:00:17.193-07:00",
      "Id": 94050
    },
    {
      "Message": "+1 for \"#define protected public\", even if it's not causal. \n\nBut it would be nice to have protected enforced by the compiler, even without runtime ramifications.",
      "PostedDate": "2013-05-21T09:37:45.807-07:00",
      "Id": 100765
    },
    {
      "Message": "We really need protected keyword support. I find myself constantly doing this:\n\npublic /* protected */ _myProtectedField;\n\nor\n\npublic _doSomethingProtected() { ... }\n\nNote I am using the convention of public underscored fields and methods to allow me to flag and access these pseudo-protected members. The underscore reminds me not to use it outside the class, but it would be really nice if the compiler enforced it. No need for actual protection at runtime of course.\n\nThis should be trivial to implement, right?",
      "PostedDate": "2013-05-22T16:46:03.537-07:00",
      "Id": 100931
    },
    {
      "Message": "Big time +1\n\nI also find myself starting out with `private` members, and then having to make lots of members `public` that actually would/should be `protected` in other languages.\n\nOn a related note, I really hope `internal` gets implemented - in larger, modular libraries, having members that are accessible only to other classes in the same module, would be a huge advantage.\n\nCurrently the two most crucial missing features for me in TS...",
      "PostedDate": "2013-09-13T14:08:54.957-07:00",
      "Id": 113528
    },
    {
      "Message": "Yes, I find myself wanting to enforce this at the TS level also (I'm aware that protected may still be accessible regardless if one wanted to, but it all boils down projecting the intended usage).",
      "PostedDate": "2013-10-09T08:43:49.387-07:00",
      "Id": 117930
    },
    {
      "Message": "Just to add:  This is a big requirement when writing APIs for end users.",
      "PostedDate": "2013-10-09T08:45:31.333-07:00",
      "Id": 117933
    },
    {
      "Message": "It would be good that protected members (typically starting with underscores) are not shown in intellisence outside of classes. They should not distract end users.",
      "PostedDate": "2013-10-15T00:36:41.59-07:00",
      "Id": 118434
    },
    {
      "Message": "The biggest problem I think is, that we have to use public to prevent warnings. but why should i make fields public, when I plan to make them accessible only via getters and setters. I think it's one of the most needed features. Why implement all that stuff when there's such a big hole at the basis of the whole object oriented mechansims of TypeScript?!",
      "PostedDate": "2013-12-13T06:27:52.267-08:00",
      "Id": 127347
    },
    {
      "Message": "This is a must have feature, especially if we ever want to produce an optimized output from TSC.exe",
      "PostedDate": "2014-02-06T00:35:43.153-08:00",
      "Id": 132799
    },
    {
      "Message": "+1 to make life easier for consumers of our classes",
      "PostedDate": "2014-02-15T11:16:24.767-08:00",
      "Id": 133662
    },
    {
      "Message": "this would be quite useful to have..",
      "PostedDate": "2014-04-05T07:56:23.707-07:00",
      "Id": 140657
    },
    {
      "Message": "Btw, what is the hold up here? It actually works already with private accessors, calling super.myMethod() works too, but the compiler error is annoying, all that would be needed is that to go away, if protected is actually not gonna be added.",
      "PostedDate": "2014-04-05T08:07:59.157-07:00",
      "Id": 140658
    },
    {
      "Message": "+1\n\nMainly using PHP, but constantely writing frontend code, too, I switched to TypeScript as my frontend Javascript base of choice, to be able to write more strict and more robust object oriented code (And it feels great, by the way. I like TypeScript a lot!).\n\nThat being said, I was really surprised that there is no \"protected\" keyword, as it is a quite fundamental OOP feature.\n\nHowever, I do understand your decision to postpone this feature, but seriously hope it will be going to be implemented rather sooner than later.\n\nFor the time being I'm going to treat public methods and attributes prefixed with an underscore as protected.\n\nRegards,\nPatrick\n ",
      "PostedDate": "2014-04-16T03:28:33.673-07:00",
      "Id": 142066
    },
    {
      "Message": "+1\n\nBasically, we are waiting for ES-committee to make a decision, just in case their implementation is incompatible with normal behaviour of protected?",
      "PostedDate": "2014-07-04T10:27:57.773-07:00",
      "Id": 151623
    }
  ]
}