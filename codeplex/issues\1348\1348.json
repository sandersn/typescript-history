{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-07-15T09:49:59.903-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "The following code compiles fine.\r\n\r\n```\r\nclass Class {\r\n\taction: (Class, TValue) => void;\r\n}\r\n\r\nvar classInstance =  new Class();\r\nclassInstance.action = (c, v) => {};\r\n```\r\n\r\nThe generic equivalent does not.\r\n\r\n```\r\n//Does not compile\r\nclass GenericClass<TValue> {\r\n\taction: (GenericClass<TValue>, TValue) => void;\r\n}\r\n\r\nvar genericClassInstance = new GenericClass<string>();\r\ngenericClassInstance.action = (p, v) => {}\r\n```\r\n\r\nWhen trying to assign the action in the second example, I get the following error as a tooltip:\r\n\r\n    \"Cannot convert '(p: any, v: any) => void' to '(GenericClass?: any, TValue: any) => void':\r\n    Call signatures of types '(p: any, v: any) => void' and '(GenericClass?: any, TValue: any) => void' are     \r\n    incompatible:\r\n    Call signature expects 1 or fewer parameters.\r\n    (GenericClass?: any, TValue: any) => void\"\r\n\r\nThis behavior is reproducible on the playground and in Visual Studio.",
    "LastUpdatedDate": "2013-08-13T09:43:20.707-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-14T11:25:27.25-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Parsing generics on function type signatures.",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1348
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "```    action: (GenericClass<TValue>, TValue) => void;```\n\nShould be:\n\n```    action: (arg: GenericClass<TValue>, TValue) => void;```",
      "PostedDate": "2013-07-15T09:49:55.83-07:00",
      "Id": 106063
    },
    {
      "Message": "It is odd to me that the generic type needs to be qualified with an argument name, but the non-generic does not.\n",
      "PostedDate": "2013-07-15T18:58:32.947-07:00",
      "Id": 106123
    },
    {
      "Message": "But thank you!",
      "PostedDate": "2013-07-15T18:58:40.373-07:00",
      "Id": 106124
    },
    {
      "Message": "Right, should have said action: ```(arg: GenericClass<TValue>, val: TValue) => void```",
      "PostedDate": "2013-08-13T09:43:20.707-07:00",
      "Id": 109626
    }
  ]
}