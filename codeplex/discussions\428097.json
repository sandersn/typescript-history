[
  {
    "Id": "981928",
    "ThreadId": "428097",
    "Html": "\r\n<p>While i can fully understand that there is no possibility to add true &quot;r<span>eflection</span>&quot; support to typescript without generating a lot of code that would make output javascript less &quot;comprehensive&quot; and bigger; I do think that there is still some\r\n possibility of having some 'basic r<span>eflection</span>' without too much effort.</p>\r\n<p>For example one drawback of the prototype based inheritance is the fact that you never really know class hierarchy used to create an object ( you could know it with __proto__ but it is not supported by all browsers).<br>\r\nSince with typescript inheritance is&nbsp;achieved&nbsp;by the __extends function, why not injecting a property referencing base class in the sub class, for example :</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> A { }\n<span style=\"color:blue\">class</span> B <span style=\"color:blue\">extends</span> A { }\n\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Would be translated to :</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> __extends = <span style=\"color:blue\">this</span>.__extends || <span style=\"color:blue\">function</span> (d, b) {\n    <span style=\"color:blue\">function</span> __() { <span style=\"color:blue\">this</span>.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = <span style=\"color:blue\">new</span> __();\n    d.__baseClass__ = b;\n};\n<span style=\"color:blue\">var</span> A = (<span style=\"color:blue\">function</span> () {\n    <span style=\"color:blue\">function</span> A() { }\n    <span style=\"color:blue\">return</span> A;\n})();\n<span style=\"color:blue\">var</span> B = (<span style=\"color:blue\">function</span> (_super) {\n    __extends(B, _super);\n    <span style=\"color:blue\">function</span> B() {\n        _super.apply(<span style=\"color:blue\">this</span>, arguments);\n\n    }\n    <span style=\"color:blue\">return</span> B;\n})(A);\n\n<br></pre>\r\n</div>\r\n<p>So with 'constructor' and &nbsp;'__baseClass__' we would be able to access the whole inheritance chain.</p>\r\n",
    "PostedDate": "2012-12-31T04:35:23.193-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "982690",
    "ThreadId": "428097",
    "Html": "\r\n<p>This kind of modification should be pretty easy to do (my guess is that it would go&nbsp;in emitJavascriptClass in emitter.ts).&nbsp; In general, we wouldn't want to add this because we try to keep codegen to an absolute minimum (keeping as close to the original JavaScript\r\n as possible).&nbsp; Also in general, reflection would need to cover more than just whether or not a class extends another, but also what its shape is.&nbsp; This would work for some things, but not (I believe) for functions.</p>\r\n",
    "PostedDate": "2013-01-03T08:03:21.333-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]