[
  {
    "Id": "1134520",
    "ThreadId": "473005",
    "Html": "There have been a few issues related to continuous integration build servers, and some deployment issues. As these issues are currently blocking TS adoption for us (and I suspect others), I think these issues need to be included for the planned 1.0 release.\r<br />\n<br />\nReference Issue (I think there are a few other related issues filed): <a href=\"https://typescript.codeplex.com/workitem/1375\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/1375</a>\r<br />\n<br />\nTL;DR: the TypeScript .target files require TypeScript to be installed globally. I am a peon, and cannot ask for TypeScript to be installed globally on the build server. And, even if I had that awesome power, I would not because then every single project using that build server would have to use the same version of the TypeScript compiler.\r<br />\n<br />\nHas there been any movement on this? My current workaround involves copying the MSBuild .target files and the compiler files and dlls from their installed location in C:/Program Files (x86) into a Tools directory we check into TFS. And then, I have to additionally hack the .target file and our .csproj's reference to it to make it point to this local version of the TypeScript compiler and build tasks. That being said, web deploy still doesn't work as the generated .js files still are not deployed (not sure if this is due to my hack or for other reasons). So this is blocking even test adoption.\r<br />\n<br />\nIf the NuGet-deployed compiler option were implemented, then the only thing that would be installed globally would be the language service, which would use the project-local version of the TS compiler for both intellisense and compile-on-save (compile on build of course must work without the language service installed), within some reasonable range of minor compiler versions.<br />\n",
    "PostedDate": "2013-12-11T12:23:26.17-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]