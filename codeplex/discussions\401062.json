[
  {
    "Id": "933609",
    "ThreadId": "401062",
    "Html": "\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> value = funcThatReturnsBool;\n\n<span style=\"color:blue\">if</span> ( value ) {\n\n\tconsole.log( <span style=\"color:#a31515\">'value is true'</span> );\n\n}\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Consider the above TypeScript code. &nbsp;There is of course a bug in it. &nbsp;The programmer meant for value to equal the return of funcThatReturnsBool and not the function itself. &nbsp; Things like this cause headaches especially since for now the program\r\n output might be correct. &nbsp; It would be nice if the compiler could realize that value should be of type bool and not ()=&gt;bool.</p>\r\n<p>&nbsp;</p>\r\n<p>If the compiler complained every time a control structure test didn't evaluate to any or bool it would eliminate a lot of these sort of bugs. &nbsp;You would still be able to test if an object exists by comparing to 'undefined' &nbsp; What does everyone\r\n think?</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><br></pre>\r\n</div>\r\n",
    "PostedDate": "2012-10-28T18:51:59.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "933659",
    "ThreadId": "401062",
    "Html": "\r\n<p>It is common for JavaScript to use if (x) to check if x is null.</p>\r\n<p>Your suggestion would render all such code invalid.</p>\r\n<p>&nbsp;</p>\r\n<p>One valid alternative would be to add control flow check, which would&nbsp;warn when an argument of 'if' is statically known to be not-null.</p>\r\n<p>&nbsp;</p>\r\n<p>The downside of such feature is that control flow analysis of potentially expensive. But on the upside it will catch that error.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#888888\">P. S. Man this editor is quacky when used from mobile browser.&nbsp;</span></p>\r\n",
    "PostedDate": "2012-10-29T01:03:49.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "933979",
    "ThreadId": "401062",
    "Html": "<p>So you are forcing the user to write this in other situations:</p>\r\n<p>if (maybe != null &amp;&amp; maybe != undefined)</p>\r\n<p>Coffeescript adds an existenial question mark operator, so the above looks like:</p>\r\n<p>if (maybe?)</p>\r\n<p>That would make this suggested change much easier on users. But TypeScript follows the javascript specification and I don't think there is an existential operator planned.</p>\r\n<p>An alternative would be to write your own typed function:</p>\r\n<p>ifBool(value, () =&gt; console.log('value is true'))</p>\r\n<p>Of course, this no longer looks like a control structure. So an alternative feature request would be to ask for the ability to create control structures. This also seems outside the goals of TypedScript, but I am hoping that sweet.js can be integrated with TypedScript to accomplish it.</p>",
    "PostedDate": "2012-10-29T14:07:04.593-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]