{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:41.173-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Settings like `--out` and `--module` are command-line switches that actually affect the interpretation of the code... shouldn't these be directives, so that the IDE can know about these settings? And so you don't need to explain in a README file how to build the project.\r\n\r\n(don't most compiled languages have directives as well as command-line switches, or build-files, some way to specify these settings in a more permanent way?)\r\n\r\nTo pinpoint a precise problem that I am currently struggling with, take this file:\r\n\r\n```\r\nexport function foo() {}\r\nexport function bar() {}\r\n```\r\n\r\nWhen compiled without `--module`, the output code creates two top-level variables, `foo` and `bar`.\r\n\r\nWhen compiled with `--module`, the output is no longer two variables, but one variable with two properties, `foo` and `bar`.\r\n\r\nThese two interpretations of that same code aren't compatible at all - if I load the version compiled without `--module`, I can access the two symbols `foo` and `bar` directly; but if I compile the same code with `--module`, suddenly I have *one* variable (instead of two) from which I need to dereference `foo` and `bar` as *properties* of another object to access them.\r\n\r\nAs far as my understanding, this makes it impossible to simply \"switch\" between those two modes of compilation, as other code written with the expectation of either one or the other (a single object or multiple symbols) will no longer be compatible after changing the compilation mode, at all.\r\n\r\nIn other words, there is a hard dependency on the compilation mode, since top-level exports in a module are totally different from top-level exports in an application.\r\n\r\nHow to you reconcile that?",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-11-11T08:18:26.51-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Feature: directives for (or instead of?) command-line switches",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1884
  },
  "FileAttachments": [],
  "Comments": []
}