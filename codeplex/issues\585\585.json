{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:56.347-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "Some AMD libraries (e.g. Dojo) allow for modules to be defined either by passing it through a toolkit specific \"declare\" function or by returning an object itself. This return value could be simply a variable, some text, or a function call.\n\nIn order to leverage Dojo and Typescript together, the typescript compiler should allow for customized return values for the exported class. \n\nFor example:\nimport dojo_declare = module(\"dojo/_base/declare\");\nimport _Widget = module(\"dijit/_Widget\");\nimport _Mixin = module(\"dijit/_MixinType\");\n\nexport class DojoClass\n{\n    private privateMember:number;\n    constructor()\n    {\n        this.privateMember = 1;\n    }\n\n    public Fn()\n    { \n    }    \n\n    return dojo_declare(\"My Class\", [_Widget, _Mixin], DojoClass);\n}\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-01-02T15:09:14.403-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Add ability to return outside of a function",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 5,
    "Id": 585
  },
  "FileAttachments": [
    {
      "FileId": 597042,
      "FileName": "FeatureRequest.ts",
      "DownloadUrl": ".\\597042"
    }
  ],
  "Comments": [
    {
      "Message": "Assigning to Jonathan",
      "PostedDate": "2013-01-03T15:32:43.707-08:00",
      "Id": 85339
    },
    {
      "Message": "@neville1355:  Does this version of your code accomplish what you want:\n\n```\nimport dojo_declare = module(\"dojo/_base/declare\");\nimport _Widget = module(\"dijit/_Widget\");\nimport _Mixin = module(\"dijit/_MixinType\");\n\nexport class DojoClass\n{\n    private privateMember:number;\n    constructor()\n    {\n        this.privateMember = 1;\n    }\n\n    public Fn()\n    { \n    }    \n\n}\ndojo_declare(\"My Class\", [_Widget, _Mixin], DojoClass);\n```\n\nBeing able to do something like this without a separate declaration is something that a \"decorator\" mechanism like as in Python would ideally enable.  There have been some early discussions about this sort of extension to ECMAScript 6 classes, but there is a large design space to develop to support this broadly.\n\nThere is some work that Ron Buckton has done on a fork of TypeScript that supports decorators, which you may want to take a look at: http://typescript.codeplex.com/SourceControl/network/forks/rbuckton/Decorators.  But currently this is not expected to be part of TypeScript 1.0.  If the above or similar workarounds are not possible, that would be interesting data.  ",
      "PostedDate": "2013-01-30T16:30:15.967-08:00",
      "Id": 87840
    }
  ]
}