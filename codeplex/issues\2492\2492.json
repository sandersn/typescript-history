{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2014-05-06T15:26:46.303-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "hello...\r\n\r\nusing VS 2013 I created a C# class library project and added a TS file to it... I noticed that when I build the C# project, the TS file is not compiled. I confirmed the build action of the TS file is set to tscompile... I thought in VS 2013 TS was made core to the environment such that it would not be necessary to manually tweak the project file... is this an incorrect understanding? any ideas on what the issue may be?\r\n\r\nthank you",
    "LastUpdatedDate": "2014-05-08T11:43:39.823-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-05-06T14:01:43.35-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "cannot compile TS file in C# class library",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2492
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "You need to use TypeScript files in supported project types, namely TypeScript HTML Apps or ASP.NET apps. You cannot use a loose .ts file in a C# project same as you could not use a loose .cpp or .vb file in that project. The project type is what defines how things like TSCompile work, a C# project does not know what that action means. ",
      "PostedDate": "2014-05-06T15:26:41.53-07:00",
      "Id": 145740
    },
    {
      "Message": "It's funny though how the compiler is run to give code error feedback, though it never compiles to a .js file, and the displayed errors never block the app from actually executing. ;)\n\nPersonally I had need to compile .ts files as part of a C# WPF project, and include the .js files with the output, but alas it doesn't work that way (would be nice though! [hint hint] ;) ).",
      "PostedDate": "2014-05-06T17:54:33.2-07:00",
      "Id": 145743
    },
    {
      "Message": "\nYou can acheive this be editing the project file directly (perhaps unsupported), find the line below \n\n```\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n```\n\nand change it to\n\n```\n <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n  <Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\" />\n```\n\n ",
      "PostedDate": "2014-05-08T11:43:39.823-07:00",
      "Id": 145945
    }
  ]
}