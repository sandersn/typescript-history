[
  {
    "Id": "1230743",
    "ThreadId": "541315",
    "Html": "I would love to see decimal type in TypeScript . It would make Typescript better.<br />\n",
    "PostedDate": "2014-04-05T10:10:39.093-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1230756",
    "ThreadId": "541315",
    "Html": "\r\n<div>\r\n<div style=\"font-size:11pt; font-family:Calibri,sans-serif\">TypeScript only allows you to specify JavaScript types (or TypeScript interfaces). JS just has &quot;number&quot;, with no concept of integers or reals.</div>\r\n</div>\r\n<div dir=\"ltr\">\r\n<hr>\r\n<span style=\"font-size:11pt; font-family:Calibri,sans-serif; font-weight:bold\"></span></div>\r\n",
    "PostedDate": "2014-04-05T11:29:45.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1230784",
    "ThreadId": "541315",
    "Html": "Correct, decimal === number.  They are both 64 bit floats.<br />\n",
    "PostedDate": "2014-04-05T13:49:10.3-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1230864",
    "ThreadId": "541315",
    "Html": "As far as I know decimal is 128 bit in C#. <br />\n",
    "PostedDate": "2014-04-06T01:19:07.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1230912",
    "ThreadId": "541315",
    "Html": "Yes, sorry, I was thinking &quot;double&quot; - must have been half asleep.  Anyhow, if I recall, precision is probably why they cannot be the same.  Someone may enter &quot;decimal&quot; for monetary calculations and find it is wrong.  Go ahead and try typing &quot;cents = 0.2 + 0.1&quot; in any JS console and you will get &quot;0.30000000000000004&quot;.  Why? Because &quot;double&quot; fractions are binary related, and decimal are base 10.  As well, &quot;double&quot; can hold more digits (because of the lower precision [and being binary based]).<br />\n<br />\nAnyhow, most people would probably recommend using integers to store the whole number and fractional portions of monetary values, then combine them on output.  There are many JavaScript libraries for this very purpose (BigNumber, BigDecimal, etc.).<br />\n",
    "PostedDate": "2014-04-06T06:24:53.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1231229",
    "ThreadId": "541315",
    "Html": "There's a suggestion out for this: <a href=\"https://typescript.codeplex.com/workitem/1858\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/1858</a>\r<br />\n<br />\nI personally haven't voted for it, because I don't see the point for it, but that is from my usage perspective.<br />\n",
    "PostedDate": "2014-04-07T05:12:07.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]