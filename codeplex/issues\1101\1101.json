{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Two options:\n\n1. Replace 'var some = <Some> _some\" with just \"var some = Some\", if Some is the actual instance being dealt with\n2. Otherwise, change Some to be an interface\n",
    "ClosedDate": "2013-06-05T12:44:12.473-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "TypeScript 0.8.x had this nice feature where I could treat a \"module\" as an interface:\r\n```\r\nmodule Some {\r\n   export var X: number;\r\n}\r\n\r\n...\r\n\r\ndefine( ['Some'], _some => {\r\n\r\n    // I know that _some is going to be of the right type,\r\n    // but I cannot use \"import x = module()\", because\r\n    // that module is not a TS one.\r\n    // Fortunately, I can just trick the compiler:\r\n    var some = <Some> _some;\r\n\r\n    some.X = 5;\r\n\r\n} );\r\n\r\n```\r\n\r\nThis was very useful while constructing fragile bridges between legacy code and newer TypeScript code. This feature allowed me to make those bridges less fragile by keeping the untyped area the an absolute minimum.\r\n\r\nAnother use case (but dealing with ambient modules) I have is described here: https://typescript.codeplex.com/workitem/934\r\n\r\nTS 0.9.0, however, no longer allows this. Please bring it back.",
    "LastUpdatedDate": "2013-06-05T12:44:12.473-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-06-03T10:30:40.123-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Treat module as interface (0.9.0 beta)",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1101
  },
  "FileAttachments": [],
  "Comments": []
}