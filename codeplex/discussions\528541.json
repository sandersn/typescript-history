[
  {
    "Id": "1201394",
    "ThreadId": "528541",
    "Html": "Hi,\r<br />\n<br />\nI'm building a SPA using Typescript - everything was going very well until I started to internationalise the project. I'm using the i18n requirejs plugin to load in resources, using;\r<br />\n<br />\nimport _langModule = require(&quot;i18n!blah/etc&quot;);\r<br />\n<br />\n...but now I have a load of;\r<br />\n<br />\n&quot;Build: Unable to resolve external module '&quot;i18n!blah/etc&quot; \r<br />\n<br />\ncompile errors which are causing multiple, bubbling compilation errors. Looking at the TS source, I can see that the directory probing algorithm is quite simple;\r<br />\na) Is any &quot;basic&quot; support of requirejs plugins planned (like just ignoring everything before the &quot;!&quot; character in the path)?\r<br />\nb) The i18n plugin will merge modules based on the hierarchy of supported locales extensibility - the basic support above clearly wouldn't do this - so it'd be &quot;nice&quot; if the extended probing behaviour of the plugin could be used by the compiler... \r<br />\n<br />\nAt application run-time, I'm guessing in future b) is would be achieved by using the ECMA 6 module loader api to customise this behaviour (?), but how/will this scenario be supported on compilation with TS?\r<br />\n<br />\nOr am I missing something obvious ;-)?\r<br />\n<br />\nThanks (and looking forward to v1!),\r<br />\n<br />\nP<br />\n",
    "PostedDate": "2014-01-31T09:10:11.103-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1201405",
    "ThreadId": "528541",
    "Html": "Basic support exists today; take a look at the <a href=\"http://www.sitepen.com/blog/2013/12/31/definitive-guide-to-typescript/#loader-plugins\" rel=\"nofollow\">loader plugins section of Definitive Guide to TypeScript</a> to learn how to do it. Better support in TypeScript for loader plugins is something that I’ve talked to @jonturner about in the past, so their team is aware of this issue, though I don’t currently see an open work item for it, and I’m not sure what the ultimate solution might even look like (it probably depends on the final ES6 module API as you said).<br />\n",
    "PostedDate": "2014-01-31T09:26:20.197-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1201591",
    "ThreadId": "528541",
    "Html": "I believe this workitem describes the issue: <a href=\"https://typescript.codeplex.com/workitem/1046\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/1046</a> It is referenced from this discussion: <a href=\"https://typescript.codeplex.com/discussions/492934\" rel=\"nofollow\">https://typescript.codeplex.com/discussions/492934</a><br />\n",
    "PostedDate": "2014-02-01T03:21:25.053-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1201735",
    "ThreadId": "528541",
    "Html": "Thanks both for your replys! I was aware of the amd tag - this can work, but the issue (with the i18n plugin, but I imagine others...(?)) is not just the module file loading resolution, but the bigger issue is the behavioural aspect of module resolution - the plugin will merge modules based on locale, so certain variables will exist on loaded modules depending on the client locale (which messes compilation up). \r<br />\n<br />\nSo even if I could use the amd tag/the loader ignored *!, then there may be issues. Specifically for i18n, I need to add all defs to the &quot;root&quot; module and add the amd tag to this, but this seems a bit of a hack.\r<br />\n<br />\nI'd be nice if referenceResolver was aligned with <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:module_loaders\" rel=\"nofollow\">http://wiki.ecmascript.org/doku.php?id=harmony:module_loaders</a> and for the compiler to be configured to use the plugins using this api....<br />\n",
    "PostedDate": "2014-02-02T02:47:31.793-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]