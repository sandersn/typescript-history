[
  {
    "Id": "1062776",
    "ThreadId": "448608",
    "Html": "According to specification:\r<br />\n3.7.2.2:<br />\n<pre><code>OptionalParameter:\n  PublicOrPrivateopt Identifier ? TypeAnnotationopt\n  PublicOrPrivateopt Identifier TypeAnnotationopt Initialiser\n</code></pre>\n\nBut if you write:<br />\n<pre><code>declare function f(a = 1);</code></pre>\n\nYou get &quot;error TS1039: Initializers are not allowed in ambient contexts.&quot;\r<br />\nThis means that specification is not correct, we should have OptionalParameter and AmbientOptionalParameter which doesn't allow Initialisers.<br />\n",
    "PostedDate": "2013-06-29T07:18:24.78-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069681",
    "ThreadId": "448608",
    "Html": "Does somebody know the answer ?<br />\n",
    "PostedDate": "2013-07-17T12:33:52.367-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069690",
    "ThreadId": "448608",
    "Html": "The grammar alone is not going to accurately describe any and all legal programs while excluding all illegal ones. The production for VariableDeclaration is:\r<br />\n<br />\nIdentifier TypeAnnotation(opt) Initialiser(opt)\r<br />\n<br />\nbut would you say the specification is not correct since this illegal statement satisfies the grammar?\r<br />\n<br />\nvar x: number = &quot;hello&quot;;\r<br />\n<br />\nThere is a point at which additional productions are adding complexity (and maintenance cost) for little gain. As the example above illustrates, there are important implementation systems not captured by the grammar that will always result in code that satisfies the grammar but not the compiler itself. The language specification has numerous additional checks described in prose which are not captured by the grammar.<br />\n",
    "PostedDate": "2013-07-17T12:53:44.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]