[
  {
    "Id": "1111885",
    "ThreadId": "463498",
    "Html": "Hi, I have my own custom loaders for javascripts and I noticed that &quot;require()&quot; automatically wraps the modules.  How can I implement my own functions to control this?\r<br />\n<br />\nThanks.<br />\n",
    "PostedDate": "2013-10-24T16:14:13.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1113159",
    "ThreadId": "463498",
    "Html": "@jamesnw, did you mean that when you write<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">class</span> Foo {\n}\r\n</pre></div>This gets compiled into <br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\ndefine([<span style=\"color:#A31515;\">&quot;require&quot;</span>, <span style=\"color:#A31515;\">&quot;exports&quot;</span>], <span style=\"color:Blue;\">function</span>(require, exports) {\n    <span style=\"color:Blue;\">var</span> Foo = (<span style=\"color:Blue;\">function</span> () {\n        <span style=\"color:Blue;\">function</span> Foo() {\n        }\n        <span style=\"color:Blue;\">return</span> Foo;\n    })();\n    exports.Foo = Foo;\n});\r\n</pre></div>And you want to get hold of <code>Foo</code>?<br />\n",
    "PostedDate": "2013-10-28T09:14:11.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1113228",
    "ThreadId": "463498",
    "Html": "I started a question on the modules here related to this as well: <a href=\"http://stackoverflow.com/questions/19637586/merging-two-exported-modules\" rel=\"nofollow\">http://stackoverflow.com/questions/19637586/merging-two-exported-modules</a><br />\n<br />\nI want to be able to import a module from file1 in file2 so that the two internal modules merge together.  For example:<br />\n<pre><code>File1:\nexport module A {\n    export module B {\n        export class X {\n        }\n    }\n}\n\nFile2:\nimport mod = require(&quot;test1&quot;);\nimport A = mod.A;\n\nexport module A {\n    export module B {\n        export class Y extends X {\n        }\n    }\n}</code></pre>\n\nBut that doesn't work.  If it did, I could create my own &quot;define()&quot; method with my own loader, and still allow the modules to &quot;see&quot; each other&quot; - this way the end user of my API can choose which modules they want to put together.<br />\n",
    "PostedDate": "2013-10-28T10:29:06.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1113726",
    "ThreadId": "463498",
    "Html": "We don't currently support multi-file external modules, but it's on our radar.  A few of TypeScript team members have hit this issue as well in our own for-fun side projects, which makes it even more personal :)<br />\n",
    "PostedDate": "2013-10-29T08:53:36.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1113727",
    "ThreadId": "463498",
    "Html": "Cool beans! Good to know. ;)<br />\n<br />\nFYI: Related proposal: <a href=\"https://typescript.codeplex.com/workitem/1846\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/1846</a><br />\n",
    "PostedDate": "2013-10-29T08:54:42.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]