[
  {
    "Id": "1242898",
    "ThreadId": "544670",
    "Html": "There's a difference I noticed between the way I can specify function overloads inline vs. in an ambient declaration.\r<br />\n<br />\nFor instance, in a .d.ts:<br />\n<pre><code>module &quot;foo&quot; {\n  function x(a: number): any;\n  function x(a: string): any;\n}</code></pre>\n\nThe above construction allows me to indicate that x may only be called with a number or a string. Nothing else may be passed. \r<br />\n<br />\nHowever, I can't find a way to match this flexibility when writing definitions inline:<br />\n<pre><code>function x(a: number): any;\nfunction x(a: string): any;\nfunction x(a: any): any {\n\n}</code></pre>\n\nBecause I need to write an implementation that uses types compatible with all overloads (the third case), I can't prevent callers from passing whatever they want in there.\r<br />\n<br />\nI'm not sure if I'm just missing something, or if there is more flexibility on defining the function overloads in ambient declaration than in inline code.<br />\n",
    "PostedDate": "2014-05-07T23:42:29.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1242993",
    "ThreadId": "544670",
    "Html": "Scriby, actually the example you provided works exactly the way you want it - your function x has only two signatures (number and string). The implementation signature is not visible.\r<br />\n<br />\nYou can verify it yourself in Playground:\r<br />\n<a href=\"http://www.typescriptlang.org/Playground#src=function%20x(a%3A%20number)%3A%20any%3B%0Afunction%20x(a%3A%20string)%3A%20any%3B%0Afunction%20x(a%3A%20any)%3A%20any%20%7B%0A%0A%7D%0A%0Ax(\" rel=\"nofollow\">http://www.typescriptlang.org/Playground#src=function%20x(a%3A%20number)%3A%20any%3B%0Afunction%20x(a%3A%20string)%3A%20any%3B%0Afunction%20x(a%3A%20any)%3A%20any%20%7B%0A%0A%7D%0A%0Ax(</a>)\r<br />\n<br />\n(CTRL+SPACE inside x())\r<br />\n<br />\nFor details see the last paragraph of <a href=\"https://typescript.codeplex.com/wikipage?title=Functions%20in%20TypeScript&amp;referringTitle=Documentation\" rel=\"nofollow\">Overloads chapter</a>.<br />\n<blockquote>\nNote that the 'function pickCard(x): any' piece is not part of the overload list, so it only has two overloads: one that takes an object and one that takes a number. Calling 'pickCard' with any other parameter types would cause an error.<br />\n</blockquote>\n",
    "PostedDate": "2014-05-08T04:31:18.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]