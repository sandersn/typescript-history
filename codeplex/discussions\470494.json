[
  {
    "Id": "1126712",
    "ThreadId": "470494",
    "Html": "In case you didn't see the secret announcement, a <a href=\"https://typescript.codeplex.com/wikipage?title=TypeScript%200.9.5%20beta\" rel=\"nofollow\">0.9.5 beta was released</a>. Is there going to be a blog post on the work this release encompasses other than the breaking changes list? This is one of the longest periods between releases you guys have had in quite a while- it would be nice to get a better idea of what to expect/look out for.<br />\n",
    "PostedDate": "2013-11-19T12:00:39.91-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1126729",
    "ThreadId": "470494",
    "Html": "I was just about to post to the forums, so you beat me to it :)\r<br />\n<br />\nThe breaking change notice (<a href=\"https://typescript.codeplex.com/wikipage?title=Known%20breaking%20changes%20between%200.8%20and%200.9&amp;referringTitle=Documentation\" rel=\"nofollow\">https://typescript.codeplex.com/wikipage?title=Known%20breaking%20changes%20between%200.8%20and%200.9&referringTitle=Documentation</a>) is the best place to get what's changed between releases.  We try to keep it up to date with code samples as to what's changing and cover why it's changing.\r<br />\n<br />\nIs there something it doesn't cover that you wanted covered in more detail?\r<br />\n<br />\nWe'll do a more complete blog post to go along with the 0.9.5 release when it goes out.  This is just the &quot;beta&quot;, to get some early feedback before we put out the release.  Sorry if the naming is a little confusing.<br />\n",
    "PostedDate": "2013-11-19T12:45:44.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1126731",
    "ThreadId": "470494",
    "Html": "A few things I'd be interested in knowing:<br />\n<ul>\n<li>Has that restriction on self-referencing generics been removed yet or is that still in the pipeline for 1.0?</li>\n<li>In what scenarios should we expect to see better performance?</li>\n<li>What remains to be done to get to 1.0?</li>\n<li>Specifically, what areas of the compiler have undergone significant changes? I think knowing this can help people better diagnose bugs they may encounter.</li>\n</ul>\n",
    "PostedDate": "2013-11-19T12:52:50.73-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1126735",
    "ThreadId": "470494",
    "Html": "I was just about to say that this is merely the Beta for the Alpha. That's not confusing at all!\r<br />\n<br />\n@jonturner, apparently there have been some <a href=\"https://typescript.codeplex.com/workitem/1917\" rel=\"nofollow\">changes to index signatures</a> that I couldn't find on your blog.<br />\n",
    "PostedDate": "2013-11-19T12:55:53.64-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1126782",
    "ThreadId": "470494",
    "Html": "<blockquote>\nHas that restriction on self-referencing generics been removed yet or is that still in the pipeline for 1.0?<br />\n</blockquote>\nThe restriction has been removed.<br />\n<blockquote>\nIn what scenarios should we expect to see better performance?<br />\n</blockquote>\nThere have been several across-the-board performance fixes that should improve virtually any scenario. For reference, one of our internal codebases has gone from 70 seconds to just under 38. Running all the unit tests has gone from 5:21 to 3:38. The majority of the really bad performance scalability bugs (e.g. compiling linq2ts) have been fixed.<br />\n<blockquote>\nWhat remains to be done to get to 1.0?<br />\n</blockquote>\nMostly bugs. There aren't any big features left to implement.\r<br />\n<br />\nI don't have a good comprehensive list of language changes at the moment. We'll be updating the breaking changes page as people bring up issues (e.g. the index signature thing).<br />\n",
    "PostedDate": "2013-11-19T14:32:34.14-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1126784",
    "ThreadId": "470494",
    "Html": "Thanks for the information. I appreciate all the hard work you guys have done. Looking forward to trying this release out.<br />\n",
    "PostedDate": "2013-11-19T14:39:01.863-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1126808",
    "ThreadId": "470494",
    "Html": "@nabog - good catch.  I've updated the list.<br />\n",
    "PostedDate": "2013-11-19T15:58:19.977-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1127238",
    "ThreadId": "470494",
    "Html": "Hi, guys,\r<br />\n<br />\nSo far the 9.5 beta is looking pretty stable. Some feedback from my team.<br />\n<ul>\n<li>The status bar message &quot;Output(s) generated successfully&quot; is very useful.</li>\n<li>The ordering of overloads is not a big deal in terms of maintenance.</li>\n<li>A number of new implicit any cases were picked up, for instance where an inline function instead of lambda was being used, and also for lambda parameters.</li>\n<li>A number of cases where generic parameters were missing was also picked up. However, I believe this can be tightened further.</li>\n<li>Cases where enum types were provided where an enum value is required were identified.</li>\n<li>Noticed a tighter enforcement of equality comparison where the types are not structurally compatible.</li>\n<li>\nPicked up a few new re-declarations of a variable to a different type.<br />\n</li>\n</ul>\nA few really nasty bugs, generally to do with generics, also seem to have been fixed.\r<br />\n<br />\nOne change that is proving to be a nuisance is that some build errors are being reported one at a time. So when a breaking change is made, it's turning into a case of fixing the error (the only one displayed) then building the project, only to find a second error cropping up.\r<br />\n<br />\nThanks!<br />\n",
    "PostedDate": "2013-11-20T13:07:41.943-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1127309",
    "ThreadId": "470494",
    "Html": "It seems that another breaking change that wasn't documented is setters and getters for properties.<br />\n<pre><code>        public get GridLineColor(): Color {\n            return this._gridLineColor;\n        }\n        public set GridLineColor(color: any) {\n            if (typeof color === &quot;string&quot;) {\n                color = new Color(&lt;any&gt;color);\n            }\n            this._gridLineColor = color;\n        }\n</code></pre>\n\nThis is no longer valid. Overloads seem appropriate here just as constructors. since type information is removed when compiled this code should be valid.<br />\n",
    "PostedDate": "2013-11-20T15:33:49.437-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1127319",
    "ThreadId": "470494",
    "Html": "Correct, that bug was fixed. The issue here is that accessors are not like functions, they are like properties, so no overloads are possible. Consider that the .d.ts for that code is:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\nGridLinesColor: Color\r\n</pre></div>not:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\nGridLinesColor(): Color;\nGridLinesColor(x: <span style=\"color:Blue;\">any</span>): <span style=\"color:Blue;\">void</span>;\r\n</pre></div>An implementation of this type may or may not use an accessor, it may just use a property of type Color.<br />\n",
    "PostedDate": "2013-11-20T16:02:09.22-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1127327",
    "ThreadId": "470494",
    "Html": "First off: I'm really happy about these performance improvements.  Great work.\r<br />\n<br />\nThe &quot;Rest arguments are now properly checked for function arity&quot; breaking change makes sense to me but I'm unsure about how to accommodate it in my code.  I have a function that looks like this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\nregister(scope: <span style=\"color:Blue;\">any</span>, implementation: (... args: <span style=\"color:Blue;\">any</span>[]) =&gt; <span style=\"color:Blue;\">void</span>, canExecute?: (...args: <span style=\"color:Blue;\">any</span>[]) =&gt; <span style=\"color:Blue;\">boolean</span>): <span style=\"color:Blue;\">string</span>\r\n</pre></div>The intention here is to place no constraints on the parameters of the lambda functions but to constrain the return types.  (This is all the type safety I can take advantage of using an existing JS pattern.)  Can this be done in the new release?<br />\n",
    "PostedDate": "2013-11-20T16:39:08.83-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1127328",
    "ThreadId": "470494",
    "Html": "While what you say makes sense it's still perfectly valid javascript to do the following. <br />\n<pre><code>var Test = {};\n\n    Object.defineProperty(Test, &quot;propName&quot;, {\n        get: function () { return this.value; },\n        set: function (value) {\n            if (value instanceof Date) {\n                this.value = &quot;Date was passed in&quot;;\n            } else {\n                this.value = value;\n            }\n        }\n    })\n\n\nTest.propName = &quot;blah&quot;;\nconsole.log(Test.propName);\nTest.propName = new Date();\nconsole.log(Test.propName);</code></pre>\n\nDoing so allows us to set the underlying value based on the value passed in. It's really a shame to force the same type on a property in both a set and get since the set type doesn't actually matter and javascript allows it.<br />\n",
    "PostedDate": "2013-11-20T16:39:54.973-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1127330",
    "ThreadId": "470494",
    "Html": "I take it back. At least removing :any from the setter works. Hopefully this isn't &quot;fixed&quot; in a later version of typescript :)<br />\n",
    "PostedDate": "2013-11-20T16:50:31.33-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]