{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Thanks for logging this issue. We've moved to a new codebase on GitHub; please try your issue against the new compiler (once possible) and log an issue on the GitHub site if it still reproduces.",
    "ClosedDate": "2014-07-21T13:35:31.207-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "Consider the following function:\r\n\r\n    export functionWithManyArguments(argument0: number, argument1: string\r\n        argument2: number, argument3: string, argument4: D3.Selection) {\r\n        var combined = argument0 + argument2;\r\n        // do some more stuff\r\n    }\r\n\r\nThe typescript plugin will auto-format it as shown above. However, this is visually misleading, because the continuation of the argument list on the 2nd line looks like it is the beginning of the function call (which actually comes on line 3). I think the auto-indenter should instead format it as follows:\r\n\r\n    export functionWithManyArguments(argument0: number, argument1: string\r\n            argument2: number, argument3: string, argument4: D3.Selection) {\r\n        var combined = argument0 + argument2;\r\n        // do some more stuff\r\n    }\r\n\r\nNow the continuation of the argument list is indented one block further than the subsequent code. This makes it visually obvious where the function call ends and where the code begins; it also maintains correct indentation for the code inside the function block, so that the indentation level of normal code is never altered by the way the function declaration is formatted.",
    "LastUpdatedDate": "2017-11-27T11:51:34.217-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-10-14T17:15:59.17-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Auto-indentation ambiguous for functions with many arguments",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 1791
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "There are many different preferences of styles here.  Our aim was to be consistent with the JavaScript experience already present in Visual Studio, and you'll note this performs the same way.\n\nThat said, I note in JavaScript if you manually format the indentation to your preferred style, it tends to preserve this on further auto-formatting operations.  Whereas TypeScript much more aggressively reformats to the above style.  I'll open a bug for the editor to be better behaved in preserving a users formatting.",
      "PostedDate": "2013-10-15T14:57:38.173-07:00",
      "Id": 118544
    },
    {
      "Message": "Would the fix be in the language services?  We are using the Eclipse plug-in so as long as the fix is there we'll get it.",
      "PostedDate": "2013-10-15T15:19:15.483-07:00",
      "Id": 118545
    },
    {
      "Message": "As billti said this is a matter of preference. I prefer to write functions with a lot of parameters like this:\n\n``` TypeScript\nexport functionWithManyArguments(\n    argument0: number, \n    argument1: string\n    argument2: number, \n    argument3: string, \n    argument4: D3.Selection\n): void {\n    var combined = argument0 + argument2;\n    // do some more stuff\n}\n```",
      "PostedDate": "2013-10-16T09:50:20.133-07:00",
      "Id": 118626
    },
    {
      "Message": "Would it be possible to add a few formatting options to the Typescript section of the Text Editor so that people can choose how they want it formatted?\n\nThe need for formatting over-size function calls comes up a lot in my work.\n\nOn a related note, it would also be good to specify the formatting of oversize inline arrays (like the kind jQuery uses:\n\n[\n    \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \n    \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\n}.forEach(dostuff);\n",
      "PostedDate": "2013-11-06T17:39:33.273-08:00",
      "Id": 122075
    }
  ]
}