{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This isn't possible. You can work around this by adding a new interface with a different name at top-level that extends NodeList.",
    "ClosedDate": "2013-06-04T16:49:17.58-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Trying to do something like this recently:\r\n\r\n```\r\ndeclare module Dojo\r\n{\r\n    export class NodeList\r\n    {\r\n        constructor(nodelist: NodeList);      <=== This should refer to NodeList in lib.d.ts\r\n        constructor(nodelist: Dojo.NodeList);     <== This should refer to the current class\r\n    }\r\n}\r\n```\r\n\r\nTrying to define a class named \"NodeList\" under the Dojo namespace, which has constructors taking both NodeList (from lib.d.ts) and Dojo.NodeList itself.\r\n\r\nHow can I refer to the NodeList definition declared in lib.d.ts?  The name \"NodeList\" has been shadowed by the name of the current type, which is the same name...\r\n",
    "LastUpdatedDate": "2013-06-04T16:49:17.58-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-06-04T15:08:54.59-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "How to refer to lib.d.ts types?",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1105
  },
  "FileAttachments": [],
  "Comments": []
}