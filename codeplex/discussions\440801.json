[
  {
    "Id": "1032578",
    "ThreadId": "440801",
    "Html": "I don't get what's wrong here:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> IFB2DOM {\n    <span style=\"color:Blue;\">constructor</span>(URL:<span style=\"color:Blue;\">string</span>);\n}\n\n<span style=\"color:Blue;\">class</span> FB2DOM <span style=\"color:Blue;\">implements</span> IFB2DOM{\n    <span style=\"color:Blue;\">constructor</span> (URL:<span style=\"color:Blue;\">string</span>){\n        <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>;\n    }\n}\r\n</pre></div>Is it possible to define constructor in interface?<br />\n",
    "PostedDate": "2013-04-18T09:56:39.653-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032608",
    "ThreadId": "440801",
    "Html": "\r\n<p dir=\"ltr\">Just in general design terms, it's bad form to tell an interface implementation how it should be constructed.</p>\r\n",
    "PostedDate": "2013-04-18T11:06:54.643-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032630",
    "ThreadId": "440801",
    "Html": "Not THAT bad. I am going to have several heavily-linked classes and replace any of them with alternatives transparently for others by substituting js-file. Think of it as of plugins. And I want interfaces to hold the &quot;agreement&quot;. That's what interfaces are for (opposing to indirect class inheritance) - they define whatever agreement on the class behavior I need to have and help my code to follow it. What harm can such a restriction ever produce?\r<br />\n<br />\nPs. And after all it's my leg and I want to shot it :)<br />\n",
    "PostedDate": "2013-04-18T11:35:10.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032659",
    "ThreadId": "440801",
    "Html": "\r\n<p dir=\"ltr\">You can't new up an interface, though, so what does it benefit you to have a constructor on it? If you need a uniform function signature for creating instances of a type, that's what factories are for.</p>\r\n<p dir=\"ltr\">As for shooting yourself in the foot, you might be fine with it, but that doesn't mean everybody else should be given Desert Eagles. ;-)</p>\r\n<div style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: GribUser</p>\r\n<div>Not THAT bad. I am going to have several heavily-linked classes and replace any of them with alternatives transparently for others by substituting js-file. Think of it as of plugins. And I want interfaces to hold the &quot;agreement&quot;. That's what interfaces\r\n are for (opposing to indirect class inheritance) - they define whatever agreement on the class behavior I need to have and help my code to follow it. What harm can such a restriction ever produce?\r\n<br>\r\n<br>\r\nPs. And after all it's my leg and I want to shot it :)<br>\r\n</div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/440801#post1032630\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email ([email removed])</p>\r\n<p>To start a new discussion for this project, email [email removed]</p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"http://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-04-18T12:23:04.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032690",
    "ThreadId": "440801",
    "Html": "<strong>markrendle wrote:</strong><br />\n<blockquote>\nYou can't new up an interface, though, so what does it benefit you to have a constructor on it? If you need a uniform function signature for creating instances of a type, that's what factories are for<br />\n</blockquote>\nYeah, that's what factories are for and that's how you make them - you define a virtual constructor. In the terms of TypeScript this is what the &quot;interface&quot; is about, at least it's the closest analogue I can find for &quot;virtual constructor&quot;. If I can have two twin-classes and load them with &lt;script src=&quot;opera.js&quot;/&gt; versus &lt;script src=&quot;ie.js&quot;/&gt; or &lt;script src=&quot;desktop.js&quot;/&gt; versus &lt;script src=&quot;iphone.js&quot;/&gt; on the fly (common approach), why would I go for some more dedicated &quot;class factory&quot;? If the code above would work it would make a simple, fast and robust enough class factory.<br />\n<br />\nI believe such a thing like TypeScript should allow some shortcuts (like NOT requiring every variable to have the type, &quot;in general design terms&quot; it sounds not so good to). TypeScript code will in 99% cases come together on-the-fly and this fact could, should and <strong>will</strong> be used by developers. Why deny them to rely on the browser to do the class factory job, in our case? We only need a tool to make this class factory more reliable by delegating code consistency tracking to the &quot;compiler&quot;.<br />\n<br />\nps. Surely I will workaround this issue by removing constructor from interface and manualy keeping track of all twin-classes to have similar constructors. It's just when I started to do so I felt a bit strange. I thought I miss something and come here.<br />\n",
    "PostedDate": "2013-04-18T13:39:56.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032744",
    "ThreadId": "440801",
    "Html": "\r\n<p dir=\"ltr\">So, if you're switching JS files which have &quot;twin&quot; class with the same name and constructor, what you should be using in your TypeScript is a definition file to declare the class, not an interface.</p>\r\n<p dir=\"ltr\">I'd supply a code sample but I'm in my phone and Swype keeps crashing, sorry. Google &quot;DefinitelyTyped&quot; to find a GitHub repo with dozens of definition files that declare classes.</p>\r\n",
    "PostedDate": "2013-04-18T16:20:54.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032745",
    "ThreadId": "440801",
    "Html": "\r\n<p dir=\"ltr\">On my phone, not in it. I'm not having a Tron moment or anything.</p>\r\n",
    "PostedDate": "2013-04-18T16:21:45.13-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032830",
    "ThreadId": "440801",
    "Html": "<strong>markrendle wrote:</strong><br />\n<blockquote>\nSo, if you're switching JS files which have &quot;twin&quot; class with the same name and constructor, what you should be using in your TypeScript is a definition file to declare the class, not an interface.<br />\n</blockquote>\nI still do not see how would it prevent me from overriding base constructor with incompatible one. My plan was to make and share interface definition and have the alarm beeping the very moment I make a class with a bad constructor.<br />\n",
    "PostedDate": "2013-04-18T23:40:10.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032968",
    "ThreadId": "440801",
    "Html": "\r\n<div dir=\"ltr\">Ah, whatever. This is like banging my head against a wall, except without the endorphins.</div>\r\n",
    "PostedDate": "2013-04-19T05:07:34.6-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1032981",
    "ThreadId": "440801",
    "Html": "As for me it's just a bug. Interface must either directly prohibit declaring constructor (stupid, but at least consistent) or threat constructor as a <strong>constructor</strong> so it would affect implementation. Now it blames an implementation for error in interface which makes no sense.\r<br />\nI'll fire a ticket.<br />\n",
    "PostedDate": "2013-04-19T05:48:53.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1338945",
    "ThreadId": "440801",
    "Html": "I absolutely agree with GribUser. I'm coming from compiled and mature OOP languages world and to me it's absolutely a must for a language to be able to define anything I need in the interface as a contract for the rest of my code. In that case compiler will warn me or other guy he forgot to implement it. It's strange we need to argue on such an obvious thing.<br />\n",
    "PostedDate": "2015-01-04T15:48:56.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]