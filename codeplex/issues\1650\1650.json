{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:09.72-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "I think it would be nice if it was possible to mark methods/properties in TypeScript as deprecated. I'm not sure what the syntax could be.\r\n\r\nFor example when a library marks a method as deprecated we could update the definition files accordingly and get warnings (or errors) on the places where they are used.\r\n\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-09-06T02:11:03.207-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Deprecate attribute",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 14,
    "Id": 1650
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "[JSDoc](https://code.google.com/p/jsdoc-toolkit/wiki/TagDeprecated)\n\nI think metadata in general probably belongs in JSDocs for TypeScript.",
      "PostedDate": "2013-09-06T05:47:27.26-07:00",
      "Id": 112669
    },
    {
      "Message": "Thanks for the suggestion, assigning to jon who handles suggestions.",
      "PostedDate": "2013-09-06T14:49:24.253-07:00",
      "Id": 112725
    },
    {
      "Message": "This would be really important for larger, modularized applications where different teams work on different modules.",
      "PostedDate": "2014-03-10T10:34:46.693-07:00",
      "Id": 136414
    },
    {
      "Message": "A 'deprecated' keyword would be great as otherwise you end up doing what you do in C++ which is to make a private member that is never implemented or used., which is a bit of a cludge. \n\ne.g.\n\n    class Collection<TModel extends Model> extends ModelBase {\n    \n        /**\n        * Do not use, prefer TypeScript's extend functionality.\n        **/\n        private static extend(properties: any, classProperties?: any): any;\n    \n        ....\n    };\n\nexample usage from DefinitivelyTyped's backbone.d.ts definition.\n",
      "PostedDate": "2014-06-25T13:11:52.243-07:00",
      "Id": 150729
    }
  ]
}