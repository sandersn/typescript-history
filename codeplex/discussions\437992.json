[
  {
    "Id": "1021088",
    "ThreadId": "437992",
    "Html": "We are loading HTML templates using require/text (<a href=\"http://www.example.com\" rel=\"nofollow\">https://github.com/requirejs/text</a>) plugin. Javascript files look like this:<br />\n<pre><code>require([&quot;./module&quot;, &quot;text!./template.html&quot;],\n    function(Module, template) {\n       // template available in module everywhere\n    }\n);</code></pre>\n\n<strong>Is it possible to import template this way into TypeScript module to be available in whole module?</strong> Right now it seems to me the only possible way to do this is to call require in a middle of code only:<br />\n<pre><code> //some ts code\n require([&quot;template&quot;], (template) =&gt; doSomeStuff());</code></pre>\n\nBut this forces us to deal with async way of doing things where we don't want to. (BTW, we are using AMD modules).\r<br />\n<br />\nI imagine the fitting solution could look like this in TS:<br />\n<pre><code>import Module = module(&quot;./module&quot;);\nimport template = resource(&quot;text!./template.html&quot;);</code></pre>\n\nand compiler would generate require call as in first JS example (template - type any). This also may be useful to load pure JS libraries without worrying to write d.ts files.<br />\n",
    "PostedDate": "2013-03-26T01:19:15.28-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]