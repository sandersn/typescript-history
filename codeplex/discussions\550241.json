[
  {
    "Id": "1261610",
    "ThreadId": "550241",
    "Html": "So, it's cool that an interface can be used to abbreviate a function (<a href=\"http://www.typescriptlang.org/Handbook#interfaces-function-types\" rel=\"nofollow\">http://www.typescriptlang.org/Handbook#interfaces-function-types</a>). \r<br />\n<br />\nI think it would be cool to be able to able to extend strings/primitive types too. If it worked, it would let you do nice things like I confusingly tried here: <a href=\"https://github.com/iislucas/DefinitelyTyped/blob/iislucas-webrtc/webrtc/RTCPeerConnection.d.ts\" rel=\"nofollow\">https://github.com/iislucas/DefinitelyTyped/blob/iislucas-webrtc/webrtc/RTCPeerConnection.d.ts</a>\r<br />\n<br />\nI was trying to use an interface to describe a string that is assumed to have a certain structure; it's like a comment for the intended use-case of the string. \r<br />\n<br />\nIdeally you'd be able to create proper abstract type that requires syntax to convert (and otherwise it protects you from using one kind of string in place of another string. \r<br />\n<br />\ne.g. one might imagine: <br />\n<pre><code>interface StringThing {\n  string;\n}\n\nfunction isFoo(s:StringThing) : boolean {\n  return (s === 'foo');\n}</code></pre>\n\nAlthough perhaps it would be better to just support either type defs (<a href=\"https://typescript.codeplex.com/workitem/119\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/119</a>) or abstract types/interfaces (<a href=\"https://typescript.codeplex.com/workitem/395\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/395</a>). \r<br />\n<br />\nAlong the way, I was wondering why an interface cannot extend primitive type, because that could be cool too.<br />\n<pre><code>interface StringThing extends string {}</code></pre>\n\nThoughts? <br />\n",
    "PostedDate": "2014-07-01T08:46:47.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1261805",
    "ThreadId": "550241",
    "Html": "<blockquote>\nI think it would be cool to be able to able to extend strings/primitive types too.<br />\n</blockquote>\nÂ \r<br />\nIt's actually not possible to extend primitive types, and have them behave exactly the same way. Primitive types create <em>special</em> native host objects.  For example, the the array object updates the &quot;length&quot; property as items are set directly by index (like <code>myarray[10]=10</code>).  Extending primitive arrays would mean losing that ability. There is no way to replicate that in all older browsers (note: the various functions could still work however).  Also, the native string constructor creates a character array of the string contents, and that feature would be lost as well.  Why? Because there is no way to apply constructors of primitive types to new user objects.<br />\n\r<br />\nWith new ES6 features, however, this may be possible to some degree (if not entirely), but it would not be backward compatible.<br />\n",
    "PostedDate": "2014-07-01T21:16:04.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1261809",
    "ThreadId": "550241",
    "Html": "Sorry, I just realized you were talking about using interfaces to extend primitive types (reading too fast).  I think this open issue would address this already:\r<br />\n<a href=\"https://typescript.codeplex.com/workitem/1085\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/1085</a><br />\n",
    "PostedDate": "2014-07-01T21:37:17.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1261967",
    "ThreadId": "550241",
    "Html": "Yeah, that looks like it would work. Cool!<br />\n",
    "PostedDate": "2014-07-02T06:56:24.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]