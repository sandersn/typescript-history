[
  {
    "Id": "921088",
    "ThreadId": "397835",
    "Html": "\r\n<p><a href=\"http://www.typescriptlang.org/Playground/#ex5\">Example 5</a> from the tutorial has me confused. The `Person' interface declares `firstname' and `lastname' members while the `Student' class declares only one member: `fullname' yet we are able to\r\n provide a `Student' object where a `Person' is expected?? Looking at the generated JavaScript we see that `firstname' and `lastname' members are automagically created for us from the ctor parameters of the same name. This behaviour seems somewhat unintuitive\r\n to me &amp; I'd love to know what the reasoning behind it was.</p>\r\n",
    "PostedDate": "2012-10-03T01:22:41.567-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921109",
    "ThreadId": "397835",
    "Html": "<p>I believe it is that the constructor parameters if declared as public should be attached to the instance. It is kind of a shorthand for</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">function</span> Student(firstname, lastname) {\r\n  <span style=\"color: blue;\">this</span>.firstname = firstname;\r\n  <span style=\"color: blue;\">this</span>.lastname = lastname;\r\n  ...\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Seems reasonable.</p>",
    "PostedDate": "2012-10-03T01:59:52.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921195",
    "ThreadId": "397835",
    "Html": "<p>That's right - the 'public' modifier on a constructor parameter is a shorthand for declaring each of (a) a constructor parameter, (b) a property of the corresponding type, and (c) an initialization of the property to the constructor parameter.&nbsp; This combination was common enough that we added a shorthand syntax.</p>",
    "PostedDate": "2012-10-03T05:10:36.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]