[
  {
    "Id": "985666",
    "ThreadId": "429350",
    "Html": "\r\n<p>Why not have a default context of &quot;this&quot; inside instance methods, like C#?</p>\r\n<p>Seems to me it would be easy enough to allow this while still making &quot;call(x, y, z)&quot; render as &quot;this.call(this.x, this.y, this.z)&quot;.</p>\r\n",
    "PostedDate": "2013-01-11T13:55:29.93-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985741",
    "ThreadId": "429350",
    "Html": "\r\n<p>There have been a few feature requests around this.&nbsp;</p>\r\n<p>The short answer is that, while this aspect is&nbsp;no doubt a little verbose,&nbsp;our class syntax tries to align very closely with the ES6 proposal for classes, which currently requires explicit &quot;this.&quot; for member accesses.&nbsp;</p>\r\n",
    "PostedDate": "2013-01-11T16:42:48.503-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985921",
    "ThreadId": "429350",
    "Html": "\r\n<p>Also, a real problem is that&nbsp;an implicit 'this' would in some cases change the meaning of the code. For example:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> x = 10;\r\n<span style=\"color:blue\">class</span> Foo {\r\n    x = 20;\r\n    f() {\r\n        console.log(x);\r\n    }\r\n}\r\n<span style=\"color:blue\">var</span> foo = <span style=\"color:blue\">new</span> Foo();\r\nfoo.f();\r\n</pre>\r\n</div>\r\n<p>In ES6 this is supposed to output '10', but it would output '20' with an implicit 'this'. We would basically break perfectly valid ES6 code!</p>\r\n<p>Anders</p>\r\n",
    "PostedDate": "2013-01-12T09:29:59.59-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985952",
    "ThreadId": "429350",
    "Html": "\r\n<div style=\"font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px\">\r\n<div>I get this but for people like me that only does TS programming (and C#), this wouldn’t matter, I would love to have a switch in the compiler that would enable ‘implicit this”.</div>\r\n<div></div>\r\n<div>Another related issue is the lack of nested block scope as in C#, it's somewhat frustrating that you cannot use blocks to introduce new variable like below, any chance support for this could be added as a switch to the compiler?</div>\r\n<div></div>\r\n<div>{ </div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> ahejlsberg<br>\r\n<strong>Sent:</strong> ‎January‎ ‎12‎, ‎2013 ‎9‎:‎30‎ ‎AM<br>\r\n<strong>To:</strong> bjorn@backlund.org<br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n<div></div>\r\n<p>From: ahejlsberg</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<p>Also, a real problem is that an implicit 'this' would in some cases change the meaning of the code. For example:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> x = 10;\n<span style=\"color:blue\">class</span> Foo {\n    x = 20;\n    f() {\n        console.log(x);\n    }\n}\n<span style=\"color:blue\">var</span> foo = <span style=\"color:blue\">new</span> Foo();\nfoo.f();\n</pre>\r\n</div>\r\n<p>In ES6 this is supposed to output '10', but it would output '20' with an implicit 'this'. We would basically break perfectly valid ES6 code!</p>\r\n<p>Anders</p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-01-12T11:07:24.09-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985955",
    "ThreadId": "429350",
    "Html": "\r\n<div style=\"font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px\">\r\n<div>Sorry I’m not really used to the new Mail app in W8...</div>\r\n<div>I was adding the sample code below when Mail “decided” it was time to send the message.</div>\r\n<div></div>\r\n<div>{</div>\r\n<div>{</div>\r\n<div>var x = new Foo();</div>\r\n<div>}</div>\r\n<div>{</div>\r\n<div>var x = new Bar(); // x is not redefined, i.e. declared as of type Foo;</div>\r\n<div>}</div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> ahejlsberg<br>\r\n<strong>Sent:</strong> ‎January‎ ‎12‎, ‎2013 ‎9‎:‎30‎ ‎AM<br>\r\n<strong>To:</strong> bjorn@backlund.org<br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n<div></div>\r\n<p>From: ahejlsberg</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<p>Also, a real problem is that an implicit 'this' would in some cases change the meaning of the code. For example:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> x = 10;\n<span style=\"color:blue\">class</span> Foo {\n    x = 20;\n    f() {\n        console.log(x);\n    }\n}\n<span style=\"color:blue\">var</span> foo = <span style=\"color:blue\">new</span> Foo();\nfoo.f();\n</pre>\r\n</div>\r\n<p>In ES6 this is supposed to output '10', but it would output '20' with an implicit 'this'. We would basically break perfectly valid ES6 code!</p>\r\n<p>Anders</p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-01-12T11:10:34.487-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986000",
    "ThreadId": "429350",
    "Html": "\r\n<p>Anders,</p>\r\n<p>The issue you mentioned seems to be solved by the same context rules already applied today even in javascript. If there is a local variable defined, you use that, otherwise use the one from the parent closure. In the end, the compiler would follow exactly\r\n the same rules that are applied to C# compiler.</p>\r\n<p>The only issue I see is that if you want to access the global variable instead of the instance one. C# has qualified names for everything, JS doesn't. But this seems to be simple to solve by not creating a local or instance variable with the same name of\r\n a global one that you want to use. Optionally, there could be a &quot;global::x&quot; that would look for a defined global outside of the scope and compile without the &quot;this&quot;.</p>\r\n<p>I really believe this would make coding much better than using &quot;this&quot; for everything.</p>\r\n<p>jonturner,</p>\r\n<p>I understand the will to make TypeScript compatible with current ES and ES6, but I don't believe that all TypeScript is supposed to be is a bridge between today and tomorrow. Otherwise, when ES6 is available in all browsers, there will be no reason to use\r\n TS other than type checks.&nbsp;As Bjorn said, this could be a switch in the compiler, or an option similar to &quot;use strict&quot;.&nbsp;I really hope you don't plan for TS to be only a temporary ES6.</p>\r\n",
    "PostedDate": "2013-01-12T15:41:27.043-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986116",
    "ThreadId": "429350",
    "Html": "\r\n<p>First people ask to skip 'this.' then they ask to mandate underscore or m_ prefixes for the same.</p>\r\n",
    "PostedDate": "2013-01-13T07:11:03.363-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986119",
    "ThreadId": "429350",
    "Html": "\r\n<div dir=\"ltr\">ES6 is still a dynamic language, there are no proposals to add static typing or type-checking in JavaScript, and that is the goodness that TypeScript is bringing. When the time comes that targeting ES6 is viable and the TypeScript compiler simply\r\n passes over the class declarations, there will still be plenty of other things for it to do.</div>\r\n<div><br>\r\n<br>\r\n<div>On Sat, Jan 12, 2013 at 11:41 PM, nvivo <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: nvivo</p>\r\n<div>\r\n<p>Anders,</p>\r\n<p>The issue you mentioned seems to be solved by the same context rules already applied today even in javascript. If there is a local variable defined, you use that, otherwise use the one from the parent closure. In the end, the compiler would follow exactly\r\n the same rules that are applied to C# compiler.</p>\r\n<p>The only issue I see is that if you want to access the global variable instead of the instance one. C# has qualified names for everything, JS doesn't. But this seems to be simple to solve by not creating a local or instance variable with the same name of\r\n a global one that you want to use. Optionally, there could be a &quot;global::x&quot; that would look for a defined global outside of the scope and compile without the &quot;this&quot;.</p>\r\n<p>I really believe this would make coding much better than using &quot;this&quot; for everything.</p>\r\n<p>jonturner,</p>\r\n<p>I understand the will to make TypeScript compatible with current ES and ES6, but I don't believe that all TypeScript is supposed to be is a bridge between today and tomorrow. Otherwise, when ES6 is available in all browsers, there will be no reason to use\r\n TS other than type checks. As Bjorn said, this could be a switch in the compiler, or an option similar to &quot;use strict&quot;. I really hope you don't plan for TS to be only a temporary ES6.</p>\r\n</div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/429350#post986000\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:429350]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2013-01-13T07:20:14.203-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986120",
    "ThreadId": "429350",
    "Html": "\r\n<div dir=\"ltr\">How many compiler switches do you want!?</div>\r\n<div><br>\r\n<br>\r\n<div>On Sat, Jan 12, 2013 at 7:07 PM, BjornBacklund <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: BjornBacklund</p>\r\n<div>\r\n<div style=\"font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px\">\r\n<div>I get this but for people like me that only does TS programming (and C#), this wouldn’t matter, I would love to have a switch in the compiler that would enable ‘implicit this”.</div>\r\n<div></div>\r\n<div>Another related issue is the lack of nested block scope as in C#, it's somewhat frustrating that you cannot use blocks to introduce new variable like below, any chance support for this could be added as a switch to the compiler?</div>\r\n<div></div>\r\n<div>{ </div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> ahejlsberg<br>\r\n<strong>Sent:</strong> January 12, 2013 9:30 AM<br>\r\n<strong>To:</strong> <a href=\"mailto:bjorn@backlund.org\" target=\"_blank\">bjorn@backlund.org</a><br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n<div>\r\n<div>\r\n<div></div>\r\n<p>From: ahejlsberg</p>\r\n<div>\r\n<p>Also, a real problem is that an implicit 'this' would in some cases change the meaning of the code. For example:</p>\r\n<div style=\"\">\r\n<pre><span style=\"color:blue\">var</span> x = 10;\r\n<span style=\"color:blue\">class</span> Foo {\r\n    x = 20;\r\n    f() {\r\n        console.log(x);\r\n    }\r\n}\r\n<span style=\"color:blue\">var</span> foo = <span style=\"color:blue\">new</span> Foo();\r\nfoo.f();\r\n</pre>\r\n</div>\r\n<p>In ES6 this is supposed to output '10', but it would output '20' with an implicit 'this'. We would basically break perfectly valid ES6 code!</p>\r\n<p>Anders</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/429350#post985952\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:429350]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2013-01-13T07:20:44.72-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986130",
    "ThreadId": "429350",
    "Html": "\r\n<div style=\"font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px\">\r\n<div>One switch to turn TS more into C# would be sufficient <span color=\"\" style=\"font-family:\">\r\n</span></div>\r\n<div>Honestly, I’m working on a larger project with TS for the UI and C# for the backend and it would be great to be able to use the same style of programming in both worlds. TS is so much better than JS but it could be made even better if the “ES6 alignment\r\n goal” would be dropped (or overridden by aforementioned switch)</div>\r\n<div></div>\r\n<div>---bjorn</div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> markrendle<br>\r\n<strong>Sent:</strong> ‎January‎ ‎13‎, ‎2013 ‎7‎:‎21‎ ‎AM<br>\r\n<strong>To:</strong> bjorn@backlund.org<br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n<div></div>\r\n<p>From: markrendle</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<div dir=\"ltr\">How many compiler switches do you want!?</div>\r\n<div><br>\r\n<br>\r\n<div>On Sat, Jan 12, 2013 at 7:07 PM, BjornBacklund <span dir=\"ltr\">&lt;<a tabindex=\"-1\" href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0px 0px 0px 0.8ex; padding-left:1ex; border-left-color:rgb(204,204,204); border-left-width:1px; border-left-style:solid\">\r\n<div>\r\n<p>From: BjornBacklund</p>\r\n<div>\r\n<div style=\"font-family:Calibri\">\r\n<div>I get this but for people like me that only does TS programming (and C#), this wouldn’t matter, I would love to have a switch in the compiler that would enable ‘implicit this”.</div>\r\n<div></div>\r\n<div>Another related issue is the lack of nested block scope as in C#, it's somewhat frustrating that you cannot use blocks to introduce new variable like below, any chance support for this could be added as a switch to the compiler?</div>\r\n<div></div>\r\n<div>{ </div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> ahejlsberg<br>\r\n<strong>Sent:</strong> January 12, 2013 9:30 AM<br>\r\n<strong>To:</strong> <a tabindex=\"-1\" href=\"mailto:bjorn@backlund.org\" target=\"_blank\">\r\nbjorn@backlund.org</a><br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n<div>\r\n<div>\r\n<div></div>\r\n<p>From: ahejlsberg</p>\r\n<div>\r\n<p>Also, a real problem is that an implicit 'this' would in some cases change the meaning of the code. For example:</p>\r\n<div>\r\n<pre><span style=\"color:blue\">var</span> x = 10;\n<span style=\"color:blue\">class</span> Foo {\n    x = 20;\n    f() {\n        console.log(x);\n    }\n}\n<span style=\"color:blue\">var</span> foo = <span style=\"color:blue\">new</span> Foo();\nfoo.f();\n</pre>\r\n</div>\r\n<p>In ES6 this is supposed to output '10', but it would output '20' with an implicit 'this'. We would basically break perfectly valid ES6 code!</p>\r\n<p>Anders</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div>\r\n<p>Read the <a tabindex=\"-1\" href=\"http://typescript.codeplex.com/discussions/429350#post985952\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a tabindex=\"-1\" href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:429350]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a tabindex=\"-1\" href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a tabindex=\"-1\" href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a tabindex=\"-1\" href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-01-13T08:32:14.373-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986141",
    "ThreadId": "429350",
    "Html": "\r\n<div dir=\"ltr\">Maybe you should look at Script# <a href=\"https://github.com/nikhilk/scriptsharp\">\r\nhttps://github.com/nikhilk/scriptsharp</a> ?</div>\r\n<div><br>\r\n<br>\r\n<div>On Sun, Jan 13, 2013 at 4:32 PM, BjornBacklund <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: BjornBacklund</p>\r\n<div>\r\n<div style=\"font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px\">\r\n<div>One switch to turn TS more into C# would be sufficient <span color=\"\"></span></div>\r\n<div>Honestly, I’m working on a larger project with TS for the UI and C# for the backend and it would be great to be able to use the same style of programming in both worlds. TS is so much better than JS but it could be made even better if the “ES6 alignment\r\n goal” would be dropped (or overridden by aforementioned switch)</div>\r\n<div></div>\r\n<div>---bjorn</div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> markrendle<br>\r\n<strong>Sent:</strong> ‎January‎ ‎13‎, ‎2013 ‎7‎:‎21‎ ‎AM\r\n<div><br>\r\n<strong>To:</strong> <a href=\"mailto:bjorn@backlund.org\" target=\"_blank\">bjorn@backlund.org</a><br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n</div>\r\n<div></div>\r\n<p>From: markrendle</p>\r\n<div>\r\n<div>\r\n<div>\r\n<div dir=\"ltr\">How many compiler switches do you want!?</div>\r\n<div><br>\r\n<br>\r\n<div>On Sat, Jan 12, 2013 at 7:07 PM, BjornBacklund <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0px 0px 0px 0.8ex; padding-left:1ex; border-left-color:rgb(204,204,204); border-left-width:1px; border-left-style:solid\">\r\n<div>\r\n<p>From: BjornBacklund</p>\r\n<div>\r\n<div style=\"font-family:Calibri\">\r\n<div>I get this but for people like me that only does TS programming (and C#), this wouldn’t matter, I would love to have a switch in the compiler that would enable ‘implicit this”.</div>\r\n<div></div>\r\n<div>Another related issue is the lack of nested block scope as in C#, it's somewhat frustrating that you cannot use blocks to introduce new variable like below, any chance support for this could be added as a switch to the compiler?</div>\r\n<div></div>\r\n<div>{ </div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> ahejlsberg<br>\r\n<strong>Sent:</strong> January 12, 2013 9:30 AM<br>\r\n<strong>To:</strong> <a href=\"mailto:bjorn@backlund.org\" target=\"_blank\">bjorn@backlund.org</a><br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n<div>\r\n<div>\r\n<div></div>\r\n<p>From: ahejlsberg</p>\r\n<div>\r\n<p>Also, a real problem is that an implicit 'this' would in some cases change the meaning of the code. For example:</p>\r\n<div>\r\n<pre><span style=\"color:blue\">var</span> x = 10;\r\n<span style=\"color:blue\">class</span> Foo {\r\n    x = 20;\r\n    f() {\r\n        console.log(x);\r\n    }\r\n}\r\n<span style=\"color:blue\">var</span> foo = <span style=\"color:blue\">new</span> Foo();\r\nfoo.f();\r\n</pre>\r\n</div>\r\n<p>In ES6 this is supposed to output '10', but it would output '20' with an implicit 'this'. We would basically break perfectly valid ES6 code!</p>\r\n<p>Anders</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/429350#post985952\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:429350]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/429350#post986130\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:429350]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2013-01-13T10:00:24.097-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986150",
    "ThreadId": "429350",
    "Html": "\r\n<div style=\"font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px\">\r\n<div>Yes looked at Script# but I don’t want to bet on something not backed by a larger player (such as MS in this case).</div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> markrendle<br>\r\n<strong>Sent:</strong> ‎January‎ ‎13‎, ‎2013 ‎10‎:‎00‎ ‎AM<br>\r\n<strong>To:</strong> bjorn@backlund.org<br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n<div></div>\r\n<p>From: markrendle</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<div dir=\"ltr\">Maybe you should look at Script# <a tabindex=\"-1\" href=\"https://github.com/nikhilk/scriptsharp\">\r\nhttps://github.com/nikhilk/scriptsharp</a> ?</div>\r\n<div><br>\r\n<br>\r\n<div>On Sun, Jan 13, 2013 at 4:32 PM, BjornBacklund <span dir=\"ltr\">&lt;<a tabindex=\"-1\" href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0px 0px 0px 0.8ex; padding-left:1ex; border-left-color:rgb(204,204,204); border-left-width:1px; border-left-style:solid\">\r\n<div>\r\n<p>From: BjornBacklund</p>\r\n<div>\r\n<div style=\"font-family:Calibri\">\r\n<div>One switch to turn TS more into C# would be sufficient <span><span color=\"\" style=\"font-family:\"></span></span></div>\r\n<div>Honestly, I’m working on a larger project with TS for the UI and C# for the backend and it would be great to be able to use the same style of programming in both worlds. TS is so much better than JS but it could be made even better if the “ES6 alignment\r\n goal” would be dropped (or overridden by aforementioned switch)</div>\r\n<div></div>\r\n<div>---bjorn</div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> markrendle<br>\r\n<strong>Sent:</strong> ‎January‎ ‎13‎, ‎2013 ‎7‎:‎21‎ ‎AM\r\n<div><br>\r\n<strong>To:</strong> <a tabindex=\"-1\" href=\"mailto:bjorn@backlund.org\" target=\"_blank\">\r\nbjorn@backlund.org</a><br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n</div>\r\n<div></div>\r\n<p>From: markrendle</p>\r\n<div>\r\n<div>\r\n<div>\r\n<div dir=\"ltr\">How many compiler switches do you want!?</div>\r\n<div><br>\r\n<br>\r\n<div>On Sat, Jan 12, 2013 at 7:07 PM, BjornBacklund <span dir=\"ltr\">&lt;<a tabindex=\"-1\" href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0px 0px 0px 0.8ex; padding-left:1ex; border-left-color:rgb(204,204,204); border-left-width:1px; border-left-style:solid\">\r\n<div>\r\n<p>From: BjornBacklund</p>\r\n<div>\r\n<div style=\"font-family:Calibri\">\r\n<div>I get this but for people like me that only does TS programming (and C#), this wouldn’t matter, I would love to have a switch in the compiler that would enable ‘implicit this”.</div>\r\n<div></div>\r\n<div>Another related issue is the lack of nested block scope as in C#, it's somewhat frustrating that you cannot use blocks to introduce new variable like below, any chance support for this could be added as a switch to the compiler?</div>\r\n<div></div>\r\n<div>{ </div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> ahejlsberg<br>\r\n<strong>Sent:</strong> January 12, 2013 9:30 AM<br>\r\n<strong>To:</strong> <a tabindex=\"-1\" href=\"mailto:bjorn@backlund.org\" target=\"_blank\">\r\nbjorn@backlund.org</a><br>\r\n<strong>Subject:</strong> Re: Make &quot;this&quot; the default context inside classes [typescript:429350]<br>\r\n</div>\r\n<div>\r\n<div>\r\n<div></div>\r\n<p>From: ahejlsberg</p>\r\n<div>\r\n<p>Also, a real problem is that an implicit 'this' would in some cases change the meaning of the code. For example:</p>\r\n<div>\r\n<pre><span style=\"color:blue\">var</span> x = 10;\n<span style=\"color:blue\">class</span> Foo {\n    x = 20;\n    f() {\n        console.log(x);\n    }\n}\n<span style=\"color:blue\">var</span> foo = <span style=\"color:blue\">new</span> Foo();\nfoo.f();\n</pre>\r\n</div>\r\n<p>In ES6 this is supposed to output '10', but it would output '20' with an implicit 'this'. We would basically break perfectly valid ES6 code!</p>\r\n<p>Anders</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div>\r\n<p>Read the <a tabindex=\"-1\" href=\"http://typescript.codeplex.com/discussions/429350#post985952\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a tabindex=\"-1\" href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:429350]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a tabindex=\"-1\" href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a tabindex=\"-1\" href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a tabindex=\"-1\" href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div>\r\n<p>Read the <a tabindex=\"-1\" href=\"http://typescript.codeplex.com/discussions/429350#post986130\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a tabindex=\"-1\" href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:429350]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a tabindex=\"-1\" href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a tabindex=\"-1\" href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a tabindex=\"-1\" href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-01-13T11:17:54.23-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986523",
    "ThreadId": "429350",
    "Html": "\r\n<p>Just some wild idea, how about allowing lambda like function declaration within a class where this would be the default context (of course this would not be 100% aligned with the ES6 proposal, but who knows they are willing to include it ;). So in the above\r\n example:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> x = 10;\r\n<span style=\"color:blue\">class</span> Foo {\r\n    x = 20;\r\n    f() {\r\n        console.log(x); <span style=\"color:green\">// prints 10</span>\r\n    }\r\n\r\n    g() =&gt; {\r\n        console.log(x); <span style=\"color:green\">// prints 20</span>\r\n    }\r\n\r\n}\r\n<span style=\"color:blue\">var</span> foo = <span style=\"color:blue\">new</span> Foo();\r\nfoo.f();\r\n</pre>\r\n<pre><br></pre>\r\n</div>\r\n<p></p>\r\n<p>// Peter</p>\r\n",
    "PostedDate": "2013-01-14T08:50:40.14-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1008191",
    "ThreadId": "429350",
    "Html": "Coffeescript provides a shorthand for this.foo in the form @foo, but my vote is for implicit this, if I do manage to shadow a member inside a class, which is pretty rare, its a simple matter to change it. Having to constantly think about 'this' in classes and have every single member access qualified is a real pain point.<br />\n",
    "PostedDate": "2013-02-28T06:19:40.13-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1010624",
    "ThreadId": "429350",
    "Html": "What if in this case TS compiler would generate an error message about ambiguous expression, so the programmer would specify &quot;this&quot; explicitly (only) in this case?\r<br />\nI think that &quot;this.&quot; - polluted code will cause serious programmer productivity slowdown and will scare-off many newcomer programmers.\r<br />\n<br />\nThank you.\r<br />\n<br />\n<strong>ahejlsberg wrote:</strong><br />\n<blockquote>\nAlso, a real problem is that&nbsp;an implicit 'this' would in some cases change the meaning of the code. For example:  var x = 10; class Foo { x = 20; f() { console.log(x); } } var foo = new Foo(); foo.f();   In ES6 this is supposed to output '10', but it would output '20' with an implicit 'this'. We would basically break perfectly valid ES6 code! Anders<br />\n</blockquote>\n",
    "PostedDate": "2013-03-05T07:31:34.087-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1011080",
    "ThreadId": "429350",
    "Html": "As a C# Programmer, even I am beginning to tire of these &quot;make it more like C#&quot; requests.<br />\nThere is plenty of things still to desire from TS, but making it more like C# is not one of them.<br />\n<br />\nIt is true that you trip up every now and then when your use to that world, but the more this stay true to JavaScript and ECMA6, the better in my mind and Anders and his team is doing a great job at this in my mind.<br />\n<br />\nAnd as Anders says, this would break working code... Although odd code maybe.<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> greet = <span style=\"color:#A31515;\">&quot;Global says Hello to&quot;</span>;\n<span style=\"color:Blue;\">module</span> mod {\n    <span style=\"color:Blue;\">var</span> greet = <span style=\"color:#A31515;\">&quot;Module says Hello to&quot;</span>;\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">class</span> cls {\n        <span style=\"color:Green;\">//var greet = &quot;Class says Hello to&quot;;</span>\n        name: <span style=\"color:Blue;\">string</span>;\n        greet = <span style=\"color:#A31515;\">&quot;Class says Hello to&quot;</span>; <span style=\"color:Green;\">//This is not the thing being used.</span>\n        <span style=\"color:Blue;\">constructor</span>(name: <span style=\"color:Blue;\">string</span>) {\n            <span style=\"color:Blue;\">this</span>.name = name;\n        }\n        speak() {\n            <span style=\"color:Blue;\">return</span> greet + <span style=\"color:#A31515;\">&quot; &quot;</span> + <span style=\"color:Blue;\">this</span>.name;\n        }\n    }\n}\n\n<span style=\"color:Blue;\">var</span> x = <span style=\"color:Blue;\">new</span> mod.cls(<span style=\"color:#A31515;\">&quot;Anders&quot;</span>);\n$(<span style=\"color:#A31515;\">&quot;#msg&quot;</span>).html(x.speak());\r\n</pre></div>One thing about the above though, we allow to define scoped variables up until classes, outside of typescript this would work:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> greet = <span style=\"color:#A31515;\">&quot;Global says Hello to&quot;</span>;\n<span style=\"color:Blue;\">var</span> mod;\n(<span style=\"color:Blue;\">function</span> (mod) {\n    <span style=\"color:Blue;\">var</span> greet = <span style=\"color:#A31515;\">&quot;Module says Hello to&quot;</span>;\n    <span style=\"color:Blue;\">var</span> cls = (<span style=\"color:Blue;\">function</span> () {\n        <span style=\"color:Blue;\">var</span> greet = <span style=\"color:#A31515;\">&quot;Class says Hello to&quot;</span>;\n        <span style=\"color:Blue;\">function</span> cls(name) {\n            <span style=\"color:Blue;\">this</span>.name = name;\n        };\n        cls.prototype.speak = <span style=\"color:Blue;\">function</span> (element) {\n            <span style=\"color:Blue;\">return</span> greet + <span style=\"color:#A31515;\">&quot; &quot;</span> +<span style=\"color:Blue;\">this</span>.name;\n        };\n        <span style=\"color:Blue;\">return</span> cls;\n    })(); \n    mod.cls = cls;\n})(mod || (mod = {}));\n\n<span style=\"color:Blue;\">var</span> x = <span style=\"color:Blue;\">new</span> mod.cls(<span style=\"color:#A31515;\">&quot;Anders&quot;</span>);\n$(<span style=\"color:#A31515;\">&quot;#msg&quot;</span>).html(x.speak());\r\n</pre></div><a href=\"http://jsfiddle.net/bCNzN/1/\" rel=\"nofollow\">http://jsfiddle.net/bCNzN/1/</a><br />\n<br />\nSo maybe the ability to defined scoped variables inside &quot;classes&quot; is missing and maybe we should allow for that like so:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">class</span> cls {\n        <span style=\"color:Blue;\">var</span> scoped_var = <span style=\"color:#A31515;\">&quot;scoped variable&quot;</span>;\n        <span style=\"color:Blue;\">public</span> pub_var = <span style=\"color:#A31515;\">&quot;public variable&quot;</span>;\n        <span style=\"color:Blue;\">private</span> pri_var = <span style=\"color:#A31515;\">&quot;Private in TS, but still public variable&quot;</span>;\n    }\n}\n\n<span style=\"color:Blue;\">var</span> x = <span style=\"color:Blue;\">new</span> mod.cls(<span style=\"color:#A31515;\">&quot;Anders&quot;</span>);\n$(<span style=\"color:#A31515;\">&quot;#msg&quot;</span>).html(x.speak());\r\n</pre></div>Not sure if that would have any implications.<br />\n<br />\nIn any case, that is a very different subject to the one this thread is about.<br />\n",
    "PostedDate": "2013-03-06T02:35:39.96-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1011097",
    "ThreadId": "429350",
    "Html": "\r\n<p dir=\"ltr\">I agree. The ES6 compatibility pledge is one of the things that gives TypeScript credibility in the non-MS world. I'm far happier knowing that the team are hard at work on generics, and hoping that a 1.0 release will follow shortly after they release\r\n that feature.</p>\r\n<div>On 6 Mar 2013 10:35, &quot;jmelgaard&quot; &lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt; wrote:<br type=\"attribution\">\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: jmelgaard</p>\r\n<div>As a C# Programmer, even I am beginning to tire of these &quot;make it more like C#&quot; requests.\r\n<br>\r\nThere is plenty of things still to desire from TS, but making it more like C# is not one of them.\r\n<br>\r\n<br>\r\nIt is true that you trip up every now and then when your use to that world, but the more this stay true to JavaScript and ECMA6, the better in my mind and Anders and his team is doing a great job at this in my mind.\r\n<br>\r\n<br>\r\nAnd as Anders says, this would break working code... e.g.<br>\r\n<pre><code>var greet = &quot;Global says Hello to&quot;;\r\nmodule mod {\r\n    var greet = &quot;Module says Hello to&quot;;\r\n    export class cls {\r\n        //var greet = &quot;Class says Hello to&quot;;\r\n        name: string;\r\n        constructor(name: string) {\r\n            <a href=\"http://this.name\" target=\"_blank\">this.name</a> = name;\r\n        }\r\n        speak() {\r\n            return greet &#43; &quot; &quot; &#43; <a href=\"http://this.name\" target=\"_blank\">this.name</a>;\r\n        }\r\n    }\r\n}\r\n\r\nvar x = new mod.cls(&quot;Anders&quot;);\r\n$(&quot;#msg&quot;).html(x.speak());</code></pre>\r\nOne thing about the above though, we allow to define scoped variables up until classes, outside of typescript this would work:<br>\r\n<pre><code>var greet = &quot;Global says Hello to&quot;;\r\nvar mod;\r\n(function (mod) {\r\n    var greet = &quot;Module says Hello to&quot;;\r\n    var cls = (function () {\r\n        var greet = &quot;Class says Hello to&quot;;\r\n        function cls(name) {\r\n            <a href=\"http://this.name\" target=\"_blank\">this.name</a> = name;\r\n        };\r\n        cls.prototype.speak = function (element) {\r\n            return greet &#43; &quot; &quot; &#43;<a href=\"http://this.name\" target=\"_blank\">this.name</a>;\r\n        };\r\n        return cls;\r\n    })(); \r\n    mod.cls = cls;\r\n})(mod || (mod = {}));\r\n\r\nvar x = new mod.cls(&quot;Anders&quot;);\r\n$(&quot;#msg&quot;).html(x.speak());</code></pre>\r\n<a href=\"http://jsfiddle.net/bCNzN/1/\" rel=\"nofollow\" target=\"_blank\">http://jsfiddle.net/bCNzN/1/</a>\r\n<br>\r\n<br>\r\nSo maybe the ability to defined scoped variables inside &quot;classes&quot; is missing, but that is in my mind a very different subject to the one this thread is about.<br>\r\n</div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/429350#post1011080\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:429350]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n",
    "PostedDate": "2013-03-06T03:06:01.89-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1011225",
    "ThreadId": "429350",
    "Html": "I agree it is minorly burdensome to write <code>this</code> all over the place, but on the other hand, TS is not C# and as Anders illustrated, it's very clear why it's necessary. Modules in TS are closer to static classes in C# than they are to namespaces. The fact that modules, and indeed, the global scope, can contain variables and functions makes some kind of qualification for class members necessary. \r<br />\n<br />\nIf anything, I'd support a shortcut <code>@</code> to access member variables/functions, though this seems pretty low priority on a wish list of features. <br />\n",
    "PostedDate": "2013-03-06T07:34:41.727-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1016934",
    "ThreadId": "429350",
    "Html": "I vote  for explicitly forcing developers to type &quot;this&quot; . It forces us to be responsible in how we code our scopes!.\r<br />\n<br />\n<br />\nI've been slowly building my own UI framework on top of TypeScript, and as painful as it is to keep writing &quot;this. &quot; its forcing me to think about the scope within my functions/methods/classes/modules etc. <br />\n",
    "PostedDate": "2013-03-18T02:59:50.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1019801",
    "ThreadId": "429350",
    "Html": "<h1>Hello, Anders and everybody!</h1>\nStop, stop, stop! This is TypeScript or not <strong>TYPE</strong> Script? And what type <strong>this</strong> is? Who knows?\r<br />\n<br />\nWe <strong>BADLY</strong> need to bind <strong>this</strong> keyword to object context somehow. ECMAScript was ugly bastard (as well as ECMAScript 6) and we do not want another peace of s... but just strongly typed. Every JavaScript developer sooner or later makes this hack:<br />\n<pre><code>function MyClass() {\n    var _this = this;\n    ...\n}</code></pre>\n\n<strong>Every</strong> one and <strong>every</strong> time.\r<br />\n<br />\nIf you do not want to break existing behavior yo can use another keyword: 'me', 'self', '@', '@this' or bind with alternative syntax: method() =&gt;{ ... }. You know it. But please <strong>DO SOMETHING</strong> or TypeScript will fail against CoffeeScript. We need syntax sugar.\r<br />\n<br />\nThanks.<br />\n",
    "PostedDate": "2013-03-22T14:14:23.427-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1019863",
    "ThreadId": "429350",
    "Html": "I will vote for explicit this keyword.\r<br />\n<br />\nAs a functional programming language ECMAScript, the class SHOULD NOT be the most important thing. This in ECMASCRIPT make a lot thing dynamic and convinent. For example, if I want to make some function general for all of class, everything I shou do is just create a function, and use it like\r<br />\n<br />\nFunc.call( someObj )\r<br />\n<br />\nAnd the this in the function will be the someObj.\r<br />\n<br />\nFor the method in a class, it's shoule be a same FUNCTION. Anyhow the TypeScript is a syntax sugar of ECMAScript, not another language like c# or coffee script etc.<br />\n",
    "PostedDate": "2013-03-22T18:49:02.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1029023",
    "ThreadId": "429350",
    "Html": "I would LOVE to see something like <strong>@this</strong> or <strong>self</strong> to exist, or some way of not having to shoe horn almost all my code into the constructor which is AWFUL (imo). As I currently make heavy use of event systems to relay messages throughout the systems and lawnchair, knockout, jquery etc they all swap and change the <strong>this</strong> context. In the case of lawnchair there was no <strong>nice</strong> solution to the problem:<br />\n<br />\n<a href=\"http://stackoverflow.com/questions/15679838/using-lawnchair-with-typescript\" rel=\"nofollow\">http://stackoverflow.com/questions/15679838/using-lawnchair-with-typescript</a><br />\n<br />\nAs some of my view models are pretty big, even after they have been broken up into smaller components it is horrible to look at the constructor having reams of code in it, and then there is the documentation comments put on above to generate the documentation for plugin developers to use. It just ends up looking like a huge mess.<br />\n<br />\nCurrently for me Typescript has worse <strong>this</strong> handling than raw JS only because it stills allows the overwriting of the keywords scope but also forces you to use <em>this</em> as a prefix for calling any class methods. So you are unable to use the old JS trick of:<br />\n<pre><code>function SomeClass()\n{\n    var self = this;\n    \n    this.AlertSomething = function(something) { alert(something); };\n    this.SomeCallbackWithScopedThis = function() { self.AlertSomething(this); }\n}</code></pre>\n\nAs the same example in typescript would not work, as shown here:<br />\n<pre><code>class SomeClass\n{\n    private self: any;\n    constructor() { this.self = this; }\n    \n    public AlertSomething = function(something) { alert(something); };\n    public SomeCallbackWithScopedThis = function() { this.self.AlertSomething(this); } // you need the this prefix making it pointless\n}</code></pre>\n\nSo it is like Typescript is forcing you to write your code with the this always meaning the context of the class when you want to invoke its methods, but also allowing others to play with the this scope so you can NEVER be sure as to where your methods are being invoked from and what scope has been tampered with, as even our simple methods which do business logic and never touch the UI may be triggered from an ajax callback which was triggered from a UI event which ends up invoking with an altered scope.<br />\n<br />\nIf you could at least have lambda style class level methods to have a locally inferred <strong>this</strong> it would solve a huge amount of these problems, but for me it seems like the current implementation is too unstable for serious development of large UI projects... and yes I know I could put it all in the constructor, but that to me is a work around, not a solution.<br />\n<br />\n== Edit ==<br />\n<br />\nJust to be clear I am not really for having the default scope of <strong>this</strong> being the current class instance, I think it should be left as it is in JS. I am however for another means to access the current instance or at least cache it for usage... just some way of being able to guarentee the context of the instance OUTSIDE of the constructor.<br />\n",
    "PostedDate": "2013-04-11T07:36:16.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1029209",
    "ThreadId": "429350",
    "Html": "I like that TypeScript is basically just JavaScript (or ECMAScript 6) with type extensions. Changing the way &quot;this&quot; works would break that distinction. Then TypeScript would be some other language like AS3. If you want that kind of functionality, might as well use one of those (Jangaroo and FalconJx can compile AS3 to JS if you want!).\r<br />\n<br />\nThat said, maybe we can at least get the coffeescriptesque @ operator to cut down on some of the typing? this.prop would become <a href=\"mailto:@prop\" rel=\"nofollow\">@prop</a>. Clean and simple.\r<br />\n<br />\nAlso, you should never have to shoehorn everything into a constructor. I've seen that a couple of times on these forums (and I'm not here often). You can use a local reference in the current scope chain and method.call (the way vanilla JS users do it) or you can use the &quot;arrow function&quot; syntax (aka the &quot;fat arrow&quot;) which basically sets that up for you. It's cleaner than stuffing everything into a constructor.<br />\n",
    "PostedDate": "2013-04-11T13:53:06.797-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1029374",
    "ThreadId": "429350",
    "Html": "@CaptainN Could you please show me some examples of what you mean in the latter paragraph? I know that the lambda style methods should set the <strong>this</strong> scope correctly, however I am unable to define my methods using that mechanism as it tells me that the this keyword cannot be used in that context i.e:<br />\n<pre><code>class SomeClass\n{\n    private SomeObject: any;\n    public SomeCallbackMethod = (result) =&gt; { this.SomeObject.InvokeSomething(result); }\n}</code></pre>\n\nNot sure what you mean by the method.call way, but if you could post examples of what you mean in both cases it would be very helpful to me and im sure others, as there is VERY LITTLE useful information on the ways to access <strong>this</strong> correctly outside of the constructor and guarantee the scope would be fine regardless of where it is invoked from.\r<br />\n<br />\nI have an SO question along these lines (Although not 100% relevant), which I would be happy to upvote if you put the examples in.\r<br />\n<br />\n<a href=\"http://stackoverflow.com/questions/15925500/issue-with-child-scoping-of-this-in-typescript\" rel=\"nofollow\">http://stackoverflow.com/questions/15925500/issue-with-child-scoping-of-this-in-typescript</a><br />\n",
    "PostedDate": "2013-04-12T00:19:30.723-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1057906",
    "ThreadId": "429350",
    "Html": "<strong>Dubrovsky wrote:</strong><br />\n<blockquote>\n<h1>Hello, Anders and everybody!</h1>\nStop, stop, stop! This is TypeScript or not <strong>TYPE</strong> Script? And what type <strong>this</strong> is? Who knows?<br />\n<br />\nWe <strong>BADLY</strong> need to bind <strong>this</strong> keyword to object context somehow. ECMAScript was ugly bastard (as well as ECMAScript 6) and we do not want another peace of s... but just strongly typed. Every JavaScript developer sooner or later makes this hack:<br />\n<pre><code>function MyClass() {\n    var _this = this;\n    ...\n}</code></pre>\n\n<strong>Every</strong> one and <strong>every</strong> time.<br />\n<br />\nIf you do not want to break existing behavior yo can use another keyword: 'me', 'self', '@', '@this' or bind with alternative syntax: method() =&gt;{ ... }. You know it. But please <strong>DO SOMETHING</strong> or TypeScript will fail against CoffeeScript. We need syntax sugar.<br />\n</blockquote>\nCompletely agree. \r<br />\nCould someone from the TS team shed the light on progress in this direction? It`s really pain in the a.. when implementing methods that should access local variables. You end up with constructor pollution which became very ugly for the big classes. <br />\n",
    "PostedDate": "2013-06-17T12:29:56.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1058248",
    "ThreadId": "429350",
    "Html": "We are planning to lift the restriction on accessing 'this' in property initializers so you can initialize properties with lambdas. That should go a long way towards addressing this problem.\r<br />\n<br />\nMore details here: <a href=\"http://typescript.codeplex.com/discussions/447071\" rel=\"nofollow\">http://typescript.codeplex.com/discussions/447071</a><br />\n",
    "PostedDate": "2013-06-18T08:05:38.25-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1206311",
    "ThreadId": "429350",
    "Html": "Agree with Dubrovsky and armsoft - TypeScript does't need to replicate ECMAScript puzzles with &quot;this&quot;.\r<br />\nIt should be object context bound 1) because it's sweet 2) because it fits TypeScript philosophy.\r<br />\nCompatibility issues between TS's 'this' and ECMAScript's 'this' could be transparently solved on tsc state, without even need to introduce another keyword. <br />\n",
    "PostedDate": "2014-02-10T05:12:47.373-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]