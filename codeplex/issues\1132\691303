export interface IPromise<T> {
    then<U>(onFulfilled: (value: T) => U): IPromise<U>;
    then<U>(onFulfilled: (value: T) => IPromise<U>): IPromise<U>;
    then<U>(onFulfilled: (value: T) => U, onReject: (reason: T) => U): IPromise<U>;
    then<U>(onFulfilled: (value: T) => U, onReject: (reason) => IPromise<U>): IPromise<U>;
    then<U>(onFulfilled?: (value: T) => IPromise<U>, onReject?: (reason) => U): IPromise<U>;
    then<U>(onFulfilled?: (value: T) => IPromise<U>, onReject?: (reason) => IPromise<U>): IPromise<U>;
}

//interface IPromise<T> {
//    then<U>(onFulfilled: (value: T) => U): IPromise;
//    then<U>(onFulfilled: (value: T) => IPromise): IPromise;
//    then<U>(onFulfilled: (value: T) => U, onReject: (reason: T) => U): IPromise;
//    then<U>(onFulfilled: (value: T) => U, onReject: (reason) => IPromise): IPromise;
//    then<U>(onFulfilled?: (value: T) => IPromise, onReject?: (reason) => U): IPromise;
//    then<U>(onFulfilled?: (value: T) => IPromise, onReject?: (reason) => IPromise): IPromise;
//}

//export = IPromise;