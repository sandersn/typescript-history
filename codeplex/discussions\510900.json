[
  {
    "Id": "1180570",
    "ThreadId": "510900",
    "Html": "Hello,\r<br />\n<br />\nI was wondering if the TypeScript team considered alternative output for AMD-based TypeScript modules.\r<br />\n<br />\nFor example this TS file:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">import</span> dep1 = require(<span style=\"color:#A31515;\">&#39;./dep1&#39;</span>);\n<span style=\"color:Blue;\">import</span> dep2 = require(<span style=\"color:#A31515;\">&#39;./dep2&#39;</span>);\n\n<span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">function</span> x() {\n    <span style=\"color:Blue;\">return</span> dep1.x() + dep2.x();\n}\r\n</pre></div>when compiled using --module amd flag produces following JavaScript file:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\ndefine([<span style=\"color:#A31515;\">&quot;require&quot;</span>, <span style=\"color:#A31515;\">&quot;exports&quot;</span>, <span style=\"color:#A31515;\">&#39;./dep1&#39;</span>, <span style=\"color:#A31515;\">&#39;./dep2&#39;</span>], <span style=\"color:Blue;\">function</span>(require, exports, dep1, dep2) {\n    <span style=\"color:Blue;\">function</span> x() {\n        <span style=\"color:Blue;\">return</span> dep1.x() + dep2.x();\n    }\n    exports.x = x;\n});\r\n</pre></div>The dependencies are grouped together into an array.\r<br />\n<br />\nRequire.js provides a sugar syntax that IMHO makes the JavaScript output more similar to the TypeScript output making it also more readable.\r<br />\n<br />\nThe example JS output above would look like this using sugar syntax:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\ndefine(<span style=\"color:Blue;\">function</span>(require, exports) {\n    <span style=\"color:Blue;\">var</span> dep1 = require(<span style=\"color:#A31515;\">&#39;./dep1&#39;</span>);\n    <span style=\"color:Blue;\">var</span> dep2 = require(<span style=\"color:#A31515;\">&#39;./dep2&#39;</span>);\n\n    <span style=\"color:Blue;\">function</span> x() {\n        <span style=\"color:Blue;\">return</span> dep1.x() + dep2.x();\n    }\n    exports.x = x;\n});\r\n</pre></div>Note that it still works the same way as the array syntax as require.js scans the function definition and extracts require calls before executing the function. When using optimizer it will actually insert the array of dependencies at build time.\r<br />\n<br />\nMore details are here: <a href=\"http://requirejs.org/docs/whyamd.html#sugar\" rel=\"nofollow\">http://requirejs.org/docs/whyamd.html#sugar</a>\r<br />\n<br />\nThe sugar syntax could also be a way to resolve issues with loading things outside TypeScript imports (require.js plugins, for example templates):<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">import</span> dep1 = require(<span style=\"color:#A31515;\">&#39;./dep1&#39;</span>);\n<span style=\"color:Blue;\">import</span> dep2 = require(<span style=\"color:#A31515;\">&#39;./dep2&#39;</span>);\n\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">function</span> require(name: <span style=\"color:Blue;\">string</span>): <span style=\"color:Blue;\">any</span>;\n<span style=\"color:Green;\">// or predefine it when using external modules - it&#39;s already in scope!</span>\n\n<span style=\"color:Blue;\">var</span> template: <span style=\"color:Blue;\">string</span> = require(<span style=\"color:#A31515;\">&#39;text!template.html&#39;</span>);\n\n<span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">function</span> x() {\n    <span style=\"color:Blue;\">return</span> dep1.x() + dep2.x();\n}\r\n</pre></div>would turn into:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\ndefine(<span style=\"color:Blue;\">function</span>(require, exports) {\n    <span style=\"color:Blue;\">var</span> dep1 = require(<span style=\"color:#A31515;\">&#39;./dep1&#39;</span>);\n    <span style=\"color:Blue;\">var</span> dep2 = require(<span style=\"color:#A31515;\">&#39;./dep2&#39;</span>);\n\n    <span style=\"color:Blue;\">var</span> template = require(<span style=\"color:#A31515;\">&#39;text!template.html&#39;</span>);\n\n    <span style=\"color:Blue;\">function</span> x() {\n        <span style=\"color:Blue;\">return</span> dep1.x() + dep2.x();\n    }\n    exports.x = x;\n});\r\n</pre></div>and the need for // &lt;amd-dependency&gt; disappears because require.js grabs all require(constant string) calls at run- or build-time. Predefining require function in lib.d.ts would make working with require.js plugins a truly seamless experience.\r<br />\n<br />\nThe only disadvantage that I see may be incomatibility with other AMD loaders that I don't know of (as I work only with require.js).<br />\n",
    "PostedDate": "2014-01-19T05:55:44.263-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]