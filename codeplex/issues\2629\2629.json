{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Thanks for logging this issue. We've moved to a new codebase on GitHub; please try your issue against the new compiler (once possible) and log an issue on the GitHub site if it still reproduces.",
    "ClosedDate": "2014-07-21T13:46:46.457-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "The following is an error\r\n\r\n```typescript\r\ninterface StatusFilterItem {\r\n    url: string;     \r\n}\r\n\r\nvar foo = <StatusFilterItem>{d:'sdf'}; // error\r\n```\r\n\r\nBy extension since `foo` was an error above, The following should be an error as well: \r\n\r\n```typescript\r\ninterface StatusFilterItem {\r\n    url: string;     \r\n}\r\n\r\nvar foo = <StatusFilterItem[]>[\r\n\t{d:'sdf'} // No error reported. This should be an error.\r\n]; \r\n\r\n```",
    "LastUpdatedDate": "2014-07-21T13:46:46.457-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-07-16T20:55:22.573-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Type Assertion not enforcing sub-items in an array",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2629
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "The first one I gather is ok because you can cast down to a derived type from a super type, and {} is the base for all objects.  Also, I can see how common it would be to want to create a new object for an interface reference varible so you can easily initialize the properties.\n\nThe second one I agree looks odd.",
      "PostedDate": "2014-07-16T23:22:23.493-07:00",
      "Id": 152663
    },
    {
      "Message": "The second one should be an error. The first one isn't an error because type assertions check assignability in both directions and are satisfied if at least one direction is safe, from section 4.13 of the spec:\n\n_In a type assertion expression of the form < T > e, e is contextually typed (section 4.19) by T and the resulting type of e is required to be assignable to T, or T is required to be assignable to the widened form of the resulting type of e, or otherwise a compile-time error occurs. The type of the result is T.\nType assertions check for assignment compatibility in both directions. Thus, type assertions allow type conversions that might be correct, but arenâ€™t known to be correct. \n_",
      "PostedDate": "2014-07-17T14:42:39.537-07:00",
      "Id": 152786
    },
    {
      "Message": "Thanks @danquirk updated issue to make it easier to track.",
      "PostedDate": "2014-07-17T16:22:26.407-07:00",
      "Id": 152806
    }
  ]
}