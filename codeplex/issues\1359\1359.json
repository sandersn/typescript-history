{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This is by design. Rest parameters are always emitted in this way. If you want you can write an overload with optional rest parameters and an implementation with 0 arguments. Then you can manually implement handling the values in the arguments array and still get completion lists that present rest args for that function.",
    "ClosedDate": "2013-07-19T11:25:54.5-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Implementing this code ...\r\n\r\n```\r\nsomeFunc(...args: string[]) {\r\n    for (var i = 0; i < arguments.length; i++)\r\n        /*do something*/;\r\n}\r\n\r\n```\r\n... causes this code to be inserted at the top of the created function ...\r\n\r\n```\r\nvar args = [];\r\nfor (var _i = 0; _i < (arguments.length - 0); _i++) {\r\n    args[_i] = arguments[_i + 0];\r\n}\r\n```\r\n\r\nThere is no way to prevent this.  I would think doing something like this might do it:\r\n\r\n```\r\nsomeFunc(...arguments: string[]) {\r\n    for (var i = 0; i < arguments.length; i++)\r\n        /*do something*/;\r\n}\r\n\r\n```\r\n\r\nBut that blasted code keeps getting inserted. :(  I think more work is needed to optimize how the compiler inserts extra code in this case.",
    "LastUpdatedDate": "2013-07-19T11:25:54.5-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-17T15:14:23.717-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Open parameters not efficient",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1359
  },
  "FileAttachments": [],
  "Comments": []
}