[
  {
    "Id": "920130",
    "ThreadId": "397571",
    "Html": "\r\n<p>&amp;&amp; needs to be like || and return the best common type. As an example, TypeScript compiles the following</p>\r\n<p>var x = &quot;&quot; &amp;&amp; 7;</p>\r\n<p>with x's type as &quot;number&quot;, even though x will be a string.</p>\r\n",
    "PostedDate": "2012-10-01T11:01:32.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920190",
    "ThreadId": "397571",
    "Html": "<p>The current typing rules&nbsp;are very much intentional because of common constructs like this:</p>\r\n<p>var x = GetCustomer(...);<br />var&nbsp;name =&nbsp;x &amp;&amp; x.name; //&nbsp;Note: no BCT exists!<br />if(name) { /* we want&nbsp;name to be of type 'string' here, not the BCT of (Customer, string) or 'any'&nbsp;*/&nbsp;}<br /><br />In the case of (\"\" &amp;&amp; 7), there's not really any common type other than 'any' we could assign anyway. Unfortunately, the way the &amp;&amp; operator is actually used in idiomatic JS, there's no one rule that will accurately capture the semantics of real-world &amp;&amp; usage (same for ||, but the rules are different because the common use cases are different).</p>",
    "PostedDate": "2012-10-01T13:30:47.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]