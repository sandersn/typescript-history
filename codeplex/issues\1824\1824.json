{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-10-22T09:19:12.43-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Check this out:\r\n```\r\n    concat<U extends T[]>(...items: U[]): T[];\r\n```\r\n\r\nNotice the square brackets after the first appearance of `T`? They shouldn't be there, should they?\r\nThis exists at least as early as 0.9.1.1 and all the way to develop.",
    "LastUpdatedDate": "2013-10-22T09:19:12.43-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-10-21T20:27:52.777-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "lib.d.ts typo in Array.concat",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1824
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "That is one of the overloads, and I believe is correct.  Concat can either take individual elements or arrays of elements as arguments, and will join them into one array.  Below shows the ways this may be called, and the declaration that matches.\n\n```typescript\n// Overload is: concat(...items: T[]): T[];\n[1,2].concat(3,4,5);  // => [1, 2, 3, 4, 5]\n\n// Overload is: concat<U extends T[]>(...items: U[]): T[];\n[1,2].concat([3,4],[5,6]); // => [1, 2, 3, 4, 5, 6]\n```",
      "PostedDate": "2013-10-22T09:19:05.77-07:00",
      "Id": 119215
    }
  ]
}