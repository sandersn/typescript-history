{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Closing as duplicate of http://typescript.codeplex.com/workitem/166 -- overriding private members will not be allowed in future releases.",
    "ClosedDate": "2013-01-22T14:28:10.673-08:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "If I have a private function in class A, then define a private function with the same name in class B that derives from A, then that function will override the base function without warning. In my opinion, derived classes should be prevented from overriding private members of the base class, either by renaming them or by issuing a compiler error.",
    "LastUpdatedDate": "2014-01-10T10:34:33.287-08:00",
    "PlannedForRelease": "TypeScript 0.8.3",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-26T14:45:03.863-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "It's too easy to accidentally override private functions",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 13,
    "Id": 335
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for reporting this issue! Marking it as 'Active' (to be fixed).",
      "PostedDate": "2012-11-05T16:24:55.563-08:00",
      "Id": 81718
    },
    {
      "Message": "Would it not be better to add a 'protected' access modifier rather than preventing a developer from overriding private methods all together? I can think of plenty of times where overriding publicly inaccessible methods would make sense.  ",
      "PostedDate": "2013-01-10T09:03:24.26-08:00",
      "Id": 85714
    }
  ]
}