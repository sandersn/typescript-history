{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This has been an error since 0.9.0.\n\nYou can add overloads, but it looks like this:\n```\ninterface IAlpha {\n    method(first: number): void;\n}\n\ninterface IBeta extends IAlpha {\n    //Adding an overload\n    method(first: number): void;\n    method(first:number, second: number): void;\n}\n```\n\nThe way to think of this is that `method` is being completely replaced by a new property with the same name which has to be a subtype of the thing it's replacing. You don't want always want the new member to just add an overload (for example, you might be changing just the return type, or adding new optional parameters).",
    "ClosedDate": "2013-12-16T09:28:41.83-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Here's code from the playground that doesn't compile:\r\n\r\n```\r\ninterface IAlpha {\r\n\tmethod(first: number): void;\r\n}\r\n\r\ninterface IBeta extends IAlpha {\r\n\t//Adding an overload\r\n\tmethod(first:number, second: number): void;\r\n}\r\n```\r\n\r\nThe 0.9.1 compiler did not consider this a bug, and even if that was a mistake, it seems worthwhile to be able to add overloads on interface extension.",
    "LastUpdatedDate": "2013-12-16T09:28:41.83-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-14T15:21:38.167-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Interface inheritance doesn't support adding overloads",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2019
  },
  "FileAttachments": [],
  "Comments": []
}