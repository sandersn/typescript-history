{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.66-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Check out this code:\r\n\r\n```ts\r\ninterface I {\r\n\tX?: number;\r\n\tY?: string;\r\n}\r\n\r\nvar i: I;\r\ni.X = 5;\r\n\r\nfunction f() {\r\n\treturn <I> { X: 1, Y: 'a' };\r\n}\r\n```\r\n\r\n([playground link](http://www.typescriptlang.org/Playground/#src=interface%20I%20%7B%0D%0A%09X%3F%3A%20number%3B%0D%0A%09Y%3F%3A%20string%3B%0D%0A%7D%0D%0A%0D%0Avar%20i%3A%20I%3B%0D%0Ai.X%20%3D%205%3B%0D%0A%0D%0Afunction%20f()%20%7B%0D%0A%09return%20%3CI%3E%20%7B%20X%3A%201%2C%20Y%3A%20'a'%20%7D%0D%0A))\r\n\r\nNotice how the `I.X` member is referenced two times - once in the `i.X` assignment and once in the object literal inside function `f()`. Now, if I put my caret on the `X` definition and hit F2, the definition itself and the `i.X` assignment get renamed, - but the object literal remains as it was. Worse still, because `X` is an optional property, the compiler doesn't catch the rename at compile time either, and I end up with a good old JavaScript typo situation.\r\n\r\nI do realize that it is not always possible for the compiler to know if an object literal is intended to represent an interface or not. For example:\r\n\r\n```ts\r\ninterface I {\r\n\tX?: number;\r\n}\r\ninterface J {\r\n\tX?: number;\r\n\tY?: string;\r\n}\r\n\r\nvar i: I = f();\r\nvar j: J = f();\r\n\r\nfunction f() {\r\n\treturn { X: 1 }\r\n}\r\n```\r\n\r\nHowever, I am willing to go an extra mile to help the compiler out here. That's why I put the `<I>` annotation on the object literal in the first example. The problem, however, is that it's impossible for me to lend the compiler a hand, even when I want to.\r\n\r\nThis is a very real and painful problem when working with property bags, which is a very common JS pattern.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-05-22T07:38:32.303-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Rename function doesn't affect inline object literals",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 6,
    "Id": 2518
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Definitely feel the pain here. There's some design work here to figure out exactly how we'd want this to behave, others can upvote to help us gauge priority.",
      "PostedDate": "2014-05-30T13:09:46.253-07:00",
      "Id": 148428
    }
  ]
}