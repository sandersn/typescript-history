{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Thanks for logging this issue. We've moved to a new codebase on GitHub; please try your issue against the new compiler (once possible) and log an issue on the GitHub site if it still reproduces.",
    "ClosedDate": "2014-07-21T13:17:58.013-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Trying my best to pick the right terminology:\r\n- Is there a semantic difference in defining a method of an interface using function syntax compared to lambda syntax?\r\n- If so, is this by design?\r\n\r\nConsider an external module:\r\n\r\n```\r\n// some interface with a method\r\nexport interface Foo {\r\n    bar(): void;\r\n}\r\n\r\n// function at a module level with the same name as the method but different signature\r\nexport function bar(value: string): void {\r\n}\r\n\r\nvar one: Foo = {\r\n    bar() {\r\n        bar('Hey!'); // doesn't work\r\n    }\r\n};\r\n\r\nvar another: Foo = {\r\n    bar: () => bar('Hey!') // works\r\n};\r\n```\r\n\r\n\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:34.217-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-03-26T11:10:37.76-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Lambda vs function syntax in object literal initializer changes function resolution",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 2358
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This does look like a bug, as the JS output for \"one\" and \"another\" are almost identical.  My guess is that the first format for \"one\" is being treated like an class instance function, even thought no \"_this\" is being added.  It seems to think it is calling itself. :)",
      "PostedDate": "2014-03-27T14:02:29.057-07:00",
      "Id": 139040
    }
  ]
}