[
  {
    "Id": "1060412",
    "ThreadId": "448057",
    "Html": "Currently, it is possible to create a module and a class with the same name:<br />\n<pre><code>module A {\n    export class M {\n        public g () {}\n    }\n    \n    export module M {\n        export function f () {}\n    }\n}</code></pre>\n\nIn the generated code, the module and the class will be the same object.\r<br />\n<br />\nIs this behavior that is intended, and can we rely on it staying this way? Or might this be disallowed in the future, or generate two separate objects?<br />\n",
    "PostedDate": "2013-06-24T07:46:30.85-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1060454",
    "ThreadId": "448057",
    "Html": "It is allowed now, and it creates a hybrid of the two.  You can read about this under &quot;Declaration Merging&quot; here <a href=\"http://blogs.msdn.com/b/typescript/archive/2013/06/18/announcing-typescript-0-9.aspx\" rel=\"nofollow\">http://blogs.msdn.com/b/typescript/archive/2013/06/18/announcing-typescript-0-9.aspx</a><br />\n",
    "PostedDate": "2013-06-24T09:05:14.597-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1060485",
    "ThreadId": "448057",
    "Html": "Thanks! We're generating code that looks like this, in an effort to migrate from our previous class system to TypeScript. I wanted to make sure I wasn't building on quicksand.<br />\n",
    "PostedDate": "2013-06-24T10:04:32.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1060489",
    "ThreadId": "448057",
    "Html": "One strange thing I noticed: this works as long as you declare the class first, but not if you declare the module first (unless you don't export the module). Is this intended behavior as well?<br />\n",
    "PostedDate": "2013-06-24T10:16:49.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1060518",
    "ThreadId": "448057",
    "Html": "The intended behavior is that the class must be declared before the module. This is to ensure that the combined class/module object is created as a (constructor) function as JavaScript provides no way to add &quot;functionness&quot; to an already existing object. The topic is covered in detail in section 10.5 of the Language Specification.\r<br />\n<br />\nIt is entirely possible that the error messages produced by the compiler aren't as helpful as they could be in this area.<br />\n",
    "PostedDate": "2013-06-24T11:28:33.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1060550",
    "ThreadId": "448057",
    "Html": "The error currently just says <code>Duplicate identifier</code>, which indeed doesn't really help explain that it would be allowed if the order was swapped.<br />\n",
    "PostedDate": "2013-06-24T12:53:27.397-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1060566",
    "ThreadId": "448057",
    "Html": "Yeah we're aware that the error messages here aren't great. We hope to improve them over time but first we want to make sure that things written correctly always work :)<br />\n",
    "PostedDate": "2013-06-24T13:35:37.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1060764",
    "ThreadId": "448057",
    "Html": "Noble goal! Thanks again for all the hard work!<br />\n",
    "PostedDate": "2013-06-25T02:07:25.85-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]