{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:23-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "I've created a `coalesce` function that is fairly simple:\r\n\r\n```\r\nfunction coalesce<T>(value: T, replacement: T) : T {\r\n\treturn typeof value === \"undefined\" ? replacement : value;\r\n} \r\n```\r\n\r\nSaying that both `value` and `replacement` are of type `T`, I expect them to match. However, type inference in TypeScript says that `T` is `any`, thefore any pairs of objects work:\r\n\r\n```\r\ncoalesce(1, \"test\"); // must break, but doesn't!\r\n```\r\n\r\nIf it is by design, is there any way to enforce argument types to match and throw an error if they don't?",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-07-14T06:23:13.11-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Bug: generic function argument types not enforced",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2620
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "You can manually specify the type:\n\n    coalesce<number>(1, \"test\"); // Now it breaks!",
      "PostedDate": "2014-07-14T06:46:02.983-07:00",
      "Id": 152325
    },
    {
      "Message": "@SaschaNaz, thank you, it really does work!\n\nAre there any plans on making this type inference automatic?",
      "PostedDate": "2014-07-14T07:29:47.4-07:00",
      "Id": 152329
    },
    {
      "Message": "We're talking about a mode of the compiler that would enforce this more strictly.\r\n\r\nOn the plus side, `coalesce(1, 'test')` returns a value of type `{}`, which will be an error to use almost anywhere, so you'll usually get a compile error at some point.",
      "PostedDate": "2014-07-14T09:38:28.95-07:00",
      "Id": 152344
    }
  ]
}