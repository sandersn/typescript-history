[
  {
    "Id": "980995",
    "ThreadId": "427845",
    "Html": "\r\n<p>It would be great to have the C# style #region/#endregion for code organization.</p>\r\n<p>From my limited experience with JavaScript and TypeScript, it looks as if this would be even more useful than it is in C#.</p>\r\n",
    "PostedDate": "2012-12-27T13:23:14.74-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995168",
    "ThreadId": "427845",
    "Html": "Just discovered that you can get support for regions by installing Web Essentials <a href=\"http://visualstudiogallery.msdn.microsoft.com/07d54d12-7133-4e15-becb-6f451ea3bea6\" rel=\"nofollow\">http://visualstudiogallery.msdn.microsoft.com/07d54d12-7133-4e15-becb-6f451ea3bea6</a><br />\n",
    "PostedDate": "2013-02-01T05:47:26.597-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995174",
    "ThreadId": "427845",
    "Html": "NO NO NO NO NO!\r<br />\n<br />\nThe #region directive enables badly-organised code files, with thousands of lines of code in a single file.\r<br />\n<br />\nThis is not how you manage your code, people.\r<br />\n<br />\nIf you find yourself thinking &quot;this is getting a little unwieldy, I'll wrap this code in a region&quot;, STOP, and refactor your code immediately. Break your massive class down into several smaller, Single-Responsibility classes. Make judicious use of inheritance. If you haven't got time to refactor right now, then live with it without the #region tag; eventually, you'll find the time.\r<br />\n<br />\nIntroducing #region directives into TypeScript will facilitate and encourage lazy programming, and create the same kind of unmaintainable code ghettos I spend far too much of my consulting time ripping apart in code reviews.\r<br />\n<br />\nPlease, please don't do this.<br />\n",
    "PostedDate": "2013-02-01T05:58:18.633-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995187",
    "ThreadId": "427845",
    "Html": "It's also a workaround to collapsing functions, nested in class methods in TypeScript.<br />\n",
    "PostedDate": "2013-02-01T06:20:13.543-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995238",
    "ThreadId": "427845",
    "Html": "Agree with <a href=\"mailto:@markrendle.\r\n\r\nPartial\" rel=\"nofollow\">@markrendle.\r\n\r\nPartial</a> classes and #region/#endregions are both used to give the impression of succinct code - where no such thing exists.<br />\n",
    "PostedDate": "2013-02-01T07:32:29.607-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995248",
    "ThreadId": "427845",
    "Html": "&lt;div style=&quot;font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px&quot;&gt;\r\n&lt;div&gt;I’ve written quite a lot of code over the years and sometimes you end up with large classes no matter what and I’m especially fond of partial classes and #regions to group for example the implementation of an interface. Let’s say a class needs to implement\r\n interface A, B and C, then I tend to place each interface implementation in either a partial class file or in a region. One convenient benefit of placing an interface implementation in a partial class file is that when you need to add the interface to another\r\n class, you just copy and paste the file.&lt;/div&gt;\r\n&lt;div&gt;Just my 2 cents,&lt;/div&gt;\r\n&lt;div&gt;---bjorn&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;div style=&quot;border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid&quot;&gt;\r\n&lt;strong&gt;From:&lt;/strong&gt; nabog&lt;br&gt;\r\n&lt;strong&gt;Sent:&lt;/strong&gt; ‎February‎ ‎1‎, ‎2013 ‎7‎:‎32‎ ‎AM&lt;br&gt;\r\n&lt;strong&gt;To:&lt;/strong&gt; bjorn@backlund.org&lt;br&gt;\r\n&lt;strong&gt;Subject:&lt;/strong&gt; Re: C# style #region/#endregion preprocesssor directives for code organization [typescript:427845]&lt;br&gt;\r\n&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;p&gt;From: nabog&lt;/p&gt;\r\n&lt;div id=&quot;ThreadNotificationPostBody&quot;&gt;Agree with @markrendle. Partial classes and #region/#endregions are both used to give the impression of succinct code - where no such thing exists.&lt;/div&gt;\r\n&lt;/div&gt;\r\n",
    "PostedDate": "2013-02-01T07:46:14.2-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995369",
    "ThreadId": "427845",
    "Html": "<strong>BjornBacklund wrote:</strong>\r<br />\n...you just copy and paste...\r<br />\n<br />\nI rest my case.<br />\n",
    "PostedDate": "2013-02-01T12:20:28.893-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995370",
    "ThreadId": "427845",
    "Html": "<strong>pingec wrote:</strong><br />\n<blockquote>\nIt's also a workaround to collapsing functions, nested in class methods in TypeScript.<br />\n</blockquote>\nSo what's really needed is support for collapsing functions nested in class methods in the IDE.<br />\n",
    "PostedDate": "2013-02-01T12:23:08.463-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995413",
    "ThreadId": "427845",
    "Html": "&lt;div style=&quot;font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px&quot;&gt;\r\n&lt;div&gt;And comments like this is productive?&lt;/div&gt;\r\n&lt;div&gt;The copy/paste allows me to be more productive and what I’m looking for in a tool is how more productive I can be, it’s all about getting the job done faster and better. Isolating an interface in a partial class file makes perfect sense, if you need to\r\n add the interface to another class, you just copy/paste the file and you have a perfect template for all the methods, my experience is that in many cases you only need to alter some of the methods. I would like TS to support all kinds of programming styles,\r\n my style is to keep source files small and to organize code using partial class files.&lt;/div&gt;\r\n&lt;div&gt;Just my 2 cents...&lt;/div&gt;\r\n&lt;div&gt;---bjorn&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div style=&quot;border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid&quot;&gt;\r\n&lt;strong&gt;From:&lt;/strong&gt; markrendle&lt;br&gt;\r\n&lt;strong&gt;Sent:&lt;/strong&gt; ‎February‎ ‎1‎, ‎2013 ‎12‎:‎20‎ ‎PM&lt;br&gt;\r\n&lt;strong&gt;To:&lt;/strong&gt; bjorn@backlund.org&lt;br&gt;\r\n&lt;strong&gt;Subject:&lt;/strong&gt; Re: C# style #region/#endregion preprocesssor directives for code organization [typescript:427845]&lt;br&gt;\r\n&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;p&gt;From: markrendle&lt;/p&gt;\r\n&lt;div id=&quot;ThreadNotificationPostBody&quot;&gt;**BjornBacklund wrote:** ...you just copy and paste... I rest my case.&lt;/div&gt;\r\n&lt;/div&gt;\r\n",
    "PostedDate": "2013-02-01T13:37:14.14-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995439",
    "ThreadId": "427845",
    "Html": "<strong>BjornBacklund wrote:</strong><br />\n<blockquote>\n&lt;div style=&quot;font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px&quot;&gt;\n&lt;div&gt;And comments like this is productive?&lt;/div&gt;\n&lt;div&gt;The copy/paste allows me to be more productive and what I’m looking for in a tool is how more productive I can be, it’s all about getting the job done faster and better. Isolating an interface in a partial class file makes perfect sense, if you need to\n add the interface to another class, you just copy/paste the file and you have a perfect template for all the methods, my experience is that in many cases you only need to alter some of the methods. I would like TS to support all kinds of programming styles,\n my style is to keep source files small and to organize code using partial class files.&lt;/div&gt;\n&lt;div&gt;Just my 2 cents...&lt;/div&gt;\n&lt;div&gt;---bjorn&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div style=&quot;border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid&quot;&gt;\n&lt;strong&gt;From:&lt;/strong&gt; markrendle&lt;br&gt;\n&lt;strong&gt;Sent:&lt;/strong&gt; ‎February‎ ‎1‎, ‎2013 ‎12‎:‎20‎ ‎PM&lt;br&gt;\n&lt;strong&gt;To:&lt;/strong&gt; bjorn@backlund.org&lt;br&gt;\n&lt;strong&gt;Subject:&lt;/strong&gt; Re: C# style #region/#endregion preprocesssor directives for code organization [typescript:427845]&lt;br&gt;\n&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;p&gt;From: markrendle&lt;/p&gt;\n&lt;div id=&quot;ThreadNotificationPostBody&quot;&gt;**BjornBacklund wrote:** ...you just copy and paste... I rest my case.&lt;/div&gt;\n&lt;/div&gt;\n</blockquote>\nWhy are Bjorn's posts all HTML source? Is everyone seeing that or is it just me?<br />\n",
    "PostedDate": "2013-02-01T15:16:19.873-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995440",
    "ThreadId": "427845",
    "Html": "<strong>BjornBacklund wrote:</strong><br />\n<blockquote>\nit’s all about getting the job done faster and better.<br />\n</blockquote>\nFaster, perhaps. Not better.<br />\n<br />\nFor the record, I often put complex interface implementations (e.g. IDictionary&lt;TKey,TValue&gt;) in separate files using partial classes in C#. I don't have a problem with partial classes in C# (except where they're used as a workaround to modify generated code, which is just evil), but adding them to TypeScript would break the ES6 compatibility rule.<br />\n<br />\nThe more important point here is that very large classes and code files should be rare exceptions, not something which is encouraged by language features.<br />\n",
    "PostedDate": "2013-02-01T15:17:48.103-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995508",
    "ThreadId": "427845",
    "Html": "markrendle wrote:<br />\n<pre><code>  &quot;This is not how you manage your code, people.&quot;\n</code></pre>\n\nWell someone needs to tell Microsoft (TypeScript-Source-Code), and JQuery, and KnockoutJS that they're doing it all wrong. \r<br />\nThey all place thousands of lines of TypeScript and JavaScript code in single files.\r<br />\n \r<br />\nDeep hierarchies may be satisfactory in C#, but the deep prototype chains this would produce in TypeScript (JavaScript) would create serious performance issues.<br />\nConcatenating hundreds of small files in the current  release of TypeScript is a maintenance nightmare as file reference comments and HTML script tags must be manually maintained.\r<br />\n<br />\nI agree that 'Single-Responsibility classes' represent good design, but there's currently no advantage to placing each class in its own file. \r<br />\nA file per namespace (module) may be justified, but the overhead of hundreds of files is not justified in TypeScript as it is in C#.\r<br />\n<br />\nAnyone who has studied the TypeScript source code could agree that collapsible regions might enhance the learning experience.\r<br />\nThe TypeScript parser (parser.ts), is currently 4,412 lines of code. This file contains only two interfaces, two classes, and two Enums.\r<br />\nThe exported 'Parser' class in this file, is over 4,300 lines of code.\r<br />\nI can only assume that the authors of the language would use best practices in the actual product development.\r<br />\n<br />\nAs a C# developer, I use folder-per-namespace and file-per-class, and I still use regions to organize properties, constructors, and methods in each class-file. I have developed and currently maintain several commercial products that are hundreds of thousands of lines of C#/XAML code, and I have never regretted the use of regions.<br />\n",
    "PostedDate": "2013-02-02T00:48:12.83-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995521",
    "ThreadId": "427845",
    "Html": "Projects like TypeScript and jQuery are the exception, not the rule. I have massive classes in projects where it's unavoidable not to, but wherever possible I achieve &quot;code organisation&quot; by organising my code into classes and files like the gods intended.\r<br />\n<br />\nI'd love to see more support for good code organisation in TypeScript: collapsible class methods in editors; partial or additive classes; mixins; inlining/collapsing inheritance; that sort of thing.\r<br />\n<br />\nRegions ain't it, though.<br />\n",
    "PostedDate": "2013-02-02T02:54:00.737-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995783",
    "ThreadId": "427845",
    "Html": "@nhrones,\r<br />\n<br />\nFrom your description the #regions appear to be used correctly in your projects. How will you guarantee that no one in your company will abuse them?\r<br />\n<br />\nThe JQuery and Knockout JS libraries are probably not the way one would want to write in-house code. They are not maintainable except by small groups of dedicated people who have (or will) work on them for a number of years. In a commercial environment people come and go and the code-base tends to be larger.\r<br />\n<br />\nI wonder if someone from TypeScript will tell us of the benefit of organising their code in this manner? 4K lines of code for 2 classes? Blimey!\r<br />\n<br />\nAlso it appears the entire TypeScript code-base is in one monolithic project, with large numbers of files in a labyrinth of deeply nested folders. Why not break this up into multiple projects?<br />\n",
    "PostedDate": "2013-02-03T08:08:00.43-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995877",
    "ThreadId": "427845",
    "Html": "We must keep In mind that this is relatively 'new' territory.  I'm preparing to move a number of C#/Silverlight smart-client applications, to HTML5 technologies.  This browser-based smart-client application architecture, where most of the client UI and logic lives on the client, is as new as DART and TypeScript are.  This is what is driving the need for these new compiler technologies ... code management, reuse and organization. \r<br />\nMy point about the typical, 'SUCSESSFUL', JavaScript library being monolithic in nature, goes to the reason that Facebook failed to produce effective Mobile-Web applications ... they used a modular development architecture to such an extreme that performance became unacceptable.<br />\nWe need 'NEW' techniques for code management that provide the benefits of modularization and  'Single-Responsibility' code elements (I've yet to be convinced that the 'classical' approach is relevant to a JavaScript compiler), without sacrificing JavaScript performance.<br />\nTypeScript itself is not a trivial application, and yet it lives in a single namespace (object).  The goal of the developer's, I'm sure, was to keep scope and prototype chains as shallow as possible.  Hierarchy levels in JavaScript can induce orders of magnitude performance penalties.  After all, this is not 'you're fathers C#'!\r<br />\nPerhaps the DART team has the correct response to this issue, a VM to overcome the glaring deficiencies in JavaScript.  Again, Dart's 'import', 'part', and 'library' directives (See: Dart Package Manager), encourage modularization and code reuse with minimal impact on VM efficiency.<br />\nOne can only hope that Microsoft my also follow up with an Open-Source TypeScript VM to eventually replace Silverlight.\r<br />\n<br />\nAnyway, let's all thank Mads for adding //#region to Web Essentials and close this discussion.<br />\n",
    "PostedDate": "2013-02-03T15:57:14.24-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "995890",
    "ThreadId": "427845",
    "Html": "<strong>nhrones wrote:</strong><br />\n<blockquote>\nAnyway, let's all thank Mads for adding //#region to Web Essentials and close this discussion.<br />\n</blockquote>\nAmen to that.<br />\n",
    "PostedDate": "2013-02-03T16:50:45.747-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1362966",
    "ThreadId": "427845",
    "Html": "Ooh, another fundamentalist religious code style discussion. Cool! :)\r<br />\nI like sprinkling #regions all over the place and have been doing it for 10+ years. I find it helps me more often than it introduces any problems other than occasionally falling into religious debates with people who hate on other people for seeing things differently. I can see risks from misusing #regions, but I also see risks from driving over other people in a car and yet I don't see many people saying we shouldn't drive.<br />\n",
    "PostedDate": "2015-03-12T15:49:26.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1362972",
    "ThreadId": "427845",
    "Html": "<strong>xyzzer wrote:</strong><br />\n<blockquote>\nI can see risks from misusing #regions, but I also see risks from driving over other people in a car and yet I don't see many people saying we shouldn't drive.<br />\n</blockquote>\nI thought this discussion was done :(\r<br />\n<br />\nThe car analogy here is, as always, silly. Yes, you can kill someone by driving over them in a car, but that is a reason to make it harder to do that in cars, not to add vehicular homicide functionality to electric scooters.<br />\n",
    "PostedDate": "2015-03-12T16:06:59.623-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1362973",
    "ThreadId": "427845",
    "Html": "It was done for a while, but now it's continued. Religious discussions have no possible end! :)<br />\n #regions don't have a built-in &quot;hide bad code&quot; feature. It's a side effect that they enable it.<br />\nThere are possibly other ways to hide bad code like... prefixing it with a very long indentation.<br />\nSee, even &quot;goto&quot; has its good uses. There is no bad language feature. There is bad language use ... which also can depend on context.<br />\nIf I swear in the confines of my office and no one hears that - it helps me relieve stress. If swear words were not made available - I couldn't teach them to my children, but I might also end up dying prematurely because of the built-up stress.<br />\n",
    "PostedDate": "2015-03-12T16:18:16.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]