{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "The call to the indexer defs[0] returns an 'any' so f() is called on an 'any', which is valid.",
    "ClosedDate": "2013-10-25T10:28:42.69-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "The following compiles cleanly in the \"develop\" branch. It looks like the `number[]` is implicitly converted to `LetRec[]` although this doesn't make sense.\r\n\r\n    class List<a> {\r\n       // add a method to make sure it's not a consequence of structural typing\r\n       length (): number {\r\n          return 0\r\n       }\r\n    }\r\n\r\n    class LetRec {\r\n       defs: List<LetRec>\r\n\r\n       f (): void {\r\n          console.log(\"hello\")\r\n       }\r\n\r\n       constructor (defs: List<LetRec>) {\r\n       } \r\n    }\r\n\r\n    function toList <a> (xs: a[]): List<a> {\r\n       return null\r\n    }\r\n\r\n    function test (): void {\r\n       new LetRec(toList([5,6])).defs[0].f(); // call f() on a number\r\n    }\r\n",
    "LastUpdatedDate": "2013-10-25T10:28:42.69-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-10-25T02:25:51.533-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Broken array typing",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1838
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I also notice that array type parameters aren't inferred properly, perhaps this is related.",
      "PostedDate": "2013-10-25T02:26:39.583-07:00",
      "Id": 119626
    }
  ]
}