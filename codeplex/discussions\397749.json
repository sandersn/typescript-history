[
  {
    "Id": "920733",
    "ThreadId": "397749",
    "Html": "\r\n<p>I'm a little disappointed that I need to --target ES5 in order for tsc to compile code that includes get/set properties.&nbsp;This implies that my &quot;targeted&quot; code would not work in IE6/7/8/9 and other less modern browsers.</p>\r\n<p>I think being able to use properties unrestricted in TypeScript would be absolutely key toward the goal of &quot;large-scale application maintainability&quot;.</p>\r\n<p>Couldn't TypeScript compile this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>get name() { ... }\nset name(value) { ... }\n</pre>\r\n</div>\r\n<p>...to something like this for ES3:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Person.prototype.__getName = <span style=\"color:blue\">function</span> () { ... }\nPerson.prototype.__setName = <span style=\"color:blue\">function</span> (value) { ... }\n</pre>\r\n</div>\r\n<p>This would allow me to easily port, for example, the&nbsp;<a href=\"http://playerframework.codeplex.com/\" target=\"_blank\">Microsoft Media Platform Player Framework</a>&nbsp;from WinJS to HTML5 in the browser, since we absolutely rely on classes w/ properties\r\n for maintainability in this project.</p>\r\n",
    "PostedDate": "2012-10-02T10:29:27.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920742",
    "ThreadId": "397749",
    "Html": "<p>Unfortunately, there's just not a way to support this at runtime in a way that's safe.</p>\r\n<p>What you're proposing would be something like this:<br />(TypeScript)<br /><span style=\"color: blue;\">var</span> p = <span style=\"color: blue;\">new</span> Person(<span style=\"color: #a31515;\">'bob'</span>);<br /><span style=\"color: blue;\">var</span> name = p.name;<br />(Output JavaScript)<br /><span style=\"color: blue;\">var</span> name = p.__getName();<br /><br />Note that the <em>only</em> reason we know to do the name -&gt; __getName() translation is because we statically know the type of 'p'. While that's a (generally) safe assumption in&nbsp;C#, it's definitely not safe in an optionally-typed language like TypeScript.</p>\r\n<p>Consider:<br /><span style=\"color: blue;\">var</span> p: any;<br /><span style=\"color: green;\">/* somewhere else: p&nbsp; = new Person('bob'); */</span><br /><span style=\"color: blue;\">var</span> name = p.name; <span style=\"color: green;\">// What type is p? We don't know, so we don't know that we would need to transform to __getName()</span><br /><br />Because the compiler can't (in the general case) know the type of every single expression in the program, it's impossible to make this sort of transormation work safely. It's much better to be up front about that limitation than to have a feature that only worked if you never accessed the member through a non-typed instance (a condition we can't statically check for).</p>",
    "PostedDate": "2012-10-02T10:45:06.48-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920757",
    "ThreadId": "397749",
    "Html": "<p>Just to be clear.&nbsp; IE9 does support defineProperty:</p>\r\n<p><a href=\"http://kangax.github.com/es5-compat-table/#showold\">http://kangax.github.com/es5-compat-table/#showold</a></p>\r\n<p>I understand the issue, but it's disappointing that there's no workaround to target older browsers.</p>",
    "PostedDate": "2012-10-02T11:02:54.32-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920758",
    "ThreadId": "397749",
    "Html": "<p>I knew it wouldn't be easy, but if we didn't ask, then you might not realize it was that important. :)</p>\r\n<p>I'm sure you guys have thought about this a lot already, but it still seems possible somehow, even if safety is compromised in rare cases. In C#, your example code <code>var p: any; var name = p.name;</code> would require a cast, so maybe you can invent some casting syntax and require the dev to use it to call p.name in that case.</p>",
    "PostedDate": "2012-10-02T11:04:21.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]