{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.363-07:00",
    "CommentCount": 6,
    "Custom": null,
    "Description": "TypeScript compiler adds to each file that extends a class small boilerplate function:\r\n```\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\n```\r\n\r\nI want to disable it as I'm concatenating files and the definition is repeated many times (once for each file). Only the definition (var extends = ...) would be omitted and the rest of the code would assume it's already defined.\r\n\r\nSomething like:\r\n```\r\ntsc --noExtends main.ts\r\n```\r\n\r\nThat would only affect the output JS files and the rest of my toolchain would add the necessary __extends definition at the beginning of all JS files.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-10T11:50:59.147-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Add command line option in tsc to disable generation of __extends",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 9,
    "Id": 2002
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "+1\n\nI would like to see extends removed as well, because we have our own mechanism for combining files and it would be trivial to add an extra file with the code for extends.\n\nHowever, I don't think a compiler option is a good idea. It is much too specific and doesn't scale very well  if TypeScript introduces more boilerplate, for example for a mixin.\n\nThe extends should just be omitted altogether for multiple file projects.\n\n",
      "PostedDate": "2013-12-10T14:00:18.243-08:00",
      "Id": 126892
    },
    {
      "Message": "Yes. Maybe a generic option to disable generation of stubs.\n\nIMHO TypeScript team strives to minimize the number of inserted JS code to make it almost 1:1 identical to the TS source so they're unlikely to introduce more boilerplate (but who knows!). The __extends function is a prime example of something that \"shouldn't be there\" but is necessary. With custom build and our own custom __extends the generation of __extends could be avoided.",
      "PostedDate": "2013-12-11T02:26:00.923-08:00",
      "Id": 126962
    },
    {
      "Message": "Thanks for the report, you're not the first person to want this, assigned to Jonathan who handles suggestions.",
      "PostedDate": "2013-12-12T10:44:35.237-08:00",
      "Id": 127134
    },
    {
      "Message": "I also add +1 ;) this would be fine to solve the following problem: [stackoverflow thread](http://stackoverflow.com/questions/22155106/typescript-code-coverage-of-multiple-extends-declarations/)",
      "PostedDate": "2014-04-07T11:33:17.163-07:00",
      "Id": 140844
    },
    {
      "Message": "Quick question: Is it safe to assume that \"__extends\" will, in time, be dropped when ES6 classes are more widely adopted by all/most browsers?",
      "PostedDate": "2014-05-20T21:58:34.073-07:00",
      "Id": 147303
    },
    {
      "Message": "_(dropped, is in \"off by default\", outputting the code \"as is\" with the ES6 class semantics)_ I would assume an option would be need by then anyhow for backwards compatibility sake.",
      "PostedDate": "2014-05-21T09:44:17.07-07:00",
      "Id": 147348
    }
  ]
}