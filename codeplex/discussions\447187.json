[
  {
    "Id": "1057368",
    "ThreadId": "447187",
    "Html": "I've started to explore TypeScript, using v0.9, and I'm having some problems working out how file and module namespaces are supposed to be used.  Suppose I'm writing some code for task A.  So I start with a file A.ts and inside it I write something like<br />\n<pre><code>export module A {\n  export function doA() {...}\n}</code></pre>\n\nAnd then in another file that wants to use A I'd write<br />\n<pre><code>var A = require('A');\n</code></pre>\n\nBut then I have to write A.A.doA(...) to access the function.  So what's the recommended strategy here?  Should I just remove the top-level module A, just defining the exported function at the top-level in the file, so I can write A.doA(...) in the calling context?  That could work if I was defining just one &quot;module&quot; in each file I suppose.  Or am I supposed to define an alias to the module in the calling context, assigning the result of the require to a temp, and then giving a local name to the module A?  Or ...?<br />\n\r<br />\nI suppose I'm not really sure why the result of the require has to be given a name at all; I'd really like the require to just import all the modules in that file into my local namespace.  But maybe that's not possible given the constraints of needing an easy mapping to JavaScript.\r<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2013-06-16T03:14:00.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]