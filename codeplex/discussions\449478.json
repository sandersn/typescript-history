[
  {
    "Id": "1066217",
    "ThreadId": "449478",
    "Html": "There seems to be an overload/type inference issue with the typings for the JQueryPromise in the definition file at <a href=\"https://github.com/borisyankov/DefinitelyTyped/blob/master/jquery/jquery.d.ts\" rel=\"nofollow\">DefinitelyTyped</a>. The typing of the <code>then</code> method of the JQueryPromise contains overloads whereby a promise gets returned from the callback functions and it is completed and unwrapped before passing to any further continuation.<br />\n<br />\nThese are the four relevant overloads:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> JQueryPromise&lt;T&gt; {      \n    then&lt;U&gt;(onFulfill: (value: T) =&gt; U, onReject?: (...reasons) =&gt; U, onProgress?: (...progression) =&gt; <span style=\"color:Blue;\">any</span>): JQueryPromise&lt;U&gt;;    \n\n    then&lt;U&gt;(onFulfill: (value: T) =&gt; JQueryGenericPromise&lt;U&gt;, onReject?: (...reasons) =&gt; U, onProgress?: (...progression) =&gt; <span style=\"color:Blue;\">any</span>): JQueryPromise&lt;U&gt;;  \n    \n    then&lt;U&gt;(onFulfill: (value: T) =&gt; U, onReject?: (...reasons) =&gt; JQueryGenericPromise&lt;U&gt;, onProgress?: (...progression) =&gt; <span style=\"color:Blue;\">any</span>): JQueryPromise&lt;U&gt;;\n\n    then&lt;U&gt;(onFulfill: (value: T) =&gt; JQueryGenericPromise&lt;U&gt;, onReject?: (...reasons) =&gt; JQueryGenericPromise&lt;U&gt;, onProgress?: (...progression) =&gt; <span style=\"color:Blue;\">any</span>): JQueryPromise&lt;U&gt;;\n}\r\n</pre></div>The second and the fourth are the ones I'm interested in.<br />\n<br />\nConsider this example:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">function</span> example() {\n    $.Deferred(dfd =&gt; { dfd.resolve(5); })\n        .then(result =&gt; {\n            <span style=\"color:Blue;\">return</span> addTwelve(result);\n        })\n        .done(result =&gt; alert(result));  <span style=\"color:Green;\">//Prints 12 after 3 seconds</span>\n}\n\n<span style=\"color:Blue;\">function</span> addTwelve(num: <span style=\"color:Blue;\">number</span>): JQueryDeferred&lt;<span style=\"color:Blue;\">number</span>&gt; {\n    <span style=\"color:Blue;\">return</span> $.Deferred(dfd =&gt; {\n        setTimeout(() =&gt; {\n            dfd.resolve(num + 12);\n\n        }, 3000);\n    });\n}\n\nexample();\r\n</pre></div>You would expect the return type of <code>then</code> to be <code>JQueryPromise&lt;number&gt;</code>, however, the first overload is chosen instead and the return type is inferred as <code>JQueryPromise&lt;JQueryDeferred&lt;number&gt;&gt;</code>.<br />\n<br />\nIf you rearrange the overload list so definition 2 and 4 are on top, and insert a cast, this issue goes away:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> JQueryPromise&lt;T&gt;{\n    then&lt;U&gt;(onFulfill: (value: T) =&gt; JQueryGenericPromise&lt;U&gt;, onReject?: (...reasons) =&gt; U, onProgress?: (...progression) =&gt; <span style=\"color:Blue;\">any</span>): JQueryPromise&lt;U&gt;;    \n\n    then&lt;U&gt;(onFulfill: (value: T) =&gt; U, onReject?: (...reasons) =&gt; U, onProgress?: (...progression) =&gt; <span style=\"color:Blue;\">any</span>): JQueryPromise&lt;U&gt;;    \n\n    then&lt;U&gt;(onFulfill: (value: T) =&gt; JQueryGenericPromise&lt;U&gt;, onReject?: (...reasons) =&gt; JQueryGenericPromise&lt;U&gt;, onProgress?: (...progression) =&gt; <span style=\"color:Blue;\">any</span>): JQueryPromise&lt;U&gt;;    \n\n    then&lt;U&gt;(onFulfill: (value: T) =&gt; U, onReject?: (...reasons) =&gt; JQueryGenericPromise&lt;U&gt;, onProgress?: (...progression) =&gt; <span style=\"color:Blue;\">any</span>): JQueryPromise&lt;U&gt;;\n}\n\n<span style=\"color:Blue;\">function</span> example() {\n    $.Deferred(dfd =&gt; { dfd.resolve(5); })\n        .then(result =&gt; {\n            <span style=\"color:Blue;\">return</span> &lt;JQueryGenericPromise&lt;<span style=\"color:Blue;\">number</span>&gt;&gt; addTwelve(result);\n        })\n        .done(result =&gt; alert(result));  <span style=\"color:Green;\">//Prints 12 after 3 seconds</span>\n}\n\n<span style=\"color:Blue;\">function</span> addTwelve(num: <span style=\"color:Blue;\">number</span>): JQueryDeferred&lt;<span style=\"color:Blue;\">number</span>&gt; {\n    <span style=\"color:Blue;\">return</span> $.Deferred(dfd =&gt; {\n        setTimeout(() =&gt; {\n            dfd.resolve(num + 12);\n        \n        }, 3000);\n    });\n}\n\nexample();\r\n</pre></div>Now <code>then</code> is correctly inferred as returning <code>JQueryPromise&lt;number&gt;</code>. <br />\n<br />\nTwo questions:<br />\n<ul>\n<li>Overload resolution seems to require that more specific overloads are defined first. Is this intentional? It seems like it shouldn't matter.</li>\n<li>\nEven when defined first, overload resolution is not preferring the more specific compatible type to the more general type. Perhaps there's a counterargument, but this seems like an issue that should be addressed. Trying to call a complex overload like this shouldn't require knowledge of the definition file and generic overload resolution in order to know the right cast to get it to work.<br />\n</li>\n</ul>\n",
    "PostedDate": "2013-07-09T10:12:15.53-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1066272",
    "ThreadId": "449478",
    "Html": "Oh, THAT fixed it? I wrote these originally after typing Q. When I was initially trying to type promises in v0.9 I was getting all sorts of nasty errors and assumed I could only define them in the order of most generic to most specific. v0.9.0.1 fixed a whole bunch of stuff and I never tried re-arranging them. You should submit a pull request if you get the chance.<br />\n",
    "PostedDate": "2013-07-09T12:44:40.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1066287",
    "ThreadId": "449478",
    "Html": "The fact that you needed to cast seems odd... JQueryDeferred implements the JQueryGenericPromise interface implicitly, and so shouldn't the compiler know to use the JQueryGenericPromise version?<br />\n",
    "PostedDate": "2013-07-09T13:07:17.727-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1066594",
    "ThreadId": "449478",
    "Html": "Yes, the ones you want to have preference go first.  We went back and forth on this one, and it just became easier to work out (and explain to other people) function resolution rules if we had a final &quot;in the case of ambiguity, the first one wins&quot; rather than coming up with an ordering.\r<br />\n<br />\nFor the second point, it sounds like a bug if the first one matches but still isn't chosen.<br />\n",
    "PostedDate": "2013-07-10T07:08:16.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]