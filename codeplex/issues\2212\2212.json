{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:11.113-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "I am trying to keep my modules neat by placing only stuff that solves a particular problem in each of them. This results to finer grain modularity and rather a big number of modules. It already looks hideous and I just started:\r\n\r\n```\r\nimport nc = require('core');\r\nimport na = require('arrays');\r\nimport nd = require('dynamics');\r\nimport np = require('promises');\r\nimport nt = require('text');\r\nimport ne = require('common/essentials');\r\nimport nu = require('utils');\r\nimport ko = require('knockout');\r\nimport ng = require('labs/randoms');\r\nimport uip = require('ui/panels');\r\nimport uiv = require('ui/views');\r\nimport uia = require('ui/app');\r\nimport comparing = require('comparing')\r\nimport data = require('models/data');\r\nimport d3 = require('d3');\r\nimport bindings_draggable = require('bindings/draggable');\r\nimport bindings_movable = require('bindings/movable');\r\nimport bindings_templates = require('bindings/templates');\r\nimport mr = require('models/rectangle');\r\n```\r\n\r\nOne way I see it could be solved is by importing more than one module into the same namespace:\r\n\r\n```\r\n// file ui/views \r\nexport interface View {}\r\n\r\n// file ui/app\r\nimport ui { require('views') }\r\nexport interface App { views: ui.Views[]; }\r\nexport function startApp(app: App) {}\r\n\r\n// file test\r\nimport ui {\r\n  require('ui/views')\r\n  require('ui/app')\r\n}\r\n\r\nvar app : ui.App = {\r\n   views: <ui.View[]>[]\r\n};\r\nui.startApp(app);\r\n```\r\n\r\nSo it would be pretty much the same way as it works with the internal modules. Even though each module comes from it's own file I wish, once imported, the content of these modules was all under the same `ui` namespace.\r\n\r\nIn case of a naming conflict a compiler error would be thrown.\r\n\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-02-25T09:29:57.83-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Feature request: Need a way to organize the external modules.",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 4,
    "Id": 2212
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion. We'll definitely be investigating ways to make the module/project end to end experience better post 1.0.",
      "PostedDate": "2014-02-26T14:22:38.8-08:00",
      "Id": 134955
    }
  ]
}