{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:40.707-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "The [ES6 definition of the \"class\" construct](http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes) has the concept of \"class expression\" - i.e. class definitions may be used as values, such as:\r\n```\r\nvar obj = new (class { x = 5; });\r\nvar cls = class { x = 5; };\r\nvar cls2 = class extends cls { y = 6; };\r\nvar obj2 = new cls2();\r\n// and so on\r\n```\r\nSadly, this support is absent in the current TypeScript compiler (I'm using the 9.2 branch) - that is, the above examples would not compile.\r\n\r\nAside from TS team's own argument of \"closely aligning with the ES6 specification\", this support would enable many useful scenarios for which I currently have to fall back to \"any-typed\" plain JavaScript. \r\n\r\nHere are a few examples of such scenarios which I actually use in my daily work:\r\n1. Returning a class (not object) from a function. With TypeScript, it is currently possible to describe the return type of such function, but not to actually write its body using the \"class\" construct.\r\n2. \"Bind\" a class - similar to \"binding\" a function, i.e. produce another class with certain constructor parameters bound to specific values.\r\n3. Declare a \"private\" class within the body of a function or within another class.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-09-22T14:04:11.367-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Suggestion: support ClassExpression (as per ES6)",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 5,
    "Id": 1712
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This was pretty much the _first thing_ I tried in the playground.\n\nWith the new \"typeof\" operator, it would be awesome to be able to declare a mock class as\n```typescript\ndeclare class MyRealClass {\n   ...\n}\n\nfunction MakeMockClass() : typeof MyRealClass {\n  return class {\n     ...\n  };\n}\n```",
      "PostedDate": "2013-09-22T19:47:48.717-07:00",
      "Id": 115308
    }
  ]
}