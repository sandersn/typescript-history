[
  {
    "Id": "1261774",
    "ThreadId": "550295",
    "Html": "What I'd like to accomplish is have an event registration method implemented on a base class, and provide more specific overload declarations on subclasses. Something like the following:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">class</span> BaseEvent {\n}\n\n<span style=\"color:Blue;\">class</span> FirstEvent <span style=\"color:Blue;\">extends</span> BaseEvent {\n}\n\n<span style=\"color:Blue;\">class</span> OtherEvent <span style=\"color:Blue;\">extends</span> BaseEvent {\n}\n\n\n<span style=\"color:Blue;\">class</span> Foo\n{\n    on(event: <span style=\"color:#A31515;\">&quot;first&quot;</span>, handler: (ev: FirstEvent) =&gt; <span style=\"color:Blue;\">void</span>): <span style=\"color:Blue;\">void</span>;\n    on(event: <span style=\"color:Blue;\">string</span>, handler: (ev: BaseEvent) =&gt; <span style=\"color:Blue;\">void</span>): <span style=\"color:Blue;\">void</span>;\n    on(event, handler): <span style=\"color:Blue;\">void</span> {\n    }\n}\n\n\n\n<span style=\"color:Blue;\">class</span> Bar <span style=\"color:Blue;\">extends</span> Foo {\n    on(event: <span style=\"color:#A31515;\">&quot;other&quot;</span>, handler: ( ev: OtherEvent ) =&gt; <span style=\"color:Blue;\">void</span>): <span style=\"color:Blue;\">void</span>;\n    on(event: <span style=\"color:Blue;\">string</span>, handler: <span style=\"color:Blue;\">any</span>): <span style=\"color:Blue;\">void</span>;\n    on(event, handler): <span style=\"color:Blue;\">void</span> { <span style=\"color:Blue;\">super</span>.on(event, handler) }  <span style=\"color:Green;\">// must have an implementation</span>\n}\n\n\n<span style=\"color:Blue;\">var</span> b = <span style=\"color:Blue;\">new</span> Bar();\nb.on(...)\r\n</pre></div>The above only indicates 2 overloads for the &quot;on&quot; method on the Bar class. I'd like for it see three. Ideally, I'd like to define the Bar class like this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">class</span> Bar <span style=\"color:Blue;\">extends</span> Foo {\n    on(event: <span style=\"color:#A31515;\">&quot;other&quot;</span>, handler: ( ev: OtherEvent ) =&gt; <span style=\"color:Blue;\">void</span>): <span style=\"color:Blue;\">void</span>;\n}\r\n</pre></div>",
    "PostedDate": "2014-07-01T16:30:57.567-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1262224",
    "ThreadId": "550295",
    "Html": "You cannot do that.  You'll have to copy-paste the overloads from Foo and add to it.<br />\n",
    "PostedDate": "2014-07-02T20:20:25.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1262226",
    "ThreadId": "550295",
    "Html": "This may be the closest you can get:<br />\n<pre><code>lass BaseEvent {\n}\n\nclass FirstEvent extends BaseEvent {\n}\n\nclass OtherEvent extends BaseEvent {\n}\n\ninterface IFoo {\n    on(event: &quot;first&quot;, handler: (ev: FirstEvent) =&gt; void): void;\n    on(event: string, handler: (ev: BaseEvent) =&gt; void): void;\n}\nclass Foo implements IFoo\n{\n    on(event, handler): void {\n    }\n}\n\nclass Bar extends Foo {\n}\ninterface IFoo { // (extend the interface)\n    on(event: &quot;other&quot;, handler: ( ev: OtherEvent ) =&gt; void): void;\n}\n\nvar b: IFoo = new Bar();\n</code></pre>\n\n",
    "PostedDate": "2014-07-02T20:26:38.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1262228",
    "ThreadId": "550295",
    "Html": "A possible other way:<br />\n<pre><code>class BaseEvent {\n}\n\nclass FirstEvent extends BaseEvent {\n}\n\nclass OtherEvent extends BaseEvent {\n}\n\nenum MyEvents {\n    First = &lt;MyEvents&gt;&lt;any&gt;&quot;first&quot;,\n    Second = &lt;MyEvents&gt;&lt;any&gt;&quot;second&quot;,\n}\n\nclass Foo\n{\n    on(event: MyEvents, handler: (ev: BaseEvent) =&gt; void): void {\n    }\n}\n\nenum MyEvents {\n    Other = &lt;MyEvents&gt;&lt;any&gt;&quot;other&quot;\n}\n\nclass Bar extends Foo {\n}\n\nvar b: Bar = new Bar();\n\n</code></pre>\n\n",
    "PostedDate": "2014-07-02T20:31:13.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]