[
  {
    "Id": "944439",
    "ThreadId": "403914",
    "Html": "\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>module Sample {\r\n    <span style=\"color:#a31515\">&quot;use strict&quot;</span>\r\n\r\n    <span style=\"color:blue\">class</span> Bar <span style=\"color:blue\">extends</span> Foo {\r\n        name: string = <span style=\"color:#a31515\">&quot;hello, world!&quot;</span>;\r\n    }\r\n    \r\n    <span style=\"color:blue\">class</span> Foo {\r\n    }\r\n\r\n    window.onload = () =&gt;\r\n    {\r\n        <span style=\"color:blue\">var</span> p = <span style=\"color:blue\">new</span> Bar();\r\n        alert(p.name);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>The above sample gives &quot;<span><em>Uncaught TypeError: Cannot read property 'prototype' of undefined</em>&quot; error.</span></p>\r\n<p>The error is related with scoping.</p>\r\n<p>If i define Foo before bar, it works well.</p>\r\n<p>As i understood typescript mimics javascript scopes as it.</p>\r\n<p>Is it possible to order classes base on their usage?</p>\r\n<p>If its difficult is it possible that typescript visual studio plugin gives warning or errors about such similar situations?</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-11-20T01:57:56.95-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944652",
    "ThreadId": "403914",
    "Html": "\r\n<p>If you think of classes as just syntactic sugar for creating constructor functions, you'll have the right model to think about them in TypeScript.&nbsp; We're not trying to reorder code but instead to follow a very simple translation to JavaScript.&nbsp; This helps\r\n us keep the output JavaScript as similar to the input as possible.</p>\r\n<p>Coming from other languages, the ordering might be confusing (and we could definitely have better linting/compiler warnings to help catch errors like this sooner), but in some ways it's not too far different from declaring a variable before you use it.</p>\r\n",
    "PostedDate": "2012-11-20T08:31:58.127-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "945156",
    "ThreadId": "403914",
    "Html": "\r\n<p>You could try splitting it up into multiple files:<br>\r\n<br>\r\nFoo.ts:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>module Sample {\n    <span style=\"color:#a31515\">&quot;use strict&quot;</span>\n\n    <span style=\"color:blue\">class</span> Foo {\n\n        <span style=\"color:blue\">public</span> name: string;\n\n        constructor () {\n\n            <span style=\"color:blue\">this</span>.name = <span style=\"color:#a31515\">&quot;Foo&quot;</span>;\n        }\n    }\n}\n</pre>\r\n</div>\r\n<p><br>\r\n<br>\r\nBar.ts:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:green\">/// &lt;reference path=&quot;Foo.ts&quot; /&gt;</span>\n\nmodule Sample {\n    <span style=\"color:#a31515\">&quot;use strict&quot;</span>\n\n    <span style=\"color:blue\">class</span> Bar <span style=\"color:blue\">extends</span> Foo {\n\n        constructor () {\n            \n            <span style=\"color:blue\">super</span>();\n\n            <span style=\"color:blue\">this</span>.name = <span style=\"color:blue\">this</span>.name &#43; <span style=\"color:#a31515\">&quot;bar!&quot;</span>;\n        }\n    }\n}\n</pre>\n</div>\n</pre>\r\n</div>\r\n",
    "PostedDate": "2012-11-21T06:52:20.537-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "945568",
    "ThreadId": "403914",
    "Html": "\r\n<p>Thanks for alternative,</p>\r\n<p>i will go with your suggestion.</p>\r\n",
    "PostedDate": "2012-11-22T03:15:31.993-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]