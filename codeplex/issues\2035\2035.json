{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Thanks for logging this issue. We've moved to a new codebase on GitHub; please try your issue against the new compiler (once possible) and log an issue on the GitHub site if it still reproduces.",
    "ClosedDate": "2014-07-21T13:24:06.13-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "```ts\r\ndeclare class A {\r\n\tconstructor(f: (x: number) => void);\r\n\tg(f: (x: number) => void);\r\n}\r\n\r\nvar a = new A(x => {\r\n\t// x is infered right, x is number\r\n\t// a is A now, ok \r\n\ta.g(x => { }) // oops, x is infered wrong, x is any (error with --noImplicitAny)\r\n});\r\n\r\na.g(x => { }); // but in this scope it work fine, x is number \r\n```\r\n\r\nIt works as described in 0.9.5, in Playground and in latest `develop` branch (`e48f38dd91ab` at the moment).",
    "LastUpdatedDate": "2017-11-27T11:51:34.217-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-19T02:00:42.527-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Invalid inference within child scope",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 2035
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Great bug.  Thanks.  Interestingly, in the language service in VS, intellisense often shows it as 'number', but still allows you to dot off it as 'any'.  We'll take a look.",
      "PostedDate": "2013-12-19T10:29:17.01-08:00",
      "Id": 128088
    }
  ]
}