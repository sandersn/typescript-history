{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:22.797-07:00",
    "CommentCount": 6,
    "Custom": null,
    "Description": "My team has been having a discussion about how much defensive programming (paranoia programming?) one ought to do in TypeScript.\r\n\r\nWe would like a mechanism to specify in code things like ENSURE, REQUIRE, ASSERT, and INVARIANT... and have those be able to wash out of our code with some compiler flag.  Something that isn't really possible without a preprocessor-and-macros (ugh!), or _bona fide_ language support.\r\n\r\nI'm thinking along the lines of the D Programming Language facility for [Contract Programming](http://dlang.org/dbc.html), which has a very nice contract facility.\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 2.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-02-05T08:39:28.833-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Feature request - Contracts in TypeScript",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 25,
    "Id": 700
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thank you for the suggestion, assigned to Jon who handles our suggestions.",
      "PostedDate": "2013-02-06T09:33:00.02-08:00",
      "Id": 88715
    },
    {
      "Message": "I agree this could be helpful (and I'm all for defensive programming).  For the 1.0 release, we're focusing on supporting using 3rd party JS libraries.  In the future, after 1.0, we'll be looking at ways to make the language more robust and focus on making the development experience richer.  Something like this would be a possibility.",
      "PostedDate": "2013-03-07T14:56:39.643-08:00",
      "Id": 92580
    },
    {
      "Message": "I have long wanted a language in which constraints such as \"argument foo is a non-null string\" or \"argument bar is a Number > 0\" were just part of the type system and verified at compile time, just like any other type error. I haven't seen much movement on this idea since Spec# and C# CodeContracts, both of which seem to have dropped off the map. Perhaps there is some theoretical type system limitation getting in the way of a robust implementation? I'm not a type theory expert.\n\nIf this is implemented, please implement static contract verification along the lines of Spec# or the C# Code Contracts static analyzer, and provide similar compiler options to enable or disable runtime contract validation. However, UNLIKE the Code Contracts implementation, please incorporate code contracts into the syntax, so it doesn't look so darn ugly (no offense to the code contracts team!).\n\nWithout static contract validation, there isn't much to be gained from Contracts in the language, other than a simple on-off switch. In this case, I would argue this feature is an instance of a more general purpose feature along the lines of the [Conditional(\"DEBUG\")] attribute in C#, rather than specifically code-contracts related, though including it in the syntax would decrease verbosity. With such a feature, a library could implement code contracts arbitrarily and any added code would be removed from the output depending on #defines you pass to the compiler in some form. \n",
      "PostedDate": "2013-07-03T10:03:00.733-07:00",
      "Id": 104996
    },
    {
      "Message": "@SleepyDaddySoft\n\nThere is a trade-off in complexity when you start to incorporate checking values into the type system.  Nullable/Non-nullable is one that's gained some acceptance, largely because it's relatively straight-forward to implement in a compiler-checkable way.  More complex ones, like the Number > 0 you mention, would require the compiler to track numeric through function calls, array assignments, etc.  It falls under what's called \"dependent type systems\" in type theory.  It's still an active research topic with lots of road still to travel before its ready for prime-time.\n\nIn general, TypeScript's type system is trying to be a very lightweight annotation on JavaScript, allowing users to express APIs and simple contracts (based on the shape rather than the value).  This is fairly well understood how to do, and how to do in a way that allows us to give good error messages and implement efficient compilers for.",
      "PostedDate": "2013-07-03T11:21:47.097-07:00",
      "Id": 105005
    },
    {
      "Message": "100% behind this request. Invaluable for large production code!\n",
      "PostedDate": "2013-11-20T07:24:02.577-08:00",
      "Id": 123658
    },
    {
      "Message": "My original link to Contract Programming in D has suffered link rot.\n\nHere is a current working link to D [Contract Programming](http://dlang.org/contracts.html).",
      "PostedDate": "2014-07-16T06:35:39.727-07:00",
      "Id": 152579
    }
  ]
}