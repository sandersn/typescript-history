[
  {
    "Id": "1193593",
    "ThreadId": "522763",
    "Html": "Are there functions to query an enum definition for the number of elements defined?\r<br />\n<br />\nAlso, to retrieve their text based on values or get an array of the values as strings?\r<br />\n<br />\nI know this is possible in C#, but I haven't found anything yet about doing something like this in TypeScript.  I'd like to be able to get an Enum value at random for a function or be able to list them in a drop-down for some tests I'm doing.\r<br />\n<br />\nThanks!<br />\n",
    "PostedDate": "2014-01-23T13:44:09.847-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1193727",
    "ThreadId": "522763",
    "Html": "There are no specific reflection capabilities in TypeScript like C#. That said, an enum is just an object with some properties which you could loop through and process accordingly. <br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">enum</span> E {\n    A,\n    B\n}\n\n<span style=\"color:Blue;\">for</span>(<span style=\"color:Blue;\">var</span> e <span style=\"color:Blue;\">in</span> E) { \n    console.log(e); \n}\r\n</pre></div>will print 0,1,A,B. The enum object has a reverse mapping so you can index into it by A to find that its value is 0, and index via 0 and find that that value corresponds to A. Assuming your enum values are not crazy (like naming some members with numbers and some with words) you should be able to use this to get at the patterns you want.<br />\n",
    "PostedDate": "2014-01-23T16:27:56.543-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1199112",
    "ThreadId": "522763",
    "Html": "Thanks Dan,<br />\n<br />\nThis is what I ended up doing in the end for anyone interested:<br />\n<pre><code>    var n: number = Object.keys(MyEnum).length / 2;\n\n    return MyEnum[getRandomInt(0, n - 1)];</code></pre>\n\nHowever, I couldn't cast the result back to my enum type from the string (at least not explicitly).  Haven't seen how it reacts when it occurs during runtime.<br />\n",
    "PostedDate": "2014-01-27T13:22:23.383-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1199179",
    "ThreadId": "522763",
    "Html": "Looks like the string won't compare with the enum, it just skips over it in my switch case.\r<br />\n<br />\nSo, currently, I'm taking the result of that function above (a string) and passing it to a function which takes a value of my enum as a parameter.  It's not complaining during compile time if I have my function return an 'any' (though it does if I use my enum).\r<br />\n<br />\nBut it's still a string at runtime and the switch I have to check the enum just skips over it.\r<br />\n<br />\nIt looks like the TypeScript generates the select with the number.  So, I guess I should just have my function return the random number instead of the text?  It'd be nice to be able to maintain the sanctity of the enum throughout.<br />\n",
    "PostedDate": "2014-01-27T15:11:08.537-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]