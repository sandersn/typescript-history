{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Thanks for logging this issue. We've moved to a new codebase on GitHub; please try your issue against the new compiler (once possible) and log an issue on the GitHub site if it still reproduces.",
    "ClosedDate": "2014-07-21T13:22:47.893-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "(from: https://typescript.codeplex.com/discussions/528825)\r\n\r\nPossibly related to https://typescript.codeplex.com/discussions/474481.\r\n\r\nGiven the following:\r\n\r\n```ts\r\ninterface A {\r\n\tget(key:'string'):string;\r\n\tget(key:'number'):number;\r\n\tget(key:string):any;\r\n}\r\n\r\ninterface B extends A {\r\n\tget(key:'boolean'):boolean;\r\n\tget(key:string):any;\r\n}\r\n```\r\n\r\nIn this case, code intel on B will provide only the one subtype in interface B, instead of merging with the subtypes specified in interface A. This is incredibly unhelpful. In fact, it looks like not even lib.d.ts expects things to work this way as many of the interfaces there (on develop branch) are doing things like `interface Window extends GlobalEventHandlers`, but then the signatures from GlobalEventHandlers are not ever actually applied.\r\n\r\nI’d propose that either you can extend an interface and not provide the base signature (in other words, exclude `get(key:string):any;` from interface B above) in which case they merge in, or just merge them regardless and authors can define explicit overrides if they want to change the specifics of one of the inherited specialized signatures.\r\n\r\n*edit:* I think it’s also important to consider the case where you want to implement an interface with a class, and want to have the type signatures from the class and only write the implementation, without needing to redefine all the overloads.",
    "LastUpdatedDate": "2017-11-27T11:51:34.217-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-02-05T08:18:30.807-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "lib.d.ts does not properly add overloads when extending interfaces",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 2153
  },
  "FileAttachments": [],
  "Comments": []
}