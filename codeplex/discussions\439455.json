[
  {
    "Id": "1026962",
    "ThreadId": "439455",
    "Html": "Problem.\r<br />\nwe have the following code:<br />\n<pre><code>function copy(array:any[], startIndex:number, count:number):any[]{\n   var arrayCopy = new Array(count);\n   \n   for(var i = 0; i &lt; length; i++){\n        arrayCopy[startIndex + i] = array[startIndex + i];\n   }\n   return arrayCopy;\n}</code></pre>\n\nThe bug: we use never declared 'length' variable instead of 'count' parameter.\r<br />\nBut the code above compiles without any warning, cause the global scoped 'length' variable declared in lib.d.ts\r<br />\nAlso, lib.d.ts exports global scoped commonly used 'item' name, and etc.\r<br />\n<br />\nIt would be nice we could somehow specify the function/method should use only parameters and locally declared variables.<br />\n",
    "PostedDate": "2013-04-07T20:55:19.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027265",
    "ThreadId": "439455",
    "Html": "It would be useful to see a solution to this, because it is a common error.<br />\n<br />\nE.g<br />\n<pre><code>class Foo {\n private name:string = &quot;foo&quot;;\n  getName(){\n      // Compiles but returns the name of the browser window\n      // rather than &quot;foo&quot;, because we forgot &quot;this.name&quot;\n    return name;\n }  \n}</code></pre>\n\nThe same is true for very common variable names such as location, length, parent, status, self, top...<br />\n<br />\nPerhaps if we require that global variables be prefixed with &quot;window&quot;?<br />\n<pre><code>  getName(){\n    return name; // Compile-time error: &quot;Undeclared variable&quot;\n    return this.name; // ok &quot;foo&quot;\n    return window.name; // ok &quot;whatever&quot;\n }</code></pre>\n\n",
    "PostedDate": "2013-04-08T08:04:01.467-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]