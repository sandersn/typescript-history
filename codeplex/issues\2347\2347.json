{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "It's not guaranteed that you always want imperative code to run after class initialization. For example:\n\n```\ninitializeAwesomePlugin();\n\nclass Foo {\n\tstatic x = awesomePlugin.getThing();\n}\n```",
    "ClosedDate": "2014-03-24T10:34:52.947-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Take this small bit of code: \r\n```\r\nvar john = new Person();\r\nalert(john);\r\n\r\nclass Person\r\n{\r\n\r\n}\r\n```\r\nWill it give an error? Yes, it will. The reason for this is that after being compiled to javascript, it gives this: \r\n```\r\nvar john = new Person();\r\nalert(john);\r\n\r\nvar Person = (function () {\r\n    function Person() {\r\n    }\r\n    return Person;\r\n})();\r\n//# sourceMappingURL=app.js.map\r\n```\r\nAs you can see, the Person variable is set to something after it's being used as a constructor to create john.\r\n\r\nIt would be a lot better (and not hard to implement I think) to have the compiler move all the classes to the top of the file. So that classes don't have to defined before you use them.",
    "LastUpdatedDate": "2014-03-24T10:34:52.947-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-03-21T15:39:37.29-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Move classes to the top of file when compiling",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 2347
  },
  "FileAttachments": [],
  "Comments": []
}