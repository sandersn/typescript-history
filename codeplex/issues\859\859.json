{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:22.657-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "As we know, tons of JavaScript code currently uses object literals to get around the lack of named arguments in the language. This can be modeled with TypeScript pretty effectively:\r\n\r\n``` TypeScript\r\nfunction foo(args: {a: bool; b: string; c: int; d?: bool; e?: bool;}) { }\r\n\r\nfoo({e: true, a: false, b: 'bar', c: 42});\r\n```\r\n\r\nHowever, with the chance to make improvements with TypeScript, I don't think a \"hack\" like this needs to exist forever. Named arguments would allow you to write functions naturally and not worry about altering the signature to make it an object literal if the parameter list gets too big. It would also be more efficient by eliminating the runtime cost of allocating an object just for passing data around.\r\n\r\n``` TypeScript\r\nfunction foo(a: bool, b: string, c: int, d?: bool, e?: bool) { }\r\n\r\nfoo(e: true, a: false, b: 'bar', c: 42);\r\n```\r\n\r\nThe compiler would then use the names to rewrite the callsite into the correct order, using `undefined` for optional arguments that were not specified:\r\n\r\n``` JavaScript\r\nfoo(false, 'bar', 42, undefined, true);\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-04-01T08:00:14.893-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Named arguments",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 29,
    "Id": 859
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "What would the syntax be for optional named parameters?\n\n```\nfunction foo(paraA: bool = false, paraB: string = \"hello\") { }\n```\n\nI'm not deep in TypeScript yet so I don't know if this would clash with anything?\n\nIn that case there should be also an option to be able to check if paraB was omitted and thus defaulted to 'hello' or if it was explicitly set to 'hello' which was coincidentially the same as the default.\n\nI love idea about how to translate this into JavaScript!!",
      "PostedDate": "2013-08-13T18:57:31.017-07:00",
      "Id": 109773
    },
    {
      "Message": "This will get a lot easier once TypeScript implements default parameters as they are in ES6:\n\n```\nfunction foo({ a = 'a', b = 'b'}) {\n  console.log(a + b);\n}\n```",
      "PostedDate": "2013-12-03T07:15:03.187-08:00",
      "Id": 125935
    }
  ]
}