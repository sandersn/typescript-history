{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:22.783-07:00",
    "CommentCount": 6,
    "Custom": null,
    "Description": "A nice feature would be if the typescript language understood 'use strict' and made it easy to apply. Even where typescript can't help regarding the semantics of strict mode, it can help me make the code cleaner and make sure I don't mistype the magic string, silently changing run-time behavior.\r\n\r\nCurrently, I often put 'use strict' as the first line a module, like this:\r\n\r\n```\r\nmodule Foo {\r\n    'use strict';\r\n    // ... rest of Foo ...\r\n}\r\n\r\n```\r\n\r\nIt would be nice if I could instead use a language keyword to indicate my intent:\r\n\r\n```\r\nstrict module Foo {\r\n    // ... rest of Foo ...\r\n}\r\n\r\n```\r\n\r\nwhere the latter TypeScript snippet would generate the same JavaScript as the former.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-02-13T04:43:40.96-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Syntactic 'use strict' support",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 7,
    "Id": 2176
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "IMO TypeScript has more or less made \"use strict\" pretty redundant.\n\nStrict mode is there to warn you of runtime errors, but TypeScript now traps these errors at compile time.",
      "PostedDate": "2014-02-13T06:08:02.74-08:00",
      "Id": 133478
    },
    {
      "Message": "Strict mode still helps when type information isn't available. in addition, [per MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode), \"strict mode fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that's not strict mode\".",
      "PostedDate": "2014-02-13T06:36:36.12-08:00",
      "Id": 133485
    },
    {
      "Message": "It's worth noting that tsLint has a [\"use strict\" rule](https://github.com/palantir/tslint/issues/52).",
      "PostedDate": "2014-02-13T09:24:43.95-08:00",
      "Id": 133500
    },
    {
      "Message": "Since TypeScript hasn't hit 1.0 yet, even better would be a breaking change to emit \"use strict\" by default. Code that requires strict mode be off would require a qualifier. For example:\n\n```\nlenient module Foo {\n    // ... rest of Foo ...\n}\n```\n\nwould tell TypeScript _not_ to emit \"use strict\".",
      "PostedDate": "2014-02-13T12:37:25.287-08:00",
      "Id": 133520
    },
    {
      "Message": "Thanks for the suggestion assigning to Jon.",
      "PostedDate": "2014-02-13T12:52:38.337-08:00",
      "Id": 133521
    },
    {
      "Message": "Added to GitHub as [issue 288](https://github.com/Microsoft/TypeScript/issues/288).",
      "PostedDate": "2014-07-28T19:09:11.893-07:00",
      "Id": 153788
    }
  ]
}