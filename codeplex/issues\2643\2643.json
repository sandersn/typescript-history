{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 1,
    "Custom": null,
    "Description": "I've been working with the \"--out\" compiler flag to create 1 javascript output file.\r\nI have about a hundred TS files, with all kinds of dependencies and was managing this by placing this in the top of every file:\r\n```\r\n/// <reference path=\"../references.ts\" /> \r\n```\r\n\r\nAll was well...\r\n\r\nNow I'd really like to use React.js in this project. And the only way to 'properly' use react in Typescript (so that I'm still able to create classes the typescript way) seems to be by using this library [react-typescript](https://github.com/fdecampredon/react-typescript/tree/master/examples/todomvc/src)\r\n\r\nBut this is library is set up by using commonjs modules and using browserify to combine them:\r\n\r\n```\r\nimport React = require('react');\r\nimport ReactTypescript = require('react-typescript');\r\n\r\n```\r\n\r\nI've got this part to work, but now the usual 'compile to one file' doesn't work anymore.\r\n\r\nIt seems __the compiler cannot use --out together with --module, right__?\r\n\r\nMy question is: Is there any way I can still keep using the reference tags and combine them into 1 file afterwards, while using these 2 commonjs modules? Or is the only thing I can do rewriting all references to many require calls? \r\n\r\n(I guess another options would be to try and use these React modules as inner modules, but my attempts to do so have failed so far) \r\n",
    "LastUpdatedDate": "2014-10-02T00:16:33.567-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-08-25T07:43:36.96-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Combining generated js files into 1 file, even when using commonJS modules",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2643
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "We just went the whole commonjs route, no internal modules. This means you need to require() everything, and use a packer. We use webpack, not browserify. It sits there in a command window with the --watch option and takes about two seconds to patch the bundle each time you Ctrl-S in Visual Studio. We also use NPM to manage getting the dependencies. ",
      "PostedDate": "2014-10-02T00:16:33.567-07:00",
      "Id": 161254
    }
  ]
}