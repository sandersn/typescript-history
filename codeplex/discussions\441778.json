[
  {
    "Id": "1036521",
    "ThreadId": "441778",
    "Html": "Currently, lib.d.ts has too many things that shouldn't be there or there should be an option to include. By that I mean the sections:<br />\n<ul>\n<li>IE10 ECMAScript Extensions</li>\n<li>IE9 DOM APIs</li>\n<li>IE10 DOM APIs</li>\n<li>\nWindows Script Host APIS<br />\n</li>\n</ul>\nBasically, everything that is not &quot;core javascript api available to most browsers&quot; should not be there. I believe this causes some problems as someone developing depending on the IDE can accidentally use a method that is not generally available in other browsers.\r<br />\n<br />\nI know that the nature of javascript is dynamic and in the end this could happen to any method, not only those IE specific, but I think you get the point.\r<br />\n<br />\nAn idea to solve this would be to split the lib.d into multiple files, and allow for a special &lt;references /&gt; clause that would include the definitions.\r<br />\n<br />\nSo, imagine that you split the lib.d.ts into:<br />\n<ul>\n<li>js.d.ts (only the core of javascript, curently most of lib.d.ts)</li>\n<li>ie.d.ts</li>\n<li>wsh.d.ts</li>\n<li>\netc<br />\n</li>\n</ul>\nThat brings us to the references tag. This tag would work just like today references, but instead of:\r<br />\n<br />\n/// &lt;reference path=&quot;~/lib.d.ts&quot; /&gt;\r<br />\n<br />\ncould be something like:\r<br />\n<br />\n/// &lt;reference def=&quot;<a href=\"mailto:@/lib.d.ts\" rel=\"nofollow\">@/lib.d.ts</a>&quot; /&gt;\r<br />\n<br />\nThe @, just like the ~ would make a relative path to some special folder.\r<br />\n<br />\nI suggest these folders would be searched in the following order:<br />\n<ul>\n<li>Project specific &quot;definitions folder&quot; (eg. ~/Scripts/Definitions, preferably customizable)</li>\n<li>\nTypescript extension folder (current home of lib.d.ts)<br />\n</li>\n</ul>\nSo, creating a blank typescript file would be the same as adding a line like this at the top of the file:\r<br />\n<br />\n/// &lt;reference path=&quot;<a href=\"mailto:@/lib.d.ts\" rel=\"nofollow\">@/lib.d.ts</a>&quot; /&gt;\r<br />\n<br />\nwhich in turn would be a small file with a couple of &lt;references /&gt; tags to the other &quot;core, ie, wsh&quot;, etc in the same order are they are in the file today, maintaining backward compatibility.\r<br />\n<br />\nBut if you add a references line to your file using the @ syntax, the compiler wouldn't add the default one and let the user choose the specific definitions it would include. (An alternative to this flow would be to have a specific tag like &quot;&lt;reference clear='true' /&gt;&quot; or similar to remove any default references).\r<br />\n<br />\nThis would greatly improve the code completion for projects for node.js, browser extensions and even web pages that don't want to use the IE extensions by default, but restrict the development to general available JS, so you get build errors if you try to go out of the desired scope.\r<br />\n<br />\nAlso, as a bonus of this method, people could have their own &quot;lib.d.ts&quot; in the project's definition folder, so they could have a &quot;default reference&quot; for all project files without having to add the &lt;references /&gt; line to each file, as the compiler would just use the first lib.d.ts that it finds using the default reference it adds to &quot;<a href=\"mailto:@/lib.d.ts&quot;.\r\n\r\nA\" rel=\"nofollow\">@/lib.d.ts\".\r\n\r\nA</a> lib.d.ts for a chrome extension could look like this:\r<br />\n<br />\n&lt;references path=&quot;js.d.ts&quot; /&gt;\r<br />\n&lt;references path=&quot;chrome.d.ts&quot; /&gt;\r<br />\n&lt;references path=&quot;jquery2.d.ts&quot; /&gt;\r<br />\n<br />\nAnd all files in the current project would just have that by default.\r<br />\n<br />\nWhat do you think?<br />\n",
    "PostedDate": "2013-04-27T08:44:48.527-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1037236",
    "ThreadId": "441778",
    "Html": "We've talked about doing this a few times.  There are some options here.\r<br />\n<br />\nlib.d.ts does have some IE-specific stuff, largely because it gets autogenerated from IDLs we have, but really most of it is DOM and JS api.  For non-web platforms, like Node.js, we wouldn't want to spend time parsing the DOM elements.\r<br />\n<br />\nI'm going to add this to our feature recommendations to remind me to explore cleaner approaches going forward.<br />\n",
    "PostedDate": "2013-04-29T10:05:01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1037237",
    "ThreadId": "441778",
    "Html": "This discussion has been copied to a work item. Click <a href=\"https://typescript.codeplex.com/workitem/978\" rel=\"nofollow\">here</a> to go to the work item and continue the discussion.<br />\n",
    "PostedDate": "2013-04-29T10:05:29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]