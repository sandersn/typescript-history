{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-01-21T14:07:52.277-08:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "$().map() may return an element of type JQuery, but\r\n$.map( array, function(element, index) { return element.transform() } ) should return any[].   After all, jquery returns a standard javascript array in this situation and the type of element depend entirely on that function.\r\n\r\nAlas, the type definition for both assume a return type of JQuery.\r\n\r\nI believe the fix for this is to change the definition of map() in JQueryStatic as follows:\r\n    map(array: any[], callback: (elementOfArray: any, indexInArray: any) =>any): any[];\r\n",
    "LastUpdatedDate": "2013-01-21T14:07:52.277-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-01-18T14:34:56.653-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "jquery.d.ts has wrong definition for $.map",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 622
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I've made the following change in my local copy of jquery.d.ts and it fixed the problem.  (Code is compiling and running using $.map() with results going directly into an array.)",
      "PostedDate": "2013-01-18T14:37:49.133-08:00",
      "Id": 86545
    },
    {
      "Message": "Thanks for reporting this - committed a fix in the develop branch 64fb7b5",
      "PostedDate": "2013-01-21T14:07:48.133-08:00",
      "Id": 86808
    }
  ]
}