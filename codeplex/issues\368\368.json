{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:23.377-07:00",
    "CommentCount": 11,
    "Custom": null,
    "Description": "ES6 will introduce the keywords \"let\" and \"const\" that can replace \"var\".\r\n\r\nUntil \"--target es6\" exists, it would be nice to have command-line options that accept the existence of these two new keywords, so that we can at least compile:\r\n\r\n--es6-let\r\n--es6-const\r\n\r\nI am not asking about backwards compatibility, but rather support for targeting special es6 features for use in node/Mozilla-code, etc.\r\n\r\nThis one is already in the forums [1], but I thought I add it as an issue.\r\n\r\n[1] https://typescript.codeplex.com/discussions/397633",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 1.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-11-04T08:07:24.733-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Support for ES6 \"let\" and \"const\"",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 50,
    "Id": 368
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "TypeScript already implements many ES6 features and extensions, why should these be special cased?",
      "PostedDate": "2012-11-05T06:03:22.26-08:00",
      "Id": 81666
    },
    {
      "Message": "Indeed there are already ES6 features, but the code for these is generated in a ES5-compatible way. \n\nThis bug is asking about allowing \"let\" to appear in the generated code, therefore the compiler needs to know that ES6 is targeted in some way, either with \"--target es6\" (which does not exist yet) or gradually with options like \"--es6-let\" (V8 f.ex. supports gradual support). Using \"let\" in code that targets ES5 should still be an error, that is why it can't just be implemented without an option like other ES6 features.",
      "PostedDate": "2012-11-05T11:00:54.003-08:00",
      "Id": 81688
    },
    {
      "Message": "I understand now, thanks for the clarification",
      "PostedDate": "2012-11-05T11:34:18.263-08:00",
      "Id": 81694
    },
    {
      "Message": "Thanks for reporting this - we'll definitely be supporting ES6 syntax as it becomes standardized. This is more of a long-term feature than a bug per se, so we might close this work item for housekeeping purposes.",
      "PostedDate": "2012-11-06T10:37:58.78-08:00",
      "Id": 81795
    },
    {
      "Message": "Our current expectation for 'let' and 'const' is that we will not try to compile these to ES3/ES5, but will add them in the future as only allowed when in --target ES6 mode.  Given the limited availability of these platforms currently we are not yet prioritizing this relative to work that can benefit a broader audience - but we will continue evaluating based on ES6 adoption and feedback.",
      "PostedDate": "2012-12-02T22:09:25.86-08:00",
      "Id": 83434
    },
    {
      "Message": "LukeH, I think that's an unfortunate approach to take. If TypeScript offered this functionality, it would be the de-facto ES6 transpiler, which would mean it would be far more broadly used & adopted. By not doing this, you're drastically impeding your own influence on the language - and frankly it's such a small and simple request, I can't imagine what reason could possibly justify this move. ",
      "PostedDate": "2013-06-12T10:46:54.523-07:00",
      "Id": 102881
    },
    {
      "Message": "let/const is now supported by IE 10 and Visual Studio 2013 Preview:\nWhat's New in Visual Studio 2013 Preview: http://msdn.microsoft.com/en-us/library/bb386063%28v=vs.120%29.aspx\nWhat's New in JavaScript: http://msdn.microsoft.com/en-us/library/br212465%28v=vs.120%29.aspx\n\nSo it should be supported by TypeScript as well.",
      "PostedDate": "2013-07-22T08:35:33.26-07:00",
      "Id": 106928
    },
    {
      "Message": "It would be pretty dicey to compile a `let` down to a `var` to support ES3 and ES5. My vote goes to getting an alpha ES6 compile mode into our eager hands as soon as possible.",
      "PostedDate": "2014-03-06T13:20:10.68-08:00",
      "Id": 136078
    },
    {
      "Message": "This should be added and I feel it should compile down to ES5 as well.   Yes, if you use a let in a nested scope and re-declare the same variable used in an outer scope it could stomp on var declared in the outer but we are well aware of that issue today, we're used to coding to avoid this.   Adding let to the language isn't suddenly going to make people think differently about naming as it relates to scope.   Even though c# declarations are scope based, I still wouldn't reuse the same variable name in the same method.  Doing so is not the fault of the compiler but arguably bad style on the part of the developer.\n\nIt seems that one of the goals of TypeScript has been to enable advanced functionality with backward compatibility and not supporting this just seems to defeat some of the purpose of using the language.\n",
      "PostedDate": "2014-04-02T14:50:11.283-07:00",
      "Id": 140349
    },
    {
      "Message": "Could let be implemented for ES3 using variable name mangling?  E.g.\n\nInput:\n```\nfor( let x = 0; x < 5; x++ ) {}\nfor( let x = 3; x < 10; x++ ) {}\n```\n\nOutput:\n```\nfor( var __x$0; __x$0 < 5; __x$0++ ) {}\nfor( var __x$1; __x$1 < 10; __x$1++ ) {}\n```",
      "PostedDate": "2014-04-22T13:47:01.647-07:00",
      "Id": 142673
    },
    {
      "Message": "An ES3 compatible solution that has block level scope could be:\n\nInput:\n\n````\nfor( let x = 0; x < 5; x++ ) {}\nfor( let x = 3; x < 10; x++ ) {}\n````\n\nOutput:\n\n````\n(function (x) {\n    for (; x < 5; x++) { }\n} (0));\n\n(function (x) {\n    for (; x < 10; x++) { }\n} (3));\n````\n\nAnother example could be:\n\nInput:\n\n````\nlet firstLet = 1;\nlet secondLet = 2;\n\nif (firstLet < secondLet) { // do something }\n````\n\nOutput:\n\n````\n(function (firstLet, secondLet) {\n    if (firstLet < secondLet) { // do something }\n}(1, 2));\n````\n\nThere's obviously many permutations to let and this pseudo code may be short-sighted, but shows it is possible when targeting ES3.",
      "PostedDate": "2014-04-25T04:09:53.557-07:00",
      "Id": 143044
    }
  ]
}