{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:11.673-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "This elegant looking code:\r\n````\r\nmodule foo {\r\n\texport var bar = 'baz';\r\n}\r\nexport = Object.freeze(foo);\r\n````\r\n\r\nThrows a compile error in `v1.0.0`: \r\n````\r\nerror TS1005: ';' expected.\r\n````\r\n\r\nSame with declarations, although it is less problematic there.\r\n\r\nLooks like expressions as single-export assignment are not supported. \r\n\r\nI'm not quite clear why this limitation exists, but would be great if we could export any valid expression without assigning to local variable first.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-04-26T17:38:58.423-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Single-export assignment does not support expressions",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2473
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "There's some subtlety here around what exactly this would mean for things like class expressions, since the exporting of the value occurs for all meanings of the provided symbol.\r\n\r\nThis has some somewhat weird side effects if it were allowed, e.g. `export = x` would be be potentially different from `export = (x)` since the former would also export the interface called `x`, but not the latter.\r\n\r\nMarking as suggestion for now since the workaround is simple and discoverable.",
      "PostedDate": "2014-04-28T10:05:22.77-07:00",
      "Id": 144973
    }
  ]
}