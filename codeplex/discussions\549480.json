[
  {
    "Id": "1259107",
    "ThreadId": "549480",
    "Html": "<h3>What we have now</h3>\nFor example:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> IA {\n  f(): <span style=\"color:Blue;\">number</span>;\n}\n\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">class</span> A <span style=\"color:Blue;\">implements</span> IA {\n}\r\n</pre></div>Now it produces an error:<br />\n<pre><code>Class A declares interface IA but does not implement it: Type 'A' is missing property 'f' from type 'IA'.</code></pre>\n\n<h3>What is would be better</h3>\n<em>I propose</em> that for <strong>ambient class declarations (</strong> <code>declare class</code> <strong>) it does not need to describe all members of interfaces described it implements.</strong><br />\n<br />\nMay be even introduce new syntax for this cases, like this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">class</span> A\n  <span style=\"color:Blue;\">implements</span> IA, IB, IC <span style=\"color:Green;\">// interfaces that should need to be implemented (current behavior)</span>\n  <span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">implements</span> ID, IE <span style=\"color:Green;\">// just declare this interfaces are implemented</span>\r\n</pre></div><em>(but I don't think it necessary to have new syntax)</em><br />\n<h3>Why it would be better</h3>\nSometime it is better to describe existing JavaScript libraries with classes syntax (when it matches TypeScript class inheritance contract), not interface pair of instance/static, because it allow to use in inheritance with TypeScript syntax.<br />\nAnd it still need to allow extend this classes by plugins:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// a.d.ts</span>\n<span style=\"color:Blue;\">interface</span> IA { ... } <span style=\"color:Green;\">// open interface</span>\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">class</span> A <span style=\"color:Green;\">/* declare ? */</span> <span style=\"color:Blue;\">implements</span> IA { ... } <span style=\"color:Green;\">// class with TS contract</span>\n<span style=\"color:Green;\">// a.plugin.d.ts</span>\n<span style=\"color:Blue;\">interface</span> IA { ... } <span style=\"color:Green;\">// extends interface, and as a result it extends A class</span>\n<span style=\"color:Green;\">// mylibrary.ts</span>\n<span style=\"color:Blue;\">class</span> MyA <span style=\"color:Blue;\">extends</span> A { ... } <span style=\"color:Green;\">// standard TS class, and we know it already implements IA</span>\r\n</pre></div>When TS disallow such functionality, it makes to use interface pair pattern, that does not allow using standard TS inheritance.<br />\n",
    "PostedDate": "2014-06-23T22:53:53.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]