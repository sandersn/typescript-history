{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:23.19-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "I see that JSDoc was added in 0.8.2 but it appears that this is only consumed by intellisense. When trying to parse the JSDoc using the JSDoc3 tool, it doesn't pick anything up which makes generating API documentation for our code difficult.\r\n\r\nCan we please have support in the compiler to generate JSDocs, or create a plugin that we can use in conjunction with JSDoc3 to generate our own docs manually?",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-19T14:10:05.813-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Support for JSDoc generation",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 15,
    "Id": 1533
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I should add that by generate docs I mean generate the documentation webpages that are typically outputted by the JSDoc3 tool.",
      "PostedDate": "2013-08-19T14:11:23.517-07:00",
      "Id": 110360
    },
    {
      "Message": "I can't express how important that is for us, too.\n\nCurrently, when using Typescript for scripts that need documentation, you're actually spilling redundancy all over your code.\n\nEven if you use just a little bit of the features JSDoc delivers, you're duplicating information all over the place.\n\nFor example:\n```\n/**\n * The MyNameSpace namespace contains...\n * @namespace MyNameSpace\n */\nmodule MyNameSpace{\n\n\t/**\n\t * The MyNameSpace.Log namespace contains the logging logic.\n\t * @namespace MyNameSpace.Log\n\t */\n\texport module Log {\n\n\t\texport class LogEntry {\n\t\t\ttime: number;\n\t\t\tmessage: string;\n\n\t\t\t/**\n\t\t\t * The LogEntry class. Represents a single log entry\n\t\t\t * @constructor MyNameSpace.Log.LogEntry\n\t\t\t * @param  {number} time Defines the time that this log entry will display\n\t\t\t * @param  {string} message The Log message\n\t\t\t * @this MyNameSpace.SubNameSpace.LogEntry\n\t\t\t */\n\t\t\tconstructor(time: number, message: string) {\n\t\t\t\tthis.time = time;\n\t\t\t\tthis.message = message;\n\t\t\t}\n```\n\nIndeed, the whole @namespace, @param {typehint}, @this, @constructor declarations are redundant, since all this information is already available in the typescript code.\n\nWouldn't it be great, if the typescript compiler would detect JsDoc comments on the type/member/method and automatically extend this with all the known references?\n\nLike you only use @param paramname description, and if the typescript compiler detects this, it automatically extends this to be @param {typeKnownToCompiler} paramname description ?\n\nOr if a JsDoc is put on a namespace, it automatically adds the @namespace fullNamespace parameter.\n\nIt could also add @constructor, @method declarations etc. from the information about the source, so you would end up with fully annotated JsDoc-comments but the only thing you really have to write is the JsDoc comment with the most basic description texts.\n\nThe compiled javascript then would contain the full fledged JsDoc and you could generate your API docs by the standard means of simply running JsDoc 3 against it.",
      "PostedDate": "2014-05-05T08:15:11.53-07:00",
      "Id": 145596
    }
  ]
}