[
  {
    "Id": "920162",
    "ThreadId": "397583",
    "Html": "\r\n<p>With javascript so similar to C&#43;&#43; and C#, why the decision to come up with</p>\r\n<p>(person: string)</p>\r\n<p>vs</p>\r\n<p>(string person)</p>\r\n<p>??????</p>\r\n",
    "PostedDate": "2012-10-01T12:30:39.307-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920172",
    "ThreadId": "397583",
    "Html": "<p>The x:T style is quite popular in non-C-style languages, but yes it is a little unusual in a curly-brace kind of setting. We chose it because it is less intrusive on the underlying JS syntax. Prefix types - \"T x\" style - work great when types are mandatory. But in TypeScript they are optional, and colon-style type annotations lend themselves better to \"adding as needed\".</p>\r\n<p>Note that TypeScript does quite a bit of type inference so omitting types syntactically doesn't necessarily mean \"untyped.\" For instance, if the return type is omitted on a function, TypeScript will try to infer it from return statements. That way the amount of type annotations you need to add to a JavaScript program to make it strongly typed is usually quite small.</p>\r\n<p>Hope that explains it!</p>",
    "PostedDate": "2012-10-01T12:47:45.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920333",
    "ThreadId": "397583",
    "Html": "<p>Another important reason is that ECMAScript 6 will be introducing the \"let\" keyword (which will have block scope and essentially replace \"var\"). If you declared variables using only the type, it would be&nbsp;ambiguous&nbsp;as to whether the compiler should translate that to \"var\" or to \"let\".</p>",
    "PostedDate": "2012-10-01T19:41:12.427-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921575",
    "ThreadId": "397583",
    "Html": "\r\n<p>Another similar question. Why only one &quot;:&quot;? Previous guards/trademarks proposals used &quot;::&quot; like ES4-ActionScript3 which made it more obvious that something is a type annotation and not part of an object declaration. This will get a bit ambiguous when we\r\n get object destructuring into TypeScript. For example</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">function</span> ({ foo: x, bar: y }) {\n  <span style=\"color:blue\">return</span> x &#43; y;\n}\n</pre>\r\n</div>\r\n<p>In TypeScript my guess is that people will combine destructuring and types in parameters like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">function</span> ({x, y}:SomeInterface) {\n  <span style=\"color:blue\">return</span> x &#43; y;\n}\n</pre>\r\n</div>\r\n<p>But it's still potentially ambiguous.</p>\r\n",
    "PostedDate": "2012-10-03T16:19:27.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "980878",
    "ThreadId": "397583",
    "Html": "\r\n<p>Why &nbsp;not use an&nbsp;syntax&nbsp;compatible with ES8 guards proposal x :: T ? This will align typescrit with TC39 proposals....&nbsp;</p>\r\n",
    "PostedDate": "2012-12-27T08:28:47.393-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "980901",
    "ThreadId": "397583",
    "Html": "\r\n<p>I always thought that the guards proposal is all about run-time type checking and not static type checking. So the TypeScript compiler could translate x:T into x::T when the JS code is generated for target ES8, but other than that the idea behind it is very\r\n different (at least that was my understanding).</p>\r\n<p>BTW, has the guards proposal already been pushed back to ES8? What is the estimated time of arrival of that, 2018 ???</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-12-27T10:03:17.373-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]