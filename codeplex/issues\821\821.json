{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:28.893-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "I think TypeScript should warn on the usage of variables before they're declared. I know this is \"normal\" JavaScript behavior, but it's sole purpose seems to be to cause bugs. \r\n\r\n``` TypeScript\r\nvar a = 5;\r\nvar c = a + b;\r\nvar b = 3;\r\n```\r\n\r\nTypeScript has explicitly made the decision to disallow some of the stupidity allowed in vanilla JS, and this is a perfect opportunity to fix another case of it. \r\n\r\nOf course, to maintain compatibility with JS you'd still have to allow the code to compile. Ideally, this would issue a non-fatal error (eg warning), like type-errors are currently. ",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 1.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-03-15T11:48:21.007-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Warning on variables being used before they're defined",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 15,
    "Id": 821
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This is already covered by \"use strict\" which works perfectly fine in TypeScript. This prevents all manner of stupidity, including assigning values to undeclared variables.\n\nhttp://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\n",
      "PostedDate": "2013-03-15T14:55:07.19-07:00",
      "Id": 93406
    },
    {
      "Message": "@oisin You are mistaken. Strict mode does not prevent this bug. Strict mode prevents you from using variables which _are never declared_. The example I gave uses the variable _before its declared_. Both the TypeScript compiler and the browser's strict mode allow the above code without complaint.",
      "PostedDate": "2013-03-15T15:32:08.817-07:00",
      "Id": 93408
    },
    {
      "Message": "@MgSam - You are right that this is a form of static analysis TypeScript could offer distinct from strict mode or it's current checks.  We've considered adding a form of use-before-def analysis like this but it likely won't be something we add till after 1.0.  This is part of a larger set of static analysis TypeScript could add as additional opt-in rules.",
      "PostedDate": "2013-03-18T16:28:08.98-07:00",
      "Id": 93597
    },
    {
      "Message": "If something is allowed in javascript that is \"always\" a bug then I wouldn't mind typescript not even compiling it :) \n\nFor the case that b is global (or defined elsewhere) as soon as the js processor sees \"var b\" it marks all references of b to NOT use the global b and any previous references of b in scope become undefined: \n\n\n```\nvar b = 123; \nfunction test1(){\n    var c = b; \n    alert(c); // undefined     \n    var b = 456;     \n}\nfunction test2(){\n    var c = b; \n    alert(c); // 123         \n}\n\ntest1(); \ntest2(); \n```\n\nThis is ALWAYS an error, so it would be useful if typescript noticed: \n\"b is defined in scope but not assigned before usage\" which is what the C# compiler does as well : \"Use of unassigned local variable\" \n ",
      "PostedDate": "2013-03-18T16:34:29.73-07:00",
      "Id": 93601
    }
  ]
}