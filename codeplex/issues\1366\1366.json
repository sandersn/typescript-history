{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:28.753-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Please add support for import aliasing in a fashion similar to http://wiki.ecmascript.org/doku.php?id=harmony:modules. \r\n\r\nFor example, instead of this:\r\n\r\n```ts\r\nimport promise = module('promise');\r\nimport cancellation = module('cancellation');\r\n\r\nexport function fetchAsync(url: string, token?: cancellation.CancellationToken): promise.Promise<string> {\r\n  if (token instanceof cancellation.CancellationToken) { \r\n    // ...\r\n  }\r\n  return new promise.Promise<string>(resolver => {\r\n    // ...\r\n  });\r\n}\r\n```\r\n\r\n... with an output of this:\r\n\r\n```js\r\ndefine([\"require\", \"exports\", \"promise\", \"cancellation\"], function (require, exports, __promise__, __cancellation__) {\r\n  var promise = __promise__;\r\n  var cancellation = __cancellation__;\r\n  exports.fetchAsync = function(url, token) {\r\n    if (token instanceof cancellation.CancellationToken) {\r\n      // ...\r\n    }   \r\n    return new promise.Promise(function (resolver) {\r\n      // ...\r\n    });\r\n  }\r\n  var fetchAsync = exports.fetchAsync;\r\n});\r\n```\r\n\r\n... you could instead have:\r\n\r\n```ts\r\nimport { Promise } = module('promise');\r\nimport { CancellationToken } = module('cancellation');\r\n\r\nexport function fetchAsync(url: string, token?: CancellationToken): Promise<string> {\r\n  // ...\r\n}\r\n```\r\n\r\n... with an output of this:\r\n\r\n```js\r\ndefine([\"require\", \"exports\", \"promise\", \"cancellation\"], function (require, exports, __$a, __$b) {\r\n  var __$c = __$a;\r\n  var __$d = __$b;\r\n  exports.fetchAsync = function(url, token) {\r\n    if (token instanceof __$d.CancellationToken) {\r\n      // ...\r\n    }\r\n    return new __$c.Promise(function (resolver) {\r\n      // ...\r\n    });\r\n  }\r\n  var fetchAsync = exports.fetchAsync;\r\n});\r\n```\r\n\r\nThe generated output for the second example is nearly identical to the first example, with the import aliases being substituted for a compiler-generated variable at the module scope.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-18T16:05:29.98-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Add import aliasing",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 1366
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion. We talked a lot about the various module and import/export options to use to align with ES6 proposals. We'll be refining these over time, assigned to Jonathan.",
      "PostedDate": "2013-07-19T11:16:48.803-07:00",
      "Id": 106660
    }
  ]
}