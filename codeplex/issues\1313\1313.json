{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "We don't apply contextual information in this direction. Making this work in the general case with the inferences already in place is not feasible.",
    "ClosedDate": "2013-07-08T11:00:33.2-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "```\r\nfunction g<T>( cb: (x: T) => void ): T { return null; }\r\n\r\nfunction f(): string {\r\n\treturn g( x => x.abcd() );\r\n}\r\n```\r\n\r\nThis example compiles fine, because the \"__x__\" in \"__x.abcd()__\" is inferred to be \"any\".\r\n\r\nWhat I would like the compiler to do is, notice that because __f()__ returns a __string__, the call to __g()__ must return a supertype of __string__, say __U__, and therefore, __x__ should also be of type __U__, which makes __x.abcd__ illegal, because __string__ (the only known facet of __U__) does not have a property named \"__abcd__\".",
    "LastUpdatedDate": "2013-07-08T11:00:33.2-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-06T08:22:20.463-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Type inference based on return type",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1313
  },
  "FileAttachments": [],
  "Comments": []
}