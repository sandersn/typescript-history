[
  {
    "Id": "984233",
    "ThreadId": "428932",
    "Html": "\r\n<p>Arrow functions are great for callbacks, in that they help keep &quot;this&quot; lexically scoped. However, there are a lot of JavaScript libraries that use &quot;this&quot; as the current element. (Example: d3.selectAll(&quot;g.chart&quot;).each())</p>\r\n<p>This leads to the situation where you either:</p>\r\n<p>a) revert back to manually creating your closure via var _this = this;</p>\r\n<p>b) use a currying function to provide the caller's &quot;this&quot; to a parameter on your function. Ex:</p>\r\n<p>$.(&quot;.fooClass&quot;).each(curryThis((node) =&gt; {</p>\r\n<p>//some useful code using node</p>\r\n<p>}))</p>\r\n<p>Is there some type of keyword that would get you the unmasked &quot;this&quot; in the callback function? The only alternative I could find to manually doing the closure myself was to use a currying function that would put &quot;this&quot; as the first parameter\r\n to my arrow function.</p>\r\n",
    "PostedDate": "2013-01-08T14:57:09.937-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]