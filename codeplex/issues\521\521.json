{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:09.017-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Currently, the only way to reuse parts of the typescript project is by using 'reference path' includes. In fact, the whole project source ignores the language features of external modules, import and export (possibly because the source predates the availability of these features?).\n\nThis prevents use of a module system in client code and leads to ridiculous hacks like the one used to get 'typescriptServices.js' into 'harness.ts'. Another example are editor and IDE clients of the language services. \n\nFor my own tool [discussion:405174], I have to precompile my code, putting generated .js into the repo, because I cannot just import the services from the npm module (others have the same issue: http://typescript.codeplex.com/workitem/97).\n\nblocking: workitem/97\nblocked by: more complete support for ES6 modules (currently not before 0.9.x on the roadmap.. http://typescript.codeplex.com/wikipage?title=Roadmap)",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-12-01T13:50:00.503-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "modularize compiler and language services",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 6,
    "Id": 521
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Collecting examples that could be more modular:\n\n'src/harness/harness.ts': \n    vm.runInThisContext(typescriptServiceFile, 'typescriptServices.js');\n\n'src/compiler/tsc.ts':\n  // Start the batch compilation using the current hosts IO\n  var batch = new BatchCompiler(IO);\n  batch.batchCompile();\n\nThe first hack should not be needed, and represents the need proper modularisation.\nThe latter direct code prevents import/include of 'tsc.ts', which has code for instantiating dependency resolution.",
      "PostedDate": "2012-12-01T13:55:20.417-08:00",
      "Id": 83407
    }
  ]
}