[
  {
    "Id": "1261712",
    "ThreadId": "550272",
    "Html": "In the 0.9.1 plugin for visual studio, we could disable automatic compilation for files both in and out of project. The options looked like the below (from Tools...Options...Text Editor...TypeScript...Project)\r<br />\n<br />\nCompile On Save\r<br />\n&quot;Automatically compile TypeScript files which are part of a project&quot;\r<br />\n&quot;Automatically compile TypeScript files which are not part of a project&quot;\r<br />\n<br />\nWhen I went to the 1.0 plugin, I only get the option below:\r<br />\n<br />\nCompile On Save\r<br />\n&quot;Automatically compile TypeScript files which are not part of a project&quot;\r<br />\n<br />\n<br />\nSince I can no longer turn off automatic compile, VSNET gets much slower and frequently pops up warnings that I am overwriting a file that has been updated since it was last opened. Those files are never open anywhere, but in 0.9.1, turning off auto-compile always fixed this.\r<br />\n<br />\nI am using a &quot;class library&quot; style pattern where all ts is compiled using the command-line compiler using a pre-build event to an embedded resource. Web Apps then use WebResource.axd urls to the single generated file that is embedded.\r<br />\n<br />\nI would really like to be able to turn off compile-on-save for files in the project again. The extra little js files serve no purpose and noticeably affect VSNET performance.<br />\n",
    "PostedDate": "2014-07-01T12:55:55.237-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1262044",
    "ThreadId": "550272",
    "Html": "The configuration to disable compile-on-save is in the project properties. If you are using Visual Studio 2013, and your project is a C#/VB/node tools project go to project properties, select &quot;TypeScript Build&quot; tab, you should find a check box under &quot;General&quot; titled &quot;Compile on save&quot;. this will disable it for your specific project.\r<br />\n<br />\nIf you have Visual Studio 2012, you will need to manually add it to your project file, before the reference to the standard targets, &quot;Microsoft.TypeScript.targets&quot;:<br />\n<pre><code>&lt;TypeScriptCompileOnSaveEnabled&gt;False&lt;/TypeScriptCompileOnSaveEnabled&gt;</code></pre>\n\nFor loose files (files that the language service does not identify as belonging to a project), you still have the global option in Tools\\Options\\Text Editor\\TypeScript\\Project\\General\\Compile on Save to disable the feature.\r<br />\n<br />\nHaving said that, Compile-on-save should is not blocking; it should not block you from using Visual Studio, as it runs on a background thread. So CoS causing a delay would be a bug that we need to look into. The warning for overwriting files are probably because you have the js file open, and you can disable the warning from Tools\\Options\\Environment\\Documents\\Detect when file is changed outside the environment.\r<br />\n<br />\nOne more thing to note, is if you use the default build system, CoS will load your build configuration from the project properties, and build the file correctly as you expect (to a single output if I understood your setup correctly) and you would not get the extra .js file for each .ts file. What you would get in return is a pseudo-incremental build, where only changed files will be processed and output will be up-to-date more often.<br />\n",
    "PostedDate": "2014-07-02T10:05:39.813-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": "2014-07-02T17:44:23.527-07:00"
  },
  {
    "Id": "1262211",
    "ThreadId": "550272",
    "Html": "Thank you for that project file tip. That worked and everything seems to be smoother now. I am also no longer getting the warning about overwriting files. I would get it repeatedly when saving .ts files multiple times in short intervals. I have a habit of ALT-F-S to quickly re-save after even the tiniest of edits. Even though I would have no other files open except the current .ts, I would repeatedly get that warning popup. For some reason, turning off compile-on-save resolves this.\r<br />\n<br />\nI will describe the pattern I use to build Typescript libraries so that it might be useful to others:\r<br />\n<br />\nHere are the settings I add to my class library project file to get this to work:<br />\n<pre><code>&lt;PropertyGroup Condition=&quot;'$(Configuration)' == 'Debug'&quot;&gt;\n    &lt;TypeScriptTarget&gt;ES3&lt;/TypeScriptTarget&gt;\n    &lt;TypeScriptRemoveComments&gt;true&lt;/TypeScriptRemoveComments&gt;\n    &lt;TypeScriptSourceMap&gt;false&lt;/TypeScriptSourceMap&gt;\n    &lt;TypeScriptModuleKind&gt;AMD&lt;/TypeScriptModuleKind&gt;\n    &lt;TypeScriptCompileOnSaveEnabled&gt;False&lt;/TypeScriptCompileOnSaveEnabled&gt;\n  &lt;/PropertyGroup&gt;\n  &lt;PropertyGroup Condition=&quot;'$(Configuration)' == 'Release'&quot;&gt;\n    &lt;TypeScriptTarget&gt;ES3&lt;/TypeScriptTarget&gt;\n    &lt;TypeScriptRemoveComments&gt;true&lt;/TypeScriptRemoveComments&gt;\n    &lt;TypeScriptSourceMap&gt;false&lt;/TypeScriptSourceMap&gt;\n    &lt;TypeScriptModuleKind&gt;AMD&lt;/TypeScriptModuleKind&gt;\n    &lt;TypeScriptCompileOnSaveEnabled&gt;False&lt;/TypeScriptCompileOnSaveEnabled&gt;\n  &lt;/PropertyGroup&gt;\n  &lt;PropertyGroup&gt;\n    &lt;VisualStudioVersion Condition=&quot;'$(VisualStudioVersion)' == ''&quot;&gt;11.0&lt;/VisualStudioVersion&gt;\n    &lt;VSToolsPath Condition=&quot;'$(VSToolsPath)' == ''&quot;&gt;$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)&lt;/VSToolsPath&gt;\n  &lt;/PropertyGroup&gt;\n  &lt;Import Project=&quot;$(VSToolsPath)\\TypeScript\\Microsoft.TypeScript.targets&quot; Condition=&quot;Exists('$(VSToolsPath)\\TypeScript\\Microsoft.TypeScript.targets')&quot; /&gt;\n  &lt;PropertyGroup&gt;\n    &lt;PreBuildEvent&gt;attrib -R &quot;$(ProjectDir)\\Generated\\*.js&quot;\ntsc.exe &quot;@$(ProjectDir)Grid.tscargs&quot;\nattrib +R &quot;$(ProjectDir)\\Generated\\*.js&quot;&lt;/PreBuildEvent&gt;\n  &lt;/PropertyGroup&gt;</code></pre>\n\nNote the &quot;.tscargs&quot; file. This is my own extension that has all of the command line params to the tsc compiler. Here is an example of the tscargs contents:<br />\n<pre><code>--out ..\\..\\Generated\\Grid.js\n--target ES3\n--removeComments\n--noImplicitAny\n..\\..\\Lib\\JQuery.d.ts\n..\\..\\Grid\\Interface\\IColumn.d.ts\n..\\..\\Grid\\Interface\\IGrid.d.ts\n..\\..\\Grid\\Column.ts\n..\\..\\Grid\\Grid.ts</code></pre>\n\nSo you can see that the pre-build event, unmarks the &quot;generated&quot; file as readonly, regenerates it, then re-marks it readonly. This generated file is marked &quot;embedded resource&quot;. So now when this pre-build event touches it, it causes the assembly to be rebuilt, even if there were no other &quot;code&quot; changes. Additionally, other assemblies that &quot;reference&quot; my class lib will get the output copied as well. So I can just change a .ts file, build and run, just like C# code. Consuming application projects can either use a post-build event to copy the generated file into their own scripts folder, or use WebResource.axd to service the content directly from the embedded resource.\r<br />\n<br />\nAnyways, that's my pattern and with that minor change to turn off CoS, it is working perfectly. I have not tried 2013 yet, and I couldn't find anything built into 2012 to do this type of integrated build.<br />\n",
    "PostedDate": "2014-07-02T17:52:38.223-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]