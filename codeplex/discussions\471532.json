[
  {
    "Id": "1130346",
    "ThreadId": "471532",
    "Html": "I hope this hasn't already been suggested or even worse already available!\r<br />\n<br />\nOne feature that would enhance TypeScript would be the possibility to query the type/class of an object at running time. The actual typeof operator from JavaScript returns 'function' for any kind of object that use a TypeScript class (logic!). An operator close to &quot;typeid in C++&quot;, which return either an unique string containing the name of the class or a hash, would be welcomed.\r<br />\nTechnically I guess that a field &quot;<strong><em>type</em></strong>&quot; on a javascript object would be enough to carry this information. To avoid any overhead with this feature could be disable/enable with either a keyword on the class or a flag at compilation.\r<br />\n<br />\nI imagine various usages with this feature:<br />\n<ul>\n<li>Type's specialization / generics' specialization.</li>\n<li>Advanced reflection</li>\n<li>...</li>\n</ul>\n",
    "PostedDate": "2013-11-29T09:33:17.13-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1130678",
    "ThreadId": "471532",
    "Html": "There is a <a href=\"https://typescript.codeplex.com/discussions/458594\" rel=\"nofollow\">related discussion on the forum</a>.\r<br />\n<br />\nOne of the ideas mentioned was to have something like the following:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> typeName      = getType(foo.A).getName();\n<span style=\"color:Blue;\">var</span> numericFields = getType(foo.A)\n                    .getFields()\n                    .filter(f=&gt; f.getType() == numeric)\n                    .map(f=&gt; f.getName());\r\n</pre></div>There was also a <a href=\"https://typescript.codeplex.com/discussions/471154\" rel=\"nofollow\">recent post by @jonturner</a> related to mixins that I found interesting.\r<br />\n<br />\nCombining that suggestion we could define an extension method as follows:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> Type {\n  getName(): <span style=\"color:Blue;\">string</span>;\n  getFields(): Type[];\n}\n\n<span style=\"color:Blue;\">var</span> type : Type     = @Type(foo.A);\n<span style=\"color:Blue;\">var</span> typeName      = type.getName();\r\n</pre></div>Which compiles into:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> type     =  <span style=\"color:Blue;\">new</span> Type(<span style=\"color:#A31515;\">&quot;foo.A&quot;</span>, <span style=\"color:Green;\">/*other meta*/</span>);\r\n</pre></div>Basically, TypeScript assumes the existence of a user-defined class called <code>Type</code><br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n   <span style=\"color:Blue;\">class</span> Type {\n        <span style=\"color:Blue;\">constructor</span>(typeName: <span style=\"color:Blue;\">string</span>, fields: Type[]){}\n    \n      getName(){}\n      getFields(){}\n }\r\n</pre></div>",
    "PostedDate": "2013-12-01T10:26:20.273-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]