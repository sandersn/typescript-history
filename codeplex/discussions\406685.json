[
  {
    "Id": "955717",
    "ThreadId": "406685",
    "Html": "\r\n<p>Hi All,</p>\r\n<p>I threw something quick and dirty together to generate Typescript interface files from C# POCOs. &nbsp;I used a Razor template and the Razor Engine project as the basis of the code generator:&nbsp;http://razorengine.codeplex.com/</p>\r\n<p>This is basically&nbsp;programming&nbsp;101 and I know a real code generator could be better but here it is... it's enough to do what I need (for passing POCOs between client and server) and I can add types as I move along to the switch statement in the\r\n template:</p>\r\n<p><strong>Usage:</strong></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">new</span> TypeScriptGenerator().Generate(\r\n    model:\r\n    <span style=\"color:blue\">new</span> TypeScriptGeneratorModel()\r\n    {\r\n        <span style=\"color:green\">// C# Types you want to output as TypeScript Interfaces</span>\r\n        Types = <span style=\"color:blue\">new</span> List&lt;Type&gt;()\r\n            {\r\n                <span style=\"color:blue\">typeof</span>(Programmer),\r\n                <span style=\"color:blue\">typeof</span>(ProgrammingLanguage)\r\n            }\r\n    },\r\n    templatePath: <span style=\"color:#a31515\">@&quot;c:\\yourpath\\TypeSciptInterfaceTemplate.cshtml&quot;</span>, \r\n    outputFile: <span style=\"color:#a31515\">@&quot;c:\\yourpath\\GeneratedTypes.d.ts&quot;</span>);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p><strong>Generator:</strong></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\"><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> TypeScriptGeneratorModel\r\n{\r\n    <span style=\"color:blue\">public</span> List&lt;Type&gt; Types { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n}\r\n</pre>\r\n</div>\r\n<br></span></pre>\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> TypeScriptGenerator\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Generate(TypeScriptGeneratorModel model, <span style=\"color:blue\">string</span> templatePath, <span style=\"color:blue\">string</span> outputFile)\r\n    {\r\n        <span style=\"color:blue\">var</span> template = System.IO.File.ReadAllText(templatePath, Encoding.Default);\r\n        <span style=\"color:blue\">var</span> rendered = Razor.Parse(template, model);\r\n        System.IO.File.WriteAllText(outputFile, rendered);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p><strong>Razor Template (a few loops and a big old switch that can be modified to taste):</strong></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>@model TypeScriptGeneratorModel\r\n<span style=\"color:green\">/* Generated at @DateTime.Now */</span>\r\n@functions{\r\n\r\n    <span style=\"color:blue\">string</span> getTypesScriptType(<span style=\"color:blue\">string</span> propertyType)\r\n    {\r\n        <span style=\"color:blue\">switch</span> (propertyType)\r\n        {\r\n            <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;System.String&quot;</span>:\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;string&quot;</span>;\r\n                <span style=\"color:blue\">break</span>;\r\n\r\n            <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;System.Int32&quot;</span>:\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;number&quot;</span>;\r\n                <span style=\"color:blue\">break</span>;\r\n\r\n            <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;System.Boolean&quot;</span>:\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;bool&quot;</span>;\r\n                <span style=\"color:blue\">break</span>;\r\n                    \r\n            <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;System.Nullable`1[System.Boolean]&quot;</span>:\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;bool&quot;</span>;\r\n                <span style=\"color:blue\">break</span>;\r\n            <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;System.Nullable`1[System.Int32]&quot;</span>:\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;number&quot;</span>;\r\n                <span style=\"color:blue\">break</span>;\r\n                \r\n            <span style=\"color:blue\">default</span>:\r\n                <span style=\"color:blue\">break</span>;\r\n        }\r\n        <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n    }\r\n}\r\n\r\n@<span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> t <span style=\"color:blue\">in</span> Model.Types)\r\n{    \r\n&lt;text&gt;<span style=\"color:blue\">interface</span>&lt;/text&gt; @t.Name @(<span style=\"color:#a31515\">&quot;{&quot;</span>)\r\n&lt;text&gt;\r\n&lt;/text&gt; <span style=\"color:green\">// force a line break</span>\r\n    <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> p <span style=\"color:blue\">in</span> t.GetProperties())\r\n    {\r\n        <span style=\"color:blue\">var</span> typeString = getTypesScriptType(p.PropertyType.ToString());\r\n        <span style=\"color:blue\">if</span> (typeString == <span style=\"color:blue\">null</span>)\r\n        {\r\n&lt;text&gt;<span style=\"color:green\">//@p.Name: of type @p.PropertyType does not have a corresponding typescript type mapping yet&lt;/text&gt;</span>\r\n        }\r\n        <span style=\"color:blue\">else</span>\r\n        {\r\n            <span style=\"color:blue\">if</span> (p.PropertyType.ToString().Contains(<span style=\"color:#a31515\">&quot;Nullable&quot;</span>))\r\n            {\r\n                @(<span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;{0}?: {1}; // {2}&quot;</span>, p.Name, typeString, p.PropertyType))\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                @(<span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;{0}: {1}; // {2}&quot;</span>, p.Name, typeString, p.PropertyType))\r\n            }\r\n&lt;text&gt;\r\n&lt;/text&gt; <span style=\"color:green\">// force a line break</span>\r\n        }\r\n\r\n    }\r\n    \r\n@(<span style=\"color:#a31515\">&quot;}&quot;</span>)&lt;text&gt;<span style=\"color:green\">// @t.Name&lt;/text&gt;</span>\r\n    \r\n&lt;text&gt;\r\n        \r\n&lt;/text&gt; <span style=\"color:green\">// force a line break</span>\r\n    \r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p><strong>Example Entities/POCOs and Example Output</strong></p>\r\n<p>I will just extend the case statement above as needed to add my own types. &nbsp;The generator will put comments in for types it doesn't know yet. &nbsp;Here are some examples, with some known property types and other unknown property types.</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Programmer\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> FirstName { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> LastName { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> List&lt;ProgrammingLanguage&gt; Languages { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> HasUsedTypeScript { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n}\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ProgrammingLanguage\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Name { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span>? Version { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p><strong>Output - notice &quot;Languages&quot; is an unknown type, I can just add to the switch statement as needed</strong></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">/* Generated at 12/13/2012 1:11:50 PM */</span>\r\n\r\n\r\n<span style=\"color:blue\">interface</span> Programmer{\r\n FirstName: <span style=\"color:blue\">string</span>; <span style=\"color:green\">// System.String</span>\r\n LastName: <span style=\"color:blue\">string</span>; <span style=\"color:green\">// System.String</span>\r\n <span style=\"color:green\">//Languages: of type System.Collections.Generic.List`1[CoreWebSite.Tests.Generator.ProgrammingLanguage] does not have a corresponding typescript type mapping yet</span>\r\nHasUsedTypeScript: <span style=\"color:blue\">bool</span>; <span style=\"color:green\">// System.Boolean</span>\r\n }<span style=\"color:green\">// Programmer</span>\r\n\r\n        \r\n <span style=\"color:blue\">interface</span> ProgrammingLanguage{\r\n Name: <span style=\"color:blue\">string</span>; <span style=\"color:green\">// System.String</span>\r\n Version?: number; <span style=\"color:green\">// System.Nullable`1[System.Int32]</span>\r\n }<span style=\"color:green\">// ProgrammingLanguage</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>That's all! Good enough for me for now. &nbsp;Maybe it will be a jump start for anyone here before a real generator comes out :)</p>\r\n<p>Jon</p>\r\n<p>P.S. Use at your own risk I literally wrote this in an hour. Cheers</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-12-13T10:28:36.413-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "955726",
    "ThreadId": "406685",
    "Html": "\r\n<p>I hacked something similar too :) for poco serializable classes</p>\r\n",
    "PostedDate": "2012-12-13T11:12:36.37-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "955729",
    "ThreadId": "406685",
    "Html": "\r\n<p>Haha :) Yeah I guess it comes down to: wait for a tool, hand code the mapping or hack something good enough for now....</p>\r\n",
    "PostedDate": "2012-12-13T11:18:04.567-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "955963",
    "ThreadId": "406685",
    "Html": "\r\n<p>I love self-hacked code generators. :) Wrote one myself, which will generate a TypeScript / Silverlight / .NET4 client for our hosted ASP.NET Web API as a build task (or command line tool). Unfortunately nothing in state that I'd feel acceptable to be released,\r\n but it works for us.</p>\r\n",
    "PostedDate": "2012-12-14T00:29:27.177-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "956094",
    "ThreadId": "406685",
    "Html": "\r\n<p>Nice! That sounds quite useful! What strategy did you all use for your generation? StringBuilder, T4 templates or something else?</p>\r\n<p>I like Razor as a&nbsp;templating&nbsp;engine because there's built in intellisense and it's what I use for views already.</p>\r\n<p>It's a little cumbersome at some points (emitting C# like code in a C# driven templating engine)&nbsp;but overall pretty great.</p>\r\n<p>I changed the template to make <strong>all of the TypeScript properties optional.\r\n</strong>(not just the nullable C# ones)</p>\r\n<p>That way if I have a method that takes a parameter of a certain interface I can call it like so without passing all of the properties.</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">this</span>.model.setProgrammer({\r\n    <span style=\"color:#a31515\">&quot;Name&quot;</span>: <span style=\"color:#a31515\">&quot;Jon Kragh&quot;</span>\r\n});\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>I've also been cleaning up the switch statement logic. &nbsp;The reflection API seems to have a lot more useful properties than it used to back in the day (at least from what I remember).</p>\r\n",
    "PostedDate": "2012-12-14T06:08:47.467-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "990855",
    "ThreadId": "406685",
    "Html": "Very useful Jon, I started to write a simple thing in tt, but found this easier as it was ready made - thanks! (I put the whole thing in a single cshtml which I keep in a web app to be run whenever I need it <a href=\"https://gist.github.com/4604497\" rel=\"nofollow\">https://gist.github.com/4604497</a>) Edit : I made a tt of it aswell : <a href=\"https://gist.github.com/joeriks/4655063\" rel=\"nofollow\">https://gist.github.com/joeriks/4655063</a><br />\n",
    "PostedDate": "2013-01-23T03:58:02.163-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "991115",
    "ThreadId": "406685",
    "Html": "\r\n<p>Cool! I run mine from a unit test whenever I need it.</p>\r\n<p>I have updated the template to generate knockout view models and some other things.</p>\r\n<p>The nice thing is it's really easy to update as I move along.</p>\r\n",
    "PostedDate": "2013-01-23T10:27:56.537-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "994968",
    "ThreadId": "406685",
    "Html": "I've implemented a version of this using T4 templates.  It generates TypeScript interfaces from POCOs in C# and presumably all CLR languages.  It handles collections and relationships to other models, and includes references for them (also does nullable primitives).\r<br />\n<br />\n<a href=\"https://bitbucket.org/JamesDiacono/jdiacono/src/tip/JDiacono/TypeScript\" rel=\"nofollow\">View the source on BitBucket</a>.<br />\n<pre><code>public class Parent\n{\n    public string Name { get; set; }\n    public bool? IsGoodParent { get; set; }\n    public virtual ICollection&lt;Child&gt; Children { get; set; }\n}</code></pre>\n\ntranslates to<br />\n<pre><code>///&lt;reference path=&quot;Child.d.ts&quot; /&gt;\ninterface Parent {\n    Name : string;\n    IsGoodParent? : bool;\n    Children : Child[];\n}</code></pre>\n\n",
    "PostedDate": "2013-01-31T16:58:59.07-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1017884",
    "ThreadId": "406685",
    "Html": "There is my solution - a tool that uses T4 template inside Visual Studio to generate TypeScript interfaces from .NET classes. It supports most of the current language features including modules, collections and inheritance.\r<br />\n<br />\n<a href=\"https://nuget.org/packages/TypeLite\" rel=\"nofollow\">Download NuGet package</a>\r<br />\n<a href=\"http://type.litesolutions.net/\" rel=\"nofollow\">View documentation</a><br />\n",
    "PostedDate": "2013-03-19T13:07:16.643-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1018679",
    "ThreadId": "406685",
    "Html": "Lukas, that looks amazing.  The only thing (which is true of my solution too) is that the custom tool must be run to regenerate the classes.  It would be so cool if there was a way to generate the classes on build.  I was bashing my head up against it for a while but to no avail.<br />\n",
    "PostedDate": "2013-03-20T23:30:06.32-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1028738",
    "ThreadId": "406685",
    "Html": "My take, &lt; 100 lines of T4 only. <br />\n<br />\nAdd it to a VS project, put your classes in where now &quot;ACME&quot; is in and done. <br />\n<br />\nCustomise it as you like.<br />\n<br />\nSee also <a href=\"http://stackoverflow.com/questions/12957820/how-to-reuse-existing-c-sharp-class-definitions-in-typescript-projects/15936878#15936878\" rel=\"nofollow\">http://stackoverflow.com/questions/12957820/how-to-reuse-existing-c-sharp-class-definitions-in-typescript-projects/15936878#15936878</a><br />\n<pre><code>    &lt;#@ template debug=&quot;true&quot; hostSpecific=&quot;true&quot; language=&quot;C#&quot; #&gt;\n    &lt;#@ output extension=&quot;.ts&quot; #&gt;\n    &lt;#@ Assembly Name=&quot;System.Core.dll&quot; #&gt;\n    &lt;#@ assembly name=&quot;$(TargetDir)ACME.Core.dll&quot; #&gt;\n    &lt;#@ import namespace=&quot;System&quot; #&gt;\n    &lt;#@ import namespace=&quot;System.Reflection&quot; #&gt;\n    &lt;#@ import namespace=&quot;System.Collections.Generic&quot; #&gt;\n    &lt;#@ import namespace=&quot;System.Text&quot; #&gt;\n    &lt;#@ import namespace=&quot;System.Linq&quot; #&gt;\n\n    &lt;#= Interface&lt;Acme.Bunny&gt;() #&gt;\n    &lt;#= Interface&lt;Acme.Duck&gt;() #&gt;\n    &lt;#= Interface&lt;Acme.Birdy&gt;() #&gt;\n    &lt;#= Enums&lt;Acme.CarrotGrade&gt;() #&gt;\n    &lt;#= Interface&lt;Acme.LinkParticle&gt;() #&gt;\n\n    &lt;#+  \n        List&lt;Type&gt; knownTypes = new List&lt;Type&gt;();\n\n        string Interface&lt;T&gt;()\n        {   \n            Type t = typeof(T);     \n            var sb = new StringBuilder();\n            sb.AppendFormat(&quot;interface {0} {{\\n&quot;, t.Name);\n            foreach (var mi in GetInterfaceMembers(t))\n            {\n                sb.AppendFormat(&quot;  {0}: {1};\\n&quot;, this.ToCamelCase(mi.Name), GetTypeName(mi));\n            }\n            sb.AppendLine(&quot;}&quot;);\n            knownTypes.Add(t);\n            return sb.ToString();\n        }\n\n        IEnumerable&lt;MemberInfo&gt; GetInterfaceMembers(Type type)\n        {\n            return type.GetMembers(BindingFlags.Public | BindingFlags.Instance)\n                .Where(mi =&gt; mi.MemberType == MemberTypes.Field || mi.MemberType == MemberTypes.Property);\n        }\n\n        string ToCamelCase(string s)\n        {\n            if (s.Length &lt; 2) return s.ToLowerInvariant();\n            return char.ToLowerInvariant(s[0]) + s.Substring(1);\n        }\n\n        string GetTypeName(MemberInfo mi)\n        {\n            Type t = (mi is PropertyInfo) ? ((PropertyInfo)mi).PropertyType : ((FieldInfo)mi).FieldType;\n            return this.GetTypeName(t);\n        }\n\n        string GetTypeName(Type t)\n        {\n            if(t.IsPrimitive)\n            {\n                if (t == typeof(bool)) return &quot;bool&quot;;\n                if (t == typeof(char)) return &quot;string&quot;;\n                return &quot;number&quot;;\n            }\n            if (t == typeof(decimal)) return &quot;number&quot;;            \n            if (t == typeof(string)) return &quot;string&quot;;\n            if (t.IsArray)\n            {            \n                var at = t.GetElementType();\n                return this.GetTypeName(at) + &quot;[]&quot;;\n            }\n            if(typeof (System.Collections.IEnumerable).IsAssignableFrom(t)) \n            {\n                var collectionType = t.GetGenericArguments()[0]; // all my enumerables are typed, so there is a generic argument\n                return GetTypeName(collectionType) + &quot;[]&quot;;\n            }            \n            if (Nullable.GetUnderlyingType(t) != null)\n            {\n                return this.GetTypeName(Nullable.GetUnderlyingType(t));\n            }\n            if(t.IsEnum) return &quot;number&quot;;\n            if(knownTypes.Contains(t)) return t.Name;\n            return &quot;any&quot;;\n        }\n\n        string Enums&lt;T&gt;() // Enums&lt;&gt;, since Enum&lt;&gt; is not allowed.\n        {\n            Type t = typeof(T);        \n            var sb = new StringBuilder();        \n            int[] values = (int[])Enum.GetValues(t);\n            sb.AppendLine(&quot;var ParticleKind = {&quot;);\n            foreach(var val in values) \n            {\n                var name = Enum.GetName(typeof(ParticleKind), val);\n                sb.AppendFormat(&quot;{0}: {1},\\n&quot;, name, val);\n            }\n            sb.AppendLine(&quot;}&quot;);\n            return sb.ToString();\n        }\n    #&gt;</code></pre>\n\n",
    "PostedDate": "2013-04-10T16:00:57.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1033831",
    "ThreadId": "406685",
    "Html": "I've written a T4 template specifically for generating interfaces from SignalR Hubs. It's at <a href=\"https://gist.github.com/robfe/4583549\" rel=\"nofollow\">https://gist.github.com/robfe/4583549</a><br />\n",
    "PostedDate": "2013-04-22T02:13:09.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]