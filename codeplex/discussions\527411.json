[
  {
    "Id": "1199086",
    "ThreadId": "527411",
    "Html": "Hi,<br />\n<br />\nI’m currently trying to define a pattern for data models. In this code, due to platform restrictions (ES3), we use <code>get</code> and <code>set</code> methods to interact with properties. Specialised signatures enable us to do this and get correct typing, but an error “TS1041: Function implementation expected.” occurs when trying to subclass and define additional specialised signatures without a function implementation:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">class</span> Parent {\n  get(key:<span style=\"color:Blue;\">string</span>):<span style=\"color:Blue;\">any</span> {\n    <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>[key];\n  }\n}\n\n<span style=\"color:Blue;\">class</span> Child <span style=\"color:Blue;\">extends</span> Parent {\n  get(key:<span style=\"color:#A31515;\">&#39;foo&#39;</span>):<span style=\"color:Blue;\">string</span>;\n  get(key:<span style=\"color:#A31515;\">&#39;bar&#39;</span>):<span style=\"color:Blue;\">number</span>;\n  get(key:<span style=\"color:Blue;\">string</span>):<span style=\"color:Blue;\">any</span>;\n}\r\n</pre></div>(This example is simplified, but you get the idea.)<br />\n<br />\nIn this case, the function implementation should be able to come from the parent class, but TS will complain. Trying to turn <code>get</code> into a property on the subclass to avoid the method checking results in a different error, “Class 'Child' defines instance member property 'get', but extended class 'Parent' defines it as instance member function.” The only solutions seem to be either this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">class</span> Child <span style=\"color:Blue;\">extends</span> Parent {\n  get(key:<span style=\"color:#A31515;\">&#39;foo&#39;</span>):<span style=\"color:Blue;\">string</span>;\n  get(key:<span style=\"color:#A31515;\">&#39;bar&#39;</span>):<span style=\"color:Blue;\">number</span>;\n  get(key:<span style=\"color:Blue;\">string</span>):<span style=\"color:Blue;\">any</span>;\n  get(key:<span style=\"color:Blue;\">string</span>):<span style=\"color:Blue;\">any</span> {\n    <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">super</span>.get(key);\n  }\n}\r\n</pre></div>or this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">module</span> Child {\n  <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">interface</span> Getters {\n    get(key:<span style=\"color:#A31515;\">&#39;foo&#39;</span>):<span style=\"color:Blue;\">string</span>;\n    get(key:<span style=\"color:#A31515;\">&#39;bar&#39;</span>):<span style=\"color:Blue;\">number</span>;\n    get(key:<span style=\"color:Blue;\">string</span>):<span style=\"color:Blue;\">any</span>;\n  }\n}\n\n<span style=\"color:Blue;\">class</span> Child <span style=\"color:Blue;\">extends</span> Parent <span style=\"color:Blue;\">implements</span> Child.Getters {}\r\n</pre></div>Is there a particular reason why the superclass’s implementation can’t/shouldn’t just be used automatically in a situation like this?<br />\n",
    "PostedDate": "2014-01-27T11:46:43.263-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]