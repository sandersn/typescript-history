{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:41.237-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "Would it be possible to factor the declaration emitter into information gathering and formatted output?\r\n\r\nThe ouput part should be reusable from the language services: they already gather the necessary information for completions, so IDEs could describe interfaces even when the interface is derived from implementations or extended interfaces.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-10-16T14:18:54.62-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "feature suggestion: declaration emitter service",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1795
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This is certainly a reasonable desire, assigning to Jonathan who handles suggestions. Unfortunately this isn't likely to happen in the near term given the other work we have to get to v1 but we certainly would like to factor many of the compiler APIs into an easier to consume fashion in the future. Feel free to add more specifics around requests/use cases for the API that will help us shape it going forward.",
      "PostedDate": "2013-10-16T17:52:05.287-07:00",
      "Id": 118670
    },
    {
      "Message": "> Unfortunately this isn't likely to happen in the near term given the other work we have\n\nWhich reminds me: did you (danquirk) get my message (via CodePlex contact form)?",
      "PostedDate": "2013-10-17T02:25:30.247-07:00",
      "Id": 118688
    },
    {
      "Message": "Hey Clause, i'm not sure i entirely understand your request.  Please feel free to email me directly to discuss it more (i'm cyrusn at MS).\n\nThanks!",
      "PostedDate": "2013-10-31T16:36:07.607-07:00",
      "Id": 120374
    },
    {
      "Message": "@cyrusn let us say I'm applying the LS to itself. Then I would like to be able to point to `TypeScript` in the code, and get the `TypeScript` interface described (in a preview window) the same way as the declaration emitter lays out `d.ts` files, but with all the `declare module TypeScript` sections merged.\n\nIs that clearer?\n\nIn practice, `TypeScript` is an extreme example, and one would definitely want a way to fold away details, like the `DiagnosticCode` entries, but those are UI issues. The non-UI issues are: \n\n - I have a piece of code for which TS can infer interfaces, \n - the LS does not give me a way to generate those infered interface texts\n\nSeveral pieces to the puzzle already exist but fall short in various ways:\n - the LS can point me to explicitly written interfaces and the compiler can generate `.d.ts` files, but those are spread out over all the source files that contributed to the interfaces\n - the LS does have the necessary information: to list an interface `I`, I can create a line of code `var i:I; i.` and then ask for completions after the `.`\n - the compiler does have the necessary pretty printer (declaration emitter), but it works from AST, not from semantic info, so it does not merge interface information contributed by several sources",
      "PostedDate": "2013-11-01T03:39:43.26-07:00",
      "Id": 120404
    }
  ]
}