{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:23.393-07:00",
    "CommentCount": 14,
    "Custom": null,
    "Description": "Script# supports minification, and TypeScript should too. (This is better than using third party minifiers because compiler-generated minified code is more reliable.)",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 1.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-07T12:12:16.68-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Support minification",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 93,
    "Id": 157
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "It should support not just simple minification, but code optimization as well (function inlining, variable eliding, etc.) The type information the compiler has should make it possible for more aggressive optimizations than an external minifier.",
      "PostedDate": "2012-10-11T05:54:23.13-07:00",
      "Id": 79466
    },
    {
      "Message": "It should also support bundling and automatically calculate a partial ordering of the graph (DAG) that is formed by the ///<reference... directives. This way you don't have to keep track of which file should come first in the bundle.",
      "PostedDate": "2012-10-11T14:00:01.76-07:00",
      "Id": 79530
    },
    {
      "Message": "Yes, both advanced optimizations, minification, and bundling are really critical.  Advanced optimizations, at least, require the TypeScript to be involved, both for getting all the juice out AND for source mapping.\n\nI know you know.  I know you're probably on it.  You guys are great.",
      "PostedDate": "2012-10-11T17:33:02.96-07:00",
      "Id": 79563
    },
    {
      "Message": "+1. But remember about preserve the \"exported\" names (eg. angularjs) !!",
      "PostedDate": "2012-10-12T01:26:53.4-07:00",
      "Id": 79581
    },
    {
      "Message": "If the compiler were able to produce Google Closure flavour JSDoc (see: https://developers.google.com/closure/compiler/docs/js-for-compiler), we could use Closure Compiler for minification & optimizations. ",
      "PostedDate": "2012-10-15T05:41:18.697-07:00",
      "Id": 79742
    },
    {
      "Message": "I disagree, I think the produced JS should be human readable to allow debugging.",
      "PostedDate": "2012-10-20T04:12:10.573-07:00",
      "Id": 80535
    },
    {
      "Message": "@Gleno if the minification works with the existing Source Maps support then debugging would be fine since you're using the TypeScript source.",
      "PostedDate": "2012-10-24T03:42:46.743-07:00",
      "Id": 80878
    },
    {
      "Message": "@Gleno It would be unusual to say the least if minification were the ONLY supported output. Generally a compile time switch is provided to determine the level of minification.",
      "PostedDate": "2012-10-29T08:29:43.293-07:00",
      "Id": 81189
    },
    {
      "Message": "Removal of dead code is a big one here. For example, if I write several implementations of a class and choose which I want at compile time, there are more optimizations to be had. Depending on what each implementation calls more code can be stripped out. The compiler sees all the dependencies it can strip out all the unused code no matter where it is.",
      "PostedDate": "2012-12-13T15:10:13.793-08:00",
      "Id": 84122
    },
    {
      "Message": "Michael Bolin has created a prototype that outputs Google Closure type annotations from TypeScript files. (http://blog.bolinfest.com/2013/01/generating-google-closure-javascript.html)\n\nThis should allow you to use the output with the advanced optimizations mode of Closure compiler, enabling much more effective minification, including dead code removal.",
      "PostedDate": "2013-01-18T05:34:28.813-08:00",
      "Id": 86473
    },
    {
      "Message": "I'd say minimizing straight from typescript compiler looks interesting but not as topprio. IMHO the focus should be on getting the language constructs at optimized level ... en to ensure that tooling support is optimal. Every inch progress in terms of efficiency in the workflow when programming is worth a million to me. I think every dev would agree on that!\n\nMinimizing and bundling is already solved in my project, would be nice if it could be optimized, but please ... ",
      "PostedDate": "2013-02-07T04:44:38.2-08:00",
      "Id": 88823
    },
    {
      "Message": "I like it, for version 2.0 or so. Please focus on getting the language lean and efficient including an optimal match with tooling. Every inch of progress on that area realy helps the every day routines of each developer.  \n\nMinification and so on is already solved in everyones workflow I'd guess.\n\nOptimizations achievable (because it's done by the compiler) really are the cherrys on the cake that we'd all appreciate as well, but a cherry without the cake???\n\nps. I thought I'd comment here as counter weight to the huge vote count this topic received!",
      "PostedDate": "2013-02-07T04:52:02.52-08:00",
      "Id": 88824
    },
    {
      "Message": "As others have noted here, minification is something we definitely want to add longer term, but we are currently focusing on core language and tools scenarios that can't be provided by other build chain additions.  There are great existing minifiers which can be chained with TypeScript in a build process, and until we build something more directly integrated, these are a great option for TypeScript.",
      "PostedDate": "2013-02-19T09:37:36.837-08:00",
      "Id": 90791
    },
    {
      "Message": "I see this as a problem to be solved by the IDE, not by the compiler, for all the reasons explained [here](https://typescript.codeplex.com/workitem/1542#CommentContainer0).",
      "PostedDate": "2013-09-25T09:33:57.743-07:00",
      "Id": 115624
    }
  ]
}