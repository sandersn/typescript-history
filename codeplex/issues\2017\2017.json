{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:11.207-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "Mixin pattern is very common due to dynamic nature on JScript. It would be great to have a way in typescript to work with mixins in a type safe way. For example let's say we have:\r\n\r\n```\r\nvar a = new A();\r\n\r\nvar b = mixin(a, { \r\n   f: function() {}\r\n}\r\n\r\n```\r\n\r\nb in this case should be of type B which has all methods of A plus f(). Also it would be great for typescript to enforce  type of  \"this\" type in f() implementation.\r\n\r\n   \r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-14T08:08:49.817-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Feature request: mixin",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 8,
    "Id": 2017
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Jonathan's documented a good pattern for this:\n\nhttps://typescript.codeplex.com/wikipage?title=Mixins%20in%20TypeScript\n\nMarking as suggestion but we can close this if you think that the above solution meets your needs. Thanks!",
      "PostedDate": "2013-12-16T09:29:49.41-08:00",
      "Id": 127637
    },
    {
      "Message": "I think this feature request should be left open. The pattern outlined by Jonathan is for mixing in the statically available, public properties and methods from a mixin type.\n\nThis request is to mix in an instantiated object. This differs from the proposed pattern in that the runtime state of the object together with its public and private methods and fields are copied into the target instance.",
      "PostedDate": "2013-12-17T09:05:20.94-08:00",
      "Id": 127778
    }
  ]
}