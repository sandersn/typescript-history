[
  {
    "Id": "923076",
    "ThreadId": "398379",
    "Html": "\r\n<p>How would a TypeScript class look like that implements the following interface:</p>\r\n<p>interface HTMLCollection { &nbsp;&nbsp;<br>\r\n&nbsp; &nbsp;length: number;&nbsp; &nbsp; <br>\r\n&nbsp; &nbsp;item(nameOrIndex?: any, optionalIndex?: any): Element;&nbsp; &nbsp; <br>\r\n&nbsp; &nbsp;(nameOrIndex: any, optionalIndex: any): Element;&nbsp; &nbsp; <br>\r\n&nbsp; &nbsp;namedItem(name: string): Element;&nbsp; &nbsp; <br>\r\n&nbsp; &nbsp;[index: number]: Element;&nbsp; &nbsp; <br>\r\n&nbsp; &nbsp;[name: string]: Element;&nbsp; &nbsp; <br>\r\n&nbsp; &nbsp;(name: string): Element;<br>\r\n}</p>\r\n<p>I do understand what the different method signatures mean, just having a hard time implementing a class/function that successfully implements the above interface.</p>\r\n<p>Can anyone show a short code snippet that does the trick?&nbsp;</p>\r\n",
    "PostedDate": "2012-10-07T09:25:08.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923498",
    "ThreadId": "398379",
    "Html": "<p>Not all interfaces are meant to be implemented with classes.&nbsp; Some, like those with an indexing member, are meant to be used as a type annotation on JavaScript code that adds members to an array.</p>\r\n<p>Hope that helps.</p>",
    "PostedDate": "2012-10-08T09:11:19.82-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923517",
    "ThreadId": "398379",
    "Html": "<p>I understand the meaning of the signatures (so some of them are indexed accessor and some even function calls). So I understand the implementation is not always a class. However if a method is guaranteed to return the above interface, how could I make the compiler happy.&nbsp;</p>\r\n<p>Or are you saying it is impossible to implement the above interface in a single return type?</p>",
    "PostedDate": "2012-10-08T09:34:36.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923541",
    "ThreadId": "398379",
    "Html": "<p>Keep in mind that TypeScript is really just a thin layer over the top of JavaScript so you can't do anything in TypeScript that you can't also do in JavaScript.&nbsp; So you can't create functions that implement things like indexers because JavaScript doesn't let you do that.&nbsp; You can use indexers to access arrays and object literals in JavaScript so TYpeScript lets you express that via an interface but they're not things you can actually implement via a class.</p>",
    "PostedDate": "2012-10-08T10:01:17.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923558",
    "ThreadId": "398379",
    "Html": "<p>Sometimes the interface is meant to be over code that you&nbsp;may or may not have written&nbsp;the implementation for, more like a C header on a library.&nbsp; Not all interfaces that you could write will make sense, per se.</p>\r\n<p>You can create a return type from your above example like this:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">interface</span> HTMLCollection {   \r\n   item(nameOrIndex?: any, optionalIndex?: any): Element;    \r\n   (nameOrIndex: any, optionalIndex: any): Element;    \r\n   namedItem(name: string): Element;    \r\n   [index: number]: Element;    \r\n   [name: string]: Element;    \r\n   (name: string): Element;\r\n}\r\n\r\nfunction foo(x): HTMLCollection { <span style=\"color: blue;\">return</span> &lt;HTMLCollection&gt;&lt;any&gt;[]; }\r\n</pre>\r\n</div>",
    "PostedDate": "2012-10-08T10:20:00.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923564",
    "ThreadId": "398379",
    "Html": "<p>Thanks for the example, that is&nbsp;similar&nbsp;to the approach I decided to take when I couldn't figure it out.</p>\r\n<p>P.S. I guess with es6 proxies it would be actually possible to create an object that would response to the following messages (this is my understanding of the above interface description):</p>\r\n<p>x.item(2)</p>\r\n<p>x(2)</p>\r\n<p>x.namedItem(\"abc\")</p>\r\n<p>x[2]</p>\r\n<p>x[\"abc\"]</p>\r\n<p>x(\"abc\")</p>",
    "PostedDate": "2012-10-08T10:31:09.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]