{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Different overloads can have different return values.\n\nDoing this any differently would cause inconsistency with how interface and other call signature declarations are handled.",
    "ClosedDate": "2012-12-14T13:04:02.067-08:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "I have the following function:\r\n\r\nfunction foo(x: string) {\r\n}\r\n\r\nIntellisense shows me that it returns \"void\", which is expected since this is the logical default return value.\r\n\r\nNow I overload the function as follows:\r\n\r\nfunction foo(x: string);\r\nfunction foo(y: number);\r\nfunction foo(z: any) {\r\n}\r\n\r\nIntellisense now shows me that the overloads return \"any\". Why is foo not still returning void by default?\r\n",
    "LastUpdatedDate": "2012-12-14T13:04:02.067-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-12-12T13:18:37.73-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Function overload return values",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 554
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Shouldn't the return type be inferred from the overloaded method body?\n\nThis is a total gotcha situation. You refactor a function/method to have overloads and suddenly your API changes without you noticing.",
      "PostedDate": "2012-12-13T11:38:49.033-08:00",
      "Id": 84084
    },
    {
      "Message": "When you have a function body, the return type is inferred (unless an explicit type annotation is present). That's what's happening in the first case.\n\nWhen there is no function body (e.g. an overload declaration), the return type can't be inferred, so the default return type is 'any'.\n\r\n\r** Closed by RyanCavanaugh 12/12/2012 3:24PM",
      "PostedDate": "2012-12-12T15:24:00.57-08:00",
      "Id": 84085
    },
    {
      "Message": "See latest comment. You can re-close if you want, but I think it would be logical to infer the return type from the overloaded function body.",
      "PostedDate": "2012-12-13T11:39:41.847-08:00",
      "Id": 84086
    }
  ]
}