[
  {
    "Id": "1034278",
    "ThreadId": "441225",
    "Html": "I've been playing around with the 0.9.0 alpha release and so far I love the idea of overloading on string constants to provide more specific type information. This makes perfect sense for the way the native DOM APIs behave. However, while working on a .d.ts file for the JavaScript Info Vis Toolkit (<a href=\"http://philogb.github.io/jit/\" rel=\"nofollow\">http://philogb.github.io/jit/</a>), I ran into an interesting use-case. There were a couple of functions in the library that would return different types based off of boolean flags.\r<br />\n<br />\nHere's an example:<br />\n<pre><code>    toComplex: function(simple) {\n        var x = Math.cos(this.theta) * this.rho;\n        var y = Math.sin(this.theta) * this.rho;\n        if(simple) return { 'x': x, 'y': y};\n        return new Complex(x, y);\n    },</code></pre>\n\nIdeally, the definition for this function would look like so:<br />\n<pre><code>    toComplex(simple?: boolean): Complex;\n    toComplex(simple?: true): { x: number; y: number; };</code></pre>\n\nSounds like it would be even simpler to implement than string constant overloads. Also, does it make sense to also allow this functionality for numbers as well? I personally haven't seen a use-case for it, but it seems reasonable that a function may return different types based on different numeric constants (i.e. values in an enum mapped to classes).<br />\n",
    "PostedDate": "2013-04-22T20:13:04.36-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1034540",
    "ThreadId": "441225",
    "Html": "Indeed, overloading on other types of constants could be helpful.  Strings were the first choice, because of how often they come up as part of the API in JavaScript, though in the future we might look into doing others.  You should always feel free to hack to the compiler to add things like that, though, if you need them before they're officially added.<br />\n",
    "PostedDate": "2013-04-23T06:58:18.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]