{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:22.987-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "There are two parts to this suggestion:\r\n\r\n1. Add an experimental ES6 target and support the syntax for `yield`, `yield*`, `for..of`, and `function*`. These would fall-through to the generated .js file for engines that support the July 15th, 2013 revision (or later) of the _EcmaScript Language Specification, 6th Edition_. May need a mechanism to allow `@iterator` as a member name of a class to define an iterator.  Also, you may want to consider adding array comprehensions and generator expressions. This could currently target the current builds of nodejs with the --harmony flag set.\r\n\r\n2. Add an experimental switch to provide down-level support for iterators in pre ES6 engines (possibly restricted to ES5) by way of additional code-generation and the creation of a state machine to simulate native generators.  This would allow for broader use of generators and iterators on more engines. This would require rewriting function bodies to support `function*`, `yield`, and `yield*`, rewriting `for..of` to a `while` loop, and possibly rewriting `@iterator` to `__iterator__`.\r\n\r\n[2] (and to some extent [1]) would provide the foundation to build `await` (or `function!` / `function^`) and `async` on top of generators.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-18T14:44:39.82-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Add support for \"yield\" and \"for..of\"",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 18,
    "Id": 1363
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion. This has been a subject of much discussion before. We definitely will be taking a long look at these ideas in the future. Assigned to Jonathan.",
      "PostedDate": "2013-07-19T11:18:18.893-07:00",
      "Id": 106662
    },
    {
      "Message": "Traceur currently rewrites generators into state machines (similarly to C# compiler's yields):\n\nhttp://google.github.io/traceur-compiler/demo/repl.html#function*%20y()%20%7B%0A%20%20yield%202%3B%0A%7D\n\nNative JS generators are not supported in IE and Chrome requires \"Enable experimental JS\" flag enabled:\n\nhttp://kangax.github.io/es5-compat-table/es6/#Generators_(yield)\n\nThey will be available in Chrome soon but what about IE?\n\nI'm also waiting for this feature as modelling async workflow with yield/await is a lot easier and more readable than callbacks or even promises.",
      "PostedDate": "2014-01-04T08:04:32.34-08:00",
      "Id": 129082
    },
    {
      "Message": "Please focus on support for #1 and an ES6 target. I would gladly give up #2 if it means #1 happens sooner. \n\nNode 0.11 already has support for yield and function*. All we need is to pass it through. I imagine preserving type inference from yield calls is more challenging but it's preventing me from using the newest version of node. ",
      "PostedDate": "2014-04-29T08:26:11.137-07:00",
      "Id": 145088
    },
    {
      "Message": "I was about to start trying to use Node 0.11 and then realised that I cannot with typescript :(\n\nSupporting this would be great, as its not like its some wild feature, it is out there now...",
      "PostedDate": "2014-06-22T09:37:39.003-07:00",
      "Id": 150449
    }
  ]
}