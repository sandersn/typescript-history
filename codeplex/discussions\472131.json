[
  {
    "Id": "1132552",
    "ThreadId": "472131",
    "Html": "Notice that there's no actual message.  I figure this is a bug in 0.9.5, but how can I find what it's choking on and work around it?\r<br />\n<br />\nI had to make code changes to upgrade to 0.9.5 (from 0.9.1 I think?) by Visual Studio (2012)-integrated tooling's error reporting, but now those are all resolved.\r<br />\n<br />\nThanks!<br />\n<pre><code>&gt; node &quot;tsc.js&quot; --out app.js --target ES5 appMainFileOfMany.ts\n\ntsc.js:950\n                throw new Error(&quot;Debug Failure. False expression: &quot; + message\n                      ^\nError: Debug Failure. False expression:\n    at Function.Debug.assert (tsc.js:950:23)\n    at PullTypeResolver.resolveDeclaredSymbolWorker (tsc.js:39470:38)\n    at PullTypeResolver.resolveDeclaredSymbol (tsc.js:39432:25)\n    at PullTypeResolver.resolveNameExpression (tsc.js:43770:18)\n    at PullTypeResolver.resolveAST (tsc.js:43338:37)\n    at PullTypeResolver.resolveSimplePropertyAssignment (tsc.js:44775:25)\n    at PullTypeResolver.resolveAST (tsc.js:43329:33)\n    at PullTypeResolver.resolveDeclaredSymbolWorker (tsc.js:39471:47)\n    at PullTypeResolver.resolveDeclaredSymbol (tsc.js:39432:25)\n    at PullTypeResolver.sourceMembersAreRelatableToTargetMembers (tsc.js:46840:22)\n    at PullTypeResolver.sourceIsRelatableToTarget (tsc.js:46809:46)\n    at PullTypeResolver.sourceIsRelatableToTarget (tsc.js:46764:39)\n    at PullTypeResolver.sourceIsRelatableToTargetInEnclosingTypes (tsc.js:46659:25)\n    at PullTypeResolver.signatureIsRelatableToTarget (tsc.js:47242:27)\n    at PullTypeResolver.signatureGroupIsRelatableToTarget (tsc.js:47191:30)\n    at PullTypeResolver.sourceCallSignaturesAreRelatableToTargetCallSignatures (tsc.js:47050:27)\n    at PullTypeResolver.sourceIsRelatableToTarget (tsc.js:46814:23)\n    at PullTypeResolver.sourceIsSubtypeOfTarget (tsc.js:46592:25)\n    at PullTypeResolver.overloadIsApplicableForArgumentHelper (tsc.js:47485:57)\n    at PullTypeResolver.overloadIsApplicableForAnyFunctionExpressionArgument (tsc.js:47433:44)\n    at PullTypeResolver.overloadIsApplicableForArgument (tsc.js:47408:29)\n    at PullTypeResolver.overloadIsApplicable (tsc.js:47387:52)\n    at PullTypeResolver.resolveOverloads (tsc.js:47320:42)\n    at PullTypeResolver.computeInvocationExpressionSymbol (tsc.js:45665:34)\n    at PullTypeResolver.resolveInvocationExpression (tsc.js:45413:31)\n    at PullTypeResolver.resolveAST (tsc.js:43394:33)\n    at PullTypeResolver.computeInvocationExpressionSymbol (tsc.js:45717:26)\n    at PullTypeResolver.resolveInvocationExpression (tsc.js:45413:31)\n    at PullTypeResolver.resolveAST (tsc.js:43394:33)\n    at PullTypeResolver.typeCheckCastExpression (tsc.js:46162:33)\n    at PullTypeResolver.resolveCastExpression (tsc.js:46152:22)\n    at PullTypeResolver.resolveAST (tsc.js:43400:33)\n    at PullTypeResolver.resolveEqualsValueClause (tsc.js:40927:25)\n    at PullTypeResolver.resolveAST (tsc.js:43314:33)\n    at PullTypeResolver.resolveAndTypeCheckVariableDeclaratorOrParameterInitExpr (tsc.js:41095:39)\n    at PullTypeResolver.resolveVariableDeclaratorOrParameterOrEnumElement (tsc.js:40967:30)\n    at PullTypeResolver.resolveVariableDeclarator (tsc.js:40894:25)\n    at PullTypeResolver.resolveAST (tsc.js:43299:33)\n    at PullTypeResolver.resolveSeparatedList (tsc.js:42424:26)\n    at PullTypeResolver.resolveAST (tsc.js:43275:33)\n    at PullTypeResolver.resolveVariableDeclarationList (tsc.js:42822:22)\n    at PullTypeResolver.resolveAST (tsc.js:43293:33)\n    at PullTypeResolver.resolveVariableStatement (tsc.js:42813:22)\n    at PullTypeResolver.resolveAST (tsc.js:43538:33)\n    at PullTypeResolver.resolveList (tsc.js:42412:26)\n    at PullTypeResolver.resolveAST (tsc.js:43272:33)\n    at PullTypeResolver.resolveBlock (tsc.js:42804:22)\n    at PullTypeResolver.resolveAST (tsc.js:43535:33)\n    at PullTypeResolver.typeCheckFunctionDeclaration (tsc.js:41575:18)\n    at PullTypeResolver.resolveFunctionDeclaration (tsc.js:42076:22)\n    at PullTypeResolver.resolveMemberFunctionDeclaration (tsc.js:41696:25)\n    at PullTypeResolver.resolveAST (tsc.js:43361:33)\n    at PullTypeResolver.resolveDeclaredSymbolWorker (tsc.js:39471:47)\n    at PullTypeResolver.resolveDeclaredSymbol (tsc.js:39432:25)\n    at PullTypeResolver.resolveDottedNameExpression (tsc.js:43919:18)\n    at PullTypeResolver.resolveMemberAccessExpression (tsc.js:43903:25)\n    at PullTypeResolver.resolveAST (tsc.js:43342:33)\n    at PullTypeResolver.computeInvocationExpressionSymbol (tsc.js:45467:37)\n    at PullTypeResolver.resolveInvocationExpression (tsc.js:45413:31)\n    at PullTypeResolver.resolveAST (tsc.js:43394:33)\n    at PullTypeResolver.resolveExpressionStatement (tsc.js:45400:22)\n    at PullTypeResolver.resolveAST (tsc.js:43505:33)\n    at PullTypeResolver.resolveList (tsc.js:42412:26)\n    at PullTypeResolver.resolveAST (tsc.js:43272:33)\n    at PullTypeResolver.resolveBlock (tsc.js:42804:22)\n    at PullTypeResolver.resolveAST (tsc.js:43535:33)\n    at PullTypeResolver.typeCheckAnyFunctionExpression (tsc.js:44458:22)\n    at PullTypeResolver.resolveAnyFunctionExpression (tsc.js:44425:22)\n    at PullTypeResolver.resolveParenthesizedArrowFunctionExpression (tsc.js:41724:25)\n    at PullTypeResolver.resolveAST (tsc.js:43382:33)\n    at PullTypeResolver.computeInvocationExpressionSymbol (tsc.js:45717:26)\n    at PullTypeResolver.resolveInvocationExpression (tsc.js:45413:31)\n    at PullTypeResolver.resolveAST (tsc.js:43394:33)\n    at PullTypeResolver.resolveExpressionStatement (tsc.js:45400:22)\n    at PullTypeResolver.resolveAST (tsc.js:43505:33)\n    at PullTypeResolver.resolveList (tsc.js:42412:26)\n    at PullTypeResolver.resolveAST (tsc.js:43272:33)\n    at PullTypeResolver.resolveBlock (tsc.js:42804:22)\n    at PullTypeResolver.resolveAST (tsc.js:43535:33)\n    at PullTypeResolver.typeCheckConstructorDeclaration (tsc.js:41509:18)\n    at PullTypeResolver.resolveConstructorDeclaration (tsc.js:41823:22)\n    at PullTypeResolver.resolveAST (tsc.js:43348:33)\n    at PullTypeResolver.resolveList (tsc.js:42412:26)\n    at PullTypeResolver.resolveAST (tsc.js:43272:33)\n    at PullTypeResolver.typeCheckClassDeclaration (tsc.js:39964:18)\n    at PullTypeResolver.resolveClassDeclaration (tsc.js:39939:22)\n    at PullTypeResolver.resolveAST (tsc.js:43290:33)\n    at PullTypeResolver.resolveList (tsc.js:42412:26)\n    at PullTypeResolver.resolveAST (tsc.js:43272:33)\n    at PullTypeResolver.typeCheckSingleModuleDeclaration (tsc.js:39665:22)\n    at PullTypeResolver.typeCheckModuleDeclaration (tsc.js:39656:26)\n    at PullTypeResolver.typeCheckAST (tsc.js:43587:26)\n    at PullTypeResolver.resolveAST (tsc.js:43256:22)\n    at PullTypeResolver.resolveList (tsc.js:42412:26)\n    at PullTypeResolver.resolveAST (tsc.js:43272:33)\n    at PullTypeResolver.resolveSourceUnit (tsc.js:39508:18)\n    at PullTypeResolver.resolveAST (tsc.js:43278:33)\n    at Function.PullTypeResolver.typeCheck (tsc.js:47798:26)\n    at TypeScriptCompiler.getSemanticDiagnostics (tsc.js:53673:41)\n    at CompilerIterator.moveNextSemanticsPhase (tsc.js:54246:45)\n    at CompilerIterator.moveNextInternal (tsc.js:54196:33)\n    at CompilerIterator.moveNext (tsc.js:54171:25)\n    at BatchCompiler.compile (tsc.js:60389:20)\n    at BatchCompiler.batchCompile (tsc.js:60268:22)\n    at TypeScript (tsc.js:60897:11)\n    at Object.&lt;anonymous&gt; (tsc.js:60898:3)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:901:3</code></pre>\n\n",
    "PostedDate": "2013-12-06T09:15:46.807-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132564",
    "ThreadId": "472131",
    "Html": "The assert comes from here:<br />\n<pre><code>                // If our decl points at a single name of a module, then just resolve that individual module.\n                var enclosingModule = getEnclosingModuleDeclaration(ast);\n                var resolvedSymbol: PullSymbol;\n                if (isAnyNameOfModule(enclosingModule, ast)) {\n                    resolvedSymbol = this.resolveSingleModuleDeclaration(enclosingModule, ast, context);\n                }\n                else if (ast.kind() === SyntaxKind.SourceUnit &amp;&amp; decl.kind === PullElementKind.DynamicModule) {\n                    // Otherwise, if we have a decl for the top level external module, then just resolve that\n                    // specific module.\n                    resolvedSymbol = this.resolveModuleSymbol(&lt;PullContainerSymbol&gt;decl.getSymbol(), context, /*moduleDeclAST:*/ null, /*moduleNameAST:*/ null, &lt;SourceUnit&gt;ast);\n                }\n                else {\n                    // This assert is here to catch potential stack overflows. There have been infinite recursions resulting\n                    // from one of these decls pointing to a name expression.\n                    Debug.assert(ast.kind() !== SyntaxKind.IdentifierName &amp;&amp; ast.kind() !== SyntaxKind.MemberAccessExpression);\n                    var resolvedSymbol: PullSymbol = this.resolveAST(ast, /*isContextuallyTyped*/false, context);\n                }</code></pre>\n\nI've asked Joe to figure out a few theories on what might be going on so we can try to isolate a repro.<br />\n",
    "PostedDate": "2013-12-06T10:02:42.94-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132602",
    "ThreadId": "472131",
    "Html": "Hey Amiristrator,\r<br />\n<br />\nBased on the callstack and the assert in question, we have a theory about what may be going wrong.\r<br />\n<br />\nWe think that you have some snippet of code in your project like so:\r<br />\n<br />\nFoo ( XXX =&gt; &lt;stuff&gt;  )\r<br />\n<br />\ni.e. you're calling some function/method, and you're passing in a single parameter arrow function to it as one of the arguments.\r<br />\n<br />\n<br />\nWhat we need is the code a few lines before and after this function call, as well as the signature of the method (or group of methods) that are being called.\r<br />\n<br />\nTo help figure this, you'll likely need to run under a debugger and trap the assert when it happens.  When it does, go up one stack frame to:\r<br />\nPullTypeResolver.resolveDeclaredSymbolWorker (tsc.js:39470:38)\r<br />\n<br />\nAnd take a look at the &quot;ast&quot; variable that we're checking.  By drilling into it in the debugger, you should be able to get the &quot;name&quot; of the ast node (i.e. &quot;XXX&quot;) in teh example above.  Hopefully that name is unique enough to tell you which arrow function is the one we're having a problem with.  Once you have that, you can provide hte surrounding context, as well as the signatures of the functions being called, and that will hopefully be enough for us to go off of.<br />\n",
    "PostedDate": "2013-12-06T11:21:28.763-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132604",
    "ThreadId": "472131",
    "Html": "Alternatively if you want to post a zip file on the issue tracker or via email <a href=\"mailto:(ryanca@microsoft.com)\" rel=\"nofollow\">(ryanca@microsoft.com)</a> we'd be happy to take a look.<br />\n",
    "PostedDate": "2013-12-06T11:24:35.35-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132615",
    "ThreadId": "472131",
    "Html": "OK, well for the Achievements, I had already hacked tsc.js to spit out the file name and offending symbol.<br />\n\r<br />\nI've narrowed it down to a basic example telling us that 'p' is of the unexpected ast.kind() == 11 /<em> IdentifierName </em>/<br />\n<pre><code>var values =\n    Array.prototype.concat.apply([], (&lt;string[]&gt;[]).map(a =&gt;\n        (&lt;number[]&gt;[]).map(p =&gt; {\n            return { A: a, P: p }; // fails on this `p`, but not in `[a, p]`\n        })));</code></pre>\n\nOne interesting note is that when I test it at the global scope, the symbol name is formatted as 'symbol: type'\r<br />\nBut when it's in the original location buried in a callback in a ctor of a class in a module, it only shows the 'symbol'\r<br />\nAnd if I don't cast the arrays to a particular array (here) then I get 'p: undefined' as the symbol.  As written it shows 'p: number'.\r<br />\n<br />\nIs that enough?  Is there a workaround so I can get mine to compile?\r<br />\n<br />\nThanks!<br />\n",
    "PostedDate": "2013-12-06T12:20:59.25-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132618",
    "ThreadId": "472131",
    "Html": "We haven't looked deeply at it yet.  <em>But</em>, your workaround may be to use    (a) =&gt;...      and (p) =&gt; ...    (i.e. parenthesize the parameter names).<br />\n<br />\nWe also have a smaller repro.  Thanks so much for your help!<br />\n",
    "PostedDate": "2013-12-06T12:28:33.713-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132619",
    "ThreadId": "472131",
    "Html": "Simplified the best we can get it:<br />\n<pre><code>// Errors\n[].map(() =&gt; [].map(p =&gt; ({ X: p })));\n// Workaround: Put parentheses around the parameters\n[].map(() =&gt; [].map((p) =&gt; ({ X: p })));</code></pre>\n\nThanks for tracking down the offending line!<br />\n",
    "PostedDate": "2013-12-06T12:31:35.61-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132621",
    "ThreadId": "472131",
    "Html": "Yes, that works for me.  Sweet!  Thanks.<br />\n",
    "PostedDate": "2013-12-06T12:41:01.763-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1138097",
    "ThreadId": "472131",
    "Html": "I was using the <br />\n<pre><code>p =&gt; ({ X: p }) </code></pre>\n\nsyntax as well, and attempted to first change it to<br />\n<pre><code>p =&gt; { \n   return { \n      X: p\n   }\n}</code></pre>\n\nin the hope that it would resolve the problem. However this didn't work. I then went through ALL my code in my project and changed as many instances of x =&gt; to (x) =&gt; as possible. It now builds successfully.<br />\n",
    "PostedDate": "2013-12-18T23:12:57.857-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]