[
  {
    "Id": "922846",
    "ThreadId": "398305",
    "Html": "\r\n<p>What about enums and structs?</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-10-06T08:40:07.18-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922883",
    "ThreadId": "398305",
    "Html": "\r\n<p><strong>enums</strong></p>\r\n<p>This is from the language spec:</p>\r\n<p><em>NOTE: The TypeScript compiler currently implements an experimental form of enum types. We expect the final language to support enum types, but not in the form they are currently implemented.</em></p>\r\n<p>So&nbsp;as you can see&nbsp;built in support for enums isn't fully baked yet.&nbsp; With that said&nbsp;you can get&nbsp;enum like behaviour using standard JavaScript techniques. Below I modified the Greeter example from the playground to use a new GreetingType\r\n in the same way you would an enum.&nbsp; It's not an enum though because you can't enforce that only values of GreetingType be passed to greet().&nbsp; We'll have to wait for official language support for that:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">class</span> Greeter {\r\n\tgreeting: string;\r\n\tconstructor (message: string) {\r\n\t\t<span style=\"color:blue\">this</span>.greeting = message;\r\n\t}\r\n\tgreet(type: number) {\r\n\t\t<span style=\"color:blue\">switch</span> (type) {\r\n\t\t\t<span style=\"color:blue\">default</span>:\r\n\t\t\t<span style=\"color:blue\">case</span> GreetingType.Hello:\r\n\t\t\t\t<span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Hello, &quot;</span> &#43; <span style=\"color:blue\">this</span>.greeting;\r\n\t\t\t<span style=\"color:blue\">case</span> GreetingType.Welcome:\r\n\t\t\t\t<span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Welcome, &quot;</span> &#43; <span style=\"color:blue\">this</span>.greeting;\t\t\t\t\r\n\t\t}\r\n\t}\r\n}   \r\n\r\n<span style=\"color:blue\">var</span> GreetingType = {\r\n\tHello: 0,\r\n\tWelcome: 1\t\r\n};\r\n\r\n<span style=\"color:blue\">var</span> greeter = <span style=\"color:blue\">new</span> Greeter(<span style=\"color:#a31515\">&quot;world&quot;</span>);\r\n\r\n<span style=\"color:blue\">var</span> button = document.createElement(<span style=\"color:#a31515\">'button'</span>)\r\nbutton.innerText = <span style=\"color:#a31515\">&quot;Say Hello&quot;</span>\r\nbutton.onclick = <span style=\"color:blue\">function</span>() {\r\n\talert(greeter.greet(GreetingType.Welcome))\r\n}\r\n\r\ndocument.body.appendChild(button)\r\n\r\n</pre>\r\n</div>\r\n<p><strong>structs</strong></p>\r\n<p>There's no official concept of a struct in the language but that's what JSON objects really are.&nbsp; So anywhere you would want to use a struct in your code I'd just use an interface and a plain old JSON object:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">interface</span> EmployeeData {\r\n\tname: string;\r\n\tid: string;\r\n}\r\n\r\n<span style=\"color:blue\">var</span> employee: EmployeeData = {\r\n\tname: <span style=\"color:#a31515\">'Steven Ickman'</span>,\r\n\tid: <span style=\"color:#a31515\">'1'</span>\r\n};\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-10-06T10:59:47.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923481",
    "ThreadId": "398305",
    "Html": "<p>TypeScript has object literals and interfaces, which compile down to JavaScript object literals (and nothing).&nbsp; This would be the TS equivalent of a 'struct' as it's the closest to the JavaScript.</p>",
    "PostedDate": "2012-10-08T08:30:39.033-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]