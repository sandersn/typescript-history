{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:43.237-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "I am trying to define an interface that can hold an object or an array. For example, a tree where internal nodes are arrays and leaf nodes are objects could have a traversal function that takes a single argument which is an array or an object. To walk the tree the traversal function might test the argument and if an object (no length property) then process the leaf else call traverse on each element of the array.\r\n\r\nI expected (hoped?) this would work:\r\n\r\n```\r\ninterface ILeafOrNode {\r\n    [node?: number] : ILeafOrNode;\r\n    leaf?: string;\r\n}\r\n\r\nfunction Foo() {\r\n    var root0: ILeafOrNode = { leaf: \"leaf\" };\r\n    var root1: ILeafOrNode = [{ leaf: \"left leaf\", leaf: \"right leaf\" }];\r\n}\r\n```\r\n\r\nI actually got warnings for both lines in Foo:\r\n\r\nError\t1\tCannot convert '{ leaf: string; }' to 'ILeafOrNode': Index signatures of types '{ leaf: string; }' and 'ILeafOrNode' are incompatible: Call signature expects 0 or fewer parameters\r\n\r\nError\t2\tCannot convert '{ leaf: string; }[]' to 'ILeafOrNode'\r\n\r\nI also don't grok the messages in the error. So if that behavior is expected please help me to understand what the error message is telling me about the TypeScript type system.\r\n\r\nThanks!\r\nChris",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-04-22T18:11:21.39-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Can I define an Interface that can hold an object or an array?",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 937
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I would use the visitor pattern for a situation like that.\n\n```\nexport interface ILeafOfNode {\n   void accept(visitor: ILeafOfNodeVisitor);\n}\nexport interface INode extends ILeafOrNode {\n   [node?: number] : ILeafOrNode;\n}\nexport interface ILeaf extends ILeafOrNode {\n   leaf?: string;\n}\nexport interface ILeafOfNodeVisitor {\n   visitLeaf(leaf: ILeaf);\n   visitNode(node: INode);\n}\nexport class Traverser {\n   traverseWhatever(something: ILeafOrNode) {\n      var visitor = new TraverseVisitor(this);\n      something.accept(visitor);\n   }\n   traverseLeaf(leaf: ILeaf) {\n      // put your code here\n   }\n   traverseNode(node: INode) {\n      // put your code here\n   }\n}\n\nexport class TraverseVisitor implements ILeafOrNodeVisitor {\n   constructor(private traverser: Traverser) {}\n   visitLeaf(leaf: ILeaf) {\n      this.traverserTraverseLeaf(leaf);\n   }\n   visitNode(node: INode) {\n      this.traverserTraverseNode(node);\n   }\n}\n```",
      "PostedDate": "2013-04-22T20:27:49.8-07:00",
      "Id": 97773
    },
    {
      "Message": "This is loosely related to https://typescript.codeplex.com/workitem/577 which is about defining index signature overloads.",
      "PostedDate": "2013-04-23T08:22:24.213-07:00",
      "Id": 97824
    },
    {
      "Message": "In 0.9.0, you should be able to make the index non-optional and get the effect you're looking for.  We've tweaked how indexers are handled to be more consistent.\n\n```TypeScript\ninterface ILeafOrNode {\n    [node: number] : ILeafOrNode;\n    leaf?: string;\n}\n\nfunction Foo() {\n    var root0: ILeafOrNode = { leaf: \"leaf\" };\n    var root1: ILeafOrNode = [{ leaf: \"left leaf\", leaf: \"right leaf\" }];\n}\n```",
      "PostedDate": "2013-04-30T11:42:02.43-07:00",
      "Id": 98941
    }
  ]
}