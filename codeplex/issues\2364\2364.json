{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:27.33-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "Many JavaScript libraries have a usage pattern where you call a method and pass a callback, and later it gets called with both argument *and* a custom scope for `this` (eg: via Function.call() or apply()).\r\n\r\nThis is a sneaky way to pass implicit state while keeping the signature clean. It is arguable not ideal but it is used in many popular libraries so we'd like to be able to describe this.\r\n\r\nSimple examples:\r\n\r\n````\r\nVue.directive('my-directive', function (value: any) {\r\n    this.el.innerHTML = 'foo: ' + this.id;\r\n    // ...\r\n});\r\n````\r\n\r\n````\r\noboe(url)\r\n\t.node('!foo', function (value) {\r\n\t\tif (value == bad) {\r\n\t\t\tthis.abort();\r\n\t\t}\r\n\t\t// ...\r\n\t})\r\n````\r\n\r\nIn case of the first snippet you could have something like:\r\n````\r\ndeclare module Vue {\r\n\tfunction directive: (name: string, callback: DirectiveCallback): void;\r\n}\r\ninterface DirectiveCallback {\r\n\t(value: any): void # {\r\n\t\tid: string;\r\n\t\tel: DOMElement;\r\n\t}\r\n}\r\n// or split it up:\r\ninterface DirectiveCallback {\r\n\t(value: any): void $ DirectiveCallbackScope;\r\n}\r\ninterface DirectiveCallbackScope {\r\n\tid: string;\r\n\tel: DOMElement;\r\n}\r\n````\r\nIt uses the callable signature with a interface body (with a prefix maybe, like # or $ to break pattern and make it explicit the this is about the `this` scope).\r\nThis would work for any callable signature declaration. (interface member, callable-interface, module function and variable or return types etc).",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-03-29T02:30:18.153-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "declaring callback scope members",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 3,
    "Id": 2364
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I think this may be solved via this issue: (no pun intended! LOL)\nhttps://typescript.codeplex.com/workitem/507",
      "PostedDate": "2014-04-03T14:54:55.433-07:00",
      "Id": 140468
    },
    {
      "Message": "Hah, this is exactly what I meant!\n\nSo this is a duplicate: let's close it (but I cannot close my own tickets so somebody else needs to do it)",
      "PostedDate": "2014-04-03T15:24:54.95-07:00",
      "Id": 140474
    }
  ]
}