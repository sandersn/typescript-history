{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.55-07:00",
    "CommentCount": 11,
    "Custom": null,
    "Description": "Hi Guys,\r\n\r\nI've got a problem with TypeScripts \"preserve comments\" mechanism.\r\n\r\nIn my existing project I'm using Cassette to serve up my JavaScript files.  If you haven't heard about Cassette you can read up on it here: http://getcassette.net\r\n\r\nIn particular I'm taking advantage of the ability to get Cassette to serve scripts in dependency order through the use of reference comments at the top of JavaScript files that look like this:\r\n\r\n// @reference other.js\r\n\r\nor this:\r\n\r\n/// <reference path=\"other.js\" />\r\n\r\n(nb if interested you can find more details on how that works here: http://getcassette.net/documentation/v1/AssetReferences )\r\n\r\nBecause I want to continue to take advantage of this feature of Cassette working with the JavaScript generated by the TypeScript compiler I was intending to enable the \"preserve comments\" option.  This would work fine with me making use of the \"// @reference other.js\" style references in my TypeScript.  However, to my frustration the typing file comments are * __also__ * being preserved.  This seems a little strange to me since these aren't strictly speaking comments, more compiler directives masquerading as comments.\r\n\r\nSo my JavaScript ends up with references to the typings files like this:\r\n\r\n/// <reference path=\"jquery.d.ts\" />\r\n\r\nJust to demonstrate, TypeScript like this:\r\n\r\n```\r\n// @reference jQuery-1.8.2.js\r\n/// <reference path=\"jquery.d.ts\" />\r\n\r\n// Module\r\nmodule Shapes {\r\n\r\n    // Class\r\n    export class Point implements IPoint {\r\n        // Constructor\r\n        constructor (public x: number, public y: number) { }\r\n\r\n        // Instance member\r\n        getDist() { return Math.sqrt(this.x * this.x + this.y * this.y); }\r\n\r\n        // Static member\r\n        static origin = new Point(0, 0);\r\n    }\r\n\r\n}\r\n\r\n// Interface\r\ninterface IPoint {\r\n    getDist(): number;\r\n}\r\n\r\n// Local variables\r\nvar p: IPoint = new Shapes.Point(3, 4);\r\nvar dist = p.getDist();\r\n```\r\nWill generate JavaScript like this:\r\n\r\n```\r\n// @reference jQuery-1.8.2.js\r\n/// <reference path=\"jquery.d.ts\" />\r\n// Module\r\nvar Shapes;\r\n(function (Shapes) {\r\n    // Class\r\n    var Point = (function () {\r\n        // Constructor\r\n        function Point(x, y) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        Point.prototype.getDist = // Instance member\r\n        function () {\r\n            return Math.sqrt(this.x * this.x + this.y * this.y);\r\n        };\r\n        Point.origin = new Point(0, 0);\r\n        return Point;\r\n    })();\r\n    Shapes.Point = Point;    \r\n})(Shapes || (Shapes = {}));\r\n// Local variables\r\nvar p = new Shapes.Point(3, 4);\r\nvar dist = p.getDist();\r\n//@ sourceMappingURL=file1.js.map\r\n\r\n```\r\n\r\nAs you can see this has the unfortunate side effect of serving up the typing files which will in turn make Cassette serve up the TypeScript typings files with the JavaScript.  And that stops me from making use of TypeScript in the way I would hope.\r\n\r\nWould it be possible to introduce more fine grained control over what comments should be preserved?\r\n\r\nPerhaps it would be possible to include a block syntax that, if present would indicate that a set of comments should __not__  be preserved?  Maybe something as simple as this would suffice?:\r\n\r\n```\r\n//<!--\r\n/// <reference path=\"jquery.d.ts\" />\r\n//-->\r\n\r\n```\r\n\r\nAlternatively, would it be possible to introduce a compiler option which preserved comments but not comments that are actually typing references?  Either would work for me...",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-05-03T15:58:47.25-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Preserve comments should not emit /// references",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 8,
    "Id": 995
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "https://typescript.codeplex.com/workitem/150",
      "PostedDate": "2013-05-06T14:58:48.63-07:00",
      "Id": 99514
    },
    {
      "Message": "Hi Ryan,\n\nI'm looking to avoid having the __typing__ files propogated as references during compilation.  \n\nI don't think this is entirely the same as work item 150 which seems to be talking actual script dependencies.\n\nOr did you just mean to link the 2 work items together because they touch similar parts of the compiler (I presume)?\n\nJohn",
      "PostedDate": "2013-05-07T01:23:07.527-07:00",
      "Id": 99545
    },
    {
      "Message": "Changing this to a suggestion which Jonathon handles. At the moment we don't intend to change the behavior here because some users rely on the /// reference being present in the JavaScript for some post processing by other tools. We will have to consider whether there should be an additional compiler flag to control this separately from emitting other comments.",
      "PostedDate": "2013-05-16T16:01:33.607-07:00",
      "Id": 100404
    },
    {
      "Message": "An additional compiler flag would work fine for me.  I appreciate that mine may be an edge case.\n\nIf you do go this route it would be ideal if this compiler flag could be set up in a project file so when other team members fire up a project there'd be no danger of them compiling and stripping the comments.  (I suspect that this situation would already be handled by the Target Name=\"BeforeBuild\" setting in the project file but I thought it worth re-iterating.)\n\nDo you need me to raise a different issue for this or can this one stand?",
      "PostedDate": "2013-05-17T00:08:40.71-07:00",
      "Id": 100427
    },
    {
      "Message": "Thanks for the additional info. I believe in general we would aim to expose any public compiler flags with project support (whether that means in the project file and/or project properties UI or something else).\n\nNo need for a new issue, we use these to track suggestions as well as bugs.",
      "PostedDate": "2013-05-17T11:04:26.487-07:00",
      "Id": 100475
    },
    {
      "Message": "Hi Guys,\n\nJust to let you know that I was able to work around this issue by tweaking how I used Cassette.  I've written up how to do this yourself in case anyone finds it helpful:\n\nhttp://icanmakethiswork.blogspot.co.uk/2013/07/how-im-using-cassette-part-3-typescript.html",
      "PostedDate": "2013-07-09T04:53:36.103-07:00",
      "Id": 105521
    },
    {
      "Message": "See my comments in https://typescript.codeplex.com/workitem/1321 which refer back to this.\n\n",
      "PostedDate": "2013-07-12T02:47:10.85-07:00",
      "Id": 105825
    },
    {
      "Message": "I'd like to see the\n```\n /*! (c) */ \n```\nsyntax supported as recognised by minification, even with preserve comments OFF. A lot of OSS libraries (eg. jQuery) require the preservation of the license at the top of the file. I want to be able to force those comments through to the output but I do NOT want ALL comments preserved in the output.",
      "PostedDate": "2013-08-22T07:26:34.41-07:00",
      "Id": 110742
    },
    {
      "Message": "+1\n\nI think preserving comments and \"/// references\" are two different things. \"/// references\" is meta data needed by TypeScript, while comments are for developers. They should be optionally emitted by a different flag.",
      "PostedDate": "2014-01-23T06:57:32.077-08:00",
      "Id": 131305
    },
    {
      "Message": "+1 for a separate compiler flag.\n\nI think `--removeComments` should continue to function as it is (all or nothing) and a new `--keepReferences` options would preserve reference comments when `--removeComments` is specified.\n\nI'm not a big fan of having a special comment format as that would just create clutter in the code.",
      "PostedDate": "2014-03-05T19:32:10.62-08:00",
      "Id": 136001
    },
    {
      "Message": "+1 to compiler flag --removeComments [all,pinned,refs,true,false]\n\ntsc --removeComments all\ntsc --removeComments true\ntsc --removeComments false\ntsc --removeComments false,pinned (would keeps references only)\ntsc --removeComments false,pinned,refs\n\nThere's kind of support for this already but the comments api in the emitter would need to be improved (e.g. onlyPinnedOrTripleSlashComments).\n",
      "PostedDate": "2014-06-02T06:50:11.783-07:00",
      "Id": 148552
    }
  ]
}