{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:27.377-07:00",
    "CommentCount": 10,
    "Custom": null,
    "Description": "At first, when i wrote the suggestion, i thought that private members are not visible in derived classes.\r\nBut later i had found that private members in typescript are visible in derived classes. Who would have thought that? Especially C# programmer.  They act like C# protected  members.\r\nIt was what i wanted, because i wanted so the users of my framework have on access tto variable which i mark private (typically i use underscore naming convention for them)\r\nBut after my short lived elation, i stumbled on a bug or design flaw in typescript. You can invoke inherited private member by using  this.privateMember, but can not access it using super.privateMember. So, how to override it, and execute inherited implementation?\r\n\r\nSo, i can not use 'private' directive in many cases in the code (_because i need to manipulate them in subclasses_), i need to leave only undescore naming convention. But that leaves the properties starting with undescore exposed to the users in intellisense property viewer and they distract the user a lot. They are shown when the user  types a dot after class instance variable or 'this' variable. __I suggest not to show them at once. Just only after the user types underscore symbol.__ It is not difficult for developers, but the end users of the library written in typescript will not be overwhellemed by multitude of protected properties, which developers meant to be protected and not usable by end users.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-09-25T00:04:50.74-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Suggestion: Hide members starting with an underscore in intellisense view",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 3,
    "Id": 1721
  },
  "FileAttachments": [
    {
      "FileId": 735470,
      "FileName": "now.jpg",
      "DownloadUrl": ".\\735470"
    },
    {
      "FileId": 735471,
      "FileName": "groupped.jpg",
      "DownloadUrl": ".\\735471"
    }
  ],
  "Comments": [
    {
      "Message": "I attached now.jpg which shows how intellisense display properties.\r\nIt would be good to display them in to different categories - propertiesw starting with underscore and all the other properties. Something like property viewer in solution explorer displays properties in different categories. The groups can be collapsed with one click. ",
      "PostedDate": "2013-09-25T09:07:01.443-07:00",
      "Id": 115617
    },
    {
      "Message": "attached groupped.jpg showing how properties can be groupped in property viewer.",
      "PostedDate": "2013-09-25T09:08:25.34-07:00",
      "Id": 115619
    },
    {
      "Message": "groupped.jpg",
      "PostedDate": "2013-09-25T09:08:57.523-07:00",
      "Id": 115620
    },
    {
      "Message": "But may be it is better to show them in intellisense only after a user types underscore sign, otherwise they are hidden.",
      "PostedDate": "2013-09-25T09:20:49.247-07:00",
      "Id": 115622
    },
    {
      "Message": "P.S.- ignore suggestion about property groupping. Seems it will be not good for intelisense. The only suggestion here which is left - is to hide members statring with underscore, and start shoing them after the user starts to type underscore. This way it is obvious that the user of a typescript module wanted to display rarely used protected members.",
      "PostedDate": "2013-09-25T20:59:19.107-07:00",
      "Id": 115683
    },
    {
      "Message": "Thanks for the suggestion. There's definitely some improvements to be made in these sorts of scenarios. Assigned to Jonathan.",
      "PostedDate": "2013-09-26T10:24:54.9-07:00",
      "Id": 115735
    },
    {
      "Message": "\nBesides my suggestion:\nThe private in typescript just like protected in C#. Inherited members are visible in subclasses.  The private should be renamed to protected, and there will not be a confusion any more.",
      "PostedDate": "2013-09-28T20:46:55.573-07:00",
      "Id": 115929
    },
    {
      "Message": "You know you can actually write JavaScript event handlers for intellisense and filter out all the underscores yourself?﻿\n\nBetter yet, I'll Google it for you...\n\nMicrosoft even PROVIDED you with an example of this: \\\\<Visual Studio installation path>\\JavaScript\\References\\underscorefilter.js\n\nOr if you're too lazy to go find it yourself, you can actually find the EXAMPLE right here: http://msdn.microsoft.com/en-us/library/hh874692.aspx\n\nJeez...are people to lazy to even use Google these days?!?﻿",
      "PostedDate": "2013-10-08T02:26:58.11-07:00",
      "Id": 117756
    },
    {
      "Message": "to @ndgaulin\nYes, that may can solve the problem for me. But if i wrote a library in typescript, and published it, would the users of that library automatically won't see the underscored members which i meant to be unexposed (protected in C# sence)? Or i should also teach them how to create that javascript handler?",
      "PostedDate": "2013-10-12T08:04:48.157-07:00",
      "Id": 118247
    },
    {
      "Message": "And one more point- I don't think that any third party framework (mine included) should be dependent on some API. It should be dependent only on the language specification.",
      "PostedDate": "2013-10-13T11:27:20.7-07:00",
      "Id": 118287
    }
  ]
}