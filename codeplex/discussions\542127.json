[
  {
    "Id": "1233627",
    "ThreadId": "542127",
    "Html": "In many object oriented languages, classes can be nested and accessed through a qualified name. This helps with keeping class-specific types that make little sense alone (without a class that uses them), as close as possible to that class.\r<br />\n<br />\nEvery function in Javascript is also a &quot;class&quot; constructor, so such classes can be implemented in Javascript too:<br />\n<pre><code>var A = (function () {\n    var A = function () {\n    };\n    A.B = function () {\n    };\n    A.prototype = {\n        C: (function () {\n            function C() {\n            }\n            return C;\n        })()\n    };\n    return A;\n})();\n\n// usage:\nvar b = new A.B;\nalert(&quot;b instanceof A.B: &quot; + (b instanceof A.B));\nvar a = new A;\nvar c = new a.C;\nalert(&quot;c instanceof a.C: &quot; + (c instanceof a.C));</code></pre>\n\nTherefore, nested classes are not only pretty or practical, but also a matter of consistency with existing language features.\r<br />\n<br />\nSame can be said about enums (tables can be trivially included in a class).\r<br />\n<br />\nDeclaration merging is not a solution for this issue but merely a workaround, which can be seen in its resulting Javascript code. It's also not fully functional because it requires nested types to be exported from the module.\r<br />\n<br />\nSo I believe this syntax should be valid in Typescript:<br />\n<pre><code>class A{\n    class B {} // nested class A.B\n    private class C {} // nested class A.C accessible from within class A, otherwise visible from outside\n    enum E {} // nested enum A.E\n}\n\n// and, optionally\nmodule A{\n    class D {} // secret class D visible from class A (but invisible from outside)\n}</code></pre>\n\n",
    "PostedDate": "2014-04-13T07:02:34.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1233767",
    "ThreadId": "542127",
    "Html": "There was an issue tracking this: <a href=\"https://typescript.codeplex.com/workitem/132\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/132</a>\r<br />\n<br />\nPerhaps it needs to be reopened and revisited.  I agree that there's no good reason I can think of not to do this properly.<br />\n",
    "PostedDate": "2014-04-13T23:43:22.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]