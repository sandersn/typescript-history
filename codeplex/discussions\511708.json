[
  {
    "Id": "1181418",
    "ThreadId": "511708",
    "Html": "I've been looking at the __extends shim that tsc inserts for derived classes and I'd like to ask about it's current implementation:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> __extends = <span style=\"color:Blue;\">this</span>.__extends || <span style=\"color:Blue;\">function</span> (d, b) {\n    <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">var</span> p <span style=\"color:Blue;\">in</span> b) <span style=\"color:Blue;\">if</span> (b.hasOwnProperty(p)) d[p] = b[p];\n    <span style=\"color:Blue;\">function</span> __() { <span style=\"color:Blue;\">this</span>.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = <span style=\"color:Blue;\">new</span> __();\n};\r\n</pre></div><h1>Static properties in derived classes</h1>\nAs far as I understand it the following piece:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">var</span> p <span style=\"color:Blue;\">in</span> b) <span style=\"color:Blue;\">if</span> (b.hasOwnProperty(p)) d[p] = b[p];\r\n</pre></div>copies static properties from base class to derived class. Why does it do that? Is there a use case when it's better to use Derived.staticField instead of Base.staticField? Or maybe it's mimicking the way Java and C# allow access to static fields through derived classes?<br />\n<h1>this.constructor</h1>\nThis line sets up the constructor in instances of derieved classes:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">function</span> __() { <span style=\"color:Blue;\">this</span>.constructor = d; }\r\n</pre></div>but in TypeScript code it's impossible to access constructor field directly (this.constructor fails to compile) so is this code executed for other JavaScript code that may be running (just in case someone wants to do reflection)? I know that without it the constructor property will point to the Base function but it's not possible to access constructor property in TS.<br />\n<h1>Object.create</h1>\nAlso this code:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">function</span> __() { <span style=\"color:Blue;\">this</span>.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = <span style=\"color:Blue;\">new</span> __();\r\n</pre></div>can be shortened to:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\nd.prototype = Object.create(b.prototype);\nd.prototype.constructor = d; <span style=\"color:Green;\">// if constructor matters</span>\r\n</pre></div>in browsers supporting ES5: <a href=\"http://kangax.github.io/es5-compat-table/#Object.create\" rel=\"nofollow\">http://kangax.github.io/es5-compat-table/#Object.create</a>\r<br />\n<br />\nThank you in advance for the explanation!<br />\n",
    "PostedDate": "2014-01-19T11:01:36.547-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]