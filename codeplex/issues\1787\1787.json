{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Thanks nabog for the explanation.",
    "ClosedDate": "2013-10-14T11:15:08.35-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Hi,\r\n\r\nI want to throw an exception if the given type of the item is not the expected as type T at the instantiation of my object: http://pastebin.com/S0WPyeeC. I want to check the type of item and compare it with the type of T or I want to test the instance of the item.\r\n\r\nBoth should be possible but I cant check it because the compiler shows me this: could not find Symbol T.\r\n\r\nIs there an alternative for this kind of functionality?\r\n\r\n\r\nRegards\r\n\r\nChris",
    "LastUpdatedDate": "2013-10-14T11:15:08.35-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-10-13T05:45:51.263-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Check generic type T",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1787
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "That is not possible, because `T` only exists at compile time. Open up the generated JavaScript and take a look. You can use anything that exists in the JavaScript file to create a workaround.\n\nThe only alternative is to pass the type into the class or to the method.",
      "PostedDate": "2013-10-13T06:29:22-07:00",
      "Id": 118279
    }
  ]
}