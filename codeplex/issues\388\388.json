{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:42.237-07:00",
    "CommentCount": 9,
    "Custom": null,
    "Description": "TypeScript has so much potential, but it's SO HARD to get it working correctly with AMD and existing libraries. \r\n\r\nLet's say I'm using jquery.d.ts from https://github.com/borisyankov/DefinitelyTyped (or any other one, really). Then let's say I have a file called main.ts. The way I would expect it to work if I put jquery.d.ts into \"./somefolder\" is:\r\n\r\nimport $ = require(\"somefolder/jquery\")\r\n\r\nThe problem is currently that the only way to do this is to add this to the ambient declarations file\r\n\r\ndeclare module \"somefolder/jquery\" {}\r\n\r\nYou string you have to put in there has to exactly match the folder structure. That's lame because everyone will want to put them in different files. \r\n\r\nI'm just hoping you guys have a way to make AMD with existing modules easier, because right now it's super hard. \r\n\r\n(EDIT) Proposal --\r\n\r\n A really easy way to solve this is to make it possible to declare a module as an instance of interface. Something like this:\r\n\r\n///<reference path=\"../components/DefinitelyTyped/Definitions/jquery-1.8.d.ts\"/>\r\n\r\n// any of these would make some kind of sense\r\ndeclare module \"lib/jquery\" JQueryStatic\r\ndeclare module \"lib/jquery\": JQueryStatic\r\ndeclare module \"lib/jquery\" extends JQueryStatic {}\r\n\r\nThen I could just use the global jquery.d.ts and make my own jquery.ts file anywhere I wanted, then set the module name to match. ",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-11-07T20:17:41.413-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "simpler AMD modules for existing libs ",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 18,
    "Id": 388
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I've thought more about this. A really easy way to solve this is to make it possible to declare a module as an instance of interface. Something like this:\n\n///<reference path=\"../components/DefinitelyTyped/Definitions/jquery-1.8.d.ts\"/>\n\n// any of these would make some kind of sense\ndeclare module \"lib/jquery\" JQueryStatic\ndeclare module \"lib/jquery\": JQueryStatic\ndeclare module \"lib/jquery\" extends JQueryStatic {}\n\nThen I could just use the global jquery.d.ts and make my own jquery.ts file anywhere I wanted, then set the module name to match. \n",
      "PostedDate": "2012-11-07T22:51:09.623-08:00",
      "Id": 81945
    },
    {
      "Message": "I agree with sean. If you can declare a module as a type then it will solve any AMD issues with libs like jquery, knockout etc.",
      "PostedDate": "2012-11-07T23:01:06.353-08:00",
      "Id": 81946
    },
    {
      "Message": "Btw... for the interest of others... There is a workaround you can do for this. In your def file you can do:\n\n///<reference path=\"../components/DefinitelyTyped/Definitions/jquery-1.8.d.ts\"/>\ndeclare module \"jquery\" {\n    // Take a single random property (otherwise the module is ignored)\n    () : JQuery;\n}\n\nThen in your dependant file\n\n///<reference path=\"../defs/jquery.d.ts\"/>\nimport jquery = require(\"jquery\");\nvar $ = <JQueryStatic>jquery;\n\n'jquery' will be imported using define and $ will be correctly typed. It is nearly there but just needs the final push!",
      "PostedDate": "2012-11-07T23:15:27.847-08:00",
      "Id": 81947
    },
    {
      "Message": "Why not change how imports works? Imagine this:\n\nMain.ts looking like:\n/// <reference path=\"../DefinitelyTyped/knockback/knockback-0.16.d.ts\" />\nimport Knockback = module(\"knockback\") as Knockback;\n\nwhen knockback-0.16.d.ts looks like:\ndeclare module Knockback {\n    export interface EventWatcherOptions {\n\t//clipped for purposes of example\n}\n\nI would also want it to allow any string to be passed into the module() function when you are casting it as a type, as it will allow you to either use your server paths:\nimport Knockback = module(\"../libs/knockback\") as Knockback;\n\nOr use a shim name that you might have declared using requirejs.config[2]:\nimport Knockback = module(\"knockback\") as Knockback;\n\nOr potentially use the require.js text file plugin [1]\nimport myStuff = module(\"text!some/path\") as string;\n\n[1]http://requirejs.org/docs/1.0/docs/api.html#text\n[2]http://requirejs.org/docs/api.html#config-shim\n\njust my $0.02.....\n",
      "PostedDate": "2012-12-14T16:58:25.187-08:00",
      "Id": 84198
    },
    {
      "Message": "I would definitely vote for microants solution. Requirejs, Dojo, Boilerplatejs and others use amd plugins (\"text!some/path\") and it is a pity that we cannot use them...",
      "PostedDate": "2013-01-06T23:52:49.44-08:00",
      "Id": 85479
    },
    {
      "Message": "I am having similar issues with TypeScript and AMD. 1+",
      "PostedDate": "2013-02-14T13:02:23.27-08:00",
      "Id": 90353
    },
    {
      "Message": "I am having similar issues with TypeScript and AMD. 1+",
      "PostedDate": "2013-02-14T13:02:55.773-08:00",
      "Id": 90354
    },
    {
      "Message": "Using \"export =\" you can create modules and .d.ts files that allow you to import things other than modules.  With that, I believe this issue currently has a way forward.",
      "PostedDate": "2013-08-02T09:11:45.77-07:00",
      "Id": 108361
    },
    {
      "Message": "What version of typescript supports \"export = \"?\n\n",
      "PostedDate": "2013-08-02T12:27:52.477-07:00",
      "Id": 108403
    }
  ]
}