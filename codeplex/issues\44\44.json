{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:56.033-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "I'm not sure how the IE engine works, however, the V8 engine identifies \"hidden classes\" based on the order properties are set. Identifying when objects map to the same hidden class has significant performance gains,  therefore, when a property is identified in the contract for a class it would be beneficial if it were initialised in the constructor.\r\n\r\ne.g. \r\n\r\nclass Greeter {\r\n\tmessage: string;\t\r\n}   \r\n\r\nShould create a constructor that initialises the message property. The next question of course, is what should it be initialised to if no explicit value is assigned, undefined, null, ''? In this case I'm guessing undefined as undefined seems to be accepted as a string in typescript (which is a questionably decision, as typeof undefined does not return string).\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-02T13:25:10.097-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Property generation to take advantage of V8 hidden classes",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 5,
    "Id": 44
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion.\n\nYou can force the compiler to initialize it, like you say, but passing it a default value during declaration:\n\nclass Greeter {\n\tmessage: string = \"\";\n}\n\nWhich generates:\n\nvar Greeter = (function () {\n    function Greeter() {\n        this.message = \"\";\n    }\n    return Greeter;\n})();\n\nSo the constructor does now see the .message member.",
      "PostedDate": "2012-10-03T19:22:40.933-07:00",
      "Id": 78499
    },
    {
      "Message": "Yes, I had noticed you can force the initialization...\n\nI'm also still not convinced that allowing \"undefined\" for something you have marked as string (without the ?) is correct. Especially as this means you will have to guard against null AND undefined in your code, (as if (arg) would return false for ''). Although I guess this is a separate issue...\n\n",
      "PostedDate": "2012-10-04T03:59:07.937-07:00",
      "Id": 78531
    },
    {
      "Message": "One thing to add :), one of the great advantages I see from something like TypeScript, is that it can help to generate code that runs faster in each respective VM without the developer having to know the inner workings of those VMs. V8 is great, but IMO, its not an ideal situation when developers have to know so much about the inner workings of the VM to get \"basic\" performance.\n\nOf course, if all the vendors could all just agree on a cross browser, byte code standard that would allow us to run any language that would be great!! In the mean time I suppose JavaScript is the new bytecode....:(",
      "PostedDate": "2012-10-04T04:05:11.063-07:00",
      "Id": 78532
    },
    {
      "Message": "See related discussion:\nhttps://typescript.codeplex.com/discussions/431328\n\nInitializing properties in the constructor should definitely be the default for performance reasons. ",
      "PostedDate": "2013-02-27T13:42:22.89-08:00",
      "Id": 91723
    }
  ]
}