{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "If you create an external module by using the `export` keyword at top-level, you need to `import` that module rather than `reference` it.",
    "ClosedDate": "2013-06-12T10:32:07.587-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Sorry about the bad title, I'm struggling to find a succinct way of describing the issue.\r\n\r\nI have created two typescript files, for this example One.ts and Two.ts.\r\n\r\nIn One.ts there is an interface and a module.\r\n\r\n```\r\ninterface IFoo { }\r\n\r\nmodule ModuleOne{ }\r\n```\r\n\r\nIn Two.ts there is a reference to One.ts and a module containing a class which impliments the interface from One.ts.\r\n\r\n```\r\n/// <reference path=\"One.ts\" />\r\n\r\nmodule ModuleTwo {\r\n    export class Foo implements IFoo { }\r\n}\r\n```\r\n\r\nThis works fine.\r\n\r\nHowever, if I prefix the module in One.ts with \"export\" Two.ts can no longer find the interface.\r\n\r\n```\r\ninterface IFoo { }\r\n\r\nexport module ModuleOne{ }\r\n```\r\n\r\nOne.ts builds without error, but Two.ts generates an error with the message:\r\n\r\n> /Two.ts(4,32): The name 'IFoo' does not exist in the current scope",
    "LastUpdatedDate": "2013-06-12T10:32:07.587-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-06-12T06:44:28.34-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Adding export to a global level module prevents that file being referenced in another file",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1144
  },
  "FileAttachments": [],
  "Comments": []
}