[
  {
    "Id": "934178",
    "ThreadId": "401235",
    "Html": "\r\n<p>In the video I've seen strange code example and I'd like to know how to use the interface below, I mean how to implement the class or make the constructor to initialize the member f.</p>\r\n<p>&nbsp;</p>\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">interface</span> X{\r\n    f:{ \r\n        (s:string):string;\r\n        (s:number):string;\r\n        data:any;\r\n    };\r\n}\r\n<span style=\"color:blue\">class</span> xxx\r\n{\r\n<span style=\"color:green\">// how to initialize this structure ?</span>\r\n    f:{   \r\n        (s:string):string;\r\n        (s:number):string;\r\n        data:any;\r\n    };\r\n}\r\n\r\n<span style=\"color:blue\">var</span> x = <span style=\"color:blue\">new</span> xxx();\r\n<span style=\"color:blue\">function</span> a(x:X):string{\r\n    <span style=\"color:blue\">return</span> x.f(<span style=\"color:#a31515\">&quot;1&quot;</span>);    \r\n}\r\na(x);\r\n</pre>\n</div>\n&nbsp;</pre>\r\n",
    "PostedDate": "2012-10-30T05:54:40.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "934233",
    "ThreadId": "401235",
    "Html": "<p>The only solution I've found is to use type cast. It works, but looks quite ugly. To me this is an error in the compiler or there should be different way to do this.</p>\r\n<pre><code><div style=\"color: black; background-color: white;\"><pre><span style=\"color: blue;\">interface</span> X{\r\n    f:{ \r\n        (s:string):string; \r\n        (s:number):string; \r\n        data:any; \r\n    };\r\n}\r\n\r\n<span style=\"color: blue;\">class</span> xxx\r\n{\r\n    constructor()\r\n    {\r\n        <span style=\"color: blue;\">this</span>.f = &lt;{ (s:string):string; (s:number):string; data:any; }&gt; <span style=\"color: blue;\">function</span> (s:any):string {<span style=\"color: blue;\">return</span> s.toString();};\r\n        <span style=\"color: blue;\">this</span>.f.data = <span style=\"color: #a31515;\">\"data\"</span> \r\n    };\r\n\r\n    f:{ \r\n        (s:string):string;\r\n        (s:number):string;\r\n        data:any;\r\n    };\r\n}\r\n\r\n\r\n<span style=\"color: blue;\">var</span> x = <span style=\"color: blue;\">new</span> xxx();\r\n\r\n<span style=\"color: blue;\">function</span> a(x:X):string{\r\n    <span style=\"color: blue;\">return</span>  x.f(<span style=\"color: #a31515;\">\"1\"</span>) + x.f(1) + x.f.data;     \r\n}\r\n\r\nalert(a(x));\r\n\r\n</pre>\r\n</div>\r\n</code></pre>",
    "PostedDate": "2012-10-30T07:20:41.74-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "934395",
    "ThreadId": "401235",
    "Html": "<p>Indeed, that's one way to do it, and it's not terribly attractive.&nbsp; Interfaces as a whole cover a lot of ground, as it's how we describe typing most of JavaScript.&nbsp; There are some kinds of typing that you can describe with interfaces that are difficult to create easily in TypeScript, like the one you show.&nbsp; This falls into an expand-style, where you start with one object and extend it with a few more features.&nbsp; In this case, we just use the &lt;&gt; operator like you have.&nbsp; With luck some of these&nbsp;implementations will become easier in the future.</p>",
    "PostedDate": "2012-10-30T13:34:52.11-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]