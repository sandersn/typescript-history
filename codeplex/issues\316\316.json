{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Refer to comment",
    "ClosedDate": "2012-10-23T12:03:37.077-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "I reopened the issue with more explanations and this time with proposed solution.\r\nand renamed the case, because the previous title was incorrect\r\n\r\ncurrently in a property definition -\r\nGet and Set clauses are written separately (not scoped to a property!), and compiler does not check that if we have a clause for a property getter and then write a clause for a property setter that their names must be identical. If we mistype property name for setter clause the compiler generates new only writable property.\r\n(and we will not know about it until trying to use that property in code)\r\n\r\nExample of current property definition with the buggy name:\r\n\r\nget testProp(){\r\nreturn this.greeting;\r\n}\r\nset testPropBug(v){\r\nthis.greeting = v;\r\n}\r\n\r\nFor this property definition the compiler will generate two properties, although it was a mistyping in the setter property name.\r\n\r\nPLUS: property SYNTAX definition is not the same as in plain javascript.\r\nIn javascript property setters and getters are scoped to one property name as in example:\r\n\r\nObject.defineProperty(o, \"propertyName\", {get : function(){ return bValue; },\r\n                               set : function(newValue){ bValue = newValue; },\r\n                               enumerable : true,\r\n                               configurable : true});\r\n\r\nIf you mistype property name here, then getter and setter will be together in one property.\r\nAnd with intellisense you (trying to use that property) will find the error immediately\r\n\r\nSolution:\r\nTo be compliant with the PLAIN javascript property syntax should be:\r\n\r\npropertyName { \r\n  get : function(){ return bValue; },\r\n  set : function(newValue){ bValue = newValue; }\r\n}\r\n",
    "LastUpdatedDate": "2012-10-23T12:03:37.077-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-22T20:12:46.083-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Property definition syntax is bugs prone",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 316
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Again, this is the ECMAScript 5 syntax for defining getters and setters.\n\nPlease refer to the spec (http://www.ecma-international.org/publications/standards/Ecma-262.htm), page 65. There you can see that the 'get' and 'set' methods are defined as:\n\nget PropertyName ( ) { FunctionBody }\nset PropertyName ( PropertySetParameterList ) { FunctionBody }\n\nTypeScript supports ES5 syntax for properties.",
      "PostedDate": "2012-10-23T12:03:25.81-07:00",
      "Id": 80780
    }
  ]
}