{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.613-07:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "A few times now I've wanted to have a STATIC method in a subclass have a completely different signature than a parent class.  I'm sure in JS it's quite valid to want to do this for static methods (if anything, to mimic how most other languages work).  I think allowing a \"new\" modifier on a method (like in C#), would allow for this (and if not \"new\", then something else, but it should be allowed to happen if desired).\r\n\r\nExample:\r\n```\r\nclass A {\r\n\ta: number = 1;\r\n    static create(a: number = 1): A { }\r\n}\r\nclass B extends A {\r\n\tb: string = '';\r\n    new static create(b: string = ''): B { }\r\n}\r\n```\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-05-27T13:07:56.323-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Allow using \"new\" to replace method signature.",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2525
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This is related to an issue I brought up, and it's really about ES6's poor decision to inherit static members in the first place, combined with TypeScript's attempt to remain compatible with that.\n\nThe discussion here might be illuminating:\n\nhttps://typescript.codeplex.com/workitem/2377\n\nThe problem is that class A might have a static method, let's call it ```static_method()``` which calls ```this.create()```, and then ```B.static_method()``` would call ```this.create === B.create``` which would now have the wrong signature because it was overridden.\n\nThat's the rationale anyway.",
      "PostedDate": "2014-05-27T16:41:04.103-07:00",
      "Id": 148076
    },
    {
      "Message": "It makes creating a object pool system (for games) annoying when you want to use a system like `{Module}.{Type}.create(...)`, because `create()` is not able to follow the same rules as constructors (to allow different signatures).  Anyhow, since in JS I can override methods anyway I choose, TS should allow it also on request.  It comes down to the design - I would never do what you mentioned in my design, so it doesn't matter. ;) The point of \"new\" is to state you want something new! :) Thus, the developer takes on the responsibility to design it properly (as with anything, which is obvious).",
      "PostedDate": "2014-05-28T11:15:20.857-07:00",
      "Id": 148153
    },
    {
      "Message": "Marked as a suggestion others can upvote. Certainly one of the many class based modifiers to consider in the future.",
      "PostedDate": "2014-05-30T13:06:16.603-07:00",
      "Id": 148424
    },
    {
      "Message": "BTW: I was also thinking it could also be a way to replace global vars (since some people have been wanting that as well).  Case in point: https://typescript.codeplex.com/workitem/2531",
      "PostedDate": "2014-05-30T13:52:54.52-07:00",
      "Id": 148437
    }
  ]
}