{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This is available as \"export =\" in TypeScript 0.9.",
    "ClosedDate": "2013-06-17T08:42:47.597-07:00",
    "CommentCount": 31,
    "Custom": null,
    "Description": "As discussed here (http://stackoverflow.com/questions/12696236/module-exports-in-typescript), it would be a very handy feature if exports like the following:\r\n\r\n```TypeScript\r\nexport class Greeter {}\r\n```\r\n\r\ncompiles to:\r\n```JavaScript\r\nmodule.exports = Greeter; or exports = Greeter;\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 0.9.0",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-02T14:12:16.2-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Allow module.exports",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 54,
    "Id": 47
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion.",
      "PostedDate": "2012-10-03T20:07:29.873-07:00",
      "Id": 78508
    },
    {
      "Message": "I'm using this pattern in all my codebase, and I think I'm not the only one. I'd really like to see this possible.\nMaybe allow syntax like\n\nexports = class Greeter {}\n\nonce class expressions will be supported.",
      "PostedDate": "2012-10-04T06:24:38.127-07:00",
      "Id": 78542
    },
    {
      "Message": "Yes, that was my attempted too. Most of the libraries I am using are working like this and not the way as it is now.",
      "PostedDate": "2012-10-04T06:48:41.607-07:00",
      "Id": 78543
    },
    {
      "Message": "Just ran into this yesterday.  All of my files use this pattern and currently it breaks in TypeScript / not backwards compatible.  ",
      "PostedDate": "2012-10-05T11:28:04.453-07:00",
      "Id": 78691
    },
    {
      "Message": "I think module could be declared in a .d.ts file, with an exports property... Haven't tried it, but worth a shot",
      "PostedDate": "2012-10-06T16:02:18.81-07:00",
      "Id": 78862
    },
    {
      "Message": "I should have noted that this is absolutely possible because module{} syntax is contextual with a look ahead for the curlies",
      "PostedDate": "2012-10-06T16:06:38.327-07:00",
      "Id": 78864
    },
    {
      "Message": "See also: http://typescript.codeplex.com/workitem/26",
      "PostedDate": "2012-10-06T16:19:58.79-07:00",
      "Id": 78867
    },
    {
      "Message": "I agree that this is an important feature. I have existing JavaScript code that exposes exports that are meant to be used like a base class, i.e. you call {exportname}.apply(this, ...). Currently I can't use TypeScript's class concept to interop with this code but classes would be perfect for this.",
      "PostedDate": "2012-10-18T10:44:23.447-07:00",
      "Id": 80350
    },
    {
      "Message": "@dcstraw To take full advantage of TypeScript, you should probably re-factor those to be actual modules with class definitions that are inherited with \"extends\" and use \"super()\" instead of \"the old fashioned way\"",
      "PostedDate": "2012-10-18T11:38:30.647-07:00",
      "Id": 80364
    },
    {
      "Message": "@rwaldron agreed but in this case I don't control the code I'm calling, and it's probably not going to be converted to TypeScript any time soon. I'm treating that code much like any other JavaScript library, and I'm providing .d.ts files to add typing information.",
      "PostedDate": "2012-10-18T13:04:53.837-07:00",
      "Id": 80378
    },
    {
      "Message": "This is seriously blocking backwards compatibility for my team (deployd.com). We'd love to write a TypeScript definition file for extensions, but we use module.exports all over the code base and it's impossible to write the subclasses our API depends on with wrapping them in a JavaScript file that uses the \"exports\" pattern instead.",
      "PostedDate": "2012-11-09T11:59:38.017-08:00",
      "Id": 82131
    },
    {
      "Message": "Perhaps this should be elevated a bit higher than 'impact: low' because this is a WIDELY used design pattern that completely breaks old code.  ",
      "PostedDate": "2012-11-11T17:21:29.173-08:00",
      "Id": 82210
    },
    {
      "Message": "I imagine this could happen, but only as an optional tsc compile flag. Anything else is breaking the line between language and library.",
      "PostedDate": "2012-11-11T20:19:29.63-08:00",
      "Id": 82216
    },
    {
      "Message": "See also http://typescript.codeplex.com/discussions/404795 on the discussion page.",
      "PostedDate": "2012-11-28T17:05:17.12-08:00",
      "Id": 83210
    },
    {
      "Message": "This is a serious blocking issue. It is an  extremely common practice to export a constructor function as a module's export. The original ES6 module spec didn't allow this, but they have made some improvements and now it does...along with a few other changes. TypeScript should be synced up with the improved module spec as soon as possible to enable compatibility with ES6 and enable this key scenario.",
      "PostedDate": "2013-01-02T19:43:12.747-08:00",
      "Id": 85274
    },
    {
      "Message": "@EisenbergEffect - definitely understood that this limits some significant module usage patterns.  The ES6 syntax and semantics for this feature are still in some flux, and we are working with the TC39 group on getting this part of the ES6 proposal stabilized as soon as possible.  As soon as this looks stable, we fully expect to add \"export =\" style syntax as in ES6.  ",
      "PostedDate": "2013-01-03T15:48:49.167-08:00",
      "Id": 85343
    },
    {
      "Message": "Thanks for the update Luke!",
      "PostedDate": "2013-01-21T12:25:00.713-08:00",
      "Id": 86793
    },
    {
      "Message": "* Bump :P\nThis is essential to develop nicely structured code in node\nChange things around so that only one export is allowed at the global level. \nThis can be either a class or module\nExporting a module would give the same effect we have now\n```\nexport module \"server\" {\n    export class ResponseHandler ...\n    export class Server ...\n}\n```\nAnd to make things even nicer it should accept referencing of files with the same exported module\nThen everything would merge, similar to the internal module design pattern, except one could actually import things in referenced files.\nfor example Server.ts:\n```\n/// <reference path=\"./Net.Server.ts\" />\n/// <reference path=\"./Net.ResponseHandler.ts\" />\nexport module \"Net\" {\n    export var CONNECTION_TIMEOUT = 20000;\n}\n```\nNet.Server.ts\n```\n/// <reference path=\"./node.d.ts\" />\n/// <reference path=\"./Net.ResponseHandler.ts\" />\nimport http = module('http');\n\nexport module \"Net\" {\n    export class Server ...\n}\n```\n\n... Oh if only :)",
      "PostedDate": "2013-03-01T08:50:45.403-08:00",
      "Id": 91967
    },
    {
      "Message": "@TimSpeed - Indeed, we are working on a syntax for enabling this in the current 0.9 branch.  The specification draft in the \"doc\" folder there now includes an \"export =\" declaration (section 9.2.1) that would provide basic support for modules representing single value exports.  More work in spec drafts and implementation on the way soon.",
      "PostedDate": "2013-03-09T18:57:15.57-08:00",
      "Id": 92824
    },
    {
      "Message": "Definite +1 on implementing this. Generally it is best practice for a module to do one thing and one thing only, which in many cases translates to exporting only one item. If only one is exported, why not have that directly be the exports object? Then the whole file can be named the exports module, example:\n\nTelescope.ts\n```\nexport class Telescope {}\n```\n\nObservatoroy.ts\n```\nimport Telescope = module('Telescope');\nvar telescope = new Telescope.Telescope();\n```\n\nWouldn't something like this look nicer?\n\nTelescope.ts\n```\nexports = class Telescope {}\n```\n\nObservatoroy.ts\n```\nimport Telescope = module('Telescope');\nvar telescope = new Telescope();\n```",
      "PostedDate": "2013-03-25T13:07:08.433-07:00",
      "Id": 94334
    },
    {
      "Message": "+1, this is really much needed.",
      "PostedDate": "2013-04-12T18:06:40.333-07:00",
      "Id": 96881
    },
    {
      "Message": "+1, ran into this last night when trying to convert a project over to using TypeScript",
      "PostedDate": "2013-04-16T21:11:53.53-07:00",
      "Id": 97197
    },
    {
      "Message": "We're looking into this for 0.9.\n\nThe gist for the feature is that you will be able to \"export = symbolName\" and that would export the namespace/type/value information for that symbol name.\n\n```TypeScript\n//fileA.ts\nclass Telescope { ... }\nexport = Telescope;\n\n//fileB.ts\nimport Tele = require(\"fileA.ts\");\nvar tele = new Tele();\n```",
      "PostedDate": "2013-04-26T14:52:39.417-07:00",
      "Id": 98653
    },
    {
      "Message": "@jonturner - Is this in the 0.9 preview? I'm trying to use it and getting \"tsc.js(689, 13) Microsoft JScript runtime error: please implement in derived class\" from the compiler. If it's not there, that's OK, but I'd like to add another vote for making sure it makes it in to 0.9 :)",
      "PostedDate": "2013-05-16T11:37:35.22-07:00",
      "Id": 100372
    },
    {
      "Message": "Another vote from me.  This would be a huge help.\n\nDoing this would allow existing require.js-style class modules to be refactored into TypeScript without having to simultaneously refactor every single place where that module is used.  This allows the upgrade path to TypeScript be an on-demand one, rather than an all-at-once ordeal.  \n\nThe simplicity from not having to write module.class everywhere is also a big plus.  \n\nOn this note, is there an interim workaround that allows you to create a reference to module.class and use that down the line?  \nUsing the telescope example from above: \n```\nimport TelescopeModule = module('Telescope');\nvar Telescope = TelescopeModule.Telescope;\nvar tele = new Telescope();  // compiles and validates, but no code hinting\nvar tele2: Telescope = new Telescope(); // \"The name 'Telescope' does not exist in the current scope\"\n```",
      "PostedDate": "2013-05-23T10:22:59.457-07:00",
      "Id": 101010
    },
    {
      "Message": "Please put this in 0.9.",
      "PostedDate": "2013-05-29T10:07:07.583-07:00",
      "Id": 101563
    },
    {
      "Message": "@aaronshaf - if you're able, you can download the 0.9 compiler that's currently in-progress and try out the \"export = \" support.  The associated spec, I believe, also talks about it, but in general you can put an \"export = <symbol name>\" in a module in place of exporting separate symbols and when you later import, the import will pull in all the value/type/namespace information of the associated symbol.\n\nIt's like module.export =, but it works with all the types and namespace goodness of TypeScript.",
      "PostedDate": "2013-05-29T11:27:59.057-07:00",
      "Id": 101579
    },
    {
      "Message": "jonturner, thanks much!",
      "PostedDate": "2013-05-29T11:53:16.217-07:00",
      "Id": 101582
    },
    {
      "Message": "jonturner, this is huge -- you should make a note of this in a blog post.",
      "PostedDate": "2013-05-29T11:55:20.08-07:00",
      "Id": 101583
    },
    {
      "Message": "export = symbol works as advertised but I found minor issue if the exported symbol is generic. It seems the typescript compiler is treating is as private.\n\nSteps to reproduce, two files:\n\nbar.js:\n    class Bar<T> {\n        public z: T;\n    }\n\n    export = Bar;\n\nfoo.js:\n    import Bar = module(\"./bar\");\n\n    export class Foo {\n        public m: Bar<string>;\n    }\n\nCompiling with tsc --module amd bar.ts foo.ts generates the following error:\nfoo.ts(4,5): error TS2025: Public property 'm' of exported class has or is using private type 'Bar<string>'.\n\nBar should be treated as public because it is exported. I'm using beta version of tsc: Version 0.9.0.0.",
      "PostedDate": "2013-06-15T04:51:47.223-07:00",
      "Id": 103130
    },
    {
      "Message": "@jonturner, can you provide a simple example of how one would use this in a node.js app?",
      "PostedDate": "2013-06-19T08:41:52.203-07:00",
      "Id": 103442
    }
  ]
}