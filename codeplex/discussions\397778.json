[
  {
    "Id": "920846",
    "ThreadId": "397778",
    "Html": "\r\n<p>i know that currently only one of the functions of a given name can have a body which is great for specifying the different type signatures.</p>\r\n<p>it would be pretty amazing if TypeScript would allow multiple overridden bodies and behind the scenes output a single dispatcher based on the types of its arguments.</p>\r\n<p>&nbsp;</p>\r\n<p>something like:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Bar\r\n{\r\n\tinc(a:number)\r\n\t{\r\n\t\t<span style=\"color:blue\">return</span> a &#43; 1;\r\n\t}\r\n\tinc(a:string)\r\n\t{\r\n\t\t<span style=\"color:blue\">return</span> parseInt(a) &#43; 1;\r\n\t}\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>goes to</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> Bar = (<span style=\"color:blue\">function</span> () {\r\n    <span style=\"color:blue\">function</span> Bar() { }\r\n    Bar.prototype.__inc_number = <span style=\"color:blue\">function</span> (a) {\r\n        <span style=\"color:blue\">return</span> a &#43; 1;\r\n    };\r\n    Bar.prototype.__inc_string = <span style=\"color:blue\">function</span> (a) {\r\n        <span style=\"color:blue\">return</span> parseInt(a) &#43; 1;\r\n    };\r\n    Bar.prototype.inc = <span style=\"color:blue\">function</span> (a) {\r\n\t\t<span style=\"color:blue\">if</span> (<span style=\"color:blue\">typeof</span> a === <span style=\"color:#a31515\">&quot;number&quot;</span>)\r\n\t\t\t<span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.__inc_number (a);\r\n\t\t<span style=\"color:blue\">if</span> (<span style=\"color:blue\">typeof</span> a === <span style=\"color:#a31515\">&quot;string&quot;</span>)\r\n\t\t\t<span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.__inc_string (a);\r\n\t\t<span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> Error ();\r\n\t};\r\n    <span style=\"color:blue\">return</span> Bar;\r\n})();\r\n\r\n\r\n</pre>\r\n</div>\r\n<p>i guess distinguishing between TypeScript types at runtime then becomes an issue...</p>\r\n",
    "PostedDate": "2012-10-02T13:26:59.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920897",
    "ThreadId": "397778",
    "Html": "<p>You mean overloaded, not overridden. As you point out yourself, this wouldn't work with the type system anyway, as interfaces can be a purely compile-time concept. This greatly limits the utility of something like this.</p>",
    "PostedDate": "2012-10-02T14:48:49.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921006",
    "ThreadId": "397778",
    "Html": "\r\n<p>yeah, but i think that the problem of being able to distinguish types at runtime needs to be addressed anyway, if for nothing more than the ability to hand-write polymorphic methods using those types.</p>\r\n<pre>class Bar {\n\tinc(a:Foo);\n\tinc(a:Goo);\n\tinc(a:any) {\n\t\t// what goes here now?\n\t}\n}</pre>\r\n<p>once that's solved...</p>\r\n",
    "PostedDate": "2012-10-02T20:44:21.163-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]