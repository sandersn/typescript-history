[
  {
    "Id": "990701",
    "ThreadId": "430537",
    "Html": "\r\n<p>Love the integrated JSDoc intellisense support for Visual Studio in 8.2! As you know there is no official spec for JSDoc, so I was wondering which flavor of JSDoc the TypeScript implementation supports / is based on?</p>\r\n<ul>\r\n<li><a href=\"https://developers.google.com/closure/compiler/docs/js-for-compiler\">Closure Compilier</a>\r\n</li><li><a href=\"http://usejsdoc.org\">Use JSDoc</a> </li><li><a href=\"http://code.google.com/p/jsdoc-toolkit/wiki/TagReference\">jsdoc-toolkit</a>\r\n</li><li><a href=\"https://wiki.appcelerator.org/display/tis/ScriptDoc&#43;%28SDOC%29&#43;2.0&#43;Specification\">ScriptDoc</a>\r\n</li><li>etc. </li></ul>\r\n<p>For example, are optional parameters defined with square brackets around the name?</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>/**\r\n * @param {type} [name] description\r\n */\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Or with an equal sign in the type like the Closure Compiler?</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">/**\r\n * @param {type=} name description\r\n */</span>\r\n</pre>\r\n</div>\r\nOptional parameters might seem like a bad example since that can be explicitly described in TypeScript, but if you're publishing your code as JavaScript with JSDoc comments baked in, this stuff is important.\r\n<p></p>\r\n",
    "PostedDate": "2013-01-22T22:45:46.073-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "991079",
    "ThreadId": "430537",
    "Html": "\r\n<p>The only JSDoc tags we currently recognize are:</p>\r\n<p>&nbsp; &nbsp; @param name Description</p>\r\n<p>and</p>\r\n<p>&nbsp; &nbsp; @param name {type} Description</p>\r\n<p><span style=\"font-size:10pt\">Note that if you specify {type} here, we'll still show the *actual* type of the parameter.</span></p>\r\n<p><span style=\"font-size:10pt\">We'll be seeing what people need and how people use the feature when deciding which additional things to recognize, if needed.</span></p>\r\n",
    "PostedDate": "2013-01-23T09:17:15.3-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "991366",
    "ThreadId": "430537",
    "Html": "\r\n<p>Thanks for the answer.</p>\r\n<p>Just to to give you some background, I'm rewriting <a href=\"https://extspec.codeplex.com/\">\r\nExt Spec</a> in TypeScript. Partly because it greatly simplifies my build process, partly for the type safety, partly because it's cool ;)</p>\r\n<p>I want the compiled JavaScript to ship with the JSDoc comments intact so the API is richer for anyone using the library in their own IDE (Aptana, VJET, Visual Studio etc.). So in that sense, I would love to see full JSDoc support, including optional @param\r\n tags, @property tags etc.</p>\r\n",
    "PostedDate": "2013-01-23T22:36:47.757-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "991629",
    "ThreadId": "430537",
    "Html": "\r\n<p>For comment preservation, we would (or at least should, if we don't) leave the comment untouched.&nbsp; This would let you pass the comments through to the output.&nbsp;</p>\r\n<p>The JSDoc support for 0.8.2 adds some parsing of the JSDoc to the Visual Studio experience.&nbsp; Not all JSDoc makes sense for TypeScript, since a lot of information is in the TypeSystem and language features, so we likely won't support all of it, only the parts\r\n that make sense for TypeScript users.</p>\r\n<p>That said, like Ryan says, we may add support for other tags that do make sense, based on user feedback.</p>\r\n",
    "PostedDate": "2013-01-24T08:55:42.523-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "991775",
    "ThreadId": "430537",
    "Html": "\r\n<p>Yep, that's the behavior I've noticed. Using the -c flag on the compiler, the JSDoc comments are preserved more-or-less intact in the JavaScript output. (I'd like to see some more granular control over which comments are kept, but that's the subject of a\r\n different request :)</p>\r\n<p>For now, I'm documenting everything the way I want it to be consumed, which includes @property tags and [optional] parameters. I'm getting some immediate benefits from this for my own development with 8.2, but as Ryan said, not everything is supported yet.</p>\r\n<p>I guess what I'm saying is I want it all ;)</p>\r\n<ul>\r\n<li>Richer intellisense for me writing the library in TypeScript. </li><li>Similarly rich intellisense for developers consuming the compiled JavaScript.\r\n</li><li>One version of the truth in terms of API documentation. </li></ul>\r\n",
    "PostedDate": "2013-01-24T13:33:57.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "992287",
    "ThreadId": "430537",
    "Html": "\r\n<p>Even better, the generated JSDocs in the .js files to be enriched with the metadata available in the .ts code. :)</p>\r\n",
    "PostedDate": "2013-01-25T17:08:50.247-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1004134",
    "ThreadId": "430537",
    "Html": "Boris, create an issue. I'd vote it up.<br />\n",
    "PostedDate": "2013-02-20T10:04:12.617-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]