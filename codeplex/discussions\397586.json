[
  {
    "Id": "920170",
    "ThreadId": "397586",
    "Html": "\r\n<p>Here's an important scenario for me as a front end application framework author: given an object instance, I need to be able to determine it's fully qualified type. Now, I know there are no types in javascript. But, what I want to know is the module path.\r\n Is that possible?</p>\r\n",
    "PostedDate": "2012-10-01T12:45:54.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920245",
    "ThreadId": "397586",
    "Html": "<p>Thanks for the question! I believe that it is no more possible in TypeScript than it is in JavaScript. Just like in JS you may have to tag the object with the module it came from&nbsp;yourself in order&nbsp;to identify it later, perhaps by adding a special property&nbsp;during construction.</p>",
    "PostedDate": "2012-10-01T15:06:47.48-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920274",
    "ThreadId": "397586",
    "Html": "<p>Great. Since you answered my other question about module loaders...that's take care of (my custom version of require.js tags modules with that info). Great work on this project. I'm really, really excited about it.</p>",
    "PostedDate": "2012-10-01T16:13:55.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920363",
    "ThreadId": "397586",
    "Html": "<p>that RTTI also would include the names of interfaces, the types, the parent classes etc, the type values of parameters etc. this info is all known at transcompile time, but understandability not in the resultant javascript. However it would be great as an option to be able to have that RTTI information in some documented json structure tagged to the object.</p>",
    "PostedDate": "2012-10-01T21:55:42.59-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920855",
    "ThreadId": "397586",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>EisenbergEffect wrote:</strong><br />\r\n<p>Here's an important scenario for me as a front end application framework author: given an object instance, I need to be able to determine it's fully qualified type. Now, I know there are no types in javascript. But, what I want to know is the module path. Is that possible?</p>\r\n</blockquote>\r\n<p><br />We had a similar need and we created a seperate type table for tracking this type of stuff.&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>module Foo\r\n   <span style=\"color: blue;\">class</span> Bar {\r\n   }\r\n   Types.registerType(<span style=\"color: #a31515;\">'Foo.Bar'</span>, Bar);\r\n}\r\n\r\n\r\n</pre>\r\n</div>\r\n</div>\r\n<div style=\"color: black; background-color: white;\">&nbsp;</div>\r\n<div style=\"color: black; background-color: white;\">Types is another class with a static registerType() method that takes a string and a Class (essentially a function) as input.&nbsp; Once registered in a simple map you can now lookup classes by either key (lookup against the map using \"if (key in map)\", or instance using&nbsp;\"for (key in map) if (inst instanceof map[key]) return map[key];\"</div>\r\n<div style=\"color: black; background-color: white;\">&nbsp;&nbsp;</div>",
    "PostedDate": "2012-10-02T13:43:30.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920860",
    "ThreadId": "397586",
    "Html": "<p>If there is going to be support for RTTI, I would want to see this as opt-in at the compilation stage. I think this probably goes without saying though, but it has to be said.</p>",
    "PostedDate": "2012-10-02T13:51:41.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920867",
    "ThreadId": "397586",
    "Html": "<p>i agree with oisin, plus i may want to make that decision on a class by class , module by module or .ts by .ts file basic. just tagging a class name doesn't seem to be enough to me, i'd want the full structure that is getting lost during transcompilation. I'm very glad that typescript creates nice pithy&nbsp;JavaScript&nbsp;rather than automatically attaching some&nbsp;detailed&nbsp;structure &nbsp;of everything to every object. But it would be useful.&nbsp;JavaScript&nbsp;by its nature kind of has built in&nbsp;reflection, however when adding this extra semantic layer, we need&nbsp;reflection&nbsp;against that layer. and attaching this in a&nbsp;consistent&nbsp;layer (with some helper functions to be able to interact with this metadata) would be invaluable.&nbsp;</p>",
    "PostedDate": "2012-10-02T14:02:31.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923899",
    "ThreadId": "397586",
    "Html": "<p>Half of the party is discussing similar topics at: <a href=\"http://typescript.codeplex.com/discussions/397906\">http://typescript.codeplex.com/discussions/397906</a></p>",
    "PostedDate": "2012-10-09T02:19:38.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923938",
    "ThreadId": "397586",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>EisenbergEffect wrote:</strong><br />\r\n<p>... Great work on this project. I'm really, really excited about it.</p>\r\n</blockquote>\r\n<p>We can tell! :-)</p>",
    "PostedDate": "2012-10-09T03:51:01.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1222471",
    "ThreadId": "397586",
    "Html": "One way to implement this feature is to create a new emitter. We have the --declarations emitter. If the same information was emitted in JSON format, reflection would be solved. You do not need to pollute the emitted javascript just emit a second file that contains all public type info.\r<br />\n<br />\nIf this feature existed we could create powerful DI frameworks with typescript. <br />\n",
    "PostedDate": "2014-03-13T11:19:25.79-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1222842",
    "ThreadId": "397586",
    "Html": "I like this idea quite a bit.  We've been brainstorming how to do reflection well, and it may just be that what you do is a JSON output and then consume that.  It'd need to be smart enough to encode things like recursive types and definitions, but I could definitely see this being useful.<br />\n",
    "PostedDate": "2014-03-14T10:46:18.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1222858",
    "ThreadId": "397586",
    "Html": "The reflection json file would be worthless after minification unless a new compiler option was added that would preserve export names during minification.<br />\n<pre><code>module myModule{\n    export class MyClass{\n        foo:string = &quot;&quot;;\n        bar:number;\n    }\n}\n</code></pre>\n\nExports to:<br />\n<pre><code>window[&quot;myModule&quot;];\n(function (myModule) {\n    var MyClass = (function () {\n        function MyClass() {\n            this.foo = &quot;&quot;;\n        }\n        return MyClass;\n    })();\n    myModule[&quot;MyClass&quot;] = MyClass;\n})(window[&quot;myModule&quot;] || (window[&quot;myModule&quot;] = {}));\n</code></pre>\n\nThe class paths would be preserved.<br />\n",
    "PostedDate": "2014-03-14T11:19:10.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1223109",
    "ThreadId": "397586",
    "Html": "A .d.ts Parser would be good enough to retrieve that kind of information.<br />\n",
    "PostedDate": "2014-03-15T11:05:48.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1223129",
    "ThreadId": "397586",
    "Html": "A d.ts parser would work fine. It feels silly to parse something that was just parsed. Writing a parser is not for the faint of heart. If this info was exported to json we could use it for reasons other than reflection. It would be easy generate documentation or build extern/def files for haxe or java or c#<br />\n",
    "PostedDate": "2014-03-15T12:59:00.157-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1223217",
    "ThreadId": "397586",
    "Html": "See also: <a href=\"https://typescript.codeplex.com/discussions/483998\" rel=\"nofollow\">https://typescript.codeplex.com/discussions/483998</a>\r<br />\n<br />\nThe output could be <a href=\"http://en.wikipedia.org/wiki/JSON#JSON_Schema\" rel=\"nofollow\">JSON schema</a>\r<br />\n<br />\nI'm not sure whether the meta data output will ever be safe to use on a minified script. When a script combined from multiple files is minified using a more advanced minifier then even public methods can be minified.\r<br />\n<br />\nWe would, however, dearly like to see this implemented because of its <a href=\"https://typescript.codeplex.com/discussions/429212\" rel=\"nofollow\">potential for use in testing</a> and other non-runtime applications, such as documentation.<br />\n",
    "PostedDate": "2014-03-16T05:19:57.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1223264",
    "ThreadId": "397586",
    "Html": "The potential of .d.ts files is huge. You can generate documentation from it (comments can be included in .d.ts files) you can easily ship or load them with your application and generate RTTI on the fly or generate RTTI files in whatever format you prefer (JSON, XML, ...). What's holding you back to write such a parser?\r<br />\n<br />\nAt my company we are working on such tools (documentation generator, RTTI, ..) as part of a big project. Unfortunately it's unlikely they will be ready and available before 2015.<br />\n",
    "PostedDate": "2014-03-16T07:57:23.783-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1223267",
    "ThreadId": "397586",
    "Html": "You are right. The .d.ts file has everything I need. It would not be too hard to parse generated .d.ts files. Because I can expect the whitespace to be uniform, pattern matching is easy enough. It would be a complete nightmare to parse them based on the pure typescript spec. If I wanted to make use of the type info at runtime I would prefer the parser to be lean as to not weigh down the client. JSON is very lean because the browser comes with a built in parser.<br />\n<br />\nI work for a tiny startup where I use typescript with AngularJS. I LOVE this combination. My main interest in this feature is to facilitate the creation a version of AngularJS that supports annotation based DI with typescript. The google team has built an impressive framework &quot;AngularDart&quot; on their Dart technology. I don't think Dart has a future but AngularDart shows the use of a powerful UI framework with type aware DI features and I am jealous. <br />\n",
    "PostedDate": "2014-03-16T08:11:27.84-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238394",
    "ThreadId": "397586",
    "Html": "Like oisin mentioned, a compiler option is definitely needed.  I would even take this a step further and say <em>more than one</em> option, because I may only care about the type names, and not the members and function parameters (just a smaller file), or perhaps I just want all types and members, but don't care about the function parameters.  It's perhaps not <em>that</em> important, but thought I would mention it anyhow as well. ;)\r<br />\n<br />\nAlso, if you do export the RTTI (hopefully in JSON format for quick loading dynamically), <em>please</em> also have an option to include the comments.  I'm creating a tool that could use the type information, but I would like to have the developers comments included with the types also (for intellisense-like reasons).<br />\n",
    "PostedDate": "2014-04-26T11:26:26.353-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238491",
    "ThreadId": "397586",
    "Html": "You can get the types and their methods by using plain javascript features. Only for typing, parameter info and inheritance hierarchy TypeScript would be needed. I don't think, that TypeScript should include such things, because it would only make the compiler slower. If type information is needed, an additional tool could do the job as well.<br />\n",
    "PostedDate": "2014-04-27T03:00:42.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1261794",
    "ThreadId": "397586",
    "Html": "I believe it would be wise to take the proposal in this thread ( <a href=\"https://typescript.codeplex.com/discussions/542459\" rel=\"nofollow\">https://typescript.codeplex.com/discussions/542459</a> ) into account in the design of how to handle runtime type information.<br />\n",
    "PostedDate": "2014-07-01T18:54:25.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]