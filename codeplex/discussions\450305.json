[
  {
    "Id": "1069442",
    "ThreadId": "450305",
    "Html": "In the future do you think this would be possible :<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> IFace&lt;T&gt; <span style=\"color:Blue;\">extends</span> T {\n    \n}\n\n<span style=\"color:Blue;\">function</span> foo&lt;T, U, (R <span style=\"color:Blue;\">extends</span> T,U)&gt;(...) { \n\n}\n\r\n</pre></div>It could help to map more extisting javascript library, and to create some kind of mixin model.<br />\n",
    "PostedDate": "2013-07-17T02:54:02.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1070227",
    "ThreadId": "450305",
    "Html": "So this would be like saying &quot;R must have the features of T and U&quot;?  I could see that being handy.\r<br />\n<br />\nAs for mixins in general, I suspect we're going to be looking at them for future versions of TypeScript, since they are a pretty popular methodology.  <br />\n",
    "PostedDate": "2013-07-18T15:35:08.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1070424",
    "ThreadId": "450305",
    "Html": "Yes that exactly what i meant. <br />\nAnd for mixins it would make possible to do something like that  :<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">function</span> applyMixin&lt;T, U, (R <span style=\"color:Blue;\">extends</span> T,U)&gt;(instance:T, mixin:{<span style=\"color:Blue;\">new</span> ():U;}):R {\n    <span style=\"color:Blue;\">var</span> properties = Object.getOwnPropertyNames(mixin.prototype);\n    <span style=\"color:Blue;\">for</span>(<span style=\"color:Blue;\">var</span> i = 0, l = properties.length; i &lt; l; i++) {\n        <span style=\"color:Blue;\">var</span> property = properties[0],\n            propertyDescriptor = Object.getOwnPropertyDescriptor(mixin.prototype, property);\n        Object.defineProperty(instance, property, propertyDescriptor);\n    }\n    mixin.call(instance);\n    <span style=\"color:Blue;\">return</span> &lt;R&gt;instance;\n}\n\n\n\n<span style=\"color:Blue;\">class</span> A {\n    property:<span style=\"color:Blue;\">string</span>;\n}\n\n\n<span style=\"color:Blue;\">class</span> B {\n    property1:<span style=\"color:Blue;\">string</span>;\n}\n\n<span style=\"color:Blue;\">var</span> instance = <span style=\"color:Blue;\">new</span> A(),\n    mixedInstance = applyMixin(a, B);\n\r\n</pre></div>",
    "PostedDate": "2013-07-19T04:27:37.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]