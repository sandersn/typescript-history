[
  {
    "Id": "982742",
    "ThreadId": "428408",
    "Html": "\r\n<p>I know that enums are under consideration and may not be implemented, but I wanted to use them as an example of what I think would be a useful feature. &nbsp;Essentially, I believe the&nbsp;usefulness&nbsp;of the interface&nbsp;definitions would be enhanced\r\n if they could generate literals.</p>\r\n<p><span style=\"font-size:10pt\">i.e.</span></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// typescript</span>\n<span style=\"color:blue\">enum</span> MyEnum\n    {\n        foo = <span style=\"color:#a31515\">&quot;foo&quot;</span>, bar = <span style=\"color:#a31515\">&quot;bar&quot;</span>\n    }\nsomefunc(MyEnum.foo)\n</pre>\r\n</div>\r\n<p><span style=\"font-size:10pt\">could generate javascript:</span></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>somefunc(<span style=\"color:#a31515\">&quot;foo&quot;</span>)\n</pre>\r\n</div>\r\n<p><span style=\"font-size:10pt\">This is the most basic example I could think of, but I think there is room to expand on the concept to include more than just literals but more complex expressions that are still evaluated at compile-time.</span></p>\r\n<p><span style=\"font-size:10pt\">ie.</span></p>\r\n<pre>declare module xample{\ninterface iFace {\n        static SomeFunc(parm1: string, parm2: int32): string = (p1, p2) {\n\t\t\treturn p1.subString(p2);\n\t\t};\n    }\n}\n\n\nvar value = iFace.SomeFunc(&quot;FooBar&quot;, 3);\n</pre>\r\n<p><span style=\"font-size:10pt\">generates javascript</span></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> value = <span style=\"color:#a31515\">&quot;Bar&quot;</span>;\n</pre>\r\n</div>\r\n",
    "PostedDate": "2013-01-03T09:58:15.603-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]