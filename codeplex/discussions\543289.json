[
  {
    "Id": "1237873",
    "ThreadId": "543289",
    "Html": "1) Reflector by object instance (just like that in C#, maybe we can dynamically call functions, methods……)\r<br />\n<br />\n2) Reflector by string to dynamically create object instance.\r<br />\n<br />\n3) Add &quot;protected&quot; key word<br />\n",
    "PostedDate": "2014-04-25T00:00:24.2-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1237945",
    "ThreadId": "543289",
    "Html": "There are already feature requests for type info and inheritance modifiers - just to a search in the &quot;issues&quot; tab.<br />\n",
    "PostedDate": "2014-04-25T03:44:35.043-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238291",
    "ThreadId": "543289",
    "Html": "Do you mean all?<br />\n",
    "PostedDate": "2014-04-26T05:43:08.333-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238389",
    "ThreadId": "543289",
    "Html": "<a href=\"https://typescript.codeplex.com/discussions/397586\" rel=\"nofollow\">https://typescript.codeplex.com/discussions/397586</a>\r<br />\n<a href=\"https://typescript.codeplex.com/workitem/90\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/90</a>\r<br />\n<a href=\"https://typescript.codeplex.com/workitem/563\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/563</a>\r<br />\n<a href=\"https://typescript.codeplex.com/workitem/125\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/125</a>\r<br />\n<br />\nWhat exactly do you mean by #2? Can you post an example of what you'd like to see?<br />\n",
    "PostedDate": "2014-04-26T11:02:00.043-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238483",
    "ThreadId": "543289",
    "Html": "OK, I mean we can use something like Assembly.Load(A string value of TypeScript) to get an instance of TS's instance.<br />\n",
    "PostedDate": "2014-04-27T01:32:14.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238525",
    "ThreadId": "543289",
    "Html": "Not sure that wording makes sense - you want to make an instance of TypeScript? As in, the compiler?\r<br />\n<br />\nI think what you are trying to say is you want TS to output a JS code layer that has all the type info so, during a full minification scenario, you can pass in &quot;Some.Namespace.Type&quot; to create types?  First, unless TS supports minification natively, that may not even be possible; and, if the code isn't minimized, then you could easily type &quot;new Some.Namespace.Type()&quot; (which <em>normally</em> you can do even minimized). You can also dynamically call functions and create types as well in JS, so reflection is not needed for that.\r<br />\n<br />\nIf you mean to load entire files like assemblies, TS already supports modules. <br />\n",
    "PostedDate": "2014-04-27T08:55:52.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238621",
    "ThreadId": "543289",
    "Html": "Many thanks!\r<br />\nThen what about converting a string value to an enum in TypeScript? I mean:<br />\n<pre><code>public enum Test\n{\n   A,\n   B\n}</code></pre>\n\nThen you can say this in TS:\r<br />\nvar t:Test = Enum.Parse(&quot;A&quot;);  //Something or someway in C# to convert a string to enum.<br />\n",
    "PostedDate": "2014-04-27T22:12:58.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238664",
    "ThreadId": "543289",
    "Html": "You should try typing code in here:  <a href=\"http://www.typescriptlang.org/Playground/\" rel=\"nofollow\">http://www.typescriptlang.org/Playground/</a>\r<br />\n<br />\nThen you can see what is going on. Your code above (without the &quot;public&quot; modifier) produces this:<br />\n<pre><code>var Test;\n(function (Test) {\n    Test[Test[&quot;A&quot;] = 0] = &quot;A&quot;;\n    Test[Test[&quot;B&quot;] = 1] = &quot;B&quot;;\n})(Test || (Test = {}));</code></pre>\n\nSo, <code>Test[Test.A] == &quot;A&quot;</code> and <code>Test[Test.B] == &quot;B&quot;</code>.<br />\n",
    "PostedDate": "2014-04-28T00:55:09.117-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238700",
    "ThreadId": "543289",
    "Html": "Many thanks jamesnw:\r<br />\n<br />\nSo there comes an interesting question：Oh yes, I agree that your way to my specific enum (e.g: Test) is right. But I wanna make that &quot;more generic&quot;——\r<br />\nI mean that I can have a method to reflect and get values to unsure enum (The &quot;unsure enum&quot; means any kind of enum, not just the example given above).\r<br />\nDo you think about reflection is needed? Maybe go back to the previous question.\r<br />\nHaha……<br />\n",
    "PostedDate": "2014-04-28T02:22:59.64-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238764",
    "ThreadId": "543289",
    "Html": "You can add in your own type details yourself (i.e. <code>Test[&quot;_type&quot;] = &quot;Test&quot;</code>, or perform duck-typing.  If you are talking about wanting TS type details that are not in JS then we are back to the links I posted. ;). What you are looking for is RTTI (runtime type information) for JS, and that would explode the file size, or require a separate file be made (perhaps JSON format).<br />\n",
    "PostedDate": "2014-04-28T05:33:00.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]