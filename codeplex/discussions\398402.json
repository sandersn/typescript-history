[
  {
    "Id": "923170",
    "ThreadId": "398402",
    "Html": "\r\n<p>When writing complex javascript applications, sometimes you want to reorganise files, e.g. in a different folder structure...</p>\r\n<p>But as soon as you start to reorganise things, references get broken:<br>\r\n<br>\r\nsuppose I move a ts file from the root folder to a subfolder, one needs to adjust in this file all references to other ts files in the root folder (e.g. jquery.d.ts becomes ../jquery.d.ts).<br>\r\n<br>\r\nand all files containing a reference to the moved file, must also be changed from myfile.ts to subfolder/myfile.ts.<br>\r\n<br>\r\nthis might get very cumbersome especially in large scale applications.&nbsp;</p>\r\n",
    "PostedDate": "2012-10-07T15:24:35.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923728",
    "ThreadId": "398402",
    "Html": "<p>Yes - this is a weakness of the ///&lt;reference&gt; approach, which trades off with the benefits of granular control over references.&nbsp; One technique we've seen several projects use (and which we use in the TypeScript compiler codebase), is to have a single file be the \"main\" file for a project or folder, which includes all the references within that subproject.&nbsp; Then each file in that subproject references the main file, and references from other subprojects need only reference the single main subproject reference file.&nbsp; By doing there, the number of updates needed when a folder is moved is significantly reduced.&nbsp;</p>\r\n<p>We'll be looking more at layers for project structuring above the explicit ///&lt;reference&gt; mechanism in the future, and making it easier to rearrange code files on disk is a scenario we'll want to keep in mind.</p>",
    "PostedDate": "2012-10-08T15:51:25.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924794",
    "ThreadId": "398402",
    "Html": "<p>Can this technique be used for *.d.ts as well as for *.ts files, or only for *.d.ts files?</p>\r\n<p>I tried the approach, but when I compile my solution, I get an error on one of the interface types , saying that it does not exist.</p>\r\n<p>However, when execute Goto Declaration, it navigates perfectly to the interface.</p>\r\n<p>Does the order of the references in main.d.ts matter? I have put all my *.d.ts files first (ordered alfabetically), than all *.ts files (again ordered alfabethically)</p>\r\n<p>Does it matter whether main ends with .d.ts of .ts (I tried with main.d.ts) ?</p>",
    "PostedDate": "2012-10-10T09:28:15.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]