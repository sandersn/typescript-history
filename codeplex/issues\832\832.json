{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "There is a bunch of subtlety here, and it's an area where the tension of trying to apply a type system over the highly dynamic nature of JavaScript is apparent.\n\nThere will be a number of improvements coming in the next couple of releases to the ability to type via object & array indexers, as well as overload types based on known constant values.  If the spec isn't already updated in our repository, then it should be shortly, and this will hopefully add improvements and clarity that should address concerns in this area.",
    "ClosedDate": "2013-03-19T09:36:30.843-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Index signatures allow strings and numbers. However there is no way to use the numbers signature: \r\n\r\n```\r\n// Show indexible options\r\n// Index signatures may only take string or number \r\nclass A{}\r\nvar error: { [x:A]: number; };\r\n\r\n// Okay \r\nvar valid: { [x:string]: number; } = { \"test\":1 }\r\n\r\n// Error\r\nvar invalid: { [x:number]: number; } = { 0:1 }\r\n```\r\nIndeed js internally only has string based indices (with Array being different from {}) but string / number conversion is stable in js : \r\n\r\n```\r\nvar x = {0 : \"asdf\",1:\"bb\"} \r\nalert(x[0])\r\nalert(x[1])\r\n\r\n```\r\n(http://jsfiddle.net/KrFgw/2/) \r\n\r\nSo I think it should be supported in typescript as well. ",
    "LastUpdatedDate": "2013-03-19T09:36:30.843-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-03-18T22:56:00.293-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Index signatures not working as expected ",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 832
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "It works in JavaScript because the numbers are automatically converted to strings - but that means that the 'x' in your example still does not have a number indexer - it has a string indexer 'in disguise', allowing it to be defined as having a number indexer sounds wrong to me",
      "PostedDate": "2013-03-19T06:48:10.533-07:00",
      "Id": 93642
    }
  ]
}