[
  {
    "Id": "921123",
    "ThreadId": "397848",
    "Html": "\r\n<p>It would be a great addition.</p>\r\n<p>Fantasy example:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Decimal\r\n{\r\n    <span style=\"color:blue\">static</span> <span style=\"color:blue\">operator</span> add(Decimal d1, Decimal d2) : Decimal\r\n   {\r\n             ....\r\n   }\r\n   \r\n   <span style=\"color:blue\">static</span> <span style=\"color:blue\">operator</span> mul(Decimal d1, Decimal d2) : Decimal\r\n   {\r\n             ....\r\n   }\r\n\r\n}\r\n\r\n<span style=\"color:blue\">var</span> d1 = <span style=\"color:blue\">new</span> Decimal(<span style=\"color:#a31515\">'123.45'</span>);\r\n<span style=\"color:blue\">var</span> d2 = <span style=\"color:blue\">new</span> Decimal(<span style=\"color:#a31515\">'678.90'</span>);\r\n<span style=\"color:blue\">var</span> d3 = <span style=\"color:blue\">new</span> Decimal(<span style=\"color:#a31515\">'789.90'</span>);\r\n\r\n<span style=\"color:blue\">var</span> result = (d1 &#43; d2) * d3;\r\n\r\n\r\n<span style=\"color:green\">//would render:</span>\r\n\r\n\r\n<span style=\"color:blue\">var</span> result = (d1.add(d2)).mul(d3);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp; &nbsp; }</p>\r\n<p>}</p>\r\n",
    "PostedDate": "2012-10-03T02:20:26.653-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922086",
    "ThreadId": "397848",
    "Html": "<p>Thanks for feedback.&nbsp; We likely won't do this because in TypeScript because we use types to check syntactic properties and not to give additional semantic information.&nbsp;</p>\r\n<p>For example, when you do an overload of a function, you give the function multiple types.&nbsp; This helps the type checker know proper return types and catch you sending incorrect arguments.&nbsp; When that code is compiled, those types disappear and leave the original function.&nbsp;&nbsp; Likewise, we don't insert JavaScript when you add a cast to your code.&nbsp;</p>",
    "PostedDate": "2012-10-04T12:35:05.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922315",
    "ThreadId": "397848",
    "Html": "<p>Is this very hard to implement in &nbsp;actual design of TypeScript ?</p>\r\n<p>I think it will make the language very powerfull and open way for beautiful abstractions....</p>\r\n<p>&nbsp;</p>\r\n<p>Anyway, would be nice to have a standarized way to instrument the ast after parsing and type checking. where developers would add experimental feature, like operator overloading...</p>\r\n<p>Are there any plans for this kind of extensibility?</p>\r\n<p>Thanks</p>",
    "PostedDate": "2012-10-05T01:31:40.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922547",
    "ThreadId": "397848",
    "Html": "<p>I'm not sure it's possible to implement.&nbsp;</p>\r\n<p>Because TypeScript works directly with JavaScript, it keeps an \"open&nbsp;system\" view of how source compiles - meaning, it can't assume anything about how other code will work.&nbsp; If JavaScript doesn't allow you to alter how '+' works between two objects, there's no way to maintain that the operator you've overloaded will behave correctly.&nbsp; In TypeScript, there's a similar problem where we wouldn't be able to catch everywhere the operator is used to perform transformation when the type becomes unknown (or 'any').&nbsp;</p>",
    "PostedDate": "2012-10-05T10:07:01.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922663",
    "ThreadId": "397848",
    "Html": "<p>This should be the responsability of the programmer: to use proper type annotations...</p>",
    "PostedDate": "2012-10-05T15:44:03.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940511",
    "ThreadId": "397848",
    "Html": "<p>I agree with the desire supporting operator overloading. Calculations with financial, multicurrency data for example require - if readability is a requirement - overloading of the standard operators. And TypeScript in my opinion is about readability.</p>",
    "PostedDate": "2012-11-12T11:34:19.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940529",
    "ThreadId": "397848",
    "Html": "\r\n<p>I implemented convention based operators in Typescript, it's relatively easy. See below.</p>\r\n<p>I think if the authors of typescript decide to implement it, it will be implemented in a snap.</p>\r\n<p>Though i have the impression that somehow they are not yet fully clear about what to do next.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Decimal \n{\n    constructor ()\n    {\n    }\n\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> opAdd_number(d1: Decimal, n: number): Decimal {\n        <span style=\"color:#0000ff\">...</span>\n    }\n\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> opAdd(d1: Decimal, d2: Decimal): Decimal\n    {\n        <span style=\"color:#0000ff\">...</span>\n    }   \n    \n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> opSub(d1: Decimal, d2: Decimal): Decimal\n    {\n       ...\n    }     \n\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> opMul(d1: Decimal, d2: Decimal): Decimal\n    {\n        <span style=\"color:#0000ff\">...</span></pre>\r\n<pre>    } \n\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> opDiv(d1: Decimal, d2: Decimal): Decimal\n    {\n        <span style=\"color:#0000ff\">...</span>\n    } \n\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> opDiv_n_d(n: number, d2: Decimal): Decimal\n    {\n        <span style=\"color:#0000ff\">...</span>\n    } \n}\n           &nbsp;</pre>\r\n<pre style=\"color:black\">//So you may write</pre>\r\n<pre style=\"color:black\"><span style=\"color:blue\">var</span> d1 = <span style=\"color:blue\">new</span> Decimal();\n<span style=\"color:blue\">var</span> d2 = <span style=\"color:blue\">new</span> Decimal();\n<span style=\"color:blue\">var</span> x = 1 &#43; 2;\n<span style=\"color:blue\">var</span> d3 = d1*(d1 &#43; d2) - d2/d1 &#43; 2/d1;\n</pre>\r\n<pre style=\"color:black\"><br></pre>\r\n<pre style=\"color:black\">//which get compiled to:</pre>\r\n<pre style=\"color:black\"><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">var</span> d1 = <span style=\"color:blue\">new</span> Decimal();\n<span style=\"color:blue\">var</span> d2 = <span style=\"color:blue\">new</span> Decimal();\n<span style=\"color:blue\">var</span> x = 1 &#43; 2;\n<span style=\"color:blue\">var</span> d3 = Decimal.opAdd(Decimal.opSub(Decimal.opMul(d1,(Decimal.opAdd(d1,d2))),Decimal.opDiv(d2,d1)),Decimal.opDiv_n_d(2,d1));</pre>\n<pre><br></pre>\n</div>\n<br></pre>\r\n</div>\r\n",
    "PostedDate": "2012-11-12T12:31:07.943-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940758",
    "ThreadId": "397848",
    "Html": "\r\n<p><span lang=\"EN-US\" style=\"color:black; font-size:10pt\">I don't quite understand the arguments contra operator overloading above. Your example in code might need a mapping in the function-header from the real operator to the function (+ maps to opAdd), otherwise\r\n the compiler doesn't know how to translate the operators, but how difficult is that? I do understand plain JavaScript has no knowledge of types and that TypeScript has that knowledge - when variables are well defined - only at compile-time. Nonetheless why\r\n not offering that possibility to users of TypeScript that mind well typed variables?</span></p>\r\n",
    "PostedDate": "2012-11-13T00:22:46.063-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940760",
    "ThreadId": "397848",
    "Html": "\r\n<p>I have the impression that implementing some kind of C# like attributes in typescript will offer the possibility to extend the compiler and map in this case the operators.</p>\r\n",
    "PostedDate": "2012-11-13T00:27:09.32-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "941057",
    "ThreadId": "397848",
    "Html": "\r\n<p>The general rule of thumb is that types are erasable, meaning that we should be able to erase all the types from a TypeScript file and then compile that and get the same result.&nbsp; This is incidentally why function overloading overloads only on the declaration/type\r\n side and not on the actual function definition.</p>\r\n<p>There are a couple of reasons to follow the rule of thumb: we're closer to the original JavaScript semantically, we're more mechanical in our translation, we inject less code that you didn't write, etc.</p>\r\n<p>Just as ursuletzu suggests, it's possible to set up a straightforward translation when the type information is known.&nbsp; In many static languages, this is no problem as the types are almost always known, or we can do runtime checks when they aren't.&nbsp; TypeScript,\r\n though, has to be able to play well with JavaScript, and we don't have any way of passing to that JavaScript a way of saying &quot;when you see '+' call opAdd&quot;.&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"overflow:hidden; height:1px; left:-10000px; top:0px; width:1px\">\r\n&#65279;</div>\r\n",
    "PostedDate": "2012-11-13T08:28:31.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "941276",
    "ThreadId": "397848",
    "Html": "\r\n<div style=\"font-family:Calibri,'Segoe UI',Meiryo,'Microsoft YaHei UI','Microsoft JhengHei UI','Malgun Gothic','Khmer UI','Nirmala UI',Tunga,'Lao UI',Ebrima,sans-serif; font-size:16px\">\r\n<div>The more I see discussions like this around here, the more I think there needs to be some more general communication from the TypeScript team explaining and reinforcing the goals of the project. In particular, people seem to have trouble with the basic\r\n idea that classes created in and compiled from TypeScript should be consumable from JavaScript code, which is where confusion like this thread arises.</div>\r\n<div></div>\r\n<div>Just a couple of blog posts from authoritative sources would help.</div>\r\n<div></div>\r\n<div>Cheers,</div>\r\n<div>Mark</div>\r\n<div>\r\n<div></div>\r\n<div>Sent from Surface Mail</div>\r\n<div></div>\r\n</div>\r\n<div style=\"border-top-color:rgb(225,225,225); border-top-width:1px; border-top-style:solid\">\r\n<strong>From:</strong> jonturner<br>\r\n<strong>Sent:</strong> ‎13‎ ‎November‎ ‎2012 ‎16‎:‎28<br>\r\n<strong>To:</strong> mark@markrendle.net<br>\r\n<strong>Subject:</strong> Re: Implement Operator overloading in TypeScript... [typescript:397848]<br>\r\n</div>\r\n<div></div>\r\n<p>From: jonturner</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<p>The general rule of thumb is that types are erasable, meaning that we should be able to erase all the types from a TypeScript file and then compile that and get the same result. This is incidentally why function overloading overloads only on the declaration/type\r\n side and not on the actual function definition.</p>\r\n<p>There are a couple of reasons to follow the rule of thumb: we're closer to the original JavaScript semantically, we're more mechanical in our translation, we inject less code that you didn't write, etc.</p>\r\n<p>Just as ursuletzu suggests, it's possible to set up a straightforward translation when the type information is known. In many static languages, this is no problem as the types are almost always known, or we can do runtime checks when they aren't. TypeScript,\r\n though, has to be able to play well with JavaScript, and we don't have any way of passing to that JavaScript a way of saying &quot;when you see '&#43;' call opAdd&quot;.\r\n</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px; top:0px; width:1px; height:1px; overflow:hidden\">\r\n&#65279;</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2012-11-13T15:37:47.06-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "943828",
    "ThreadId": "397848",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>ursuletzu wrote:</strong><br>\r\n<p>I implemented convention based operators in Typescript, it's relatively easy. See below.</p>\r\n</blockquote>\r\n<p>But how TypeScript understands it must compile '&#43;' to 'opAdd'? When I tried your example, I got an error: &quot;Operator '&#43;' cannot be applied to types 'Decimal' and 'Decimal'&quot;</p>\r\n",
    "PostedDate": "2012-11-19T02:18:04.273-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944262",
    "ThreadId": "397848",
    "Html": "\r\n<p>I implemented operator overloading in my personal fork of the project.</p>\r\n",
    "PostedDate": "2012-11-19T14:54:46.75-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944454",
    "ThreadId": "397848",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>ursuletzu wrote:</strong><br>\r\n<p>I implemented operator overloading in my personal fork of the project.</p>\r\n</blockquote>\r\n<p>Any chance you need beta testers for this fork? :))))</p>\r\n",
    "PostedDate": "2012-11-20T02:31:19.61-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]