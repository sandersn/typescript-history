[
  {
    "Id": "1239465",
    "ThreadId": "543784",
    "Html": "Been writing some code that implements a finite state machine (FSM) over enums. Ideally the interface would look something like: <br />\n<pre><code>class FiniteStateMachine&lt;source extends Enum&gt;&lt;target extends Enum&gt; {\n...\n}</code></pre>\n\nBut for now I have to either make FSM use integers (easy to mix up wrong input/dest type) or use abstract types (easy to put in non-enum type).\r<br />\n<br />\nCan we have an Enum type? Similarly, might be good to have an index type (integer or string) to restrict usage to vars than can be an index type. That would allow enums indexed by strings too, which would be nice for many cases. <br />\n",
    "PostedDate": "2014-04-29T11:03:00.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1239984",
    "ThreadId": "543784",
    "Html": "This is funny because literally yesterday me and my friend were discussing TS FSM. He is thinking of making a reusable library FSM for TS. Maybe you two should touch base :D<br />\n<br />\nHis implementation was a bit different, <a href=\"http://www.typescriptlang.org/Playground#src=%0A%0Aclass%20TransitionFunction%3CT%3E%20%7B%0A%09constructor(fsm%3A%20FiniteStateMachine%3CT%3E)%7B%7D%0A%09_from%3A%20T%3B%20%0A%09_to%3A%20T%3B%0A%09public%20to(state%3A%20T)%7B%0A%09%09%0A%09%7D%0A%7D%0Aclass%20FiniteStateMachine%3CT%3E%20%7B%0A%09constructor()%7B%7D%0A%09%0A%09%0A%09%0A%09public%20on(state%3AT%2C%20callback%3A%20()%3D%3Eany)%7B%0A%09%09%0A%09%7D%0A%09%0A%09public%20onEnter(state%3A%20T%2C%20callback%3A%20()%3D%3Eboolean)%7B%0A%09%09%0A%09%7D%0A%09%0A%09public%20onExit(state%3A%20T%2C%20callback%3A%20()%3D%3Eboolean)%7B%0A%09%09%0A%09%7D%0A%09%0A%09public%20from(state%3A%20T)%3A%20TransitionFunction%3CT%3E%7B%0A%09%09return%20new%20TransitionFunction%3CT%3E(this)%3B%0A%09%7D%0A%09%09%0A%09public%20canGoTo(state%3A%20T)%3Aboolean%20%7B%0A%09%09return%20false%3B%0A%09%7D%0A%09%0A%09public%20goTo(state%3A%20T)%3A%20void%20%7B%0A%09%09%0A%09%7D%0A%09%0A%09%0A%7D%0Aenum%20PossibleStates%20%7B%0A%09Up%2C%0A%09Down%2C%0A%09Attack%09%0A%7D%0Avar%20fsm%20%3D%20new%20FiniteStateMachine%3CPossibleStates%3E()%3B%0Afsm.from(PossibleStates.Up).to(PossibleStates.Down)%3B%0A%0Afsm.on(PossibleStates.Attack%2C%20()%3D%3E%7B%7D)%3B\" rel=\"nofollow\">here's an example</a>.<br />\n<br />\nI've used <a href=\"https://github.com/jakesgordon/javascript-state-machine\" rel=\"nofollow\">Javascript State Machine</a> in the past and mostly like it, but it's a little too dynamic for my taste, especially for use in TS projects. I had to wrap it in an interface so I could strongly type it's return object.<br />\n",
    "PostedDate": "2014-04-30T11:49:15.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1258616",
    "ThreadId": "543784",
    "Html": "Another use-case for abstract types, please can we have them? :) \r<br />\n<br />\n( <a href=\"https://typescript.codeplex.com/workitem/395\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/395</a> )<br />\n",
    "PostedDate": "2014-06-21T20:14:21.547-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]