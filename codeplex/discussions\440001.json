[
  {
    "Id": "1029269",
    "ThreadId": "440001",
    "Html": "Problem: JavaScript's dreadful notion of &quot;truthiness&quot; means all logical operators return type <em>any</em> rather than type <em>bool</em>.  This causes the type checker to miss a very large class of errors.  Moreover, TypeScript's interpretation of <em>any</em> as a &quot;get out of gaol free&quot; card means these errors silently propagate into the rest of one's code.\r<br />\n<br />\nSuggestion: add new infix logical operators (e.g., <em>and</em>, <em>or</em>, <em>not</em>) to TypeScript which both expect <em>bool</em> arguments and return <em>bool</em> results.\r<br />\n<br />\nYes, I could add utility functions to my programs with these signatures, but writing logic entirely in standard functional notation (<em>f(...)</em>) quickly becomes unreadable.<br />\n",
    "PostedDate": "2013-04-11T16:55:57.903-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1029582",
    "ThreadId": "440001",
    "Html": "One thing we're strongly considered as we go forward is a supported mode in the compiler that will warn/error on any inferred 'any' type.  Some examples:\r<br />\n<br />\nfunction f(x) { return x; }  // warning: parameter x is inferred to 'any'\r<br />\nvar y;  //warning variable y is inferred to 'any'\r<br />\n<br />\nIn your example, if you use two typed arguments to '||', if the result type went to 'any', it could give a warning.  Some operations wouldn't be caught, like 'not', but this would at least give you a better chance of catching more bugs early.<br />\n",
    "PostedDate": "2013-04-12T07:11:52.697-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1029843",
    "ThreadId": "440001",
    "Html": "Now that would be very welcome indeed.  Lack of it substantially reduces the protection afforded by static type checking.  On our project, it's even become the norm to use these little JavaScript &quot;cheats&quot; and it's already costing us.<br />\n",
    "PostedDate": "2013-04-12T15:38:06.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]