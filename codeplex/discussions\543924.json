[
  {
    "Id": "1240071",
    "ThreadId": "543924",
    "Html": "Is it possible to define an export property on a module? If do, what is the syntax? At the moment I'm resorting to using a class with only static members, but it seems like I should be using module rather than class for this.<br />\n",
    "PostedDate": "2014-04-30T14:57:28.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1240157",
    "ThreadId": "543924",
    "Html": "Did you mean something like this<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">module</span> foo {\n    \n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">var</span> bar = <span style=\"color:#A31515;\">&quot;barbar&quot;</span>;\n}\n\nconsole.log(foo.bar); <span style=\"color:Green;\">// barbar</span>\r\n</pre></div>Out of curiosity, why don't you like using a class?<br />\n",
    "PostedDate": "2014-04-30T23:53:14.55-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1240186",
    "ThreadId": "543924",
    "Html": "No, I mean a property as in:<br />\n<pre><code>class foo\n{\n     public static get bar() {\n         return &quot;barbar&quot;;\n     }\n}</code></pre>\n\nI use a class for this at the moment, using the same syntax as above but that leaves me with a redundant constructor. Achieving the real equivalent of a static class in TypeScript seems to be a module with the 'public' functions being exported, e.g.:<br />\n<pre><code>module foo\n{\n    export function getBar() {\n        return &quot;barbar&quot;;\n    }\n}</code></pre>\n\nBut as far as I can tell, while you can export functions from a module (as above), you cannot export a property in the same way you can with a class.<br />\n",
    "PostedDate": "2014-05-01T02:20:57.543-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1240327",
    "ThreadId": "543924",
    "Html": "Property getters in modules currently aren't supported.\r<br />\n<br />\nA reasonably type-safe workaround is this:<br />\n<pre><code>module M {\n    export declare var t: string;\n    Object.defineProperty(M, &quot;t&quot;, {\n        get(): typeof t { return &quot;hello&quot;; } \n    })\n}\n\nconsole.log(M.t); // 'hello'</code></pre>\n\n",
    "PostedDate": "2014-05-01T11:11:50.92-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]