{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:26.673-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "When you have a JavaScript AMD module, which you want to integrate, you ALWAYS have to put a corresponding .d.ts nearby.\r\nI surly see the advantage of having a .d.ts, but often you might include a module of which you only call one or two methods, so it might not be worth writing a .d.ts.\r\n\r\nOf course you can put a generic .d.ts, which looks like the following:\r\n\r\ndeclare var dummy: any;\r\ndeclare module \"path/to/my/module\" {\r\n    export = dummy;\r\n}\r\n\r\nBut this seems kinda strange and it still includes the path, so you have to adapt it each time you move the file.\r\n\r\nIn total it seems quite a lot of work for a simple thing as just including a file.\r\n\r\nWhen you make any mistake (forgetting to add or misspelled your .d.ts, wrong path inside the .d.ts, syntax error in the .d.ts) you get the generic \"Unable to resolve external module\" error.\r\n\r\n\r\n\r\n\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-05T08:09:31.403-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Including JavaScript AMD modules is too complex",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 4,
    "Id": 1968
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "If you put the d.ts file next to the js file, you don't have the problems with the path in the generic d.ts file.\r\n\r\nFurther this is by design, but grabbing a d.ts file from the definitely git repro [0] will make things easier.\r\n\r\nWe'll take a look for a future version if we can make this easier. \r\n\r\n\r\n[0] https://github.com/borisyankov/DefinitelyTyped",
      "PostedDate": "2013-12-06T11:09:36.953-08:00",
      "Id": 126370
    },
    {
      "Message": "You can do with the <amd-dependency> tag:\n\n```\n/// <amd-dependency path=\"path/to/module\" />\n// The above line must be at the very top of the file\n\n...\n\nvar myModule = require(\"path/to/module\");\nmyModule.func();\n```\n\nOf course, in order to be able to do that, you have to also declare the `require` function itself, like this:\n\n```\ndeclare function require(path: string): any;\n```\n\nBut you only have to do it once, in your bootstrap code.",
      "PostedDate": "2013-12-08T17:19:16.35-08:00",
      "Id": 126552
    },
    {
      "Message": "> paulb: \n\nHow can you create a .d.ts without having its module path in it? \nI tried \"declare module {\" and \"declare module \"module\" {\", both variants give you an error when you try to require the file.",
      "PostedDate": "2013-12-09T02:01:04.457-08:00",
      "Id": 126582
    }
  ]
}