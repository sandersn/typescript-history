[
  {
    "Id": "1059237",
    "ThreadId": "447715",
    "Html": "In latest es6 spec is possible to define prototype properties as well as per-instance properties.\r<br />\nIn typescript we can define only methods as prototype properties (or use ugly &quot;out of class&quot; definitions). I miss this feature a lot.\r<br />\nSomeone says prototype properties will be confusing, but why?\r<br />\nIn es6 prototype and instance properties are written differently in very &quot;easy to understand&quot; way.\r<br />\n<br />\nExample:<br />\n<pre><code>class Monster {\n\n  // declare and initialize per-instance properties.erties.\n  constructor(name, health) {\n    public name = name;\n    private health = health;\n  }\n\n  // declares a prototype property and initializes it to the value of that expression. \n  public numAttacks = 0;\n}</code></pre>\n\nAre you going to implement this in some next version (1.x) ?\r<br />\n<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:classes\" rel=\"nofollow\">link to harmony spec</a><br />\n",
    "PostedDate": "2013-06-20T08:48:50.18-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1060463",
    "ThreadId": "447715",
    "Html": "I suspect we won't align completely before 1.0.  There are some features, like class expressions, we don't yet support (though I believe we could in theory, we just haven't put the resources into it, yet).  We'll likely explore more alignment post 1.0.<br />\n",
    "PostedDate": "2013-06-24T09:18:49.103-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1060655",
    "ThreadId": "447715",
    "Html": "Do you guys plan to release TS 1.0 before the ECMAScript spec is complete? Seems like that could make it more difficult to change things if the spec changes further.<br />\n",
    "PostedDate": "2013-06-24T18:49:10.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1061658",
    "ThreadId": "447715",
    "Html": "@dorny, at the head of your link to the harmony spec it says: &quot;This proposal has been superseded by the “Maximally Minimal Classes”&quot;.\r<br />\n<br />\nThe link to the latter is here <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\" rel=\"nofollow\">http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes</a>\r<br />\n<br />\nIn that spec we have:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// The only way to create prototype data properties is by</span>\n<span style=\"color:Green;\">// modifying the prototype outside of the declaration.</span>\nMonster.prototype.numAttacks = 0;\r\n</pre></div>This is what we currently get with TypeScript.\r<br />\n<br />\nPersonally, I cannot see any benefit in the monster example you have posted. That appears to be imposing a penalty on the more common usage (instance properties) and favouring a generally rare use-case (prototype properties).\r<br />\n<br />\nIf you have any common use cases for putting properties on the prototype then it should be interesting to see them.<br />\n",
    "PostedDate": "2013-06-26T13:32:16.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1061880",
    "ThreadId": "447715",
    "Html": "@nabog , you are right. I saw on that page only what i wont and miss &quot;superseded&quot; message on top.\r<br />\nIf es6 decided to use &quot;Maximally Minimal Classes&quot;, my opinion is totally irrelevant.\r<br />\nSorry for useless topic.<br />\n",
    "PostedDate": "2013-06-27T02:45:40.913-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1061985",
    "ThreadId": "447715",
    "Html": "The ECMAScript 6 completion is (or at least was) a bit of a moving target.  What we've opted to do, in the module case for example, was to try to align the syntax in a way that we could add in the ES6 features on top of the existing TypeScript ones.  This means we're picking minimal syntax in places with a lot of churn in the ES6 spec so we fill it out later once the ES6 spec is complete.<br />\n",
    "PostedDate": "2013-06-27T07:09:52.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]