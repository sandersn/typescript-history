[
  {
    "Id": "920579",
    "ThreadId": "397702",
    "Html": "\r\n<p>It would be nice to have a way to describe genericity in functions, classes and interfaces.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Cup&lt;T&gt; {\r\n    <span style=\"color:blue\">public</span> T content;\r\n    constructor(content: T) {\r\n        <span style=\"color:blue\">this</span>.content = content;\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">I can think of a number of scenarios when a feature like this can be useful, for example when working with arrays.</div>\r\n<div style=\"color:black; background-color:white\">I do however realize that this might be something you are already working on or at least have plans for.</div>\r\n",
    "PostedDate": "2012-10-02T06:51:37.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920598",
    "ThreadId": "397702",
    "Html": "\r\n<p>TypeScript will eventually support generics, as per the spec [1]:</p>\r\n<pre><code>NOTE: TypeScript currently doesn&rsquo;t support Generics, but we expect to<br></code>include them in the final language. Since TypeScript&rsquo;s static type system has&nbsp;<br>no run-time manifestation, Generics will be based on &ldquo;type erasure&rdquo; and intended <br>purely as a conduit for expressing parametric type<br>relationships in interfaces, classes, and function signatures.</pre>\r\n<p><span>[1]&nbsp;</span><a rel=\"nofollow\" href=\"http://go.microsoft.com/fwlink/?LinkId=267121\">http://go.microsoft.com/fwlink/?LinkId=267121</a></p>\r\n",
    "PostedDate": "2012-10-02T07:23:42.523-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920599",
    "ThreadId": "397702",
    "Html": "\r\n<p>double post</p>\r\n",
    "PostedDate": "2012-10-02T07:23:42.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920603",
    "ThreadId": "397702",
    "Html": "<p>Didn't see that. Thanks.</p>",
    "PostedDate": "2012-10-02T07:29:31.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920721",
    "ThreadId": "397702",
    "Html": "<p>Speaking of Cup&lt;T&gt;, I wonder why the language wasn't called TScript, or better yet, TeaScript. ;)</p>",
    "PostedDate": "2012-10-02T10:15:15.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920956",
    "ThreadId": "397702",
    "Html": "<p>Oh hell yeah! Any chance we can see <a href=\"http://en.wikibooks.org/wiki/Haskell/GADT\">generalized abstract data types</a>&nbsp;in TypeScript like we see in Haskell and F#? Algebraic data types are very expressive while maintaining high&nbsp;reliability. GADT syntax also allows for easy function, declarative, and object oriented programming.</p>",
    "PostedDate": "2012-10-02T17:13:40.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921205",
    "ThreadId": "397702",
    "Html": "<p>This would be awesome for Knockout.Js. It would reduce the amount of boilerplate interface definitions needed for Knockout.</p>\r\n<p>It would be nice to have C#-style generic constraints too.</p>",
    "PostedDate": "2012-10-03T05:46:26.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926361",
    "ThreadId": "397702",
    "Html": "\r\n<p>So in need of generics! Please please make them.</p>\r\n",
    "PostedDate": "2012-10-14T07:56:06.07-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926368",
    "ThreadId": "397702",
    "Html": "<p>I find myself wondering what part of <strong>\"we expect to include them in the final language\"</strong> people are not understanding.</p>",
    "PostedDate": "2012-10-14T08:23:00.367-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926385",
    "ThreadId": "397702",
    "Html": "<p>When GADTs or generics are tacked-on to a language after the fact, you never get the benefits of the syntax and semantics that you would if they were part of the original design. Like OO in Perl; bless, really? Or lambdas in C++/Java.</p>\r\n<p>The Free Pascal project has with been flirting with the idea of adding generics for years. It ain't gonna happen. These sorts of features either make it into the core conception, or not at all.</p>",
    "PostedDate": "2012-10-14T09:34:21.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926480",
    "ThreadId": "397702",
    "Html": "<p>It would be wonderful if (G)ADTs made it into TypeScript. &nbsp;We now have two decades of programmers who believe OO is the best thing since sliced bread, who have never seriously been shown the alternatives. &nbsp;TypeScript has a real opportunity here to advance the industry.</p>\r\n<p>I really miss ADTs; OO is so blooming verbose.</p>",
    "PostedDate": "2012-10-14T15:58:05.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]