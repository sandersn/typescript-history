{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:27.127-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "```\r\nenum X {\r\n  Test\r\n}\r\n\r\nvar z = 'Test';\r\nvar y = X[z];\r\n```\r\n\r\nThe above code fails to compile under -noImplicitAny and TS 0.9.7. For now, I'm working around it like this:\r\n\r\n```\r\nvar y: X = (<any>X)[z];\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-03-20T08:43:10.627-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "NoImplicityAny and convert string to enum problem",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 3,
    "Id": 2339
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I understand this is the advised way to workaround the issue - you can read about it [here](https://typescript.codeplex.com/wikipage?title=Known%20breaking%20changes%20between%200.8%20and%200.9&referringTitle=Documentation)\n\nI agree it's irritating and feels like a hack.  \n\nI know technically this is an implicit ```any``` and so the decision makes sense on an intellectual level.  It feels like you're having to jump through hoops whenever you use this though and so I personally would prefer if this was an exception to the rule.\n\nMaybe they team could introduce another compiler flag?  ```allowImplicitAnyOnEnum``` perhaps?  Or change ```noImplicitAny``` to be called ```implicitAny``` which allows the following values:\n\n- allow\n- forbidApartFromEnums\n- forbid\n\nI'm sure there's better names out there...  What I'm getting at is that it feels slightly wrong using enums this way at present and since there is a legitimate use case (in my opinion) the compiler shouldn't make you feel like you're pushing water uphill when you use this.  My 10 pence anyway.  Perhaps this should live as a discussion?",
      "PostedDate": "2014-03-21T03:00:15.693-07:00",
      "Id": 137533
    },
    {
      "Message": "I could see something like X.parse(z) which gets compiled to X[z], but the compiler knows it returns an X. I'm sure the language designers have considered something like this and don't like it for one reason or another, but it looks good from my perspective.",
      "PostedDate": "2014-03-21T06:09:58.37-07:00",
      "Id": 137540
    },
    {
      "Message": "I'm sympathetic here and am marking this as a suggestion for post-1.0, but the behavior is very much in line with the runtime semantics. You cannot index an enum by an arbitrary string and know that you're going to get a number out -- requiring a type assertion here is arguably appropriate.",
      "PostedDate": "2014-03-24T11:24:56.517-07:00",
      "Id": 138127
    }
  ]
}