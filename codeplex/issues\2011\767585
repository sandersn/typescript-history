declare module Rx {
	export interface IDisposable {
	}
	export interface IScheduler {
	}
	export class Observer<T> {
	}

	export interface Observable<T> {
		amb(rightSource: Observable<T>): Observable<T>;
		catchException(handler: (exception: any) => Observable<T>): Observable<T>;
		catchException(second: Observable<T>): Observable<T>;
		concat(...sources: Observable<T>[]): Observable<T>;
		concat(sources: Observable<T>[]): Observable<T>;
		merge(maxConcurrent: number): Observable<T>;
		merge(other: Observable<T>): Observable<T>;
		onErrorResumeNext(second: Observable<T>): Observable<T>;
		skipUntil<T2>(other: Observable<T2>): Observable<T>;
		switchLatest(): Observable<T>;
		takeUntil<T2>(other: Observable<T2>): Observable<T>;
		zip<T2, TResult>(second: Observable<T2>, resultSelector: (v1: T, v2: T2) => TResult): Observable<TResult>;
		zip<T2, T3, TResult>(second: Observable<T2>, third: Observable<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => TResult): Observable<TResult>;
		zip<T2, T3, T4, TResult>(second: Observable<T2>, third: Observable<T3>, fourth: Observable<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => TResult): Observable<TResult>;
		zip<T2, T3, T4, T5, TResult>(second: Observable<T2>, third: Observable<T3>, fourth: Observable<T4>, fifth: Observable<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => TResult): Observable<TResult>;
		zip<TResult>(...soucesAndResultSelector: any[]): Observable<TResult>;
		zip<TResult>(second: any[], resultSelector: (left: T, right: any) => TResult): Observable<TResult>;
		asIObservable(): Observable<any>;
		bufferWithCount(count: number, skip?: number): Observable<T>;
		dematerialize<TOrigin>(): Observable<TOrigin>;
		distinctUntilChanged<TValue>(keySelector?: (value: T) => TValue, comparer?: (x: TValue, y: TValue) => boolean): Observable<any>;
		doAction(observer: Observer<T>): Observable<T>;
		doAction(onNext: (value: T) => void, onError?: (exception: any) => void, onCompleted?: () => void): Observable<T>;
		finallyAction(action: () => void): Observable<T>;
		ignoreElements(): Observable<T>;
		repeat(repeatCount?: number): Observable<T>;
		retry(retryCount?: number): Observable<T>;
		scan<TAcc>(seed: TAcc, accumulator: (acc: TAcc, value: T) => TAcc): Observable<TAcc>;
		scan<TAcc>(accumulator: (acc: TAcc, value: T) => TAcc): Observable<TAcc>;
		skipLast(count: number): Observable<T>;
		startWith(...values: T[]): Observable<T>;
		startWith(scheduler: IScheduler, ...values: T[]): Observable<T>;
		takeLast(count: number, scheduler?: IScheduler): Observable<T>;
		takeLastBuffer(count: number): Observable<T>;
		windowWithCount(count: number, skip?: number): Observable<T>;
		defaultIfEmpty(defaultValue?: any): Observable<T>;
		distinct<TKey>(keySelector?: (value: T) => TKey, keySerializer?: (key: TKey) => string): Observable<T>;
		select<T2>(selector: (value: T, index: number) => T2): Observable<T2>;
		selectMany<T2>(selector: (value: T) => Observable<T2>, resultSelector?: (x: any, y: any) => any): Observable<T2>;
		selectMany<T2>(other: Observable<T2>): Observable<T2>;
		skip(count: number): Observable<T>;
		skipWhile(predicate: (value: T, index?: number) => boolean): Observable<T>;
		take(count: number, scheduler?: IScheduler): Observable<T>;
		takeWhile(predicate: (value: T, index?: number) => boolean): Observable<T>;
		where(predicate: (value: T, index?: number) => boolean): Observable<T>;
	}

	interface ObservableStatic {
		amb<T>(...sources: Observable<T>[]): Observable<T>;
		amb<T>(sources: Observable<T>[]): Observable<T>;
	}

	export var Observable: ObservableStatic;
}

var ss: Rx.Observable<string>;
ss = Rx.Observable.amb(ss, ss);
ss = Rx.Observable.amb([ss, ss]);
