{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.767-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "I am trying to add TypeScript to an existing Angular project, and I want to do it slowly, file-by-file over time. Currently, if I change all `.js` files to `.ts` files and compile, I get tons of type errors. I was under the impression that all JS is valid TS, but it seems to be not the case.\r\n\r\nI'd like to add a \"Compile TypeScrypt\" step to our build. To do that, I am using the \"grunt-ts\" plugin, which is pretty well written. The one thing it does which I don't like is to fail the build if the `tsc` command returns any errors. I want the TS files to compile, but only give type warnings. Currently, if only type errors, JS files are correctly generated even though `tsc` reports a compilation failure. Hopefully my wants aren't too strange. (If curious, [here's](https://github.com/grunt-ts/grunt-ts/pull/103) the issue I created and the change I'm working on.)\r\n\r\nSo, I'm trying to write some code which interprets the error messages produced by the `tsc` command. I want something like this, as I believe TS2xxx codes are type-checker errors.\r\n\r\n        var isTypeErrorsOnly = _.foldl(result.errorMsgs, function(memo, errorMsg) {\r\n            return memo || errorMsg.contains(/error TS2\\d+/);\r\n        }, true);\r\n\r\nTo do that, I need to understand the pattern behind these error codes. Can you explain the pattern? I'm looking at the [diagnosticInformationMap.generated.ts](https://typescript.codeplex.com/sourcecontrol/latest#src/compiler/resources/diagnosticInformationMap.generated.ts) file.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-05-19T09:22:04.463-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Support errors vs warnings and different tsc exit codes",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2513
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "The 1000s are syntax errors which will stop JavaScript emit from happening. 2000s are semantic errors that will still cause emit to occur. I believe 1000s and 5000s (compiler flag mis-use) should be the only ones stopping emit from occurring.\n\nI think we've had other requests for the same idea (warnings vs errors and then distinguishing tsc exit codes) but I can't find them now so I'll leave this open as the suggestion for it.",
      "PostedDate": "2014-05-20T15:59:59.32-07:00",
      "Id": 147267
    },
    {
      "Message": "Thanks for your answer and your time, @danquirk!\nI made a patch to the grunt-ts plugin to add a \"failOnTypeError\" toggle. Perhaps you or others are curious about it. - https://github.com/grunt-ts/grunt-ts/pull/103",
      "PostedDate": "2014-05-26T20:00:04.467-07:00",
      "Id": 147961
    }
  ]
}