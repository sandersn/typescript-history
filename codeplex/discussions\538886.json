[
  {
    "Id": "1222294",
    "ThreadId": "538886",
    "Html": "Hello,\r<br />\n<br />\nI think a problem most newcomer run into is that you have to choose between organizing your code with internal module or external module, and because the syntax is not compatible, if you change your mind later your have to rewrite most of your code.\r<br />\n<br />\nAlso, i have noticed both AMD and Require.JS have develeloped bunding tools (require.JS optimiser or browserify) to merge all the files into a big one, like the internal modules do.\r<br />\n<br />\nSo I was wondering, what is the purpose of internal modules (beside confusing people ...), why not keep only external module and have people do the merging using these tools if they want to.\r<br />\n<br />\nI feel there must be some use for internal module but i have not catched it yet ...<br />\n",
    "PostedDate": "2014-03-13T04:30:47.913-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1222495",
    "ThreadId": "538886",
    "Html": "I would recommend starting here <a href=\"https://typescript.codeplex.com/wikipage?title=Modules%20in%20TypeScript\" rel=\"nofollow\">https://typescript.codeplex.com/wikipage?title=Modules%20in%20TypeScript</a>\r<br />\n<br />\nThe purpose is ultimately because of the 2 very different styles of module loading that JavaScript commonly uses.<br />\n",
    "PostedDate": "2014-03-13T12:33:01.507-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1222684",
    "ThreadId": "538886",
    "Html": "I did read the module tutorial before posting here ...\r<br />\n<br />\nI understand this complexity comes from Javascript, that got many different ways of achieving modularization : <br />\n<ul>\n<li>bundling</li>\n<li>Require.JS  (with or without r.js optimizer for bundling)</li>\n<li>\nCommon.JS (with or without browserify for bundling).<br />\n</li>\n</ul>\nThis seems to confuse javascript folks as they are many blogs on the subject (&quot;why choose X over Y&quot;). \r<br />\n<br />\nHowever, I hope TypeScript would bring some kind of clarification here, which it didn't, as you still have to choose between internal or external module early in your project, and if you made the wrong choice, incompatible syntax make the change difficult.<br />\n",
    "PostedDate": "2014-03-14T02:36:49.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1222899",
    "ThreadId": "538886",
    "Html": "Because TypeScript is meant to be a superset of JavaScript and capable of expressing its many different patterns it would be very difficult if not impossible to create a single module syntax to express how differently JavaScript modules can work. In addition, there needs to remain room in the language design to align with future JavaScript versions (specifically ES6 in the near future) so we must be mindful of 'using up' too many syntax options early on. How do you envision a solution looking?<br />\n",
    "PostedDate": "2014-03-14T12:48:00.08-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]