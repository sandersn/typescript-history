{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:28.533-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "In a TypeScript external AMD module, any variables/functions marked with the \"export\" keyword that are typed at the \"root\" level of the file becomes members of the extenal module and can be accessed by the consumer of the module.\r\n\r\nIn my current (based on DurandalJS/KnockoutJS/BreezeJS), we keep all viewmodels in separate external TypeScript modules, and they are downloaded/required when views are loaded into the browser.\r\n\r\nAll the viewmodel modules need to have a specific shape/signature (set of variables/functions) for the system to work, and it would therefore be nice to enforce that the external module itself implements an Interface.\r\n\r\nUnfortunately there is currently (0.8.3.1) no way of making the external module itself implement an Interface.\r\n\r\nI think this feature would really improve type safety in a AMD TypeScript solution.\r\nHoping for the feature to get included in 0.9.0.0.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-04-25T07:24:05.867-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Interface support for external modules",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 3,
    "Id": 950
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the feedback. We have some plans around this area that will hopefully address your needs in the near future. There're a couple TODOs in the language spec for 'export assignment' which we'll be dealing with soon that will give you more control over exactly what is exported.",
      "PostedDate": "2013-04-25T12:35:33.613-07:00",
      "Id": 98496
    },
    {
      "Message": "Seconded - I have been following a pattern where some of my modules are \"factories\" for kinds of object. So in plain JS:\n\nexports.editorFactory = function(...) {\n\n    return /* an editor object */\n}\n\nWould like to be able to declare in TS:\n\ninterface IEditorFactory {\n    editorFactory(): IEditor\n}\n\nAnd then declare a module's external interface as implementing IEditorFactory, to make it self-documenting.",
      "PostedDate": "2013-04-29T05:30:47.693-07:00",
      "Id": 98778
    }
  ]
}