{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:56.067-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "Having tried out examples using bundling, CommonJS and AMD I think the following would be a highly useful feature for the TypeScript compiler.\r\n\r\nWhere the --module flag is set to either CommonJS or AMD, the TypeScript compiler should remove module declarations that match the following rules:\r\n\r\n\r\nThe module is identical to the file name \r\nThe module encloses the entire contents of the file \r\nThis would allow developers to write a single .ts file that would work as a bundled JavaScript file, CommonJS module or AMD module.\r\n\r\nExample\r\n\r\nSayings.ts\r\n\r\n```TypeScript\r\nmodule Sayings {\r\n    export class Greeter {\r\n        greeting: string;\r\n        constructor (message: string) {\r\n            this.greeting = message;\r\n        }\r\n        greet() {\r\n            return \"Hello, \" + this.greeting;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf this file was compiled with either \r\n--module commonjs\r\n\r\n\r\nor\r\n\r\n\r\n\r\n--module amd\r\n\r\n\r\nThe compiler would first remove the module declaration, before transpiling the remaining TypeScript to JavaScript.\r\n\r\n```TypeScript\r\n    export class Greeter {\r\n        greeting: string;\r\n        constructor (message: string) {\r\n            this.greeting = message;\r\n        }\r\n        greet() {\r\n            return \"Hello, \" + this.greeting;\r\n        }\r\n    }\r\n```\r\nThis allows open source projects, for example, to supply a module that includes module declarations that can be included in a CommonJS or AMD program without the consumer needed to first remove all the module declarations manually.\r\n\r\nThis would mean the language specification wouldn't need to suggest different styles for different module patterns.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 0.9.0",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-11-01T08:36:03.797-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Push Module Differences To Compiler",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 4,
    "Id": 359
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "It was my understanding from reading the ES6/Harmony proposals that a file would form an implicit module (much like in CommonJS).\n\nCheck the bottom of this page: http://wiki.ecmascript.org/doku.php?id=harmony:modules_examples\n\nThis would make the suggestions in this bug redundant if TypeScript is to remain a superset of ES6?",
      "PostedDate": "2012-11-27T04:19:43.147-08:00",
      "Id": 83094
    },
    {
      "Message": "I think this makes it even more important to have a single way of writing modules in TypeScript.\n\nCurrently we have to write modules one way for bundled JavaScript and another for AMD / CommonJS - which makes it hard to write a module that will actually be used by different projects.",
      "PostedDate": "2012-12-06T01:30:06.98-08:00",
      "Id": 83674
    }
  ]
}