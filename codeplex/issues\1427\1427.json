{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-08-06T15:15:30.127-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Look at the \"Simple Inheritance\" example under \"play\" on TypeScript's webpage.\r\n```\r\nclass Animal {\r\n    constructor(public name: string) { }\r\n    move(meters: number) {\r\n        alert(this.name + \" moved \" + meters + \"m.\");\r\n    }\r\n}\r\n\r\nclass Snake extends Animal {\r\n    constructor(name: string) { super(name); }\r\n    move() {\r\n        alert(\"Slithering...\");\r\n        super.move(5);\r\n    }\r\n}\r\n\r\nclass Horse extends Animal {\r\n    constructor(name: string) { super(name); }\r\n    move() {\r\n        alert(\"Galloping...\");\r\n        super.move(45);\r\n    }\r\n}\r\n\r\nvar sam = new Snake(\"Sammy the Python\");\r\nvar tom: Animal = new Horse(\"Tommy the Palomino\");\r\n\r\n//sam.move();\r\ntom.move(34);\r\n```\r\n__What happens:__\r\nThe Horse.move method is invoked with 34, the method has no parameters and ignores the input.\r\n\r\n__What should happen:__\r\nThe Animal.move method is invoked with 34.",
    "LastUpdatedDate": "2013-08-06T15:15:30.127-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-06T02:27:53.333-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Invoking a base class method invokes a method in the super class with the same name even though the method signature differs",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1427
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "TypeScript has a structure type system.  Stating that 'tom' is type Animal simply states it has the members of Animal, and as the types are compatible (as Animal is structurally a subtype of Horse) this is allowed.  The underlying implementation/object you are calling is still a 'Horse' instance.  \n\nOverriding a base member with an implementation with fewer arguments (as move in the derived types has) is valid, as an method implementation is free to not use arguments it doesn't need.\n\nThis is by design, and is very different to say C++ where if you cast on object to a base type, then assuming the function is not virtual, you will invoke the base function.\n",
      "PostedDate": "2013-08-06T15:15:23.23-07:00",
      "Id": 108713
    }
  ]
}