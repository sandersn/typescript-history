[
  {
    "Id": "1113787",
    "ThreadId": "464109",
    "Html": "Hello!<br />\n<br />\nFrom the TypeScript specification, &quot;Type queries are useful for capturing anonymous types that are generated by various constructs such as object literals, function declarations, and module declarations.&quot; <br />\n<br />\nIs it possible to capture the inferred output type of a function?<br />\n<br />\nConsider<br />\n<pre><code>var f = function() {\n  return {x: 1};\n}\nvar y = f();</code></pre>\n\nI'd like to refer to the type of y without having to invoke f. Type queries seemed promising, but I can't seem to write the right one.<br />\n<br />\nThanks!<br />\n",
    "PostedDate": "2013-10-29T12:12:21.527-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1117288",
    "ThreadId": "464109",
    "Html": "It's hacky, but the expression <code>false &amp;&amp; f()</code> will have the type of <code>f()</code> without invoking it.<br />\n",
    "PostedDate": "2013-11-04T09:37:02.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1117422",
    "ThreadId": "464109",
    "Html": "\r\n<div dir=\"ltr\">Maybe a new keyword `returnof` would be useful - where returnof works like typeof, expect returnof refers to the type returned by the specified function, rather than the function type.</div>\r\n<div><br clear=\"all\">\r\n<div>Andrew Gaspar</div>\r\n<br>\r\n<br>\r\n<div></div>\r\n</div>\r\n",
    "PostedDate": "2013-11-04T14:01:26.107-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]