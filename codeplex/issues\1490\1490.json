{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Working in the develop branch where we've made a bunch of inference fixes",
    "ClosedDate": "2013-08-12T10:16:36.967-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "I have a project called TSLinq https://github.com/brunolm/TSLinq/tree/master/TSLinq\r\n\r\nOn TypeScript 0.9 somethings worked because it gave me the type `any`.\r\n\r\nNow on version 0.9.1 I am trying to set correct types, but I came across this problem:\r\n\r\n```\r\nvar joinedSimple = [1].AsLinq().Join([1], o => o, i => i, (o, i) => { return { Outter: o, Inner: i } });\r\n```\r\n\r\nThe above code will give me the type `Linq<{ Outter, Inner }>`, which is what I expect. Then I am trying to retrieve the first element of the collection using\r\n\r\n```\r\njoinedSimple.First();\r\n```\r\n\r\nWhich will simply get the value at index `0` on an internal array of type `T`. But instead of `Linq<{ Outter, Inner }>`, it is returning the type `Linq<{}>`.\r\n\r\nWhy is it not getting the correct type? Is it a bug?\r\n\r\nThe full code is on the Github link, `Linq.ts` is the lib and `Linq.test.ts` at `Join` method is the test which is failing.",
    "LastUpdatedDate": "2013-08-12T10:16:36.967-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-12T07:35:58.86-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Wrong type with Generics and anonymous types, bug?",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 1490
  },
  "FileAttachments": [],
  "Comments": []
}