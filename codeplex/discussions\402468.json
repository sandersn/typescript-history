[
  {
    "Id": "938800",
    "ThreadId": "402468",
    "Html": "\r\n<p>I love typescript so far. I'd like to write a function &quot;filter&quot; that basically does es5's filter, but curries it, so you can do something like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">function</span> isDead(person) {\n\t<span style=\"color:blue\">return</span> (person.state == <span style=\"color:#a31515\">&quot;dead&quot;</span>);\n}\n\n<span style=\"color:green\">// deadPeople would pick up its type automatically, via type inference</span>\n<span style=\"color:green\">// var deadPeople: (people:IPerson []): IPerson [];</span>\n<span style=\"color:blue\">var</span> deadPeople = filter(isDead);</pre>\r\n</div>\r\n<p>You can current write a filter that works for this, but you have to cast it or it'll be filled with &quot;all&quot; instead of the real type</p>\r\n<p>&nbsp;</p>\r\n<pre>function filter(iterator:(item:any) =&gt; bool):any [] {\n    return function(items: any[]) {\n        return items.filter(iterator)\n    }\n}</pre>\r\n<p>I'd like it to know the type automatically by using type variables, like this</p>\r\n<p>&nbsp;</p>\r\n<pre>function filter(iterator:(item:a) =&gt; bool):a [] {\n    return function(items: a[]) {\n        return items.filter(iterator)\n    }\n}</pre>\r\n<p>Where &quot;a&quot; means, the type of whatever you pass in. It means that a doesn't have to be any particular type, but the types have to match.&nbsp;</p>\r\n",
    "PostedDate": "2012-11-08T14:10:40.437-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "938844",
    "ThreadId": "402468",
    "Html": "<p>Here's another example. It's currently impossible to define Array.prototype.filter such that the following could catch if you misspelled the property \"name\", even if it exists on IPlayer. The only option is to type \"p\", which kind of defeats the conciseness of fat arrow functions.&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">function</span> playerByName(name:string, players:IPlayer[]) {\r\n  <span style=\"color: blue;\">return</span> players.filter((p) =&gt; (p.nam3 == name))[0] // we misspelled name and the compiler doesn't catch it\r\n}\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2012-11-08T15:07:27.257-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940361",
    "ThreadId": "402468",
    "Html": "<p>Type variables (aka 'generics') are highly requested feature (<a href=\"http://typescript.codeplex.com/workitem/185\">http://typescript.codeplex.com/workitem/185</a>).&nbsp; We're actively working on making this happen.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-11-12T08:24:45.007-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940517",
    "ThreadId": "402468",
    "Html": "\r\n<p>Yes, please! JavaScript would be phenomenal if it simply copied Haskell GADTs.</p>\r\n",
    "PostedDate": "2012-11-12T11:59:08.27-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940538",
    "ThreadId": "402468",
    "Html": "<p>With generics the 'filter' function would work in much the same way as LINQ does in C#.&nbsp; We would also need good support for type parameter inference.</p>",
    "PostedDate": "2012-11-12T13:03:32.91-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940750",
    "ThreadId": "402468",
    "Html": "\r\n<p>When you're actively working on this, why is the status still &quot;proposed&quot; and not &quot;active&quot;? Please involve the community more. :(</p>\r\n",
    "PostedDate": "2012-11-13T00:03:20.107-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]