[
  {
    "Id": "922996",
    "ThreadId": "398354",
    "Html": "\r\n<p>Not sure if this is already possible, I'd like to be able to do this:</p>\r\n<p>class degree extends number { 0..360 }</p>\r\n<p>var rotation: degree;</p>\r\n<p>For a more strong type-checking.</p>\r\n<p>regards</p>\r\n<p>david</p>\r\n",
    "PostedDate": "2012-10-07T01:49:56.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923544",
    "ThreadId": "398354",
    "Html": "<p>Currently, types in TypeScript check conditions that can be checked at compile time and then are removed when the .js is output.&nbsp; This includes using the &lt;Foo&gt;bar form, where you can annotate an expression with a type.&nbsp; Even in this case, we don't insert a runtime cast, we just assume that you \"know what you're doing\".</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-08T10:06:15.933-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924050",
    "ThreadId": "398354",
    "Html": "\r\n<p>I was thinking it'd be great to be able to add &quot;magic sugar&quot; functions to class definitions, to help tsc compiler TypeChecker.</p>\r\n<p>For example:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> degree {\n _assignableFrom(source:any) {\n   <span style=\"color:blue\">return</span> (<span style=\"color:blue\">typeof</span> source === <span style=\"color:#a31515\">&quot;number&quot;</span> ) &amp;&amp; (source &gt;= 0) &amp;&amp; (source &lt;= 360);\n }\n}</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\"><span style=\"font-size:1em\"><br>\r\n</span><span style=\"font-size:1em\">var a:degree = 120; // good</span></div>\r\n<div style=\"color:black; background-color:white\"><br>\r\nTypeChecker.sourceIsRelatableToTarget will try at compile-time to eval and call &quot;_assignableFrom&quot;&nbsp; as a last chance, and if it returns true,&nbsp;<span style=\"font-size:1em\">it will not raise then ErrorReporter.incompatibleTypes&nbsp;</span>\r\n<span style=\"font-size:1em\">and will just emit plain javascript:</span> <span style=\"font-size:1em\">\r\n<br>\r\n</span><span style=\"font-size:1em\">&nbsp;</span></div>\r\n<div style=\"color:black; background-color:white\"><span style=\"font-size:1em\">var a=120;</span></div>\r\n<p><span style=\"font-size:10pt\">&nbsp;</span></p>\r\n",
    "PostedDate": "2012-10-09T08:03:36.883-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "925003",
    "ThreadId": "398354",
    "Html": "<p>The problem with this is that it could only be enforced on constants.&nbsp; In the example \"var a: degree = 120;\", if the constant were instead the result of calling a function, we could not at compile time know whether that returns a value that is in range or not.&nbsp; Since TypeScript does not emit any runtime checks, the \"degree\" constraint would then be defeated in most cases.&nbsp;</p>",
    "PostedDate": "2012-10-10T19:16:56.11-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]