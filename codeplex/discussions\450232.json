[
  {
    "Id": "1069137",
    "ThreadId": "450232",
    "Html": "If you're compelled to use 0.9.0.1 like I am, there's a couple of things you can do to make it tolerable:<br />\n<br />\n&lt;del&gt;Despite what I've read, Web Essentials is OK to use - in fact, the JS preview window is <em>essential</em> to use as a means to detect when either the VS language service or the compiler is running. The real issue is that&lt;/del&gt;<br />\n<br />\n(codeplex doesn't seem to support strikethough -- ignore the above paragraph -- web essentials is at fault)<br />\n<br />\nWhen using Web Essentials coupled with preview window and compile on save, the TSC compiler does not batch - it runs in parallel with other concurrent instances of itself! if you save a TS file twice in quick succession, two tsc.exe instances will be launched. If you make three quick changes with subsequent saves, there will be three compilers melting your computer, and so on. If this is also run in parallel with VS language services figuring out what squiggley lines to put where, it's going to entirely melt your CPU.<br />\n<br />\nThis is easy to validate. Open Task Manager, sort by CPU then go into any random .ts file and hit ctrl+s twice. Return to Task Manager. Laugh, curse then read the following points:<br />\n<h2>Summary</h2>\n<ul>\n<li>Disable Resharper's typescript support completely (if you're running 8.x)</li>\n<li>If you've made changes to a TS file, let VS language services catch up <em>before</em> you save.</li>\n<li>Never save more than one TS file at a time. You must wait for the compiler to complete.</li>\n<li>\nWatch VS's memory usage - if it reaches 2GB or so, restart VS (sucks, yes.)<br />\n</li>\n</ul>\nUPDATE<br />\n<h2>Monitor compilation via VS Status Bar</h2>\nHere's a powershell script to paste into the NuGet package manager console that will update the VS status bar with the number of concurrent TSC compilers running. It might be easier to use a sound cue, or just writing out text to the PM console. Hell, if you wanted to get fancy, you could have the script disable saving until the compiler is done. <br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:OrangeRed;\">$q</span> <span style=\"color:Gray;\">=</span> <span style=\"color:#A31515;\">&quot;Select * From __InstanceCreationEvent within 1 Where TargetInstance ISA &#39;Win32_Process&#39; and TargetInstance.Name = &#39;tsc.exe&#39;&quot;</span>\nregister<span style=\"color:Gray;\">-</span>wmievent <span style=\"color:Gray;\">-</span>sourceidentifier tsc.started <span style=\"color:Gray;\">-</span>query <span style=\"color:OrangeRed;\">$q</span>\nregister<span style=\"color:Gray;\">-</span>wmievent <span style=\"color:Gray;\">-</span>sourceidentifier tsc.ended <span style=\"color:Gray;\">-</span>query <span style=\"color:OrangeRed;\">$q</span>.replace(<span style=\"color:#A31515;\">&quot;Creation&quot;</span>,<span style=\"color:#A31515;\">&quot;Deletion&quot;</span>)\n<span style=\"color:OrangeRed;\">$tsc</span> <span style=\"color:Gray;\">=</span> 0 <span style=\"color:Green;\"># counter for concurrent TSC compilers</span>\nRegister<span style=\"color:Gray;\">-</span>EngineEvent <span style=\"color:Gray;\">-</span>SourceIdentifier tsc.started <span style=\"color:Gray;\">-</span>Action { <span style=\"color:OrangeRed;\">$global:tsc</span><span style=\"color:Gray;\">++</span>; <span style=\"color:OrangeRed;\">$dte</span>.statusbar.text <span style=\"color:Gray;\">=</span> <span style=\"color:#A31515;\">&quot;TSC compiling [$tsc instance(s)]&quot;</span> }\nRegister<span style=\"color:Gray;\">-</span>EngineEvent <span style=\"color:Gray;\">-</span>SourceIdentifier tsc.ended <span style=\"color:Gray;\">-</span>Action { <span style=\"color:OrangeRed;\">$global:tsc--</span>; <span style=\"color:Blue;\">if</span> (<span style=\"color:OrangeRed;\">$tsc</span> <span style=\"color:Gray;\">-gt</span> 0) { <span style=\"color:OrangeRed;\">$dte</span>.statusbar.text <span style=\"color:Gray;\">=</span> <span style=\"color:#A31515;\">&quot;TSC compiling [$tsc instance(s)]&quot;</span> } <span style=\"color:Blue;\">else</span> { <span style=\"color:OrangeRed;\">$dte</span>.statusbar.text <span style=\"color:Gray;\">=</span> <span style=\"color:#A31515;\">&quot;Ready&quot;</span> } }\r\n</pre></div>Hope this helps.<br />\n",
    "PostedDate": "2013-07-16T11:21:11.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069444",
    "ThreadId": "450232",
    "Html": "Hi,<br />\n<br />\nWe started using TypeScript a couple of month ago and as a whole it does improve quality of the produced Javascript. The last week has been spend implementing the new 0.9.0.1 version and it has been problematic to say the least. One time I decided to turn on the 'Compile typescript on build' and started a build. It totally locked up my complete system for about 4 minutes (and I mean my entire PC became unresponsive).<br />\n<br />\nPerformance was so poor that we almost decide to stop using TypeScript all together. We use TypeScript in combination with T4 code generation templates. We generate .ts files for our DataModels and DataSources which are used in Kendo UI (Telerik). The problem here was that TypeScript does not automatically compile when it is generated via T4. So I had to cook up a solution that would start the Compile of TypeScript files after generation of the .ts files.<br />\n<br />\nAnother problem was that we would also like to minify the generated JavaScript. This had to be done in a separate loop calling the CodePlex Ajax Minifier (there is no commandline version of web essentials available, is there?). So we ended up writing some C# code for the templates which use the System.Diagnostics.Process class to start the 'tsc.exe' and 'AjaxMin.exe'. Below you'll see the script that we created to start the processes (including a progress status bar).<br />\n<br />\nIn the routines a Metadata container is used that has all the metadata of our datamodel. It is a class that uses reflection to obtain all the entities and properties from our datamodel which then can be enumerated in the T4 script. So people who want to use our solution will have to come up with something to replace that but further there should not be a problem to run the TypeScript Compiler and Minifier this way.<br />\n<br />\nWith this solution in place the performance is bareable.<br />\n<br />\nRegards<br />\nPaul<br />\n<pre><code>&lt;#+ \n\nDTE2 m_DTE2;\n\nDTE2 DTE2\n{\n    get\n    {\n        if(m_DTE2 == null)\n        {\n            m_DTE2 = (EnvDTE80.DTE2)System.Runtime.InteropServices.Marshal.GetActiveObject(&quot;VisualStudio.DTE.11.0&quot;);\n        }\n\n        return m_DTE2;\n    }\n}\n\nEnvDTE.StatusBar StatusBar\n{\n    get\n    {\n        return DTE2.StatusBar;\n    }\n}\n\nvoid ProcessTypeScripts(string fileNameExtension)\n{\n    List&lt;System.Diagnostics.Process&gt; processes = new List&lt;System.Diagnostics.Process&gt;();\n\n    foreach (EntityMetadata entity in Metadata.MetadataContainer.Entities)\n    {\n        Project project = null;\n\n        try\n        {\n            string outputFileName = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), entity.Name + fileNameExtension);\n\n            FileInfo fileInfo = new FileInfo(outputFileName);\n\n            processes.Add(CompileTypeScriptFile(fileInfo.FullName));\n        }\n        catch(Exception ex)\n        {\n            MessageBox.Show(project.FullName);\n        }\n    }\n\n    WaitForAllToFinish(processes, &quot;Running typescript compiler&quot;);\n}\n\nvoid ProcessMinifiers(string fileNameExtension)\n{\n    List&lt;System.Diagnostics.Process&gt; processes = new List&lt;System.Diagnostics.Process&gt;();\n\n    foreach (EntityMetadata entity in Metadata.MetadataContainer.Entities)\n    {\n        Project project = null;\n\n        try\n        {\n            string outputFileName = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), entity.Name + fileNameExtension);\n\n            FileInfo fileInfo = new FileInfo(outputFileName);\n\n            processes.Add(MinifyJavascripts(fileInfo.FullName));\n        }\n        catch(Exception ex)\n        {\n            MessageBox.Show(project.FullName);\n        }\n    }\n\n    WaitForAllToFinish(processes, &quot;Minify javascripts&quot;);\n}\n\n void WaitForAllToFinish(List&lt;System.Diagnostics.Process&gt; processes, string reason)\n{\n    Queue queue = new Queue();\n    int maxToRun = 8; // We hebben 8 processoren in ons systeem.\n\n    foreach (System.Diagnostics.Process queueItem in processes)\n    {\n        queue.Enqueue(queueItem);\n    }\n\n    int totalProcesses = queue.Count;\n\n    List&lt;System.Diagnostics.Process&gt; runningProcesses = new List&lt;System.Diagnostics.Process&gt;();\n\n    while(queue.Count &gt; 0 || runningProcesses.Count &gt; 0)\n    {\n        StatusBar.Progress(true, reason, totalProcesses - queue.Count - runningProcesses.Count, totalProcesses);\n\n        if(queue.Count &gt; 0 &amp;&amp; runningProcesses.Count &lt; maxToRun)\n        {\n            System.Diagnostics.Process processToStart = (System.Diagnostics.Process)queue.Dequeue();\n            if(processToStart.Start())\n            {\n                runningProcesses.Add(processToStart);\n            }\n        }\n\n        foreach (System.Diagnostics.Process process in runningProcesses.ToArray())\n        {\n            if(process.HasExited) // process finished\n            {\n                runningProcesses.Remove(process);\n            }\n        }\n\n        System.Threading.Thread.Sleep(100);\n    }\n\n    StatusBar.Progress(false);\n}\n\nSystem.Diagnostics.Process CompileTypeScriptFile(string fullFileName)\n{\n    var process = new System.Diagnostics.Process\n    {\n        StartInfo = new ProcessStartInfo\n        {\n            FileName = &quot;tsc.exe&quot;,\n            Arguments = string.Format(&quot;--target ES5 \\&quot;{0}\\&quot;&quot;, fullFileName)\n        }\n    };\n\n    // process.StartInfo.CreateNoWindow = true;\n    process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;\n    return process;\n}\n\nSystem.Diagnostics.Process MinifyJavascripts(string fullFileName)\n{\n    string solutionPath = Path.GetDirectoryName(DTE2.Solution.FullName);\n    string fullMinFileName = Path.Combine(Path.GetDirectoryName(fullFileName), Path.GetFileNameWithoutExtension(fullFileName) + &quot;.min.js&quot;);\n\n    string programFilesPath = Environment.GetEnvironmentVariable(&quot;ProgramFiles(x86)&quot;);\n    string minifierPath = System.IO.Path.Combine(programFilesPath, &quot;Microsoft&quot;, &quot;Microsoft Ajax Minifier&quot;, &quot;AjaxMin.exe&quot;);\n\n    System.Diagnostics.Process process = null;\n\n    if(System.IO.File.Exists(minifierPath))\n    {\n        process = new System.Diagnostics.Process\n        {\n            StartInfo = new ProcessStartInfo\n            {\n                FileName = minifierPath,\n                Arguments = string.Format(&quot;-JS {0} -out {1}&quot;, fullFileName, fullMinFileName)\n            }\n        };\n\n        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;\n    }\n    else\n    {\n        MessageBox.Show(&quot;Ajax minifier not installed. goto to: https://ajaxmin.codeplex.com/&quot;);\n    }\n\n    return process;\n}\n\n#&gt;</code></pre>\n\n",
    "PostedDate": "2013-07-17T02:55:40.163-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069447",
    "ThreadId": "450232",
    "Html": "Here's an example of how we call this in our DataSources.tt:<br />\n<pre><code>&lt;#@ output extension=&quot;.txt&quot; #&gt;\n&lt;#@ Include file=&quot;$(SolutionDir)Common.T4\\Assemblies.ttinclude&quot; #&gt;&lt;#   \n    try\n    {   // START main try\n        // Initialization Output Manager\n        Manager outputManager = Manager.Create(Host, GenerationEnvironment);\n\n        // Start Costruction CodeModelTree\n        IServiceProvider hostServiceProvider = (IServiceProvider)Host;\n\n        string directoryPath = Host.ResolvePath(@&quot;..\\..\\Projecten.Model&quot;);\n        string assemblyName = directoryPath + @&quot;\\bin\\Model\\Projecten.Model.dll&quot;;\n        string fileTypescriptNameExtension = &quot;DataSource.generated.ts&quot;;\n        string fileMinifiedNameExtension = &quot;DataSource.generated.min.js&quot;;\n        string fileTypescriptOutputExtension = &quot;DataSource.generated.js&quot;;\n\n        Assembly assembly = Assembly.LoadFrom(assemblyName);\n\n        Metadata.MetadataContainer.AddAssembly(assembly);\n\n        try\n        {\n            foreach (EntityMetadata entity in Metadata.MetadataContainer.Entities)\n            {\n                if(entity != null)\n                {\n                    string outputJavascriptFileName = entity.Name + fileTypescriptOutputExtension;\n                    string outputMinifiedFileName = entity.Name + fileMinifiedNameExtension;\n                    string outputTypeScriptFileName = entity.Name + fileTypescriptNameExtension;\n\n                    outputManager.StartNewFile(outputJavascriptFileName); // Creeer een lege javascript file.\n                    outputManager.StartNewFile(outputMinifiedFileName); // Creeer een lege minified file.\n                    outputManager.StartNewFile(outputTypeScriptFileName);\n\n#&gt;\n// &lt;reference path=&quot;../Scripts/contractors/externals.ts&quot; /&gt;\n/// &lt;reference path=&quot;../DataModels/&lt;#= entity.Name #&gt;DataModel.generated.ts&quot; /&gt;\n\nmodule &lt;#= entity.Name #&gt;DataSources\n{\n    ///&lt;summary&gt;\n    /// Returns the datasource for &lt;#= entity.Name #&gt;\n    /// When id = undefined a datasource for a complete list is returned\n    /// When id != undefined a datasource for the id is returned\n    ///&lt;/summary&gt;\n    export function &lt;#= entity.Name #&gt;DataSource(id: number) {\n        return new kendo.data.DataSource\n        ({\n            transport: {\n                read: {\n                    cache: false,\n                    dataType: 'jsonp',\n                    url: function() {\n                        if(id == undefined) {\n                            return contractors.pathname + &quot;&lt;#= entity.Name #&gt;/Get&quot;;\n                        }\n                        else {\n                            return contractors.pathname + &quot;&lt;#= entity.Name #&gt;/Get/&quot; + id;\n                        }\n                    }\n                },\n                update: {\n                    url: function(item) {\n                        return contractors.pathname + &quot;&lt;#= entity.Name #&gt;/Update/&quot; + item.Id;\n                    },\n                    dataType: 'jsonp',\n                    type: &quot;POST&quot;\n                },\n                destroy: {\n                    url: function(item) {\n                        return contractors.pathname + &quot;&lt;#= entity.Name #&gt;/Delete/&quot; + item.Id;\n                    },\n                    dataType: 'jsonp',\n                    type: &quot;POST&quot;\n                },\n                create: {\n                    url: contractors.pathname + &quot;&lt;#= entity.Name #&gt;/Create&quot;,\n                    dataType: 'jsonp',\n                    type: &quot;POST&quot;\n                },\n                parameterMap: function (data, operation) {\n                    if (operation === &quot;create&quot;) {\n                        data.TypeName = '&lt;#= entity.Name #&gt;';\n                    }\n                    return { data: kendo.stringify(data) };\n                }\n            },\n            pageSize: 25,\n            serverPaging: true,\n            serverSorting: true,\n            serverFiltering: true,\n            batch: false,\n            schema: {\n                data: &quot;Data.Data&quot;,\n                total: &quot;Data.Size&quot;,\n                errors: &quot;Errors&quot;,\n                model: &lt;#= entity.Name #&gt;Models.&lt;#= entity.Name #&gt;Model()\n            }\n        });\n    }\n\n&lt;#\n                    foreach (var property in entity.AllProperties)\n                    {\n                        if(property != null)\n                        {\n                            if(property.IsEntitySet)\n                            {\n#&gt;\n    ///&lt;summary&gt;\n    /// Returns the grid datasource for subset &lt;#= property.Name #&gt; of entity &lt;#= entity.Name #&gt;\n    /// Serverside paging and sorting are supported.\n    ///&lt;/summary&gt;\n    export function &lt;#= entity.Name #&gt;&lt;#= property.Name #&gt;GridDataSource(parameters) {\n        return new kendo.data.DataSource\n        ({\n            transport: {\n                read: {\n                    cache: false,\n                    dataType: 'jsonp',\n                    url: contractors.pathname + &quot;&lt;#= entity.Name #&gt;/Get&lt;#= property.Name #&gt;&quot;,\n                },\n                update: {\n                    url: contractors.pathname + &quot;&lt;#= entity.Name #&gt;/Update&lt;#= property.Name #&gt;&quot;,\n                    dataType: 'jsonp'\n                },\n                destroy: {\n                    url: contractors.pathname + &quot;&lt;#= entity.Name #&gt;/Delete&lt;#= property.Name #&gt;&quot;,\n                    dataType: 'jsonp'\n                },\n                create: {\n                    url: contractors.pathname + &quot;&lt;#= entity.Name #&gt;/Add&lt;#= property.Name #&gt;&quot;,\n                    dataType: 'jsonp'\n                },\n                parameterMap: function (data, operation) {\n                    if (operation === &quot;read&quot;) {\n                        data.parentId = parameters.parentId;\n                    }\n\n&lt;#\n                                if(property.IsPaired)\n                                {\n#&gt;\n                    if (operation === &quot;create&quot;) {\n                        // Vul het id van de foreign entity\n                        data.&lt;#= property.PairedTo #&gt;Id = parameters.parentId;\n                        data.TypeName = '&lt;#= property.FirstGenericTypeString #&gt;';\n                    }\n\n&lt;#\n                                }\n#&gt;\n                    if(parameters.load != undefined) {\n                        $.extend(data, { load: parameters.load } );\n                    }\n\n                    return { data: kendo.stringify(data) };\n                }\n            },\n            batch: false,\n            pageSize: 25,\n            serverPaging: true,\n            serverSorting: true,\n            serverFiltering: true,\n            batch: true,\n            schema: {\n                data: &quot;Data.Data&quot;,\n                total: &quot;Data.Size&quot;,\n                model: parameters.model\n                //&lt;#= property.FirstGenericTypeString #&gt;Model()\n            }\n        });\n    }\n&lt;#\n                        }\n                    }\n                }\n#&gt;\n}\n&lt;#\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n#&gt;\n            // ERROR &lt;#= ex.Message #&gt; \n            // STACK &lt;#= ex.StackTrace #&gt;\n&lt;#\n        }\n\n        outputManager.Process(true); //write files to disk\n\n        ProcessTypeScripts(fileTypescriptNameExtension);\n        ProcessMinifiers(fileTypescriptOutputExtension);\n    } // END main try\n    catch(Exception ex)\n    {\n        MessageBox.Show(&quot;Error in DataSources.tt: &quot; + Environment.NewLine + Environment.NewLine + ex.ToString(), &quot;Error in Transformation&quot;);\n    }\n#&gt;\n\n&lt;#+ \n\n #&gt;</code></pre>\n\n",
    "PostedDate": "2013-07-17T03:00:32.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069535",
    "ThreadId": "450232",
    "Html": "\r\n<div dir=\"ltr\">This is why my TypeScript building and minifying is all done outside of Visual Studio, with Node.js and Grunt.</div>\r\n<div><br clear=\"all\">\r\n<div>\r\n<div dir=\"ltr\"><b><font face=\"arial black, sans-serif\" color=\"#666666\">Mark Rendle</font></b>\r\n<div><font><i>Founder & CEO</i></font></div>\r\n<div><font><i>Oort Corporation</i></font></div>\r\n<div><font><i>Makers of</i> <a href=\"https://zud.io/\" target=\"_blank\"><b><font color=\"#0000ff\">Zudio</font></b></a></font></div>\r\n</div>\r\n</div>\r\n<br>\r\n<br>\r\n<div></div>\r\n</div>\r\n",
    "PostedDate": "2013-07-17T07:14:03.36-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069576",
    "ThreadId": "450232",
    "Html": "This is why I'm avoiding 0.9 entirely until they resolve it! 0.8 works perfectly for me and compiles really fast. Not screwing-up my workflow just for a few extra features.<br />\n",
    "PostedDate": "2013-07-17T08:46:17.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069596",
    "ThreadId": "450232",
    "Html": "For what it's worth, Web Essentials 2012 has the same problem: Hitting ctrl+s spawns a new compiler process, irrespective of whether it's already compiling. It sounds like it's a WE problem, but it must be more complex to fix than it appears. <br />\n",
    "PostedDate": "2013-07-17T09:14:45.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069641",
    "ThreadId": "450232",
    "Html": "I've never had a good experience with Web Essentials. It has always locked up VS for me, or done something I didn't want/expect sadly. I'm sure it's not a WE issue directly, but I can live without its features so it's no great loss.<br />\n",
    "PostedDate": "2013-07-17T10:42:46.797-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1074307",
    "ThreadId": "450232",
    "Html": "I was running into the same thing, before I came to the same conclusion: Web Essentials is responsible for stalling VS with TypeScript 0.9. The fix for this was basically what's in the first post (disable Web Essentials compile on save, compile all on build, and preview window), however, I also had to make sure that TypeScript's built-in compile on save was enabled AND I had to follow the instructions at the following link to make sure that my .csproj had the appropriate MsBuild targets: <a href=\"https://typescript.codeplex.com/wikipage?title=Compile-on-save&amp;referringTitle=Documentation\" rel=\"nofollow\">https://typescript.codeplex.com/wikipage?title=Compile-on-save&referringTitle=Documentation</a><br />\n",
    "PostedDate": "2013-07-29T06:53:37.1-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]