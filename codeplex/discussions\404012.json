[
  {
    "Id": "944811",
    "ThreadId": "404012",
    "Html": "\r\n<p>There is such a thing as a &quot;library&quot;. For example, in Java it is .jar file, in ActionScript - .swc file and so on.<br>\r\nIn order to connect library/libraries to Java/ActionScript project I need to specify instructions for compiler - where compiler should to looking for libraries.<br>\r\nAnd I do not need to specify the relative path to the library file in each source file which use library.<br>\r\n<br>\r\nIt would be great to be able to give instructions to the compiler and do not specify relative paths relative to the current source file.<br>\r\nAt least, this applies to *.d.ts files.<br>\r\nAnd if it be possible to create a &quot;library&quot; from .ts files, it will generally be fine :)</p>\r\n",
    "PostedDate": "2012-11-20T13:29:58.497-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "945203",
    "ThreadId": "404012",
    "Html": "\r\n<p>Thanks for the suggestion.</p>\r\n<p>TypeScript doesn't currently have a project system per se, yet, which I think would help with what you're suggesting, by giving some defaults to where things like .d.ts files are found.&nbsp;</p>\r\n<p>As for the bundling, TypeScript compiles down to JavaScript, so if there are ways to bundle JS, you should get that &quot;for free&quot;</p>\r\n",
    "PostedDate": "2012-11-21T08:10:42.443-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "945331",
    "ThreadId": "404012",
    "Html": "\r\n<p>&gt;As for the bundling, TypeScript compiles down to JavaScript</p>\r\n<p>Yes. I understand this. But I mean some other. Because ActionScript <span id=\"result_box\" lang=\"en\">\r\n<span>closest for me so I will explain using its terms. There is </span></span><span id=\"result_box\" lang=\"en\"><span>opportunity to create .swc library file (like .jar file for Java). I can use this .swc file when write code and use\r\n</span></span><span id=\"result_box\" lang=\"en\"><span>built-in classes in my new code. I.e.\r\n</span></span><span id=\"result_box\" lang=\"en\"><span>I can create some library, combine its code into single file and use this single file in several projects. And\r\n</span></span><span id=\"result_box\" lang=\"en\"><span>I can be sure that I use same code in all projects.\r\n</span></span><span id=\"result_box\" lang=\"en\"><span>Also,</span> <span>if I make</span>\r\n<span>changes in the</span> <span>library</span>, then I can <span>create a</span>\r\n<span>new version of &quot;library&quot; file and </span><span>I will have to</span> <span>\r\nupdate single</span> <span>file. Yes, I understand that I can just copy .ts files and to have same result. But using of &quot;single library file&quot; is more\r\n</span></span><span id=\"result_box\" lang=\"en\"><span>convenient. Second advantage of library is that it contains already compiled code. I.e. compiler no need to compile it again. In result time of compiling is less. Third advantage of library (vs JavaScript\r\n library which will be included into HTML page) is that result application contains only required code from library and not all library.</span></span></p>\r\n<p><span lang=\"en\"><span>Theoretically it is possible to find other advantages of such way. Basically, suggestion about &quot;library&quot; was just\r\n</span></span><span id=\"result_box\" lang=\"en\"><span>fantasy</span> <span>about possible solution</span><span>. For me more important to have ability to specify &quot;source&quot; paths for compiler in order to not write something like<br>\r\n</span></span></p>\r\n<p><span lang=\"en\"><span>/// &lt;reference path=&quot;../../../../libs/</span></span>google.maps.d.ts&quot; /&gt;</p>\r\n<p>in each .ts file which use Google Maps library</p>\r\n<p><span lang=\"en\"><span><br>\r\n</span></span></p>\r\n",
    "PostedDate": "2012-11-21T12:42:51.4-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "945551",
    "ThreadId": "404012",
    "Html": "\r\n<div bgcolor=\"#FFFFFF\">\r\n<div>On 21/11/2012 20:43, kostiknoir wrote:<br>\r\n</div>\r\n<blockquote type=\"cite\"><span lang=\"en\"><span>Theoretically it is possible to find other advantages of such way. Basically, suggestion about &quot;library&quot; was just\r\n</span></span><span>fantasy</span> <span>about possible solution</span>. For me more important to have ability to specify &quot;source&quot; paths for compiler in order to not write something like<br>\r\n<div><span lang=\"en\"><span></span></span>\r\n<p><span lang=\"en\"><span>/// &lt;reference path=&quot;../../../../libs/</span></span>google.maps.d.ts&quot; /&gt;</p>\r\n<p>in each .ts file which use Google Maps library</p>\r\n</div>\r\n</blockquote>\r\nI have been using an import pattern as a way to limit this that might help. I create an import.ts file that contains the reference paths for anything external to what I am working on and just use that instead of specifying the dependency in each file of a library/application.\r\n For example, if I have dependencies app-&gt;lib-&gt;node, the app import includes lib & node .d.ts files but the lib import.ts just references the node .d.ts. All other .ts files reference the import files.<br>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2012-11-22T02:19:32.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "945651",
    "ThreadId": "404012",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>kostiknoir wrote:</strong><br>\r\n<p>&gt;<span id=\"result_box\" lang=\"en\">Yes, I understand that I can just copy .ts files and to have same result. But using of &quot;single library file&quot; is more\r\n</span><span id=\"result_box\" lang=\"en\">convenient.</span></p>\r\n</blockquote>\r\n<p>&nbsp;</p>\r\n<p>This is an excellent suggestion - <a href=\"http://aspnet.uservoice.com/forums/41199-general-asp-net/suggestions/3229143-support-a-javascript-project-type-in-visual-studio\">\r\none that I've been thinking about myself</a>:</p>\r\n<ol>\r\n<li>When a TypeScript project is built, it creates <strong>&quot;.js&quot;</strong> files in the bin directory - one for each corresponding &quot;.ts&quot; file in the project.\r\n</li><li>It also creates a single <strong>&lt;MyProject&gt;.d.ts</strong> file in the bin directory, containing all the definitions across all &quot;.ts&quot; files in the project.\r\n</li><li>When a new TypeScript project is created, it should be possible to right-click on the project and go\r\n<strong>&quot;Add Reference&quot;</strong> and select any existing TypeScript project in the solution, or browse to and add a reference to a &quot;d.ts&quot; file.\r\n</li><li>Once a TypeScript project is referenced via this mechanism, then all types in the referenced project become available to the referrer.\r\n</li></ol>\r\n<p>Further points for consideration</p>\r\n<ul>\r\n<li>It is probably important to produce multiple JavaScript (&quot;.js&quot;) files as output, rather than a single file, because of AMD reasons.&nbsp;Project settings could provide an option for producing a single &quot;.js&quot; file if required.\r\n</li><li>When the project is built in release mode the output is minified. </li><li>There is no longer any need for &lt;reference&gt; includes, which is rather an Achilles Heel at the moment, since we are relying on an XML comment to carry out important work.\r\n</li></ul>\r\n<p>Another alternative is to produce a single packaged output file (as outlined by Kostiknoir and also in the link above), which contains all the &quot;.js&quot; files, &nbsp;the &quot;d.ts&quot; file, as well as any HTML and CSS files in the project. This new output file could\r\n not only be used in other TypeScript projects, but also web projects such as ASP.Net Web Applications.</p>\r\n<p>Noel</p>\r\n",
    "PostedDate": "2012-11-22T06:06:34.253-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "945894",
    "ThreadId": "404012",
    "Html": "\r\n<p>&gt;It is probably important to produce multiple JavaScript (&quot;.js&quot;) files as output, rather than a single file</p>\r\n<p>1) AMD idea is good but it is, in my opinion, <span id=\"result_box\" lang=\"en\">\r\n<span>it is too</span> <span>idealistic</span> <span>idea</span></span><span id=\"result_box\" lang=\"en\"><span> (when each module loaded as separate file). Reason very simple - total time of loading of all files. So I'm doubt that somebody deploy project which\r\n contains, for example, 100 not concatenated JS files.</span></span></p>\r\n<p><span lang=\"en\"><span>So for me AMD is just way not write:</span></span></p>\r\n<p><span lang=\"en\"><span>var myLib = myLib || {};</span></span></p>\r\n<p><span lang=\"en\"><span>var myLib.view = myLib.view || {};</span></span></p>\r\n<p><span lang=\"en\"><span>and so on.</span></span></p>\r\n<p><span lang=\"en\"><span>I'm just place files in appropriate directories and &quot;build system/compiler&quot; do all job\r\n</span></span><span id=\"result_box\" lang=\"en\"><span>for me.</span></span></p>\r\n<p><br>\r\n2) &gt;because of AMD reasons</p>\r\n<p>Now, I use such way for TypeScript based projects: write TypeScript code =&gt; call TypeScript compiler (with --module amd) =&gt; in result I get separated JS files =&gt;\r\n<span id=\"result_box\" lang=\"en\"><span>pass these</span> <span>files to r.js =&gt; in result I have minified and combined single release .js file</span></span></p>\r\n<p><span lang=\"en\"><span>Everything this occurs with help ANT.</span></span></p>\r\n<p><br>\r\nIf to look into such release .js file then there are constructions like:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>define(<span style=\"color:#a31515\">&quot;myApp/view/MyListView&quot;</span>,[<span style=\"color:#a31515\">&quot;require&quot;</span>,<span style=\"color:#a31515\">&quot;exports&quot;</span>],<span style=\"color:blue\">function</span>(e,t){<span style=\"color:blue\">var</span> n=<span style=\"color:blue\">function</span>().........),\n\ndefine(<span style=\"color:#a31515\">&quot;myApp/view/MyOtherListView&quot;</span>,[<span style=\"color:#a31515\">&quot;require&quot;</span>,<span style=\"color:#a31515\">&quot;exports&quot;</span>],<span style=\"color:blue\">function</span>(e,t){<span style=\"color:blue\">var</span> n=<span style=\"color:blue\">function</span>().........),\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>and so on.</p>\r\n<p>I.e. r.js create named AMD modules.</p>\r\n<p>Such pattern &quot;file path equals class namespace&quot; exists at least in Java and ActionScript. And when I open directory myApp/views and see there files View1.as, View2.as then I sure that file View1.as contains myApp.views.View1 class. And so on.</p>\r\n<p>Similar thing make brunch.io.</p>\r\n<p>==========</p>\r\n<p><span id=\"result_box\" lang=\"en\"><span>If to continue</span> <span>to dream</span> about\r\n<span>TypeScript &quot;</span><span>library&quot; then there is possible such way:</span></span></p>\r\n<p><span lang=\"en\"><span>compile TypeScript library mean that TypeScript compiler create &quot;library&quot; files which contains something like:</span></span></p>\r\n<p><span lang=\"en\"><span>&nbsp;</span></span></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> classes: any = {};\nclasses[<span style=\"color:#a31515\">&quot;myApp/view/ListView&quot;</span>] = <span style=\"color:#a31515\">'define(&quot;myApp/view/MyListView&quot;,[&quot;require&quot;,&quot;exports&quot;],function(e,t){var n=function().........)'</span>;\nclasses[<span style=\"color:#a31515\">&quot;myApp/view/MyOtherListView&quot;</span>] = <span style=\"color:#a31515\">'define(&quot;myApp/view/MyOtherListView&quot;,[&quot;require&quot;,&quot;exports&quot;],function(e,t){var n=function().........)'</span>;\n.... <span style=\"color:green\"><br>// and so on</span>\n</pre>\r\n</div>\r\n<p>also such files should contains definitions (like in *.d.ts files) for inner classes/modules.</p>\r\n<p>In result in my code I will just import &quot;myApp/view/ListView&quot; and use it,. And my application release file will contains only code related to &quot;myApp/view/ListView&quot; and will not contains code of all library.</p>\r\n<p>But in order to implement this, TypeScript compiler should support &quot;source path(s)&quot;.</p>\r\n<p>Also <span id=\"result_box\" lang=\"en\"><span>it would be good to have ability to &quot;exclude&quot; some code from app release file.</span></span></p>\r\n<p>&nbsp;</p>\r\n<p>&gt;as well as any HTML and CSS files in the project</p>\r\n<p>Mmm.. :) I'm doubt. Yes. I'm agree that this is cool ability (like single swf file with all resources) but it is, in my opinion,&nbsp;\r\n<span id=\"result_box\" lang=\"en\"><span>beyond the scope of</span></span> TypeScript.</p>\r\n<p>&nbsp;</p>\r\n<p>=============</p>\r\n<p>By the way, for admins: rich text editor have not &quot;clear format&quot; button</p>\r\n",
    "PostedDate": "2012-11-22T15:22:52.843-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]