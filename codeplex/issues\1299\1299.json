{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This has been fixed",
    "ClosedDate": "2013-07-17T18:19:21.6-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "When saving some sample files using Typescript's Compile-on-save feature, the output is different to the output from the output generated by building:\r\n\r\nSpecifically, imports seem to go missing when compiled through saving.\r\n\r\nTypescript test file:\r\n``` Typescript\r\n\r\nimport Greeter = module(\"file1\");\r\nimport Shooter = module(\"file2\");\r\n\r\nclass Hello extends Greeter {\r\n\thello() {\r\n\t\treturn \"Hello\";\r\n\t}\r\n}\r\n\r\nvar stuff = new Hello();\r\nconsole.log(stuff.greet(), stuff.hello(), \"World\");\r\n\r\nvar test2 = <Shooter><any> {};\r\n\r\nconsole.log(test2);\r\nconsole.log(test2.shoot);\r\n\r\n```\r\n\r\nJavaScript output (highlighting the lines that do not exist when saved):\r\n``` JavaScript\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar Greeter = require(\"./file1\"); // <-- This line does not exist\r\nvar Shooter = require(\"./file2\"); // <-- This line does not exist\r\n\r\nvar Hello = (function (_super) {\r\n    __extends(Hello, _super);\r\n    function Hello() {\r\n        _super.apply(this, arguments);\r\n    }\r\n    Hello.prototype.hello = function () {\r\n        return \"Hello\";\r\n    };\r\n    return Hello;\r\n})(Greeter);\r\n\r\nvar stuff = new Hello();\r\nconsole.log(stuff.greet(), stuff.hello(), \"World\");\r\n\r\nvar test2 = {};\r\n\r\nconsole.log(test2);\r\nconsole.log(test2.shoot);\r\n\r\n//@ sourceMappingURL=app.js.map\r\n\r\n```\r\n\r\nWhen using the 0.8 compiler, I was under the impression that imports that were only used for adding types to variables were removed from the compiled code, and imports that were used directly (through direct access or through inheritance) were not removed, however the above example seems to not follow either of those conventions.\r\n\r\nI have attached the entire solution which was used to build the app.\r\n\r\nAny feedback appreciated!\r\n\r\nGriffork.",
    "LastUpdatedDate": "2014-01-10T10:34:33.287-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-02T21:21:55.713-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Inconsistent output from compile on build and compile on save",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1299
  },
  "FileAttachments": [
    {
      "FileId": 699137,
      "FileName": "TypeScriptHTMLApp3.rar",
      "DownloadUrl": ".\\699137"
    }
  ],
  "Comments": [
    {
      "Message": "I forgot to add: This issue appears in Typescript 0.9.0 and 0.9.0.1 for me (I upgraded during the testing of this issue to see if the update had fixed it).",
      "PostedDate": "2013-07-02T21:23:47.83-07:00",
      "Id": 104955
    },
    {
      "Message": "Thanks for the report. Your understanding of emit for imports is correct, compile on save must be failing to consider the full scope of the project that the file is in or something. Marked as active.",
      "PostedDate": "2013-07-03T14:10:00.53-07:00",
      "Id": 105027
    }
  ]
}