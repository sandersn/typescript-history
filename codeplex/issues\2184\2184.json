{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:28.33-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "There is very little sense in having the best common type an empty object {}. In my experience in majority of cases such resolution is caused by a bug. However in the current implementation (v. 0.9.5 as of Feb, 2014) it's considered a valid case. I wish there it was a configurable option to have a warning or an error for the best common type resolved to {}.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-02-16T21:24:32.783-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Make \"Best common type\" resolved to an empty object a compilation error.",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2184
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This actually comes up a lot in 'normal' code, e.g.:\n\n```\nvar x = getSomething();\nvar y = getOtherThing();\nif(x || y) { // Error (?): No BCT of Something and OtherThing ?\n   ...\n}\n```\n\nIn most cases where you would get `{}` from BCT, you'll get an error at the use site if this actually represents a problem. It'd be great if you could post some examples of real code that you'd like to have an error but that doesn't issue any errors at all so we could work on figuring out what the right set of rules for the warning would be.",
      "PostedDate": "2014-02-17T09:24:19.607-08:00",
      "Id": 133828
    }
  ]
}