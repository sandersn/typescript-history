[
  {
    "Id": "923125",
    "ThreadId": "398388",
    "Html": "\r\n<p>Are there any plans for including something like Haskell's do notation or the computational expressions in F# into TypeScript? If this were available, then the following features could be implemented on the library level rather than on the compiler level:</p>\r\n<ul>\r\n<li>C#'s async keyword: This would make it possible to avoid callback&nbsp;spaghetti code. Especially useful in node.js.\r\n</li><li>Coroutines: HTML5 game developers would surely benefit from this (as evidenced by the usage of coroutines in Lua powered games).\r\n</li><li>List comprehensions </li></ul>\r\n<p>This would open up immense possibilities, wouldn't it?</p>\r\n",
    "PostedDate": "2012-10-07T11:42:36.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923732",
    "ThreadId": "398388",
    "Html": "<p>We've so far focused on large scale app development capabilities - classes, modules and types.&nbsp; Going forward, we expect our focus to be first and foremost on (a) improving the type system to be able to capture more JS library typings and (b) including further support for ECMASCript 6 capabilities.</p>\r\n<p>Some of the specific features you describe are things that are in some form being enabled with ES6 - array comprehensions and iterators/generators.&nbsp; Compiling these to ES3/ES5 though would be less simple and clean code generation than we've currently been aiming for, so we're holding back on them for now.</p>\r\n<p>Adding computation expressions or macros is probably also further away on the roadmap, but something we'll be thinking about.</p>",
    "PostedDate": "2012-10-08T16:03:26.263-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]