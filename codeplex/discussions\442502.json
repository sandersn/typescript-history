[
  {
    "Id": "1039183",
    "ThreadId": "442502",
    "Html": "Hi Guys,\r<br />\n<br />\nI've got a problem with TypeScripts &quot;preserve comments&quot; mechanism.\r<br />\n<br />\nIn my existing project I'm using Cassette to serve up my JavaScript files.  If you haven't heard about Cassette you can read up on it here: <a href=\"http://getcassette.net\" rel=\"nofollow\">http://getcassette.net</a>\r<br />\n<br />\nIn particular I'm taking advantage of the ability to get Cassette to serve scripts in dependency order through the use of reference comments at the top of JavaScript files that look like this:\r<br />\n<br />\n// @reference other.js\r<br />\n<br />\nor this:\r<br />\n<br />\n/// &lt;reference path=&quot;other.js&quot; /&gt;\r<br />\n<br />\n(nb if interested you can find more details on how that works here: <a href=\"http://getcassette.net/documentation/v1/AssetReferences\" rel=\"nofollow\">http://getcassette.net/documentation/v1/AssetReferences</a> )\r<br />\n<br />\nBecause I want to continue to take advantage of this feature of Cassette working with the JavaScript generated by the TypeScript compiler I was intending to enable the &quot;preserve comments&quot; option.  This would work fine with me making use of the &quot;// @reference other.js&quot; style references in my TypeScript.  However, to my frustration the typing file comments are * <strong>also</strong> * being preserved.  This seems a little strange to me since these aren't strictly speaking comments, more compiler directives masquerading as comments.\r<br />\n<br />\nSo my JavaScript ends up with references to the typings files like this:\r<br />\n<br />\n/// &lt;reference path=&quot;jquery.d.ts&quot; /&gt;\r<br />\n<br />\nJust to demonstrate, TypeScript like this:<br />\n<pre><code>// @reference jQuery-1.8.2.js\n/// &lt;reference path=&quot;jquery.d.ts&quot; /&gt;\n\n// Module\nmodule Shapes {\n\n    // Class\n    export class Point implements IPoint {\n        // Constructor\n        constructor (public x: number, public y: number) { }\n\n        // Instance member\n        getDist() { return Math.sqrt(this.x * this.x + this.y * this.y); }\n\n        // Static member\n        static origin = new Point(0, 0);\n    }\n\n}\n\n// Interface\ninterface IPoint {\n    getDist(): number;\n}\n\n// Local variables\nvar p: IPoint = new Shapes.Point(3, 4);\nvar dist = p.getDist();</code></pre>\n\nWill generate JavaScript like this:<br />\n<pre><code>// @reference jQuery-1.8.2.js\n/// &lt;reference path=&quot;jquery.d.ts&quot; /&gt;\n// Module\nvar Shapes;\n(function (Shapes) {\n    // Class\n    var Point = (function () {\n        // Constructor\n        function Point(x, y) {\n            this.x = x;\n            this.y = y;\n        }\n        Point.prototype.getDist = // Instance member\n        function () {\n            return Math.sqrt(this.x * this.x + this.y * this.y);\n        };\n        Point.origin = new Point(0, 0);\n        return Point;\n    })();\n    Shapes.Point = Point;    \n})(Shapes || (Shapes = {}));\n// Local variables\nvar p = new Shapes.Point(3, 4);\nvar dist = p.getDist();\n//@ sourceMappingURL=file1.js.map\n</code></pre>\n\nAs you can see this has the unfortunate side effect of serving up the typing files which will in turn make Cassette serve up the TypeScript typings files with the JavaScript.  And that stops me from making use of TypeScript in the way I would hope.\r<br />\n<br />\nWould it be possible to introduce more fine grained control over what comments should be preserved?\r<br />\n<br />\nPerhaps it would be possible to include a block syntax that, if present would indicate that a set of comments should <strong>not</strong>  be preserved?  Maybe something as simple as this would suffice?:<br />\n<pre><code>//&lt;!--\n/// &lt;reference path=&quot;jquery.d.ts&quot; /&gt;\n//--&gt;\n</code></pre>\n\nAlternatively, would it be possible to introduce a compiler option which preserved comments but not comments that are actually typing references?  Either would work for me...<br />\n",
    "PostedDate": "2013-05-03T13:31:18.8-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1039213",
    "ThreadId": "442502",
    "Html": "This discussion has been copied to a work item. Click <a href=\"https://typescript.codeplex.com/workitem/995\" rel=\"nofollow\">here</a> to go to the work item and continue the discussion.<br />\n",
    "PostedDate": "2013-05-03T15:58:47.39-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1039214",
    "ThreadId": "442502",
    "Html": "I think this is just a bug. There's no reason to emit the /// references into the JavaScript anyway. I've created a work item for you to track the issue <a href=\"https://typescript.codeplex.com/workitem/995\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/995</a><br />\n",
    "PostedDate": "2013-05-03T15:59:26.763-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1040267",
    "ThreadId": "442502",
    "Html": "Thanks Dan - I've voted for the work item.  Hopefully it'll get picked up along the way.<br />\n",
    "PostedDate": "2013-05-07T01:30:31.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]