{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "By design as per the spec. 3.8.4.\n\nIf the interface doesn't care about the return type, your implementation should be able to return anything... the caller just shouldn't assume anything will be returned.",
    "ClosedDate": "2013-09-27T12:00:16.607-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "Why does this compiles cleanly, instead of giving a type error? According to the TypeScript language specification (0.9.1), void is only related to the types Undefined, Null and Any.\r\n\r\n    interface Visitor<T> {\r\n       visit (): T\r\n    }\r\n\r\n    class Test implements Visitor<void> {\r\n       visit (): number {\r\n          return 34\r\n       }\r\n    }\r\n",
    "LastUpdatedDate": "2013-10-04T11:53:21.353-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-09-26T13:22:00.477-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "number can be converted to void",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 1734
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "According to 3.8.4 in the spec:\n\nS is assignable to a type T, and T is assignable from S, if one of the following is true, where S’ denotes the apparent type (section 3.8.1) of S:\n•\tS and T are identical types.\n•\tS or T is the Any type.\n•\tS is the Undefined type.\n•\tS is the Null type and T is not the Undefined type.\n•\tS or T is an enum type and the other is the primitive type Number.\n•\tS and T are type parameters, and S is directly or indirectly constrained to T.\n•\tS’ and T are object types and, for each member M in T, one of the following is true:\no\tM is a property and S’ contains a property N where\n\tM and N have the same name,\n\tthe type of N is assignable to that of M,\n\tM and N are both public or both private, and\n\tif M is a required property, N is also a required property.\no\tM is an optional property and S’ contains no property of the same name as M.\no\tM is a non-specialized call or construct signature and S’ contains a call or construct signature N where,\n\tthe signatures are of the same kind (call or construct),\n\tthe number of non-optional parameters in N is less than or equal to that of M,\n\tN can be successfully instantiated in the context of M (section 3.8.5),\n\teach parameter type in the instantiation of N is assignable to or from the corresponding parameter type in M for parameter positions that are present in both signatures, and\n\t__the result type of M is Void__, or the result type of the instantiation of N is assignable to that of M.\no\tM is a string index signature of type U and S’ contains a string index signature of a type that is assignable to U.\no\tM is a numeric index signature of type U and S’ contains a string or numeric index signature of a type that is assignable to U.\n",
      "PostedDate": "2013-09-27T11:59:02.24-07:00",
      "Id": 115852
    },
    {
      "Message": "According to 3.2.4 in the spec:\n\nThe __only possible values__ for the Void type are null and undefined. The Void type is a subtype of the Any\ntype and a supertype of the Null and Undefined types, but __otherwise Void is unrelated to all other types__.",
      "PostedDate": "2013-09-27T18:20:48.157-07:00",
      "Id": 115885
    }
  ]
}