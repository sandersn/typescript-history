[
  {
    "Id": "947754",
    "ThreadId": "404746",
    "Html": "\r\n<p>To learn TypeScript and to refresh my JavaScript I decided to port an old game of mine that was originally written in C# and later ported to Android/Java. Here is some feedback on TS after using it daily for a month.<br>\r\nI really like TS and the VS integration, the preview has its issues but I know this is just a beta version.<br>\r\nWish list #1 – Having to type “this” within class scoped code is driving me crazy.<br>\r\nWish list #2 – conditional compilation = support for #if #else. I would really like to be able to automatically remove debug code when compiling for release.<br>\r\nWish list #3 – generics<br>\r\nWish list #4 – iterators - the C# “yield” feature to write iterators<br>\r\nWish list #5 – partial classes – so used from C# to split larger classes into smaller chunks – for example, I like to place every interface a class implements in its own file.<br>\r\nWish list #6 - VS support for TS libraries ala C# (and please get rid of the XML syntax for referencing files) My style is to place every class in its own TS file and use the tsc feature to combine all files into one js file. To not go crazy I make every ts\r\n file include all other ts files by referencing a “project.ts” file. <br>\r\nWish list #7 - Constructor overloading<br>\r\nWish list #8 - Method overloading<br>\r\nWish list #9 – Extension methods (for extending system classes like HtmlElement, String and Date)<br>\r\nWish list #10 – Support for &quot;protected&quot; as well as &quot;internal&quot;\r\n<br>\r\nThe ported game can be found at <a href=\"http://www.BackSpinSoftware.com/PlayWithFIAR\">\r\nhttp://www.BackSpinSoftware.com/PlayWithFIAR</a> (Only works in ES5 browsers)</p>\r\n<p>---bjorn</p>\r\n",
    "PostedDate": "2012-11-27T08:12:02.767-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "947790",
    "ThreadId": "404746",
    "Html": "\r\n<p>Thanks for the feedback.</p>\r\n<p>There are feature requests in the issue tracker for many of these (eg Generics:\r\n<a href=\"http://typescript.codeplex.com/workitem/185\">http://typescript.codeplex.com/workitem/185</a>&nbsp;and protected:\r\n<a href=\"http://typescript.codeplex.com/workitem/125\">http://typescript.codeplex.com/workitem/125</a>).&nbsp; If you have time, please vote on those issues and&nbsp;help out by adding&nbsp;good motivating examples in the comments.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-11-27T09:00:07.4-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "948204",
    "ThreadId": "404746",
    "Html": "\r\n<p>&nbsp;</p>\r\n<p><em><strong>&gt; Having to type “this” within class scoped code is driving me crazy.</strong></em></p>\r\n<p>Assuming the context is class MyClass { &nbsp; private myProp = 10; &nbsp;myMethod(){ &nbsp;myProp = 11; // instead of this.myProp = 11 &nbsp; &nbsp;} }</p>\r\n<p>Prefixing fields with &quot;this&quot; is not entirely unreasonable. In fact it is enforced by certain systems such as StyleCop (rule SA1101). See also\r\n<a href=\"http://stackoverflow.com/questions/1562540\">the discussion on stackoverflow</a>.&nbsp;Quote from the accepted (though not top voted) answer:&nbsp;</p>\r\n<p>It can make code clearer at a glance. When you use&nbsp;<code>this</code>, it's easier to:</p>\r\n<ul>\r\n<li>Tell static and instance members apart. (And distinguish instance methods from delegates.)\r\n</li><li>Distinguish instance members from local variables and parameters (without using a naming convention).\r\n</li></ul>\r\n<p>&nbsp;</p>\r\n<p><em><strong>&gt; partial classes – so used from C# to split larger classes into smaller chunks – for example, I like to place every interface a class implements in its own file.</strong></em></p>\r\n<p>Partial classes should ideally only be used to separate auto-generated code from user-written code - not for splitting up a large class into smaller chunks.</p>\r\n<p>&nbsp;</p>\r\n<p>Noel</p>\r\n",
    "PostedDate": "2012-11-28T02:43:47.733-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]