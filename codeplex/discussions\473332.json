[
  {
    "Id": "1135007",
    "ThreadId": "473332",
    "Html": "Let’s say that you have two TypeScript projects named app and app-shared. Both project are located in clients folder and  for app »Combine JS output into file« is set to »out/app.js« and for app-shared is set to »./../app/out/app-shared.js«. Output files are generated as expected  and also map files point correctly to ts files. The problem is that debugging of ts files doesn't work, because path of ts files pass over root web folder and browser is not able to read them.\r<br />\n<br />\nSo is there any way to hack this. The obvious solution is to put  app-shared in app folder, but I don't like this organization, especially when you have lots of projects and also for situations where different application may reference same project!\r<br />\n<br />\nHere are some more question related to this:<br />\n<ol>\n<li>There was a talk, that Microsoft will provide TypeScript library project. For now you can use Web TypeScript project, but I really miss clean TypeScript library project.</li>\n<li>If you select single file output than AMD and CommonJs options don't work. This will be very nice, so that I can split application to 5 projects and get 5 js files which are then loaded using AMD. It's much easier and cleaner then generating hundreds of js files and then combining them together with AMD tools. The same is true for server side, but there at least you don’t get performance penalties when referencing individual files.</li>\n<li>\nIf I set Module system to none I would expect that files will be generated even if I have used export module in ts source, of course without module implementation. But I get compiler error! This is probably default behavior but in situation where you are sharing source files between client and server this can be very useful, because you can get three different output from the same source: AMD, CommonJS and without. So simply saying, I think that in this case compiler option should override your  source files settings. <br />\n</li>\n</ol>\nThx for response…<br />\n",
    "PostedDate": "2013-12-12T05:11:42.85-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1137485",
    "ThreadId": "473332",
    "Html": "My solution is to make the js output file in a folder that debugger can read it. following is an folder example:<br />\n<br />\nSource<br />\n   |-----TypeScriptLibrary1<br />\n   |              |-------TypeSriptLibrary1.sln<br />\n   |              |-------Class1.ts<br />\n   |              |-------Class2.ts<br />\n   |-----TypeScriptLibrary2<br />\n   |              |-------TypeSriptLibrary2.sln<br />\n   |              |-------Class3.ts<br />\n   |              |-------Class4.ts<br />\n   | -----HostWebProject      (this will be mapped to a folder in IIS)<br />\n   |              |-------HostWebProject.sln<br />\n   |              |-------Scripts<br />\n   |              |              |-------TypeScriptLibrary1.js               (this file is copied from 'Scripts' folder under 'Source' folder)<br />\n   |              |              |-------TypeScriptLibrary1.d.ts           (this file is copied from 'Scripts' folder under 'Source' folder)<br />\n   |              |              |-------TypeScriptLibrary1.js.map       (this file is copied from 'Scripts' folder under 'Source' folder)<br />\n   |              |              |-------TypeScriptLibrary2.js<br />\n   |              |              |-------TypeScriptLibrary2.d.ts<br />\n   |              |              |-------TypeScriptLibrary2.js.map<br />\n   |              |-------Class5.ts     (will reference .\\Scripts\\TypeScriptLibrary1.d.ts)<br />\n   |              |-------Class6.ts     (will reference .\\Scripts\\TypeScriptLibrary2.d.ts)<br />\n   |              |-------Cosumer.html   (this is the page which will include Class5.js, TypeScriptLibrary1.js and TypeScriptLibrary2.js)<br />\n   |-------Scripts      (this is the folder the generated js file of TypeScript library project)<br />\n   |              |-------TypeScriptLibrary1.js            (this file are generated by TypeScriptLibrary1 project<br />\n   |              |-------TypeScriptLibrary1.d.ts<br />\n   |              |-------TypeScriptLibrary1.js.map<br />\n   |              |-------TypeScriptLibrary2.js<br />\n   |              |-------TypeScriptLibrary2.d.ts<br />\n   |              |-------TypeScriptLibrary2.js.map<br />\n<br />\nIf this dones't work for you, you can change the relative path of Scripts folder(such as make 'Scripts&quot; folder to be at same level of 'Source' folder), you will definitely find a folder structure works for you.<br />\n<br />\nHope this will give you some clue.<br />\n",
    "PostedDate": "2013-12-18T05:23:32.713-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1205999",
    "ThreadId": "473332",
    "Html": "Hello,\r<br />\n<br />\nI try to do the same as you, but it does not work for me. I have my ts files in a class library. I try also to change the reference path inside the map file to pointer my library, but also does not work, neither vs or chrome was able to debug, but also neither complains about error. I missing something?\r<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2014-02-09T14:47:57.657-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1206138",
    "ThreadId": "473332",
    "Html": "Please check IIS setting to see if *.ts file is blocked, Add &quot;.ts&quot; MIME type in IIS to see if you can debug.<br />\n",
    "PostedDate": "2014-02-09T22:15:34.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]