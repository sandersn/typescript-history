[
  {
    "Id": "1073253",
    "ThreadId": "451451",
    "Html": "I really like what typescript has to offer. But I really wish that we had chosen C# like syntax for typescript. \r<br />\n<br />\nWriting variableName : string is painful as it just is not natural for C# or Java coders. Looked at DART from Google and they seemed to have very nice syntax.\r<br />\n<br />\nIs there anyway we can move to more general purpose programming language style so that people don't have to learn new syntax. I like that it's a superset that can be mixed and matched with Javascript but I believe that can still be accomodated in C# like syntax.\r<br />\n<br />\nSorry for the rant. I really like what TypeScript has to offer otherwise.<br />\n",
    "PostedDate": "2013-07-25T17:15:01.957-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1074325",
    "ThreadId": "451451",
    "Html": "The syntax has been discussed on here a few times.  The main difference between those other languages and TypeScript is that TypeScript is a superset of JavaScript.  Any syntax we pick has to fit in nicely with the current version of JavaScript, and as best we can, fit the future version of JavaScript.  Syntax for a lot of TypeScript comes from JavaScript, even its class syntax and module syntax are inspired, or directly use, the syntax currently being designed for the next version of JavaScript.\r<br />\n<br />\nAs a superset, certain deltas on pure JavaScript are going to fit better.  Just as an example, if we take this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> x;\r\n</pre></div>And then add an annotation:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">number</span> x;  \n<span style=\"color:Blue;\">var</span> x: <span style=\"color:Blue;\">number</span>;\r\n</pre></div>In the first case, we had to delete something that came in from JavaScript, so we're not just adding things anymore.  In the second case, you can just add the annotation to the JavaScript without deleting anything.  With the amount of type inference we do in TypeScript, in many cases you don't even need to do that, so you can leave the JavaScript alone entirely.\r<br />\n<br />\nThe long and short of it is really that TypeScript is a different language, so we tried to pick the best syntax for working with JavaScript.<br />\n",
    "PostedDate": "2013-07-29T07:44:18.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234008",
    "ThreadId": "451451",
    "Html": "I was just looking around for an answer to the same question and read the answer above. And I have to say... Wow. Is THAT the reason for the 'new' syntax. You dont want to remove 'var'?? This just seems downright silly. Then again, it seems silly to argue with Anders of course.<br />\n<br />\nBut it's still nothing short of amazing to me that teaching programmers to write this:<br />\n<pre><code>function add(left: number, right: number): number {\nreturn left + right;\n}\n</code></pre>\n\nInstead of just compiling this to javascript:<br />\n<pre><code>int add(int left, int right) {\n    return left + right;\n}\n</code></pre>\n\nIt reuses the syntax of almost any C based language, java programmers get this, c# programmers get this. I mean, it's not like typescript is valid Js. There is still a conversion being done. Why oh why invent something new?<br />\n",
    "PostedDate": "2014-04-14T12:17:28.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234024",
    "ThreadId": "451451",
    "Html": "What do you mean by &quot;new&quot; ? Constructs in a form like <code>name: type</code> have been around since before the web. You can see them in languages like ML (1973), Haskell (1990), Scala (2003), F# (2005), and many others.<br />\n",
    "PostedDate": "2014-04-14T12:45:59.537-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234071",
    "ThreadId": "451451",
    "Html": "You're right. The word 'new' is not best here. Perhaps 'mainstream' or 'more generally accepted' seem more appropriate. It daunts me slightly why c#-like syntax seems good enough for the server, the mobile device, embedded, robotics, xbox, anything except the client apparently. <br />\n",
    "PostedDate": "2014-04-14T14:33:02.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234077",
    "ThreadId": "451451",
    "Html": "It comes down to JavaScript !== C#.\r<br />\n<br />\nThe feeling I get from the TypeScript team, and the one I agree with, is that they wanted to make Typed JavaScript, not a C# -&gt; JavaScript Compiler.  So they intentionally selected syntax that worked nicely with JavaScript instead of C#.   I will agree at times it's confusing to go from writing your types on the left, to writing your types on the right, but as with any other programming language it's just syntactic sugar.\r<br />\n<br />\nAs a developer I do about 50 / 50 split between C# and JavaScript, and I want to push my organization to adopt TypeScript because it offers our C# developers, those that are not used to working with JavaScript the static typed confidence that the code they're writing is correct, that they library they're using has the method they're looking for, etc.<br />\n",
    "PostedDate": "2014-04-14T14:45:50.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234084",
    "ThreadId": "451451",
    "Html": "You can add ActionScript to that list as well.  I used to work with Flex Builder (now called Flash builder) for building flash apps, and it uses much the same syntax!<br />\n",
    "PostedDate": "2014-04-14T15:18:56.903-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234086",
    "ThreadId": "451451",
    "Html": "Note that I wasn't saying C#, but C#-like syntax. I emphasize the difference. Don't even look at the compiler for a moment, just the way C# implements the exact syntactic sugar TypeScript is trying to add. Things like classes, typical OO like things such as inheritance, but also enums, and so on. It's already out there and there's vast amount of c# knowledge and that knowledge is available to companies at a decent price.\r<br />\n<br />\nI personally did only one, medium sized, project using just TypeScript on the client. I like it enough to use it again because with, frankly, my limited knowledge of building large javascript client-side frameworks, it's the most clear thing to give structure to a project and separate the client logic concerns.\r<br />\n<br />\nStill though, indulge me, somewhere the team had the hefty decision of either sticking closer/cleaner to javascript with the way TypeScript works now or making it look more like the C#/Java syntax. And looking at the way they could have made it much more useful to such a large group of people out of the box, I'm just not convinced the former is the best way to go.\r<br />\n<br />\nAs a disclaimer; smarter and more experienced people than me have thought about this problem, but none of the stuff I've read yet could clearly explain to me the decision. Certainly static type checking, the thing you mentioned last, is not dependent on the syntax and can be implemented either way.<br />\n",
    "PostedDate": "2014-04-14T15:28:26.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234105",
    "ThreadId": "451451",
    "Html": "You seem to be approaching this only from the perspective of writing new code. You're significantly undervaluing the ability to use existing JavaScript code with TypeScript. Your proposal means that moving a JavaScript project into TypeScript would mean modifying every single variable declaration, function argument, etc just to get the code to be syntactically valid. This is an enormous cost to add to try TypeScript and see the value it adds over an existing JavaScript implementation. Using the current syntax allows for this easy migration and has the nice property of looking more like the emitted JavaScript which is highly valuable as well. <br />\n",
    "PostedDate": "2014-04-14T16:21:53.577-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234106",
    "ThreadId": "451451",
    "Html": "I think there's a broad incorrect perception that the goal of TypeScript was to make JavaScript palatable to C# developers, rather than to make the benefits of static typing available to JavaScript developers.\r<br />\n<br />\nSome examples of how &quot;types on the left&quot; doesn't work very well with JavaScript:\r<br />\n<br />\nDeclaring a function variable<br />\n<pre><code>// TypeScript\nvar x: (n: string) =&gt; number;\nvar y: (n) =&gt; void;\n// Proposed\nnumber (string n) x;\nvoid (n) y;</code></pre>\n\nGranted I'm biased, but I like the TypeScript version a lot more. Without delimiting tokens like <code>:</code>, it's hard to tell where the function type ends and the variable name begins. The <code>y</code> declaration is also perilously close to the expression syntax <code>void (n)</code>. You really have to be careful here to determine that these are variable declarations, not expression statements.\r<br />\n<br />\nAdding a type annotation to a function expression<br />\n<pre><code>var x = function(string x, y, z) {\n    return z;\n};</code></pre>\n\nThe leftmost item of each part of the parameter list is now <em>either</em> a type name or an identifier. That's confusing.\r<br />\n<br />\nWhat about anonymous types? I want to declare a variable of an anonymous type that has a function called 'g' that returns a 'void':<br />\n<pre><code>{ void g(); } x = null;</code></pre>\n\nThis code is valid JavaScript that means something entirely different, which is very bad. There might be some other way of writing type literals that doesn't have this problem, but I can't think of one. That's a serious problem in a structural typing system.<br />\n",
    "PostedDate": "2014-04-14T16:22:20.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234110",
    "ThreadId": "451451",
    "Html": "Considering this:<br />\n<pre><code>if (true) Function f = int add(int left, int right) {\n    return left + right;\n} </code></pre>\n\nIMHO, that just seems equally strange for people coming from a JavaScript world (&quot;if (...) Function ... int ...&quot;) - especially since &quot;Function&quot; is ALSO a valid <em>identifier</em> as well, which means &quot;if (true) Function, f = ...&quot; is also valid code [though contrived] - and what if that was a TYPO!!!  It would run and also pollute  the global scope.<br />\n<br />\nIn JS the above may also be written as &quot;if (...) var f = function add(): int { ... };&quot;  To me, that format in TS is more natural for adding types on JavaScript conventions.  After all, I WANT to program in JavaScript, not C,  (and students can learn much of JS using TS as well) so the conventions should resemble JS as much as possible.  All JS developers need is TYPE CHECKS, not a new language to learn (TS should not force JS developers to learn C/C#).  Also, as I said, many people from the past have a lot of ActionScript experience mixed with JS, so there may actually be much less of a learning curve for most people.<br />\n<br />\nWhat about:<br />\n<pre><code>int a = 0, b = 0, c = 0;\nbool d = true, e = true, f = false;</code></pre>\n\nvs<br />\n<pre><code>var a = 0, b = 0, c = 0, d = true, e = true, f = false;</code></pre>\n\nFor that matter, consider people who have JavaScript libraries with 1000s of lines of code - do you really want to enforce a new convention and force people to scour over their code to reformat &quot;var a ...&quot; to &quot;&lt;sometype&gt; a...&quot;?  In  TS I could just dump in my existing JavaScript code, and voilà!  Like magic, &quot;a, b, c, d, e, f&quot; have types (without doing anything).  I can keep all my &quot;var&quot; code as is, and just enforce types where needed.<br />\n<br />\nI'm going to take a guess that # of JS developers &gt; C# developers, so why would any one want to choose C/C# to base the convention on?<br />\n",
    "PostedDate": "2014-04-14T16:30:03.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234114",
    "ThreadId": "451451",
    "Html": "(oh, you guys just posted before me! LOL)<br />\n",
    "PostedDate": "2014-04-14T16:35:59.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234194",
    "ThreadId": "451451",
    "Html": "Ok, thx all for taking the time to elaborate on the topic a bit more. It's definitely clearer to me now how using c#-like syntax would result in a bigger mess. If you wanted to support all the Js code structures, you would end up with something not looking like c# anyway.\r<br />\n<br />\nThe migration path is a good point to. I very much agree it's a really good place to start to just be able to rename your .css files to .less and your .js files to .ts and slowly add start adding the value typescript offers instead of turn-key per file. I see now there is no reasonable way to make c# like syntax a superset of js.<br />\n",
    "PostedDate": "2014-04-14T23:54:54.73-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1235441",
    "ThreadId": "451451",
    "Html": "Well, this TypeScript is not as successful as it should have been. The idea of writing C# and get it translated into Javascript is genuinely cool. Think about the C# eco system that we have today (AutoMapper, T4, TFS Build, Static Code Analysis). All of these are going to be missed simply because TypeScript is not following C# language spec.<br />\n<br />\nPEOPLE HATE TO LEARN A NEW LANGUAGE. And companies do not want to pay for the adventure into another language that may not be easy for hiring new resources. Python is an example.<br />\n<br />\n<br />\nTypescript inventors could follow the dream of being able to copy and paste any javascript snippet to get going. They hope that would be a good sale for people who already know about Javascript. But that's not a good business strategy.<br />\n<br />\nWhy?<br />\nPeople who are fluent in Javascript don't want to change to another language. They have little urge to do so.<br />\nPeople who are not fluent in Javascript but fluent in a static type language always want to be competitive with their fellows who write Javascript.<br />\n<br />\nInstead of Typescript being a miracle to help C# developers to build front end code. It does the opposite way of convincing people who write front end code to think as back end developers.<br />\n<br />\n<br />\nLooks like somebody has started Script# to address the issue from the other end.<br />\n<br />\n<a href=\"https://github.com/nikhilk/scriptsharp\" rel=\"nofollow\">https://github.com/nikhilk/scriptsharp</a><br />\n",
    "PostedDate": "2014-04-18T09:02:57.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1235712",
    "ThreadId": "451451",
    "Html": "<strong>Believe2014 wrote:</strong><br />\n<blockquote>\nWell, this TypeScript is not as successful as it should have been. The idea of writing C# and get it translated into Javascript is genuinely cool. Think about the C# eco system that we have today (AutoMapper, T4, TFS Build, Static Code Analysis). All of these are going to be missed simply because TypeScript is not following C# language spec.<br />\n</blockquote>\nWhat measure are you using to gauge the success of TypeScript?  <a href=\"https://github.com/borisyankov/DefinitelyTyped\" rel=\"nofollow\">4600+ commits in Definitely Typed</a> by almost 400 different users, that seems pretty successful.<br />\n<blockquote>\nPEOPLE HATE TO LEARN A NEW LANGUAGE. And companies do not want to pay for the adventure into another language that may not be easy for hiring new resources. Python is an example.<br />\n<br />\nTypescript inventors could follow the dream of being able to copy and paste any javascript snippet to get going. They hope that would be a good sale for people who already know about Javascript. But that's not a good business strategy.<br />\n</blockquote>\nTypeScript is JavaScript.  You can choose to use ECMAScript 6 things like classes and modules or not.  Still ECMAScript 6 is also just the next version of JavaScript.  It's an additional iteration much like how C# is version'd.  JavaScript isn't going away, if you don't want to learn JavaScript, I really urge you to give TypeScript a real shot, instead of bringing a bunch of C# assumptions along with you.  The ability to interface directly with native and populate JavaScript libraries like JQuery, Angular, Knockout with minimal work, is a huge boost in productivity.<br />\n<blockquote>\nWhy?<br />\nPeople who are fluent in Javascript don't want to change to another language. They have little urge to do so.<br />\n</blockquote>\nWhen you look at larger teams, as a JavaScript Developer, I have an urge to because static typing allows errors to be highlighted faster.  This helps myself, as well as helps my team in the event I'm working with developers of less experience or developers without JavaScript familiarity are working on the code.  I do C#, and JavaScript, I want other developers to have the same flexibility, but most of the stereo-typical C# developers I've worked with are uncomfortable with JavaScript because they don't have the safety net that static compilation gives you and the tooling that comes with it like Intellisense, Refactoring, etc.  Static Compilation and Tooling are the reasons why TypeScript was developed.<br />\n<blockquote>\nPeople who are not fluent in Javascript but fluent in a static type language always want to be competitive with their fellows who write Javascript.<br />\n<br />\nInstead of Typescript being a miracle to help C# developers to build front end code. It does the opposite way of convincing people who write front end code to think as back end developers.<br />\n<br />\n<br />\nLooks like somebody has started Script# to address the issue from the other end.<br />\n<br />\n<a href=\"https://github.com/nikhilk/scriptsharp\" rel=\"nofollow\">https://github.com/nikhilk/scriptsharp</a><br />\n</blockquote>\nScript# is promising on the surface, but the Developer has left Microsoft so without an active maintainer I would be worried about buying into a technology that is steadily falling behind.  TypeScript has a vibrant community that has produced hundreds of interfaces for all the popular and obscure JavaScript libraries, and they are actively working on making sure everything is up to date, identical to the library it represents.<br />\n",
    "PostedDate": "2014-04-19T07:42:26.963-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1235719",
    "ThreadId": "451451",
    "Html": "<strong>DavidDriscoll wrote:</strong><br />\n<blockquote>\n<strong>Believe2014 wrote:</strong><br />\n<blockquote>\nWell, this TypeScript is not as successful as it should have been. The idea of writing C# and get it translated into Javascript is genuinely cool. Think about the C# eco system that we have today (AutoMapper, T4, TFS Build, Static Code Analysis). All of these are going to be missed simply because TypeScript is not following C# language spec.<br />\n</blockquote>\nWhat measure are you using to gauge the success of TypeScript?  <a href=\"https://github.com/borisyankov/DefinitelyTyped\" rel=\"nofollow\">4600+ commits in Definitely Typed</a> by almost 400 different users, that seems pretty successful.<br />\n</blockquote>\nYou have proof of how TypeScript is successful. But you don't have any proof about how it should have been much more successful. If you want, we can sit together to make an anonymous survey and post it around the community to get their opinions.<br />\n<br />\nAlso, the market is operating 2 ways: pull and push. Either each developer pulls (try to sell) modern technologies to their managers for using in production; or the managers could push the developers to evaluate and choose a technique or tool that have the most advantages to their company. If you think about the bigger team (Dev + DevOps + QC + Managers), not just developers, you can see that a good language is just the first step. Tooling, Automation, Reporting are all as important as the language itself. To this extent, I can't enforce JsLint, automate unit tests, collect code metrics (complexity, coupling, cohesion). When you are on a few people team, this does not matter. But when you are on a larger team, especially with outsourcing or contractors on board, the code metric reports are everything you have to track, communicate, lead and make decisions.<br />\n<br />\nI know that you can automate TypeScript on the server side to generate Javascript and run JsLint against the generated code. This does help. But all of the extra efforts on converting current Javascript to TypeScript, configuring automated translation, configure TFS Build to enforce Gated Checkin Build,... could have been a much easier sell if the statement &quot;TypeScript is C#&quot; holds true rather than &quot;TypeScript is Javascript&quot;.<br />\n<br />\nFirst comes the language, then come the tools. It's very reasonable to think of it that way.  TypeScript is comparable to Dart language. Both are cool but hard to sell.<br />\n<br />\nKnockoutJS is developed by Steve Anderson, not Microsoft. And now Script# seems to be the same story. While there could be many reasons behind the way Microsoft choose what to build to fit the long term strategy of the company. I just wish the similar effort (marketing, contributing, distributing) could be done for all good projects.<br />\n",
    "PostedDate": "2014-04-19T08:22:37.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236090",
    "ThreadId": "451451",
    "Html": "@Believe2014,\r<br />\n<br />\nYou make a compelling case for why it would be difficult to force adoption of TypeScript within a large organisation. As you say\r<br />\n_<br />\n<blockquote>\nIf you think about the bigger team (Dev + DevOps + QC + Managers), not just developers, you can see that a good language is just the first step. Tooling, Automation, Reporting are all as important as the language itself.<br />\n</blockquote>\nThis is a very valid point.\r<br />\n<br />\nHowever, I don't see how this problem can be solved by making the TypeScript syntax more C#-like. The output of TypeScript is JavaScript. The tooling, automation etc build for C# is not likely to simply work off that output.<br />\n",
    "PostedDate": "2014-04-21T03:24:29.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236120",
    "ThreadId": "451451",
    "Html": "I sort of did a 180 based on the recent discussion in this thread. Somewhat ironically I am now convinced the TypeScript syntax is the cleanest way to tackle the 'javascript huge application problem'. I thought allot about the things said here, but also I watched a few convincing videos which helped me cross that line, so to speak.<br />\n<br />\nFor example, the old Crockford video he gave at google left me with a feeling that javascript 'is just too weird' to fit into the programming paradigm we know today where we separate the concerns in our business logic based on classically implemented OO principles. <br />\n<a href=\"https://www.youtube.com/watch?v=hQVTIJBZook\" rel=\"nofollow\">https://www.youtube.com/watch?v=hQVTIJBZook</a><br />\n<br />\nAlso, Sean Hess made an interesting video about using TypeScript (he loves TS) together with Angular. Based on that video I came to the conclusion that Ts being a close-syntax superset of Js in not just a nice feature, but an absolute must-have for giving broad adoption a chance.<br />\n<a href=\"https://www.youtube.com/watch?v=u6TeBM_SC8w\" rel=\"nofollow\">https://www.youtube.com/watch?v=u6TeBM_SC8w</a><br />\n<br />\nAlso, the syntactically closeness, if you will, of TypeScript to EC6 is worth it's weight in gold in a few years.<br />\n",
    "PostedDate": "2014-04-21T05:19:30.94-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236591",
    "ThreadId": "451451",
    "Html": "I can see that Microsoft create C# as the next evolution of C++. TypeScript may be the same evolution step of vbScript, an adoption of Javascript by Microsoft. While Microsoft may have all the resources and investments to invent and promote a new language, and get head to head in the race with other big names (Dart language from Google), we don't have to wait.\r<br />\n<br />\nI did not look very deeply into Script#. But I have my own way of translating C# to Javascript: Use Roslyn to parse a C# project, then use T4 to translate the C# DOM into Javascript.\r<br />\n<br />\nIf you are interested, please let me know.\r<br />\n<br />\nBelieve.<br />\n",
    "PostedDate": "2014-04-22T07:00:16.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236598",
    "ThreadId": "451451",
    "Html": "<blockquote>\nUse Roslyn to parse a C# project, then use T4 to translate the C# DOM into Javascript.<br />\n</blockquote>\nWait what? You actually have this done or in beta??\r<br />\n<br />\nI'm pretty sure I won't be using it but I'm also pretty sure I want to see what you've done with it. \r<br />\n<br />\nPut it on Git plz.<br />\n",
    "PostedDate": "2014-04-22T07:19:31.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236662",
    "ThreadId": "451451",
    "Html": "No, I have not done it. But I know how to do it. I am asking to see if anyone is interested in that direction.<br />\n",
    "PostedDate": "2014-04-22T09:27:32.41-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236663",
    "ThreadId": "451451",
    "Html": "<strong>GerbenRampaart wrote:</strong><br />\n<blockquote>\nOk, thx all for taking the time to elaborate on the topic a bit more. It's definitely clearer to me now how using c#-like syntax would result in a bigger mess. If you wanted to support all the Js code structures, you would end up with something not looking like c# anyway.<br />\n<br />\nThe migration path is a good point to. I very much agree it's a really good place to start to just be able to rename your .css files to .less and your .js files to .ts and slowly add start adding the value typescript offers instead of turn-key per file. I see now there is no reasonable way to make c# like syntax a superset of js.<br />\n</blockquote>\nI think this is a good strategy for existing code. But for building a new app, I want to help all C# guys to kick start a new empty project in C# with Unit Tests and existing Continuous Integration infrastructure.<br />\n",
    "PostedDate": "2014-04-22T09:30:02.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236674",
    "ThreadId": "451451",
    "Html": "\r\n<div>\r\n<div style=\"font-family:Calibri,sans-serif; font-size:11pt\">Of course, that approach would require implementing at least a sizeable chunk of the BCL into JS, implementing the whole of the DOM in C# for coding against, and finding a way to cope with the inherent\r\n differences between fully statically typed code (overloads etc) and a dynamic language.</div>\r\n</div>\r\n<div dir=\"ltr\">\r\n<hr>\r\n<span style=\"font-family:Calibri,sans-serif; font-size:11pt; font-weight:bold\"></span></div>\r\n",
    "PostedDate": "2014-04-22T09:47:55.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236678",
    "ThreadId": "451451",
    "Html": "<strong>markrendle wrote:</strong><br />\n<blockquote>\nOf course, that approach would require implementing at least a sizeable chunk of the BCL into JS, implementing the whole of the DOM in C# for coding against, and finding a way to cope with the inherent differences between fully statically typed code (overloads etc) and a dynamic language.<br />\n</blockquote>\nI agree. I need resources. It's not impossible. Developers could also find a few limitations in beginning as it is reasonable to not support the whole Entity Framework in it.\r<br />\nBut, I enforce a policy in my team to keep their code files under 200 lines including comments. If you could meet that constraint, porting C# to any other languages should be easier than it may sound.<br />\n",
    "PostedDate": "2014-04-22T09:57:26.857-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236679",
    "ThreadId": "451451",
    "Html": "Imagine all of the C# design patterns come to live in Javascript, that's a big win.<br />\n",
    "PostedDate": "2014-04-22T09:58:45.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236685",
    "ThreadId": "451451",
    "Html": "The only thing that I don't like that much is the fact of I have to use T4, which is not the first choice of C# developers. Poor design support (intellisense, syntax coloring) and bad debugging experience are pretty hard to sell.<br />\n",
    "PostedDate": "2014-04-22T10:03:48.623-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236688",
    "ThreadId": "451451",
    "Html": "As I've heard Anders say several times, &quot;people have tried to replace JavaScript before, but it's not broken enough.&quot; As limited as it may be, JavaScript works, and there are billions of lines of it in the wild and hundreds of JavaScript libraries available. C# in the browser means you automatically lose first class access to all of those libraries and isolate yourself into your own little community. \r<br />\n<br />\nC# is a great language, but if you look at TypeScript's current feature set and all the feature requests for it, it could easily reach or surpass C# in terms of ease of development eventually.<br />\n",
    "PostedDate": "2014-04-22T10:06:20.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236693",
    "ThreadId": "451451",
    "Html": "<strong>MgSam wrote:</strong><br />\n<blockquote>\nthere are billions of lines of it in the wild and hundreds of JavaScript libraries available.<br />\n</blockquote>\nDart has the concept of Interop to call native Javascript functions. I could use that idea, too.<br />\n<blockquote>\nC# in the browser means you automatically lose first class access to all of those libraries and isolate yourself into your own little community. <br />\n</blockquote>\nNo C# in the browser. C# in the console and T4, that generates Javascript in the browser.<br />\n<blockquote>\nC# is a great language, but if you look at TypeScript's current feature set and all the feature requests for it, it could easily reach or surpass C# in terms of ease of development eventually.<br />\n</blockquote>\nNo doubt about the power of TypeScript. It's just <strong><em>another</em></strong> language that people have to learn.<br />\n",
    "PostedDate": "2014-04-22T10:12:46.78-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236694",
    "ThreadId": "451451",
    "Html": "<strong>GerbenRampaart wrote:</strong><br />\n<blockquote>\nI sort of did a 180 based on the recent discussion in this thread.<br />\n</blockquote>\nWhat is this 180?<br />\n",
    "PostedDate": "2014-04-22T10:14:09.163-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236718",
    "ThreadId": "451451",
    "Html": "I turned 180 degrees in opinion. As in, I've completely changed my mind.<br />\n",
    "PostedDate": "2014-04-22T11:25:16.607-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236750",
    "ThreadId": "451451",
    "Html": "<blockquote>\nNo doubt about the power of TypeScript. It's just another language that people have to learn.<br />\n</blockquote>\nFunny thing:  Coming from the C++/Assembly world, I said the same thing about C# many years ago. ;)  (I was eventually sold on the memory management part - I hate writing my own GCs - and also on <em>how close it was to C++ in many ways</em> [and you could still use unsafe pointers if ever needed for low level stuff]]).  Sometimes being very much like a superset of another language (perhaps similar to moving from C to C++) is all that is needed; to add some enhancements, and nothing more.<br />\n",
    "PostedDate": "2014-04-22T12:52:50.763-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1236957",
    "ThreadId": "451451",
    "Html": "We've just ported a C# code-base to TypeScript, achieving a 60% reduction in terms of LOC. Wasn't all that difficult to bid goodbye to the lovely 'System.InvalidCastException'.\r<br />\n<br />\nTypeScript is not the next evolution of vbscript: it feels more like the next evolution of JavaScript and C# combined.<br />\n",
    "PostedDate": "2014-04-23T02:54:38.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1237039",
    "ThreadId": "451451",
    "Html": "Someone needs to make a sticky post containing all of the rebuttals to this tiring, ill-thought out and short-sighted request. The often indignant and demanding tone of the question is what really makes me crazy.  <br />\n",
    "PostedDate": "2014-04-23T06:26:18.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1237214",
    "ThreadId": "451451",
    "Html": "<blockquote>\nSomeone needs to make a sticky post containing all of the rebuttals to this tiring, ill-thought out and short-sighted request. <br />\n</blockquote>\nI agree with the premise of what you're saying, but you're exaggerating. Basically you say that the idea for scriptsharp is tiring, ill-thought and short-sighted instead of pointing out in a more nuanced way why that has proven not to be a success.<br />\n<blockquote>\nThe often indignant and demanding tone of the question is what really makes me crazy. <br />\n</blockquote>\nThe irony of that comment is so thick you can cut it with a knife.\r<br />\n<br />\nBut to keep it on-topic; good points were raised here, but in the end, and I am not hero-worshiping here, Anders Hejlsberg has enough credit by now that if it would have worked better with C# syntax, he would've designed it like that. <br />\n",
    "PostedDate": "2014-04-23T12:10:17.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1237224",
    "ThreadId": "451451",
    "Html": "My personal preference is a sticky post that says &quot;This is a forum: please do not ask any questions&quot;<br />\n",
    "PostedDate": "2014-04-23T12:49:31.36-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1237625",
    "ThreadId": "451451",
    "Html": "I think wanting C# syntax is perfectly valid, that's why Script# exists and why you are seeing people want to compile from C# to JS in other toolchains.  C# is a great language with a lot of features that help you get real work done.  Users who want to keep working in C# and target JS can do just that, which I think is great.<br />\n<br />\nTypeScript has a different focus.  It answers a different question.  &quot;What if we started from JavaScript&quot; and then we grew a language that gave JavaScript some of the pieces that programmers would need for tooling, early error detection, as well as class/modules/lambdas.  We knew ES6 was going to have those, so we aligned as much as we could there and will keep working to align in the future.<br />\n<br />\nJust a different approach.  I like where TypeScript landed.  It gives you the ability to use the lightweight JavaScript syntax, and, if you want, sprinkle in a few types to help catch errors and save you time where you might otherwise have written a unit test.  You can also go OOP to the max, and build out a full class hierarchy. A lot of what you learn you can translate into ES6 when that comes out, which is an added bonus.<br />\n<br />\nAll about choice and the trade-offs that make sense for your team/project.<br />\n",
    "PostedDate": "2014-04-24T09:18:54.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1237657",
    "ThreadId": "451451",
    "Html": "I like where TypeScript is too. I think &quot;type first&quot; is familiar from C, but yeah, it's a mess when declaring function types. (For a laugh, take a look at fuckingblocksyntax.com and look at what I have to deal with when I'm declaring block types in Objective C (blocks are Objective C's anonymous functions).)<br />\n",
    "PostedDate": "2014-04-24T10:14:55.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1237670",
    "ThreadId": "451451",
    "Html": "In regards to Script#, I've tried it for awhile and it quickly became tiring.  First, I kept wanting to do C# specific stuff, to which the compiler quickly kept reminding me how much of a C#-JS noob I was (I'm not new to C# by a long shot; I had to think about what only works in &quot;JavaScript&quot; while in C# [this is counter intuitive]).  Second, I quickly realized there wasn't a large enough following (at the time), so I would end up writing definitions for all the JS libraries I wanted to use (not fun; with TS we have <a href=\"https://github.com/borisyankov/DefinitelyTyped\" rel=\"nofollow\">Definitely  Typed</a>).  Thirdly, having to toggle back and forth from C# and JavaScript to see what the heck is actually being produced when hooking it up to my pages was a pain (TypeScript is not <strong><em>as</em></strong> abstract - and in fact, as stated above, is closer to ES6 syntax [extra bonus points]). Finally, all members of my utility C# files (shared by other non-JS projects) had upper case letters (this is more of my own doing really).  This was later corrected by using attributes - but I'd have to scatter those everywhere all the time to keep to JS naming conventions when creating a library API for JS users (so my hopes to use the shared C# files with other projects where quickly crushed - it just doesn't work that way).  The preverbal nail(s) in the coffin for me where: 1. I couldn't replace class methods on the fly dynamically, or other fancy dynamic JS stuff (that C# hates), and 2. I had to create a separate project JUST for the C#-JS files (and understandably so).  With TS, I can simply pop in a .ts file and watch the magic.  Perhaps things have changed with Script# lately, but for me at least, TS and the many existing definition files gave me all I needed to quickly build somewhat type-safe large scale frameworks, with intellisense for the DOM and most common libraries (and then some), while staying true to the coming ES6 semantics.<br />\n<br />\nJavaScript is like freestyle painting, and TypeScript is like adding in the guide lines and numbering - use it if you want to. ;)  C# is like art using stencils. :P ;)<br />\n",
    "PostedDate": "2014-04-24T10:47:23.563-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]