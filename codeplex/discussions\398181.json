[
  {
    "Id": "922477",
    "ThreadId": "398181",
    "Html": "\r\n<p>I tried to implmenent the Builder pattern in TypeScript. Things I noticed:</p>\r\n<p>- no abstract classes. I worked around this with an interface and an &quot;unvisible&quot; class PizzaBuilder</p>\r\n<p>- no protected. I worked around this with a getter to access instance variables in the base class.</p>\r\n<p>Please help to improve my code:</p>\r\n<p>&nbsp;</p>\r\n<p>builder.html</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;!</span><span style=\"color:#a31515\">DOCTYPE</span> <span style=\"color:red\">html</span><span style=\"color:blue\">&gt;</span>\r\n\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">html</span> <span style=\"color:red\">lang</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;en&quot;</span> <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;http://www.w3.org/1999/xhtml&quot;</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">head</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">meta</span> <span style=\"color:red\">charset</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;utf-8&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">title</span><span style=\"color:blue\">&gt;</span>TypeScript HTML App<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">title</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">link</span> <span style=\"color:red\">rel</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;stylesheet&quot;</span> <span style=\"color:red\">href</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;app.css&quot;</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/css&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">src</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;builder.js&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">head</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">body</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">h1</span><span style=\"color:blue\">&gt;</span>Typescript implementation of the Builder pattern<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">h1</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">a</span> <span style=\"color:red\">href</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;http://en.wikipedia.org/wiki/Builder_pattern&quot;</span> <span style=\"color:red\">target</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;_blank&quot;</span><span style=\"color:blue\">&gt;</span>Builder pattern on Wikipedia<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">a</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>\r\n        Output:\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">div</span> <span style=\"color:red\">id</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;content&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">body</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">html</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>builder.ts</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Typescript implementation of the Builder pattern</span>\r\n<span style=\"color:green\">// http://en.wikipedia.org/wiki/Builder_pattern</span>\r\n\r\nmodule Patterns {\r\n    <span style=\"color:blue\">export</span> module Builder {\r\n\r\n        <span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> Pizza {\r\n            <span style=\"color:blue\">private</span> dough: string;\r\n            <span style=\"color:blue\">private</span> sauce: string;\r\n            <span style=\"color:blue\">private</span> topping: string;\r\n\r\n            setDough(dough: string): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.dough = dough;\r\n            }\r\n\r\n            setSauce(sauce: string): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.sauce = sauce;\r\n            }\r\n\r\n            setTopping(topping: string): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.topping = topping;\r\n            }\r\n\r\n            show(): string {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;dough: &quot;</span> &#43; <span style=\"color:blue\">this</span>.dough &#43;\r\n                       <span style=\"color:#a31515\">&quot;, sauce: &quot;</span> &#43; <span style=\"color:blue\">this</span>.sauce &#43;\r\n                       <span style=\"color:#a31515\">&quot;, topping: &quot;</span> &#43; <span style=\"color:blue\">this</span>.topping;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">export</span> <span style=\"color:blue\">interface</span> PizzaBuilderIF {\r\n            getPizza(): Pizza;\r\n            createNewPizzaProduct(): <span style=\"color:blue\">void</span>;\r\n            buildDough(): <span style=\"color:blue\">void</span>;\r\n            buildSauce(): <span style=\"color:blue\">void</span>;\r\n            buildTopping(): <span style=\"color:blue\">void</span>;\r\n        }\r\n\r\n        <span style=\"color:green\">// make PizzaBuilder class private to the Patterns.Builder module</span>\r\n        <span style=\"color:green\">// no way to make it abstract :-)</span>\r\n        <span style=\"color:blue\">class</span> PizzaBuilder <span style=\"color:blue\">implements</span> PizzaBuilderIF {\r\n            <span style=\"color:blue\">private</span> pizza: Pizza;\r\n\r\n            getPizza(): Pizza {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.pizza;\r\n            }\r\n\r\n            createNewPizzaProduct(): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.pizza = <span style=\"color:blue\">new</span> Pizza();\r\n            }\r\n\r\n            buildDough(): <span style=\"color:blue\">void</span> {\r\n            };\r\n\r\n            buildSauce(): <span style=\"color:blue\">void</span> {\r\n            };\r\n\r\n            buildTopping(): <span style=\"color:blue\">void</span> {\r\n            };\r\n        }\r\n\r\n        <span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> HawaiianPizzaBuilder <span style=\"color:blue\">extends</span> PizzaBuilder {\r\n            buildDough(): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.getPizza().setDough(<span style=\"color:#a31515\">&quot;cross&quot;</span>);\r\n            }\r\n\r\n            buildSauce(): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.getPizza().setSauce(<span style=\"color:#a31515\">&quot;mild&quot;</span>);\r\n            }\r\n\r\n            buildTopping(): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.getPizza().setTopping(<span style=\"color:#a31515\">&quot;ham&#43;pineapple&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> SpicyPizzaBuilder <span style=\"color:blue\">extends</span> PizzaBuilder {\r\n            buildDough(): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.getPizza().setDough(<span style=\"color:#a31515\">&quot;pan baked&quot;</span>);\r\n            }\r\n\r\n            buildSauce(): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.getPizza().setSauce(<span style=\"color:#a31515\">&quot;hot&quot;</span>);\r\n            }\r\n\r\n            buildTopping(): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.getPizza().setTopping(<span style=\"color:#a31515\">&quot;pepperoni&#43;salami&quot;</span>);\r\n            }\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> Waiter {\r\n            <span style=\"color:blue\">private</span> pizzaBuilder: PizzaBuilderIF;\r\n\r\n            setPizzaBuilder(pb: PizzaBuilderIF): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.pizzaBuilder = pb;\r\n            }\r\n            getPizza(): Pizza {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.pizzaBuilder.getPizza();\r\n            }\r\n\r\n            constructPizza(): <span style=\"color:blue\">void</span> {\r\n                <span style=\"color:blue\">this</span>.pizzaBuilder.createNewPizzaProduct();\r\n                <span style=\"color:blue\">this</span>.pizzaBuilder.buildDough();\r\n                <span style=\"color:blue\">this</span>.pizzaBuilder.buildSauce();\r\n                <span style=\"color:blue\">this</span>.pizzaBuilder.buildTopping();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n<span style=\"color:blue\">class</span> BuilderExample {\r\n    <span style=\"color:blue\">private</span> element: HTMLElement;\r\n\r\n    constructor (element: HTMLElement) {\r\n        <span style=\"color:blue\">this</span>.element = element;\r\n    }\r\n\r\n    build(): <span style=\"color:blue\">void</span> {\r\n        <span style=\"color:blue\">var</span> waiter: Patterns.Builder.Waiter = <span style=\"color:blue\">new</span> Patterns.Builder.Waiter();\r\n        <span style=\"color:blue\">var</span> hawaiianPizzaBuilder: Patterns.Builder.PizzaBuilderIF = <span style=\"color:blue\">new</span> Patterns.Builder.HawaiianPizzaBuilder();\r\n        <span style=\"color:blue\">var</span> spicyPizzaBuilder: Patterns.Builder.SpicyPizzaBuilder = <span style=\"color:blue\">new</span> Patterns.Builder.SpicyPizzaBuilder();\r\n\r\n        waiter.setPizzaBuilder(hawaiianPizzaBuilder);\r\n        waiter.constructPizza();\r\n\r\n        <span style=\"color:blue\">var</span> pizza: Patterns.Builder.Pizza = waiter.getPizza();\r\n        console.log(pizza.show());\r\n        <span style=\"color:blue\">this</span>.element.innerHTML = pizza.show();\r\n    }\r\n}\r\n\r\nwindow.onload = () =&gt; {\r\n    <span style=\"color:blue\">var</span> el = document.getElementById(<span style=\"color:#a31515\">'content'</span>);\r\n    <span style=\"color:blue\">var</span> builderExample = <span style=\"color:blue\">new</span> BuilderExample(el);\r\n    builderExample.build();\r\n};\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2012-10-05T08:10:13.667-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922582",
    "ThreadId": "398181",
    "Html": "<p>TypeScript uses a structural type system, so using interfaces to mimic abstract classes is the preferred approach.&nbsp; There is currently no support for protected, but you could submit a feature request in the issue tracker with a (preferably small) sample code showing where it's required.</p>\r\n<p>Good luck!</p>",
    "PostedDate": "2012-10-05T11:25:37.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922699",
    "ThreadId": "398181",
    "Html": "<p>Here's how I implemented the TypeScript side of your code. It's almost verbatim as it's coded on Wikipedia but I lightened it up for JavaScript/TypeScript.&nbsp;&nbsp;The thing with TypeScript is that it's JavaScript at the end of the day so you want to keep code size in mind...&nbsp; The big changes&nbsp;were:</p>\r\n<p>- I used an interface to define the Pizza as it's lighter weight but you could still use a class if needed.</p>\r\n<p>- I dropped the PizzaBuilder.getPizza() accessor and just made PizzaBuilder.pizza a public field given there's no support for protected in TypeScript.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// \"Product\"</span>\r\n<span style=\"color: blue;\">interface</span> Pizza {\r\n\tdough?: string;\r\n\tsauce?: string;\r\n\ttopping?: string;\r\n}\r\n\r\n <span style=\"color: green;\">// \"Abstract Builder\"</span>\r\n <span style=\"color: blue;\">class</span> PizzaBuilder {\r\n\t<span style=\"color: blue;\">public</span> pizza: Pizza;\r\n \r\n    <span style=\"color: blue;\">public</span> createNewPizzaProduct(): <span style=\"color: blue;\">void</span> { <span style=\"color: blue;\">this</span>.pizza = {}; }\r\n \r\n    <span style=\"color: blue;\">public</span> buildDough(): <span style=\"color: blue;\">void</span> {}\r\n    <span style=\"color: blue;\">public</span> buildSauce(): <span style=\"color: blue;\">void</span> {}\r\n    <span style=\"color: blue;\">public</span> buildTopping(): <span style=\"color: blue;\">void</span> {}\r\n }\r\n \r\n <span style=\"color: green;\">// \"ConcreteBuilder\"</span>\r\n <span style=\"color: blue;\">class</span> HawaiianPizzaBuilder <span style=\"color: blue;\">extends</span> PizzaBuilder {\r\n    <span style=\"color: blue;\">public</span> buildDough(): <span style=\"color: blue;\">void</span>   { <span style=\"color: blue;\">this</span>.pizza.dough = <span style=\"color: #a31515;\">\"cross\"</span>; }\r\n    <span style=\"color: blue;\">public</span> buildSauce(): <span style=\"color: blue;\">void</span>   { <span style=\"color: blue;\">this</span>.pizza.sauce = <span style=\"color: #a31515;\">\"mild\"</span>; }\r\n    <span style=\"color: blue;\">public</span> buildTopping(): <span style=\"color: blue;\">void</span> { <span style=\"color: blue;\">this</span>.pizza.topping = <span style=\"color: #a31515;\">\"ham+pineapple\"</span>; }\r\n }\r\n \r\n <span style=\"color: green;\">// \"ConcreteBuilder\"</span>\r\n <span style=\"color: blue;\">class</span> SpicyPizzaBuilder <span style=\"color: blue;\">extends</span> PizzaBuilder {\r\n    <span style=\"color: blue;\">public</span> buildDough(): <span style=\"color: blue;\">void</span>   { <span style=\"color: blue;\">this</span>.pizza.dough = <span style=\"color: #a31515;\">\"pan baked\"</span>; }\r\n    <span style=\"color: blue;\">public</span> buildSauce(): <span style=\"color: blue;\">void</span>   { <span style=\"color: blue;\">this</span>.pizza.sauce = <span style=\"color: #a31515;\">\"hot\"</span>; }\r\n    <span style=\"color: blue;\">public</span> buildTopping(): <span style=\"color: blue;\">void</span> { <span style=\"color: blue;\">this</span>.pizza.topping = <span style=\"color: #a31515;\">\"pepperoni+salami\"</span>; }\r\n }\r\n\r\n <span style=\"color: green;\">// \"Director\"</span>\r\n <span style=\"color: blue;\">class</span> Waiter {\r\n    <span style=\"color: blue;\">private</span> pizzaBuilder: PizzaBuilder;\r\n \r\n    <span style=\"color: blue;\">public</span> setPizzaBuilder(pb: PizzaBuilder): <span style=\"color: blue;\">void</span> { <span style=\"color: blue;\">this</span>.pizzaBuilder = pb; }\r\n    <span style=\"color: blue;\">public</span> getPizza(): Pizza { <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.pizzaBuilder.pizza; }\r\n \r\n    <span style=\"color: blue;\">public</span> constructPizza(): <span style=\"color: blue;\">void</span> {\r\n       <span style=\"color: blue;\">this</span>.pizzaBuilder.createNewPizzaProduct();\r\n       <span style=\"color: blue;\">this</span>.pizzaBuilder.buildDough();\r\n       <span style=\"color: blue;\">this</span>.pizzaBuilder.buildSauce();\r\n       <span style=\"color: blue;\">this</span>.pizzaBuilder.buildTopping();\r\n    }\r\n }\r\n \r\n <span style=\"color: green;\">// A customer ordering a pizza.</span>\r\n <span style=\"color: blue;\">var</span> waiter = <span style=\"color: blue;\">new</span> Waiter();\r\n <span style=\"color: blue;\">var</span> hawaiianPizzaBuilder = <span style=\"color: blue;\">new</span> HawaiianPizzaBuilder();\r\n <span style=\"color: blue;\">var</span> spicyPizzaBuilder = <span style=\"color: blue;\">new</span> SpicyPizzaBuilder();\r\n \r\n waiter.setPizzaBuilder(hawaiianPizzaBuilder);\r\n waiter.constructPizza();\r\n <span style=\"color: blue;\">var</span> pizza = waiter.getPizza();\r\n \r\n</pre>\r\n</div>",
    "PostedDate": "2012-10-05T20:27:23.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]