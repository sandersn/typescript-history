[
  {
    "Id": "1108311",
    "ThreadId": "462466",
    "Html": "Possibly another reserved word available in constructors that creates a method to accept the variables value and returns the object itself. \r<br />\n<br />\ne.g.\r<br />\nclass Chained { <br />\n<pre><code>constructor(public chainable required: boolean= false, public chainable disabled: boolean = false) {\n}</code></pre>\n\n}\r<br />\n<br />\nwould lead to\r<br />\n<br />\nnew Chained().Required(true).Disabled(true);<br />\n",
    "PostedDate": "2013-10-16T07:16:31.813-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1108898",
    "ThreadId": "462466",
    "Html": "Assuming I understand your suggestion, my immediate thought is that's harder to read than the expanded version:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">class</span> Chained {\n   <span style=\"color:Blue;\">constructor</span>() { }\n   Required(b = <span style=\"color:Blue;\">false</span>) : Chained {...}\n   Disabled(b = <span style=\"color:Blue;\">false</span>) : Chained {...} \n}\r\n</pre></div>Chaining like that seems like a &quot;nice to have&quot;, but perhaps a bit of a corner case to add it to the language.<br />\n",
    "PostedDate": "2013-10-17T11:00:24.317-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]