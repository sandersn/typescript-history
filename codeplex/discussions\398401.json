[
  {
    "Id": "923161",
    "ThreadId": "398401",
    "Html": "\r\n<p>How would one extend jquery with a custom plugin...</p>\r\n<p>The recommended pattern for doing this, is according to the website of jQuery:<br>\r\n&nbsp;<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>(<span style=\"color:blue\">function</span>($) {\r\n  $.fn.myPlugin = <span style=\"color:blue\">function</span>() {\r\n      ...\r\n      <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.each( <span style=\"color:blue\">function</span>() {  <span style=\"color:green\">// maintain chainability</span>\r\n          <span style=\"color:blue\">var</span> $<span style=\"color:blue\">this</span> =$(<span style=\"color:blue\">this</span>);\r\n            ...\r\n     });\r\n\r\n  };\r\n}) (jQuery);<br><br>What would be best practice code in TypeScript?</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2012-10-07T14:38:51.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923169",
    "ThreadId": "398401",
    "Html": "<p>You would create your plugin the way you normally do as above... Then you need to extend TypeScripts definition of JQuery to include your added plugin methods.&nbsp; So for the above plugin its simply:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">interface</span> JQuery {\r\n    myPlugin(): JQuery;\r\n}\r\n</pre>\r\n</div>\r\n<p>Now anyone that refernces both the standard jquery.d.ts file and your plugin.ts file will see your extended version of JQuery.&nbsp; I posted a slightly more indepth example <a href=\"http://stackoverflow.com/questions/12719529/using-jquery-plugin-in-typescript/12722003#12722003\">over on StackOverflow</a> a few days ago.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-07T15:23:08.79-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923290",
    "ThreadId": "398401",
    "Html": "<p>Thx.. got it working</p>",
    "PostedDate": "2012-10-08T01:09:38.117-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "925955",
    "ThreadId": "398401",
    "Html": "<p>I have another question regarding this topic:</p>\r\n<p>How is the right way to write a jquery plugin? I read somewhere about this pattern:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>(<span style=\"color: blue;\">function</span> ($) {\r\n    <span style=\"color: blue;\">var</span> methods = {\r\n        init: <span style=\"color: blue;\">function</span> (options) {\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.each(<span style=\"color: blue;\">function</span> () {\r\n                <span style=\"color: blue;\">var</span> $<span style=\"color: blue;\">this</span> = $(<span style=\"color: blue;\">this</span>),\r\n                    data = $<span style=\"color: blue;\">this</span>.data(<span style=\"color: #a31515;\">\"MyPlugin\"</span>);\r\n            });\r\n        },\r\n        nextMethod: <span style=\"color: blue;\">function</span> () { ... }\r\n    };\r\n\r\n    $.fn.MyPlugin = <span style=\"color: blue;\">function</span> (method) {\r\n        <span style=\"color: green;\">// Method calling logic</span>\r\n        <span style=\"color: blue;\">if</span> (methods[method]) {\r\n            <span style=\"color: blue;\">return</span> methods[method].apply(<span style=\"color: blue;\">this</span>, Array.prototype.slice.call(arguments, 1));\r\n        } <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">typeof</span> method === <span style=\"color: #a31515;\">'object'</span> || !method) {\r\n            <span style=\"color: blue;\">return</span> methods.init.apply(<span style=\"color: blue;\">this</span>, arguments);\r\n        } <span style=\"color: blue;\">else</span> {\r\n            $.error(<span style=\"color: #a31515;\">'Method '</span> + method + <span style=\"color: #a31515;\">' does not exist on jQuery.MyPlugin'</span>);\r\n        }\r\n    };\r\n})(jQuery);\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>How would you write this in Typescript. Would you suggest another pattern? I defined the following Interface to get it working:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">interface</span> JQuery {\r\n    MyPlugin(...arguments: any[]): JQuery;\r\n}\r\n</pre>\r\n</div>\r\nObviously I wont get intellisense support f&uuml;r methods like \"init\" or \"nextMethod\". Please tell me, which is the right pattern for creating your own JQuery plugin.</p>",
    "PostedDate": "2012-10-12T11:59:57.06-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926433",
    "ThreadId": "398401",
    "Html": "<p>Here's one way to create a jQuery plugin in TypeScript that is a little more strongly typed.&nbsp;&nbsp;I chose to use a&nbsp;module to create a closure around the plugins methods.&nbsp; That lets you create global variable and such within the closure that can only be accessed by the plugin.&nbsp;</p>\r\n<p>The tricky bit with&nbsp;this of course is the plugin function intself.&nbsp; jQuery&nbsp;wants you to have only a single plugin function that then dispatches calls to your plugins other methods.&nbsp; This is to help avoid conflicts with other plugins but it makes strongly typing things difficult.&nbsp; The real problem is that the this pointer of your plugin function gets set to the jQuery instance being invoked and that has to be passed to&nbsp;the method you're dispatching to.&nbsp; In their example they simply call apply() on the invoked method using the 'this' of the jQuery object.&nbsp;I chose not to do that because TypeScript isn't going to know what that means so instead I pass the 'this' pointer to the invoked method as a stringly typed&nbsp;param which keeps TypeScript happy.</p>\r\n<p>There's still the crappyness around having&nbsp;this weekly typed plugin method but the problem is you need something that&nbsp;binds the this&nbsp;pointer to the invoked plugin method.&nbsp; I can think of one way to do this which would have you call your plugin with a syntax like&nbsp;\"$('.foo').MyPlugin().helloWorld();\" but there's some caching you'd have to do to keep things performant and I'd want to work up some code to ensure everything works...&nbsp; &nbsp;&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><div style=\"color: black; background-color: white;\"><pre>module MyPlugin {\r\n<span style=\"color: blue;\"><span style=\"color: #000000;\">\t</span>export</span> <span style=\"color: blue;\">function</span> init($sel: JQuery, options: IOptions): JQuery {\r\n        \t\t<span style=\"color: blue;\">return</span> $sel.each(<span style=\"color: blue;\">function</span> () {\r\n            \t\t<span style=\"color: blue;\">var</span> $<span style=\"color: blue;\">this</span> = $(<span style=\"color: blue;\">this</span>),\r\n                \t\tdata = $<span style=\"color: blue;\">this</span>.data(<span style=\"color: #a31515;\">\"MyPlugin\"</span>);\r\n        \t\t});\r\n\t}\r\n\t\r\n\t<span style=\"color: blue;\">export</span> <span style=\"color: blue;\">function</span> helloWorld($sel: JQuery): string {\r\n\t\t<span style=\"color: blue;\">return</span> <span style=\"color: #a31515;\">'hello world'</span>;\r\n\t}\r\n\r\n\t<span style=\"color: blue;\">export</span> <span style=\"color: blue;\">interface</span> IOptions {\r\n\t\t\r\n\t}\r\n}\r\n\r\n\r\n(<span style=\"color: blue;\">function</span> ($) {\r\n    $.fn.MyPlugin = <span style=\"color: blue;\">function</span> (method, ...args: any[]) {\r\n        <span style=\"color: green;\">// Method calling logic</span>\r\n<span style=\"color: blue;\"><span style=\"color: #000000;\">\t</span>if</span> (MyPlugin[method]) {\r\n            \t<span style=\"color: blue;\">return</span> MyPlugin[method].apply(MyPlugin, [<span style=\"color: blue;\">this</span>].concat(args));\r\n        \t} <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">typeof</span> method === <span style=\"color: #a31515;\">'object'</span> || !method) {\r\n            \t<span style=\"color: blue;\">return</span> MyPlugin.init.call(MyPlugin, <span style=\"color: blue;\">this</span>, arguments[0]);\r\n        \t} <span style=\"color: blue;\">else</span> {\r\n            \t$.error(<span style=\"color: #a31515;\">'Method '</span> + method + <span style=\"color: #a31515;\">' does not exist on jQuery.MyPlugin'</span>);\r\n        \t}\r\n    };\r\n})(jQuery);\r\n\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2012-10-14T12:35:08.297-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]