[
  {
    "Id": "1278964",
    "ThreadId": "554563",
    "Html": "First post please be kind...  I recently have been tinkering with TypesScript generics and I am trying to understand something about the way generics work (or didn't in my case),  I have placed the broken generic and the working version of the class in the same shared playground ( <a href=\"http://goo.gl/xGNoKy\" rel=\"nofollow\">http://goo.gl/xGNoKy</a> ), hopefully it survives the trip otherwise none of this will make sense.\r<br />\n<br />\nAs you can see, the difference between the broken and working version is that I simply changed references to the enumeration into references to the generic parameter. You will notice that on the TypeScript side of the playground there are three minor problems that show up where the generic parameter is used. I thought it was a constraint problem, but after a few attempts and thanks to looking at the generated Javascript I decided I needed to find a forum and ask a question to more seasoned/expert typescript programmers. \r<br />\n<br />\nWhat can I do that will coax the compiler into passing the generic types into the construction function much the same way as it does for the 'super' type?  Looking at the output also explained why I was having with issues trying to use (CRTP) in a different context, what am I missing here is this possible without resorting to some crude manual edits?\r<br />\n<br />\n-- BPT<br />\n",
    "PostedDate": "2014-07-29T18:30:52.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1279273",
    "ThreadId": "554563",
    "Html": "<a href=\"http://stackoverflow.com/questions/25027656/typescript-generics-passing-enumerations\" rel=\"nofollow\">http://stackoverflow.com/questions/25027656/typescript-generics-passing-enumerations</a>\r<br />\n<br />\nWhen cross-posting to StackOverflow, please include a link so people don't duplicate their effort.<br />\n",
    "PostedDate": "2014-07-30T10:35:52.61-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1279276",
    "ThreadId": "554563",
    "Html": "sorry about that<br />\n",
    "PostedDate": "2014-07-30T10:41:21.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1279358",
    "ThreadId": "554563",
    "Html": "I have a follow-up question with generics and enumerations, in the form of a comment*.  The problem has moved to when I specify the constraint and pass different enumerations to the generic.  Here is a link to the stackoverflow topic <a href=\"http://stackoverflow.com/questions/25027656/typescript-generics-passing-enumerations\" rel=\"nofollow\">http://stackoverflow.com/questions/25027656/typescript-generics-passing-enumerations</a>, my last comment includes an updated shared playground url with the new problem being demonstrated at bottom three lines. \r<br />\n<br />\nAlso for the members of the language team, kudos to you all - I am finding adopting Javascript into my solution arsenal is much more palatable with TypeScript, the ability to work so well with existing Javascript is a godsend. \r<br />\n<br />\nI also have a suggestion about constraint nomenclature, implements seems more natural but is not accepted? extends makes plenty of sense as well but implies (to me) a much stricter set of demands on the type provided? \r<br />\n<br />\n(*This probably violates half a dozen best practices with posting something on stackoverflow)  <br />\n",
    "PostedDate": "2014-07-30T16:51:36.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]