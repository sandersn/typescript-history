[
  {
    "Id": "1123170",
    "ThreadId": "468576",
    "Html": "With TypeScript's inheritance model is it possible, given either an instance of a class or the class constructor, to obtain a list of all constructor functions in the inheritance chain? For instance<br />\n<pre><code>class Organism\nclass Animal extends Organism\nclass Dog extends Animal\nclass Labradoodle extends Dog\n\nvar inst = new Labradoodle(&quot;T-Bone&quot;);</code></pre>\n\nI can get the constructor with:<br />\n<pre><code>var dogCtor = inst.constructor;\n(dogCtor === Dog) // true</code></pre>\n\nCan I also get at the 'Animal' and 'Organism' constructor functions?\r<br />\n<br />\nThanks.<br />\n",
    "PostedDate": "2013-11-13T14:32:04.407-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1123178",
    "ThreadId": "468576",
    "Html": "Nevermind, I got it. Here's my solution if anyone else might want this. I think it's fairly 'standard':<br />\n<pre><code>        public static getPrototypeChain(ctor: any): any[]\n        {\n            var chain = [];\n            var proto = ctor.prototype;\n            while (proto) {\n                chain.push(proto.constructor)\n                proto = Object.getPrototypeOf(proto);\n            }\n            return chain;\n        }</code></pre>\n\n",
    "PostedDate": "2013-11-13T15:01:29.193-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": "2014-02-17T11:28:28.233-08:00"
  }
]