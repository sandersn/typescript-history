[
  {
    "Id": "1209421",
    "ThreadId": "532323",
    "Html": "I'm not sure what best to call this, so I'll explain by example. I'm trying to write an interface that'll represent something like the Func delegate in .NET.\r<br />\n<br />\nFor example, this works:<br />\n<pre><code>export interface Func0&lt;TResult&gt;\n{\n  (): TResult;\n}\n\nexport interface Func1&lt;TResult, T0&gt;\n{\n  (arg: T0): TResult;\n}\n\nexport interface Func2&lt;TResult, T0, T1&gt;\n(etc.)</code></pre>\n\nBut can I combine all of these signatures into a single interface (Func), and have the compiler infer which I'm referring to based on the number of types specified?\r<br />\n<br />\nBy the way, I know I can use something like:<br />\n<pre><code>var func: () =&gt; number;</code></pre>\n\nBut this is mainly just curiosity.<br />\n",
    "PostedDate": "2014-02-17T06:11:55.403-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1209477",
    "ThreadId": "532323",
    "Html": "I don't believe this is possible at the moment.\r<br />\n<br />\nSee <a href=\"https://typescript.codeplex.com/workitem/1067\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/1067</a><br />\n",
    "PostedDate": "2014-02-17T07:42:07.637-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": "2014-02-17T11:24:31.643-08:00"
  },
  {
    "Id": "1209556",
    "ThreadId": "532323",
    "Html": "Looks like it. Thanks.<br />\n<br />\nI've added a vote to the workitem. A (somewhat ugly) workaround is:<br />\n<pre><code>    export interface Action0 {\n        (): void;\n    }\n\n    export interface Action1&lt;T1&gt; {\n        (arg: T1): void;\n    }\n\n    export interface Action2&lt;T1, T2&gt; {\n        (arg1: T1, arg2: T2): void;\n    }\n\n    export interface Action3&lt;T1, T2, T3&gt; {\n        (arg1: T1, arg2: T2, arg3: T3): void;\n    }</code></pre>\n\nI have similar for Func and PromiseFunc, e.g.:<br />\n<pre><code>    export interface Func2&lt;T1, T2, TResult&gt; {\n        (arg1: T1, arg2: T2): TResult;\n    }\n\n    export interface PromiseFunc2&lt;T1, T2, TResult&gt; {\n        (arg1: T1, arg2: T2): JQueryPromise&lt;TResult&gt;;\n    }</code></pre>\n\nUsing these helps to make some of the more complex function interfaces looks a bit more readable. Hopefully the 'overloaded' interfaces (if that's the right term) will be supported at some point.<br />\n",
    "PostedDate": "2014-02-17T11:24:24.28-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]