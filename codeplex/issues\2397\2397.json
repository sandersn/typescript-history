{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Duplicate of https://typescript.codeplex.com/workitem/2337",
    "ClosedDate": "2014-04-07T13:05:21.543-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "If I have multiple classes all in individual files, but are all inheritantly related, it's sometimes handy to have a files that exports these collectively:\r\n\r\nshapes.ts:\r\n```\r\nexport import Point = require(\"./Point\");\r\nexport import Circle = require(\"./Circle\");\r\n```\r\n\r\nAnd can be imported into another file:\r\n\r\napp.ts:\r\n```\r\nimport shapes = require(\"shapes.ts\");\r\nvar p = new shapes.Point(0, 0);\r\nvar c = new shapes.Circle(p, 5);\r\n```\r\n\r\netc.\r\n\r\nThis works (compiles to working JavaScript), but the types don't seem to flow through, causing false errors in Visual Studio, and breaking intellisense. \r\n\r\nFor example, in the above code (app.ts) if I were to type 'shapes.' then I can see that 'shapes' has two properties called 'Point' and 'Circle'. However, I get errors on the lines that use these constructors (\"invalid 'new' expression\").\r\n\r\nAgain, this does actually compile and work so it just seems to be the flow of types from the 'export import' that seems to be confusing intellisense.",
    "LastUpdatedDate": "2014-04-07T13:05:21.543-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-04-07T03:43:26.7-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Duplicate"
    },
    "Summary": "'export import' intellisense/type flowing issue",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2397
  },
  "FileAttachments": [],
  "Comments": []
}