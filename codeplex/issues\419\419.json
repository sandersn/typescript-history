{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Fixed in develop branch",
    "ClosedDate": "2013-02-07T13:53:35.287-08:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Definition for Array.prototype.concat states: concat(...items: _element[][]): _element[];\n\nAccording ES6 specification concat accepts non-array arguments too. Shouldn't the definition be something like the following?\n\nconcat(...items: any[]): _element[];\n\nIt would probably be better to define it like this:\n\nconcat(...items: _element[][]): _element[];\nconcat(...items: _element[]): _element[];\n\nHowever will it allow mixing the input types? The compiler doesn't seem to complain if I try it.\n\nKind regards",
    "LastUpdatedDate": "2017-11-27T11:51:35-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-11-14T02:49:29.98-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Array.prototype.concat definition incorrect",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 419
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I believe there's currently a compiler bug related to array rank confusion, which is why you're not seeing an error. I don't think our type system currently allows us to express a mix of T and T[] in an argument list, but it's probably a rare thing anyway. I'll add the overload.",
      "PostedDate": "2012-11-14T09:21:47.95-08:00",
      "Id": 82486
    }
  ]
}