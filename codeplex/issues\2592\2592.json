{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:24.143-07:00",
    "CommentCount": 9,
    "Custom": null,
    "Description": "Seen with VS 2012 and TS 1.0.1 \r\n\r\nIf you set all typescript files to be compiled into a single file, and have them built as part of the build process (so that e.g. in release builds you can strip comments), then the typescript compiler's output file creates the classes in a different order, depending on whether the typescript compilation is triggered by saving a .ts file, or by building the project.\r\n\r\nThe only reference I've found to this is at stack overflow, http://stackoverflow.com/questions/23902107/visual-studio-2013-typescript-compiler-isnt-respecting-references-ts-file which states that files are being built based on the order that they appear in the Visual Studio Project File.\r\n\r\nThe generated file should have a consistent order no matter which way the typescript compilation is triggered.",
    "LastUpdatedDate": "2014-07-28T15:17:24.143-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-06-30T10:32:53.173-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Visual Studio builds files in an inconsistent order",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 3,
    "Id": 2592
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "same in VS 2013 Update 2",
      "PostedDate": "2014-06-30T10:38:49.323-07:00",
      "Id": 151160
    },
    {
      "Message": "You should be able to handle that using _references file to specify the order of the output. the _references.ts has to be at the root of your project, and not in a subfolder. So in your project file, you would have something like:\n```\n<TypeScriptCompile>_references.ts</TypeScriptCompile>\n```\nThe language service (Compile on Save) and the build targets (F5) will both recognize this file and push it to the top of the list, as if you passed it to the compiler on the command line as the first file. this way any /// references in the _references.ts file will be evaluated first and will take precedence.\n\nPlease note, you do not need /// references to all your files, you just need references to files that you care to order.",
      "PostedDate": "2014-07-01T16:01:14.44-07:00",
      "Id": 151301
    },
    {
      "Message": "Thanks. Is \"_references.ts\" a magic file name, or just a convention that _ will force to be early in the list? ",
      "PostedDate": "2014-07-02T02:51:46.91-07:00",
      "Id": 151330
    },
    {
      "Message": "It is a special name, you could have other files with names like \"__.ts\" and \"_references.ts\" at the root will still come first. \nyou have to be using the default typescript build targets for this to work, if you have a custom build system you will need to support that independently.",
      "PostedDate": "2014-07-02T09:38:51.99-07:00",
      "Id": 151362
    },
    {
      "Message": "@mhegazy I was the original questioner for the referenced StackOverflow question.\n\nI was using _references.ts but since it wasn't in the root it was essentially treated as a normal file, and only by editing the .csproj file to make it the first in the list did it have any impact - in which case it could just as easily been called foo.ts\n\nI have to say this behavior is extremely unintuitive. Most people I would expect are incorporating typescript into a web project with the files under the Scripts folder. I bet if you told 100 people they needed to add a _references.ts file to the project only one of them would put it in the root.\n\nI love Typescript but the initial learning curve for just getting it working with Visual Studio was very frustrating. This only adds to the confusion.\n\nNow I undersatnd the current behavior it's incredibly unintuitive. I read many articles about typescript dependencies and _references.ts was mentioned very frequently. Not once did I see this stupulation listed.\n\nWhy not look for _references.ts everywhere? Complain if there are two of them perhaps.",
      "PostedDate": "2014-07-02T14:10:09.063-07:00",
      "Id": 151404
    },
    {
      "Message": "Thanks for your feedback. I will add a new documentation article for using _references.ts to list all the caveats. \nWe could consider scanning all files and searching for _references.ts anywhere. I would recommend opening a suggestion issue to track getting this changed.",
      "PostedDate": "2014-07-02T14:40:46.623-07:00",
      "Id": 151412
    },
    {
      "Message": "The \"_references.ts\" is a useful workaround to know - but it is a workaround. It would be great if both methods of generating the file made the output in the same order.",
      "PostedDate": "2014-07-03T03:40:19.403-07:00",
      "Id": 151490
    },
    {
      "Message": "The problem is order of the output is dependent on the order of files passed to the compiler on the command line. project files are not order sensitive in VS, and the user have no way to change the order in the UI. So you are left with the problem of having to define order in VS.\n\nThe default build targets do honor these as well. So if you build using MSBuild from the command line you will get the same output as from Compile on Save in Visual Studio. If you have your custom build solution, then you will need to ensure that _references.ts is the first file passed to the compiler, and then you would be emitting the files the same way in both build paths.\n\nIn the future, the compiler can be smart enough to emit files in the correct order based on dependencies between constructs, but until this happens, we need a way to specify order.",
      "PostedDate": "2014-07-03T09:56:54.687-07:00",
      "Id": 151530
    },
    {
      "Message": "Ideally we wouldn't even need a _references.ts. Within a VS project, doesn't the compiler have everything required to order the code properly? I would like to avoid having to manage the dependencies between files in a same VS project.",
      "PostedDate": "2014-07-06T11:51:48.67-07:00",
      "Id": 151694
    }
  ]
}