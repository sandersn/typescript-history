{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:23.94-07:00",
    "CommentCount": 8,
    "Custom": null,
    "Description": "The request is really for the ability to describe read-only (or write-only) properties in an interface.\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 1.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Medium",
      "Severity": 100,
      "Id": 2
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-15T13:33:07.537-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Get/set accessors in interfaces",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 77,
    "Id": 260
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "In strict mode JS throws an error if it is tried to \"Writing to a read-only property\" e.g. if it has only a getter (http://msdn.microsoft.com/en-US/library/br230269%28v=vs.94%29.aspx).\n\nSo I hope that TypeScript will add more infos to a property for the type system in the future than only the type, to get errors for read-only properties at compile time.",
      "PostedDate": "2012-10-16T09:26:29.42-07:00",
      "Id": 80105
    },
    {
      "Message": "As suggested in the description, the likely way this would be done in TypeScript is to support a notion of \"readonly\" on interface members.  Get-only accessors in classes would implicitly define a readonly property, but other patterns could also indicate that at compile-time TypeScript should error on attempts to modify a property, even if it is not strictly protected at runtime.",
      "PostedDate": "2013-01-18T16:52:48.197-08:00",
      "Id": 86581
    },
    {
      "Message": "I would like to be able to describe getters and setters in interfaces, maybe similar how ActionScript 3.0 handled this.\n\n```\ninterface IVisible {\n\tget visible():bool\n\tset visible(value:bool)\n}\n```\nread-only:\n```\ninterface IVisible {\n\tget visible():bool\n}\n```\n\nwrite-only:\n```\ninterface IVisible {\n\tget visible():bool\n}\n```",
      "PostedDate": "2013-04-24T02:30:09-07:00",
      "Id": 98301
    },
    {
      "Message": "There is an error in write-only interface. It should be: set visible(visible:bool);",
      "PostedDate": "2013-11-26T00:35:05.423-08:00",
      "Id": 124273
    },
    {
      "Message": "The most simple syntax would be\n\n```\ninterface IFace {\n    get set visible: bool\n}\n```\n\nFor at least readable:\n\n```\ninterface IFace {\n    get visible: bool\n}\n```\n\nFor at least writable:\n\n```\ninterface IFace {\n    set visible: bool\n}\n```\n\nImplementation would decide if it provides more than promised. For example \n\n```\ninterface IFace {\n    set visible: bool\n}\n```\n\ncould be implemented either as\n\n```\npublic visible: bool\n```\n\nor\n\n```\nset visible(visible: bool): number {\n        this.visible = visible;\n    }\n```",
      "PostedDate": "2014-06-05T00:39:10.707-07:00",
      "Id": 148898
    },
    {
      "Message": "Sorry, I didn't first understand that some people want set a property as read-only (the topic said otherwise). But the same syntax [get] [set] prop could be used.",
      "PostedDate": "2014-06-05T00:41:53.35-07:00",
      "Id": 148899
    },
    {
      "Message": "The more I think about this the more I feel that restrictions don't belong to interfaces. Interface promises you can do something with an implementation, not that you can NOT do something. It would be same as adding a new imaginary keyword \"never\":\n\nnever DoSomething();\n\nwhich would promise that implementations couldn't add method \"DoSomething\".",
      "PostedDate": "2014-06-05T01:07:06.003-07:00",
      "Id": 148904
    },
    {
      "Message": "Interfaces are all about restrictions and surface. It describes the contract, so if you have classes with getters and want to unify their shape in an interface then a getter annotation is the right thing to do. Same with setters.\n\nI like Eelik's long example 3 comments op. I feel nothing for `never`, that is just weird.\n\n",
      "PostedDate": "2014-06-05T03:30:34.903-07:00",
      "Id": 148913
    }
  ]
}