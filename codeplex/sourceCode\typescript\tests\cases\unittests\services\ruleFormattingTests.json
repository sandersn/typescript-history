{ input: "function a() {\r\nvar b  =  0;//}\r\n}", operations: [ { operation: "CloseBrace", point: { position: 31 } } ], expected: "function a() {\r\nvar b  =  0;//}\r\n}" },
{ input: "function foo() {\n    do {\n        } while (y < 10)\n\n}", operations: [ { operation: "Enter", point: { position: 50 } } ], expected: "function foo() {\n    do {\n    } while (y < 10)\n\n}" },
{ input: "for (var i = 0; i < 10; i++) {\r\n    for (var j = 0; j < 10; j++) {\r\n        j -= i\r\n}\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 87 } } ], expected: "for (var i = 0; i < 10; i++) {\r\n    for (var j = 0; j < 10; j++) {\r\n        j -= i\r\n    }\r\n\r\n}" },
{ input: "function a() {\r\n    return (\r\n        {\r\n                x: 0\r\n            }\r\n}", operations: [ { operation: "CloseBrace", point: { position: 76 } } ], expected: "function a() {\r\n    return (\r\n        {\r\n            x: 0\r\n        }\r\n}" },
{ input: " if ( a[\";\"])\r\nb++;", operations: [ { operation: "Semicolon", point: { position: 10 } } ], expected: " if ( a[\";\"])\r\nb++;" },
{ input: "(function () {\r\n    a({\r\n        b: 0\r\n    });\r\n\r\n})();", operations: [ { operation: "Enter", point: { position: 48 } } ], expected: "(function () {\r\n    a({\r\n        b: 0\r\n    });\r\n\r\n})();" },
{ input: "var obj={a:{b:2,c:{d:{e:{\r\n}}}}}", operations: [ { operation: "Enter", point: { position: 27 } } ], expected: "var obj = {\n    a: {\n        b: 2, c: {\n            d: {\n                e: {\r\n                }\n            }\n        }\n    }\n}" },
{ input: "if(1)if(1)if(1)if(1)x+=2;", operations: [ { operation: "Semicolon", point: { position: 25 } } ], expected: "if (1) if (1) if (1) if (1) x += 2;" },
{ input: "\r\nvar webclass = [\r\n            { 'student':\r\n                       { 'id': '1', 'name': 'Linda Jones', 'legacySkill': 'Access, VB 5.0' }\r\n            }\r\n]", operations: [ { operation: "Document" } ], expected: "\r\nvar webclass = [\r\n            {\n                'student':\r\n                         { 'id': '1', 'name': 'Linda Jones', 'legacySkill': 'Access, VB 5.0' }\r\n            }\r\n]" },
{ input: "function f(x){ return x }\nwhile (f(true))\n    y++;\n", operations: [ { operation: "Enter", point: { position: 51 } } ], expected: "function f(x){ return x }\nwhile (f(true))\n    y++;\n" },
{ input: "throw     e;", operations: [ { operation: "Document" } ], expected: "throw e;" },
{ input: "x = {\n    a: 1,\n    b: 1\n        +\n                // test\n                2\n}", operations: [ { operation: "Document" } ], expected: "x = {\n    a: 1,\n    b: 1\n        +\n                // test\n                2\n}" },
{ input: "return         1;", operations: [ { operation: "Document" } ], expected: "return 1;" },
{ input: "var x = [\n    1,\n    2,\n    3\n]", operations: [ { operation: "Document" } ], expected: "var x = [\n    1,\n    2,\n    3\n]" },
{ input: "switch \r\n( a ){\r\n    case 1:x+=2; break\r\n    case 2:{\r\n    }\r\n}\r\n", operations: [ { operation: "Enter", point: { position: 9 } } ], expected: "switch\r\n(a) {\r\n    case 1:x+=2; break\r\n    case 2:{\r\n    }\r\n}\r\n" },
{ input: "if (a)\r\ntest;\r\nelse\r\nif (b)\r\ntest;\r\n", operations: [ { operation: "Enter", point: { position: 36 } } ], expected: "if (a)\r\ntest;\r\nelse\r\nif (b)\r\n    test;\r\n" },
{ input: "do{\r\ndo{\r\ndo{\r\n}while(a!==b)\r\n}while(a!==b)\r\n}while(a!==b)", operations: [ { operation: "CloseBrace", point: { position: 16 } } ], expected: "do{\r\ndo{\r\n    do {\r\n    } while (a !== b)\r\n}while(a!==b)\r\n}while(a!==b)" },
{ input: "label1:\r\nvar a;\r\nvar b;", operations: [ { operation: "Document" } ], expected: "label1:\r\n    var a;\r\nvar b;" },
{ input: "\r\nfunction a() {\r\nfunction test() // test\r\n{\r\nif (test) // test\r\n{\r\n}\r\n}\r\n}", operations: [ { operation: "Document" } ], expected: "\r\nfunction a() {\r\n    function test() // test\r\n    {\r\n        if (test) // test\r\n        {\r\n        }\r\n    }\r\n}" },
{ input: "var obj = {\r\na:{\r\nb:2,c:{\r\nd: {\r\ne: function f() {\r\nreturn obj.a.c.d.e() +f();\r\n}\r\n}\r\n}\r\n}\r\n};", operations: [ { operation: "Semicolon", point: { position: 94 } } ], expected: "var obj = {\r\n    a: {\r\n        b: 2, c: {\r\n            d: {\r\n                e: function f() {\r\n                    return obj.a.c.d.e() + f();\r\n                }\r\n            }\r\n        }\r\n    }\r\n};" },
{ input: "function f() {\r\n    do{\r\nx++ }\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 32 } } ], expected: "function f() {\r\n    do{\r\n        x++\n    }\r\n\r\n}" },
{ input: "function foo  (a, b, c)", operations: [ { operation: "Document" } ], expected: "function foo(a, b, c)" },
{ input: "{ var b;\n}", operations: [ { operation: "Document" } ], expected: "{\n    var b;\n}" },
{ input: "var z =    {\na: 1};", operations: [ { operation: "Document" } ], expected: "var z = {\n    a: 1\n};" },
{ input: "for (var i = 0; i < 10; i++)\n   { var a\n}", operations: [ { operation: "Document" } ], expected: "for (var i = 0; i < 10; i++) {\n    var a\n}" },
{ input: "if (1)\n     {\nvar a }", operations: [ { operation: "Document" } ], expected: "if (1) {\n    var a\n}" },
{ input: "while (1)\n      { var a\n}", operations: [ { operation: "Document" } ], expected: "while (1) {\n    var a\n}" },
{ input: "do\n     { var a\n}   while (1)", operations: [ { operation: "Document" } ], expected: "do {\n    var a\n} while (1)" },
{ input: "for (var a in b)\n      { var a\n}", operations: [ { operation: "Document" } ], expected: "for (var a in b) {\n    var a\n}" },
{ input: "with (x)\n       { var a\n}", operations: [ { operation: "Document" } ], expected: "with (x) {\n    var a\n}" },
{ input: "try\n        { var a\n}   \ncatch (e)\n         { var a\n}   \nfinally\n   {\n}", operations: [ { operation: "Document" } ], expected: "try {\n    var a\n}\ncatch (e) {\n    var a\n}\nfinally {\n}" },
{ input: "switch (x)\n     { case 1:   { var a }\n}", operations: [ { operation: "Document" } ], expected: "switch (x) {\n    case 1: { var a }\n}" },
{ input: "function f()\n       { var x\n}", operations: [ { operation: "Document" } ], expected: "function f() {\n    var x\n}" },
{ input: "if(1)if(1)if(1)if(1){x+=2\r\n}", operations: [ { operation: "CloseBrace", point: { position: 28 } } ], expected: "if (1) if (1) if (1) if (1) {\n    x += 2\r\n}" },
{ input: "switch (a){\r\n    case 1: x += 2;\r\n case   2  : \r\n     for (var i=0;i<10;i++)\r\ni  --;\r\n}\r\n", operations: [ { operation: "Semicolon", point: { position: 84 } } ], expected: "switch (a){\r\n    case 1: x += 2;\r\n case   2  : \r\n     for (var i = 0; i < 10; i++)\r\n         i--;\r\n}\r\n" },
{ input: "do{for(var i=0;i<10;i++)i-=2}while(1!==1);", operations: [ { operation: "Semicolon", point: { position: 42 } } ], expected: "do { for (var i = 0; i < 10; i++) i -= 2 } while (1 !== 1);" },
{ input: "for(var i=0;i<10;i++){for(var j=0;j<10;j++)\r\n{j-=i}}", operations: [ { operation: "Enter", point: { position: 45 } } ], expected: "for (var i = 0; i < 10; i++) {\n    for (var j = 0; j < 10; j++)\r\n    { j -= i }\n}" },
{ input: "function f() {\r\nstring='string\\r\n        line2' + 'other part'}", operations: [ { operation: "CloseBrace", point: { position: 63 } } ], expected: "function f() {\r\n    string = 'string\\r\n        line2' + 'other part'\n}" },
{ input: "x =\r\n    function ()\r\n{\r\n        var a\r\n}", operations: [ { operation: "Document" } ], expected: "x =\r\n    function () {\r\n        var a\r\n    }" },
{ input: "if (a   instanceof      b) { }", operations: [ { operation: "Document" } ], expected: "if (a instanceof b) { }" },
{ input: "do               a++; while (0)", operations: [ { operation: "Document" } ], expected: "do a++; while (0)" },
{ input: "foo\r\n(1, 2, 3)", operations: [ { operation: "Document" } ], expected: "foo\r\n(1, 2, 3)" },
{ input: "if(1) //comment\r\n{\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "if (1) //comment\r\n{\r\n}\r\n" },
{ input: "var x =\n           [\n1\n]", operations: [ { operation: "Document" } ], expected: "var x =\n           [\n1\n           ]" },
{ input: "\r\n{\r\n    function f() {\r\n        var s = 1\r\n            }\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 59 } } ], expected: "\r\n{\r\n    function f() {\r\n        var s = 1\r\n    }\r\n\r\n}" },
{ input: "\r\ndefine(null,\r\n            function test() {\r\nvar a;\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\ndefine(null,\r\n            function test() {\r\n                var a;\r\n            }\r\n" },
{ input: "x = [\r\n    1,\r\n\r\n]", operations: [ { operation: "Enter", point: { position: 15 } } ], expected: "x = [\r\n    1,\r\n\r\n]" },
{ input: "var x =\n           {\na: 1\n}", operations: [ { operation: "Document" } ], expected: "var x =\n           {\n               a: 1\n           }" },
{ input: "for(var i=0;i<10;i++){for(var j=0;j<10;j++){j-=i}}", operations: [ { operation: "CloseBrace", point: { position: 50 } } ], expected: "for (var i = 0; i < 10; i++) { for (var j = 0; j < 10; j++) { j -= i } }" },
{ input: "function f()\n{\n    for (a in b)\n    a++;\n}", operations: [ { operation: "Semicolon", point: { position: 40 } } ], expected: "function f()\n{\n    for (a in b)\n        a++;\n}" },
{ input: "if(x!=1^y===2)   \r\nx+=2\r\n", operations: [ { operation: "Enter", point: { position: 25 } } ], expected: "if(x!=1^y===2)   \r\n    x += 2\r\n" },
{ input: "if (1)\r\n    if (1)\r\n        x++\r\n    else\r\n        if (1)\r\n           x--\r\nelse\r\n x+=2\r\n", operations: [ { operation: "Enter", point: { position: 81 } } ], expected: "if (1)\r\n    if (1)\r\n        x++\r\n    else\r\n        if (1)\r\n           x--\r\n        else\r\n            x += 2\r\n" },
{ input: "switch (a){\r\ncase   1   :   x+=2 ;    break;\r\n    case 2:{\r\n    }\r\n}\r\n", operations: [ { operation: "Semicolon", point: { position: 44 } } ], expected: "switch (a){\r\n    case 1: x += 2; break;\r\n    case 2:{\r\n    }\r\n}\r\n" },
{ input: "{ { {\r\n{\r\ntest\r\n}\r\n}\r\n}\r\n}", operations: [ { operation: "Selection", span: { start: 7, length: 19 } } ], expected: "{ { {\r\n    {\r\n        test\r\n    }\r\n}\r\n}\r\n}" },
{ input: "do {\r\n    do {\r\n        do {\r\n        }while(a!==b)\r\n\r\n} while (a !== b)\r\n} while (a !== b)", operations: [ { operation: "Enter", point: { position: 55 } } ], expected: "do {\r\n    do {\r\n        do {\r\n        }while(a!==b)\r\n\r\n    } while (a !== b)\r\n} while (a !== b)" },
{ input: "\r\nswitch (t) {\r\n    case 1:\r\n{\r\ntest\r\n}\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\nswitch (t) {\r\n    case 1:\r\n        {\r\n            test\r\n        }\r\n}\r\n" },
{ input: "if (true) {\r\n    \r\n}", operations: [ { operation: "Document" } ], expected: "if (true) {\r\n\r\n}" },
{ input: "for(var j=0;j<10;j++)\r\nj-=i;", operations: [ { operation: "Semicolon", point: { position: 28 } } ], expected: "for (var j = 0; j < 10; j++)\r\n    j -= i;" },
{ input: "function a() {\r\n    function b() {\r\n        //\r\n\r\n    }\r\n}", operations: [ { operation: "Enter", point: { position: 48 } } ], expected: "function a() {\r\n    function b() {\r\n        //\r\n\r\n    }\r\n}" },
{ input: "if(1)if(1)if(1)if(1)x+=2\r\n", operations: [ { operation: "Enter", point: { position: 26 } } ], expected: "if (1) if (1) if (1) if (1) x += 2\r\n" },
{ input: "do{do{do{}while(a!==b)}while(a!==b)}while(a!==b)\r\n", operations: [ { operation: "Enter", point: { position: 50 } } ], expected: "do { do { do { } while (a !== b) } while (a !== b) } while (a !== b)\r\n" },
{ input: "foo(\r\n)", operations: [ { operation: "Document" } ], expected: "foo(\r\n)" },
{ input: "function f() {\r\n'use strict';\r\n}", operations: [ { operation: "Semicolon", point: { position: 29 } } ], expected: "function f() {\r\n    'use strict';\r\n}" },
{ input: "var x = function() {\n//comment\nreturn 1;\n}", operations: [ { operation: "Document" } ], expected: "var x = function () {\n    //comment\n    return 1;\n}" },
{ input: "    function foo4() {\r\n        function foo5() {\r\n            function foo6() {\r\n                test1\r\n                }\r\n                test2\r\n                }\r\n                }", operations: [ { operation: "Selection", span: { start: 62, length: 120 } } ], expected: "    function foo4() {\r\n        function foo5() {\r\n            function foo6() {\r\n                test1\r\n            }\r\n            test2\r\n        }\r\n    }" },
{ input: "do{\r\ndo{\r\ndo{\r\n}while(a!==b)\r\n}while(a!==b)\r\n}while(a!==b)", operations: [ { operation: "CloseBrace", point: { position: 46 } } ], expected: "do {\r\n    do {\r\n        do {\r\n        } while (a !== b)\r\n    } while (a !== b)\r\n} while (a !== b)" },
{ input: "if (true)\n// test\n    test;", operations: [ { operation: "Document" } ], expected: "if (true)\n    // test\n    test;" },
{ input: "function test() {\r\n    return (\r\n            function test() {\r\n                test;\r\n            }\r\n        );\r\n}", operations: [ { operation: "Document" } ], expected: "function test() {\r\n    return (\r\n            function test() {\r\n                test;\r\n            }\r\n        );\r\n}" },
{ input: "for(var i=0;i<10;i++){\r\nfor(var j=0;j<10;j++){\r\nj-=i\r\n}}", operations: [ { operation: "CloseBrace", point: { position: 56 } } ], expected: "for (var i = 0; i < 10; i++) {\r\n    for (var j = 0; j < 10; j++) {\r\n        j -= i\r\n    }\n}" },
{ input: " var a  =  0 ;", operations: [ { operation: "Semicolon", point: { position: 14 } } ], expected: "var a = 0;" },
{ input: "var obj={a:{b:2,c:{d:\r\n{e:{}}}}}", operations: [ { operation: "Enter", point: { position: 23 } } ], expected: "var obj = {\n    a: {\n        b: 2, c: {\n            d:\r\n            { e: {} }\n        }\n    }\n}" },
{ input: "function foo() {\r\ntry {\r\nx+=2\r\n}\r\ncatch( e){\r\nx+=2\r\n}finally {\r\nx+=2\r\n}\r\n}", operations: [ { operation: "CloseBrace", point: { position: 74 } } ], expected: "function foo() {\r\n    try {\r\n        x += 2\r\n    }\r\n    catch (e) {\r\n        x += 2\r\n    } finally {\r\n        x += 2\r\n    }\r\n}" },
{ input: "var obj = {\r\na: {\r\nb: 2, c: {\r\nd: {\r\ne: function f() {\r\nreturn obj.a.c.d.e() + f();\r\n}\r\n}\r\n}\r\n}}", operations: [ { operation: "CloseBrace", point: { position: 96 } } ], expected: "var obj = {\r\n    a: {\r\n        b: 2, c: {\r\n            d: {\r\n                e: function f() {\r\n                    return obj.a.c.d.e() + f();\r\n                }\r\n            }\r\n        }\r\n    }\n}" },
{ input: "if (x!=1^y===2){   x+=2}", operations: [ { operation: "CloseBrace", point: { position: 24 } } ], expected: "if (x != 1 ^ y === 2) { x += 2 }" },
{ input: "function test() {\r\n    var a;\r\n    label:\r\n    for (; ;)\r\n\r\n", operations: [ { operation: "Enter", point: { position: 58 } } ], expected: "function test() {\r\n    var a;\r\n    label:\r\n        for (; ;)\r\n\r\n" },
{ input: "for(var i=0;i<10;i++){for(var j=0;j<10;j++){\r\nj-=i}}", operations: [ { operation: "Enter", point: { position: 46 } } ], expected: "for (var i = 0; i < 10; i++) {\n    for (var j = 0; j < 10; j++) {\r\n        j -= i\n    }\n}" },
{ input: "do {\r\n    for (var i = 0; i < 10; i++)\r\n        i -= 2\r\n        }\r\nwhile (1 !== 1)", operations: [ { operation: "Enter", point: { position: 67 } } ], expected: "do {\r\n    for (var i = 0; i < 10; i++)\r\n        i -= 2\r\n}\r\nwhile (1 !== 1)" },
{ input: "{\r\n    try {\r\n    } catch (e) {\r\n    }\r\n}", operations: [ { operation: "Document" } ], expected: "{\r\n    try {\r\n    } catch (e) {\r\n    }\r\n}" },
{ input: "{ { {\r\n{\r\n}\r\n}\r\n}\r\n}", operations: [ { operation: "Selection", span: { start: 7, length: 13 } } ], expected: "{ { {\r\n    {\r\n    }\r\n}\r\n}\r\n}" },
{ input: "for (var i = 0; i < 10; i++) {\r\n    for (var j = 0; j < 10; j++) {\r\nj -= i}}\r\n", operations: [ { operation: "Enter", point: { position: 78 } } ], expected: "for (var i = 0; i < 10; i++) {\r\n    for (var j = 0; j < 10; j++) {\r\n        j -= i\n    }\n}\r\n" },
{ input: "var a = {\r\n}", operations: [ { operation: "Document" } ], expected: "var a = {\r\n}" },
{ input: "\r\n   switch   ( a ) {\r\n    case 1: x+=2;\r\n    case 2:{\r\n    }\r\n}\r\n", operations: [ { operation: "Enter", point: { position: 2 } } ], expected: "\r\nswitch (a) {\r\n    case 1: x+=2;\r\n    case 2:{\r\n    }\r\n}\r\n" },
{ input: "function a() {\r\nvar b  =  0;//;\r\n}", operations: [ { operation: "Semicolon", point: { position: 31 } } ], expected: "function a() {\r\nvar b  =  0;//;\r\n}" },
{ input: "for (a      in          b) { }", operations: [ { operation: "Document" } ], expected: "for (a in b) { }" },
{ input: "\r\n{\r\nfunction test(/* test */ a,\r\n              /* test */ b\r\n              /* test */) {\r\n// test\r\n}\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\n{\r\n    function test(/* test */ a,\r\n                  /* test */ b\r\n        /* test */) {\r\n        // test\r\n    }\r\n}\r\n" },
{ input: "    //\r\n", operations: [ { operation: "Enter", point: { position: 8 } } ], expected: "//\r\n" },
{ input: " if ( a[\"}\"])\r\nb++;", operations: [ { operation: "CloseBrace", point: { position: 10 } } ], expected: " if ( a[\"}\"])\r\nb++;" },
{ input: "$    (   document   )   .  ready  (   function   (   )   {   \n    alert    (           \"i am ready\"  )   ;\n           }                 );", operations: [ { operation: "Semicolon", point: { position: 138 } } ], expected: "$(document).ready(function () {\n    alert(\"i am ready\");\n});" },
{ input: "function f() {\r\nvar s=\"string\";\r\n}", operations: [ { operation: "Semicolon", point: { position: 31 } } ], expected: "function f() {\r\n    var s = \"string\";\r\n}" },
{ input: "do{for(var i=0;i<10;i++)i-=2\r\n}while(1!==1)", operations: [ { operation: "Enter", point: { position: 30 } } ], expected: "do {\n    for (var i = 0; i < 10; i++) i -= 2\r\n} while (1 !== 1)" },
{ input: "do{\r\ndo{\r\n\r\ndo{\r\n}while(a!==b)\r\n}while(a!==b)\r\n}while(a!==b)", operations: [ { operation: "Enter", point: { position: 12 } } ], expected: "do{\r\ndo{\r\n\r\n    do {\r\n}while(a!==b)\r\n}while(a!==b)\r\n}while(a!==b)" },
{ input: "for(var i=0;i<10;i++){for(var j=0;j<10;j++){j-=i}}", operations: [ { operation: "CloseBrace", point: { position: 49 } } ], expected: "for (var i = 0; i < 10; i++) { for (var j = 0; j < 10; j++) { j -= i }}" },
{ input: "var obj = {\r\na: {\r\nb: 2, c: {\r\nd: {\r\ne: function f() {\r\nreturn obj.a.c.d.e() + f();\r\n}\r\n}\r\n       } \r\n}\r\n}", operations: [ { operation: "CloseBrace", point: { position: 99 } } ], expected: "var obj = {\r\na: {\r\n    b: 2, c: {\r\n        d: {\r\n            e: function f() {\r\n                return obj.a.c.d.e() + f();\r\n            }\r\n        }\r\n    }\r\n}\r\n}" },
{ input: "var a =  0 ;var b=0;var c  =  0 ;", operations: [ { operation: "Paste", span: { start: 13, length: 7 } } ], expected: "var a = 0; var b = 0; var c = 0;" },
{ input: "function a()\r\n{\r\n}", operations: [ { operation: "Enter", point: { position: 14 } } ], expected: "function a()\r\n{\r\n}" },
{ input: "    function test() { function foo() { function foo3() { function foo4() { function foo5() { function foo6()\r\n{\r\ntest\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}", operations: [ { operation: "Selection", span: { start: 110, length: 25 } } ], expected: "    function test() { function foo() { function foo3() { function foo4() { function foo5() { function foo6()\r\n    {\r\n        test\r\n    }\r\n    }\r\n    }\r\n    }\r\n    }\r\n    }" },
{ input: " \r\nfunction a() { \r\n    return; \r\n} \r\n ", operations: [ { operation: "Document" } ], expected: "\r\nfunction a() {\r\n    return;\r\n}\r\n" },
{ input: "foo(\r\n1, 2, 3)", operations: [ { operation: "Document" } ], expected: "foo(\r\n1, 2, 3)" },
{ input: "function Init() {\r\n    var a = [[1, 2],\r\n             [3, 4],\r\n\r\n            ];\r\n}", operations: [ { operation: "Enter", point: { position: 63 } } ], expected: "function Init() {\r\n    var a = [[1, 2],\r\n             [3, 4],\r\n\r\n            ];\r\n}" },
{ input: "\r\n    //function start\r\n    function abc() { }\r\n    //function end\r\n", operations: [ { operation: "Document" } ], expected: "\r\n//function start\r\nfunction abc() { }\r\n//function end\r\n" },
{ input: "for(var i=0;i<10;i++){\r\n    for (var j = 0; j < 10; j++) {\r\nj-=i\r\n\r\n}\r\n}", operations: [ { operation: "Enter", point: { position: 66 } } ], expected: "for(var i=0;i<10;i++){\r\n    for (var j = 0; j < 10; j++) {\r\n        j -= i\r\n\r\n}\r\n}" },
{ input: "// JScript source code\r\nfunction adder(a, b) {\r\n    ///<summary>Adds two numbers </summary>\r\n    return a + b;\r\n}\r\n", operations: [ { operation: "Enter", point: { position: 94 } } ], expected: "// JScript source code\r\nfunction adder(a, b) {\r\n    ///<summary>Adds two numbers </summary>\r\n    return a + b;\r\n}\r\n" },
{ input: "x = {\r\n    a: function() {\r\n},\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 32 } } ], expected: "x = {\r\n    a: function() {\r\n    },\r\n\r\n}" },
{ input: "if(1)\r\n    if(1)\r\n        x++\r\n    else\r\n        if(1)\r\n            x+=2\r\n        else\r\nx+=2\r\n", operations: [ { operation: "Enter", point: { position: 94 } } ], expected: "if(1)\r\n    if(1)\r\n        x++\r\n    else\r\n        if(1)\r\n            x+=2\r\n        else\r\n            x += 2\r\n" },
{ input: "for (a in b) {\nx++;}\n", operations: [ { operation: "Enter", point: { position: 21 } } ], expected: "for (a in b) {\n    x++;\n}\n" },
{ input: "if(1)if(1)if(1)if(1){x+=2}", operations: [ { operation: "CloseBrace", point: { position: 26 } } ], expected: "if (1) if (1) if (1) if (1) { x += 2 }" },
{ input: "if (x!=1^y===2){   x+=2\r\n}", operations: [ { operation: "CloseBrace", point: { position: 26 } } ], expected: "if (x != 1 ^ y === 2) {\n    x += 2\r\n}" },
{ input: "var d = new     Date    ()", operations: [ { operation: "Document" } ], expected: "var d = new Date()" },
{ input: "do {\r\n}                       while (1 == 10);", operations: [ { operation: "Document" } ], expected: "do {\r\n} while (1 == 10);" },
{ input: "string='string+=2';", operations: [ { operation: "Semicolon", point: { position: 19 } } ], expected: "string = 'string+=2';" },
{ input: "function foo() {\r\n    try {\r\n                }\r\ncatch(e){\r\n    } finally    {\r\n    }\r\n}", operations: [ { operation: "Enter", point: { position: 48 } } ], expected: "function foo() {\r\n    try {\r\n    }\r\n    catch (e) {\r\n    } finally    {\r\n    }\r\n}" },
{ input: "try // comment\r\n{\r\n}\r\ncatch  (e) // comment\r\n{\r\n}\r\nfinally // comment\r\n{\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "try // comment\r\n{\r\n}\r\ncatch (e) // comment\r\n{\r\n}\r\nfinally // comment\r\n{\r\n}\r\n" },
{ input: "function f() {\r\n            /**/ var x;\r\n}", operations: [ { operation: "Semicolon", point: { position: 39 } } ], expected: "function f() {\r\n    /**/ var x;\r\n}" },
{ input: "if (a)\r\ntest;\r\nelse if (b)\r\ntest;", operations: [ { operation: "Document" } ], expected: "if (a)\r\n    test;\r\nelse if (b)\r\n    test;" },
{ input: "foo(1, 2, 3\r\n)", operations: [ { operation: "Document" } ], expected: "foo(1, 2, 3\r\n)" },
{ input: "\r\nswitch (a){\r\n  case     1: x++;\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\nswitch (a) {\r\n    case 1: x++;\r\n}\r\n" },
{ input: "x = {\r\n              a: function () {\r\n\r\n    }\r\n}", operations: [ { operation: "Enter", point: { position: 39 } } ], expected: "x = {\r\n    a: function () {\r\n\r\n    }\r\n}" },
{ input: "switch (a) {\n    case 1: b++;\n        break;\n\n    default: a++;\n        break;\n}", operations: [ { operation: "Enter", point: { position: 45 } } ], expected: "switch (a) {\n    case 1: b++;\n        break;\n\n    default: a++;\n        break;\n}" },
{ input: "string='string+=2;'", operations: [ { operation: "Semicolon", point: { position: 18 } } ], expected: "string='string+=2;'" },
{ input: "function test() {\r\n    function foo() {\r\n        var a;\r\n// some\r\ncomment\r\n", operations: [ { operation: "Enter", point: { position: 66 } } ], expected: "function test() {\r\n    function foo() {\r\n        var a;\r\n        // some\r\n        comment\r\n" },
{ input: "switch   ( a )   {\r\n    case 1: x+=2;\r\n case 2:{for(var i=0;i<10;i++){ \r\nx+=2;}\r\n    }\r\n}", operations: [ { operation: "CloseBrace", point: { position: 89 } } ], expected: "switch (a) {\r\n    case 1: x += 2;\r\n    case 2: {\n        for (var i = 0; i < 10; i++) {\r\n            x += 2;\n        }\r\n    }\r\n}" },
{ input: "do{\r\nfor(var i=0;i<10;i++)\r\ni-=2;\r\n}while(1!==1)", operations: [ { operation: "Semicolon", point: { position: 33 } } ], expected: "do{\r\n    for (var i = 0; i < 10; i++)\r\n        i -= 2;\r\n}while(1!==1)" },
{ input: "\r\nfunction foo() {\r\n    try{ } catch (e) { } finally    { }\r\n\r\n\r\n}\r\n", operations: [ { operation: "Enter", point: { position: 63 } } ], expected: "\r\nfunction foo() {\r\n    try { } catch (e) { } finally { }\r\n\r\n\r\n}\r\n" },
{ input: "do{for(var i=0;i<10;i++)\r\ni-=2}while(1!==1)", operations: [ { operation: "Enter", point: { position: 26 } } ], expected: "do {\n    for (var i = 0; i < 10; i++)\r\n        i -= 2\n} while (1 !== 1)" },
{ input: "\r\n        fun(\r\n            {\r\n                a: 1\r\n            });\r\n", operations: [ { operation: "Document" } ], expected: "\r\nfun(\r\n    {\r\n        a: 1\r\n    });\r\n" },
{ input: "function f () //comment\r\n{\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "function f() //comment\r\n{\r\n}\r\n" },
{ input: "function a(b) {\r\n    var c = 0;\r\n    if (b != null) {\r\n        for (d in b) {\r\n        }\r\n   }\r\n}", operations: [ { operation: "CloseBrace", point: { position: 94 } } ], expected: "function a(b) {\r\n    var c = 0;\r\n    if (b != null) {\r\n        for (d in b) {\r\n        }\r\n    }\r\n}" },
{ input: "switch (a) {\r\n           case 1:\r\n\r\n        break;\r\n}", operations: [ { operation: "Enter", point: { position: 34 } } ], expected: "switch (a) {\r\n    case 1:\r\n\r\n        break;\r\n}" },
{ input: "   \r\n     do{\r\n    for(var i=0;i<10;i++)\r\n        i -= 2\r\n}\r\nwhile (1 !== 1)", operations: [ { operation: "Enter", point: { position: 5 } } ], expected: "\r\ndo {\r\n    for(var i=0;i<10;i++)\r\n        i -= 2\r\n}\r\nwhile (1 !== 1)" },
{ input: "function test() {\r\n    label1:\r\nvar a\r\n\r\n    var b;\r\n}", operations: [ { operation: "Enter", point: { position: 39 } } ], expected: "function test() {\r\n    label1:\r\n        var a\r\n\r\n    var b;\r\n}" },
{ input: "var x = {\n//comment\na: 1\n}", operations: [ { operation: "Document" } ], expected: "var x = {\n    //comment\n    a: 1\n}" },
{ input: "for(var i=0;i<10;i++){\r\n\r\nfor(var j=0;j<10;j++){\r\nj-=i\r\n}\r\n}", operations: [ { operation: "Enter", point: { position: 26 } } ], expected: "for(var i=0;i<10;i++){\r\n\r\n    for (var j = 0; j < 10; j++) {\r\nj-=i\r\n}\r\n}" },
{ input: "if (true) {\r\n//\r\n} else if (false) {\r\n//\r\n} else\r\n    if (true)\r\n//", operations: [ { operation: "Document" } ], expected: "if (true) {\r\n    //\r\n} else if (false) {\r\n    //\r\n} else\r\n    if (true)\r\n        //" },
{ input: "x = [\n    1,\n    1\n        +\n                // test\n                2\n]", operations: [ { operation: "Document" } ], expected: "x = [\n    1,\n    1\n        +\n                // test\n                2\n]" },
{ input: "var x =\n           function() {\nreturn 1;\n}", operations: [ { operation: "Document" } ], expected: "var x =\n           function () {\n               return 1;\n           }" },
{ input: "function f() {\n    var x }", operations: [ { operation: "Document" } ], expected: "function f() {\n    var x\n}" },
{ input: "switch (a) {\r\n    case 1: b++;\r\n    break  ;\r\n\r\n    default: a++;\r\n        break;\r\n}", operations: [ { operation: "Enter", point: { position: 46 } } ], expected: "switch (a) {\r\n    case 1: b++;\r\n        break;\r\n\r\n    default: a++;\r\n        break;\r\n}" },
{ input: "function foo() {\r\ntry {\r\nx+=2\r\n}\r\ncatch( e){\r\nx+=2\r\n} finally {\r\nx+=2\r\n}\r\n}", operations: [ { operation: "CloseBrace", point: { position: 32 } } ], expected: "function foo() {\r\n    try {\r\n        x += 2\r\n    }\r\ncatch( e){\r\nx+=2\r\n} finally {\r\nx+=2\r\n}\r\n}" },
{ input: "function f(a, b\n                , c){\n}", operations: [ { operation: "CloseBrace", point: { position: 39 } } ], expected: "function f(a, b\n                , c) {\n}" },
{ input: "function add(a, b) { return a + b}", operations: [ { operation: "Document" } ], expected: "function add(a, b) { return a + b }" },
{ input: "var a  =  0 ;\r\n", operations: [ { operation: "Enter", point: { position: 15 } } ], expected: "var a = 0;\r\n" },
{ input: "var a = function (b) {\r\nb = 0;\r\n}", operations: [ { operation: "CloseBrace", point: { position: 33 } } ], expected: "var a = function (b) {\r\n    b = 0;\r\n}" },
{ input: "\r\nif (\r\n        test) {\r\n                        a;\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\nif (\r\n        test) {\r\n    a;\r\n}\r\n" },
{ input: " var a  =  0 ;\r\n var b  =  {  } ;\r\n  var c  =  false ;", operations: [ { operation: "Selection", span: { start: 18, length: 34 } } ], expected: " var a  =  0 ;\r\n var b = {};\r\n  var c  =  false ;" },
{ input: "function a() {\r\n    return (\r\n        function () {\r\n                return 0;\r\n            }\r\n}", operations: [ { operation: "CloseBrace", point: { position: 93 } } ], expected: "function a() {\r\n    return (\r\n        function () {\r\n            return 0;\r\n        }\r\n}" },
{ input: "function test() {\r\n    label1:\r\n        a();\r\n        b()\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 59 } } ], expected: "function test() {\r\n    label1:\r\n        a();\r\n    b()\r\n\r\n}" },
{ input: "(function () {\r\n    a({\r\n        b: 0\r\n    });\r\n})();", operations: [ { operation: "Document" } ], expected: "(function () {\r\n    a({\r\n        b: 0\r\n    });\r\n})();" },
{ input: "function a() {\r\n    /**/ }", operations: [ { operation: "Document" } ], expected: "function a() {\r\n    /**/\n}" },
{ input: "for (var i = 0; i < 10; i++) {\r\n  for (var j=0;j<10;j++) {\r\nj=i;\r\n    }\r\n}", operations: [ { operation: "Semicolon", point: { position: 64 } } ], expected: "for (var i = 0; i < 10; i++) {\r\n  for (var j=0;j<10;j++) {\r\n      j = i;\r\n    }\r\n}" },
{ input: "function f() {\r\n    var x; /*\r\n       */ var y = 2;\r\n}", operations: [ { operation: "Document" } ], expected: "function f() {\r\n    var x; /*\r\n       */ var y = 2;\r\n}" },
{ input: "foo  (1, 2, 3)", operations: [ { operation: "Document" } ], expected: "foo(1, 2, 3)" },
{ input: "if (typeof      a == null);", operations: [ { operation: "Document" } ], expected: "if (typeof a == null);" },
{ input: "function f() {\r\n    var x = \"\\r\n       \"; var y = 2;\r\n}", operations: [ { operation: "Document" } ], expected: "function f() {\r\n    var x = \"\\r\n       \"; var y = 2;\r\n}" },
{ input: "void         x;", operations: [ { operation: "Document" } ], expected: "void x;" },
{ input: "function f() {\r\n    string='string'\r\n    }\r\n", operations: [ { operation: "Enter", point: { position: 44 } } ], expected: "function f() {\r\n    string='string'\r\n}\r\n" },
{ input: "do{\r\nfor(var i=0;i<10;i++)\r\ni-=2\r\n}while(1!==1);", operations: [ { operation: "Semicolon", point: { position: 48 } } ], expected: "do {\r\n    for (var i = 0; i < 10; i++)\r\n        i -= 2\r\n} while (1 !== 1);" },
{ input: "function test() {\r\n    return (\r\n            {\r\n                a: 1\r\n            }\r\n        );\r\n}", operations: [ { operation: "Document" } ], expected: "function test() {\r\n    return (\r\n            {\r\n                a: 1\r\n            }\r\n        );\r\n}" },
{ input: "for(var i=0;i<10;i++)\r\n{for(var j=0;j<10;j++){j-=i}}", operations: [ { operation: "Enter", point: { position: 23 } } ], expected: "for (var i = 0; i < 10; i++)\r\n{ for (var j = 0; j < 10; j++) { j -= i } }" },
{ input: "for(var i=0;i<10;i++){\r\nfor(var j=0;j<10;j++){j-=i}}", operations: [ { operation: "Enter", point: { position: 24 } } ], expected: "for (var i = 0; i < 10; i++) {\r\n    for (var j = 0; j < 10; j++) { j -= i }\n}" },
{ input: "do{\r\nfor(var i=0;i<10;i++)\r\ni-=2\r\n}while(1!==1)\r\n", operations: [ { operation: "Enter", point: { position: 49 } } ], expected: "do{\r\nfor(var i=0;i<10;i++)\r\ni-=2\r\n} while (1 !== 1)\r\n" },
{ input: "if(1===1\r\n&& 2===2)x+=2", operations: [ { operation: "Enter", point: { position: 10 } } ], expected: "if (1 === 1\r\n&& 2 === 2) x += 2" },
{ input: "\r\n{\r\n\r\n/* test\r\n   test2\r\n   test3 */\r\nvar a,\r\n    // test\r\n    // test\r\n    b;\r\n\r\nx = {\r\na: 1 +\r\n   // test\r\n   /* test\r\n      test2 */\r\n   2\r\n}\r\n\r\na(1,\r\n   2).  // test\r\n     test();  /* test */\r\n\r\n/* test\r\n   test2\r\n   test3 */\r\nfunction foo(a, b,\r\n    /* test\r\n       test2\r\n       test3 */\r\n    c) {\r\n}\r\n\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\n{\r\n\r\n    /* test\r\n       test2\r\n       test3 */\r\n    var a,\r\n        // test\r\n        // test\r\n        b;\r\n\r\n    x = {\r\n        a: 1 +\r\n           // test\r\n           /* test\r\n              test2 */\r\n           2\r\n    }\r\n\r\n    a(1,\r\n       2).  // test\r\n         test();  /* test */\r\n\r\n    /* test\r\n       test2\r\n       test3 */\r\n    function foo(a, b,\r\n        /* test\r\n           test2\r\n           test3 */\r\n        c) {\r\n    }\r\n\r\n}\r\n" },
{ input: "\r\n        for (var i = 0; i < 10\r\n            ; i--) {\r\n            test\r\n            ;\r\n        }\r\n", operations: [ { operation: "Document" } ], expected: "\r\nfor (var i = 0; i < 10\r\n    ; i--) {\r\n    test\r\n    ;\r\n}\r\n" },
{ input: "if (1)\r\n    x++;\r\nelse             if (1)\r\n    x--;", operations: [ { operation: "Document" } ], expected: "if (1)\r\n    x++;\r\nelse if (1)\r\n    x--;" },
{ input: "x = {\n    get         foo        () {\n    },\n    set          foo        (val) {\n    }\n};", operations: [ { operation: "Document" } ], expected: "x = {\n    get foo() {\n    },\n    set foo(val) {\n    }\n};" },
{ input: "function foo\r\n(a, b, c) {\r\n}", operations: [ { operation: "Document" } ], expected: "function foo\r\n(a, b, c) {\r\n}" },
{ input: "switch  ( a ) {\r\n    case 1: x+=2;\r\n case 2:{for(var i=0;i<10;i++){ \r\nx+=2;\r\n }}\r\n}", operations: [ { operation: "CloseBrace", point: { position: 80 } } ], expected: "switch  ( a ) {\r\n    case 1: x+=2;\r\n    case 2: {\n        for (var i = 0; i < 10; i++) {\r\n            x += 2;\r\n        }\n    }\r\n}" },
{ input: "function f() {\r\n'use strict'}", operations: [ { operation: "CloseBrace", point: { position: 29 } } ], expected: "function f() {\r\n    'use strict'\n}" },
{ input: "foo(1\r\n, 2, 3)", operations: [ { operation: "Document" } ], expected: "foo(1\r\n, 2, 3)" },
{ input: "do{\r\ndo\r\n{\r\ndo{\r\n}while(a!==b)\r\n}while(a!==b)\r\n}while(a!==b)", operations: [ { operation: "Enter", point: { position: 9 } } ], expected: "do{\r\n    do\r\n    {\r\ndo{\r\n}while(a!==b)\r\n}while(a!==b)\r\n}while(a!==b)" },
{ input: "function Sum(a,b,c) {\r\n    for(i=0,j=1,k=0,fib=1;i<5;i++,fib=j+k,k=j,j=fib)  {\r\n        var sparseArray = [1,,,,5]\r\n    }\r\n}", operations: [ { operation: "Selection", span: { start: 49, length: 3 } } ], expected: "function Sum(a,b,c) {\r\n    for (i = 0, j = 1, k = 0, fib = 1; i < 5; i++, fib = j + k, k = j, j = fib) {\r\n        var sparseArray = [1,,,,5]\r\n    }\r\n}" },
{ input: "function a() {\r\n    function b() {\r\n\r\n    }\r\n}", operations: [ { operation: "Document" } ], expected: "function a() {\r\n    function b() {\r\n\r\n    }\r\n}" },
{ input: "", operations: [ { operation: "Document" } ], expected: "" },
{ input: "function a() {\r\nvar b=\"c\"\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 27 } } ], expected: "function a() {\r\n    var b = \"c\"\r\n\r\n}" },
{ input: " if ( a[\"\r\n\"])\r\nb++;", operations: [ { operation: "Enter", point: { position: 11 } } ], expected: "if ( a[\"\r\n\"])\r\nb++;" },
{ input: "/* \r\n \r\n*/ ", operations: [ { operation: "Document" } ], expected: "/* \r\n \r\n*/" },
{ input: "function foo() {\r\ntry {\r\nx+=2\r\n}\r\ncatch( e){\r\nx+=2\r\n}finally {\r\nx+=2\r\n}\r\n};", operations: [ { operation: "Semicolon", point: { position: 75 } } ], expected: "function foo() {\r\n    try {\r\n        x += 2\r\n    }\r\n    catch (e) {\r\n        x += 2\r\n    } finally {\r\n        x += 2\r\n    }\r\n};" },
{ input: "if (1)               if (1)            a++;", operations: [ { operation: "Document" } ], expected: "if (1) if (1) a++;" },
{ input: "function foo() {\r\ntry {\r\nx+=2\r\n}\r\ncatch( e){\r\nx+=2\r\n}finally {\r\nx+=2\r\n}\r\n}", operations: [ { operation: "CloseBrace", point: { position: 53 } } ], expected: "function foo() {\r\ntry {\r\nx+=2\r\n}\r\n    catch (e) {\r\n        x += 2\r\n    }finally {\r\nx+=2\r\n}\r\n}" },
{ input: "function f() {\r\n'use strict'\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 30 } } ], expected: "function f() {\r\n    'use strict'\r\n\r\n}" },
{ input: " \r\n ", operations: [ { operation: "Document" } ], expected: " \r\n " },
{ input: "{ var b; }", operations: [ { operation: "Document" } ], expected: "{ var b; }" },
{ input: "var z =    {a: 1};", operations: [ { operation: "Document" } ], expected: "var z = { a: 1 };" },
{ input: "var z =\n  {a: 1};", operations: [ { operation: "Document" } ], expected: "var z =\n  { a: 1 };" },
{ input: "for (var i = 0; i < 10; i++)   { var a }", operations: [ { operation: "Document" } ], expected: "for (var i = 0; i < 10; i++) { var a }" },
{ input: "for (var i = 0; i < 10; i++)\n     { var a }", operations: [ { operation: "Document" } ], expected: "for (var i = 0; i < 10; i++)\n{ var a }" },
{ input: "if (1)     { var a }", operations: [ { operation: "Document" } ], expected: "if (1) { var a }" },
{ input: "if (1)\n     { var a }", operations: [ { operation: "Document" } ], expected: "if (1)\n{ var a }" },
{ input: "while (1)      { var a }", operations: [ { operation: "Document" } ], expected: "while (1) { var a }" },
{ input: "while (1)\n      { var a }", operations: [ { operation: "Document" } ], expected: "while (1)\n{ var a }" },
{ input: "do     { var a }   while (1)", operations: [ { operation: "Document" } ], expected: "do { var a } while (1)" },
{ input: "do\n       { var a }\n      while (1)", operations: [ { operation: "Document" } ], expected: "do\n{ var a }\nwhile (1)" },
{ input: "for (var a in b)      { var a }", operations: [ { operation: "Document" } ], expected: "for (var a in b) { var a }" },
{ input: "for (var a in b)\n      { var a }", operations: [ { operation: "Document" } ], expected: "for (var a in b)\n{ var a }" },
{ input: "with (x)       { var a }", operations: [ { operation: "Document" } ], expected: "with (x) { var a }" },
{ input: "with (x)\n       { var a }", operations: [ { operation: "Document" } ], expected: "with (x)\n{ var a }" },
{ input: "try        { var a }   \ncatch (e)         { var a }   \nfinally   { }", operations: [ { operation: "Document" } ], expected: "try { var a }\ncatch (e) { var a }\nfinally { }" },
{ input: "try\n        { var a }   \ncatch (e)\n         { var a }   \nfinally\n   { }", operations: [ { operation: "Document" } ], expected: "try\n{ var a }\ncatch (e)\n{ var a }\nfinally\n{ }" },
{ input: "switch (x)     { case 1:   { var a } }", operations: [ { operation: "Document" } ], expected: "switch (x) { case 1: { var a } }" },
{ input: "switch (x)\n     { case 1:   { var a } }", operations: [ { operation: "Document" } ], expected: "switch (x)\n{ case 1: { var a } }" },
{ input: "function f()       { var x }", operations: [ { operation: "Document" } ], expected: "function f() { var x }" },
{ input: "function f()\n\n    { var x }", operations: [ { operation: "Document" } ], expected: "function f()\n\n{ var x }" },
{ input: "function test() {\r\nlabel1:\r\nvar a;\r\nvar b;\r\n}", operations: [ { operation: "Document" } ], expected: "function test() {\r\n    label1:\r\n        var a;\r\n    var b;\r\n}" },
{ input: "{\n    x =\nfunction () {\n    };\n}", operations: [ { operation: "Document" } ], expected: "{\n    x =\nfunction () {\n};\n}" },
{ input: "switch (a){\r\n    case 1: x+=2;\r\ncase 2  :  {   \r\nx+=2}\r\n}", operations: [ { operation: "Enter", point: { position: 49 } } ], expected: "switch (a){\r\n    case 1: x+=2;\r\n    case 2: {\r\n        x += 2\n    }\r\n}" },
{ input: "    // ;", operations: [ { operation: "Semicolon", point: { position: 7 } } ], expected: "    // ;" },
{ input: "// JScript source code\r\nfunction adder(a, b) {\r\n    ///<summary>Adds two numbers </summary>\r\n    return a + b;\r\n}\r\n", operations: [ { operation: "Enter", point: { position: 115 } } ], expected: "// JScript source code\r\nfunction adder(a, b) {\r\n    ///<summary>Adds two numbers </summary>\r\n    return a + b;\r\n}\r\n" },
{ input: "function foo4() {\r\n        test;\r\n            for (; ;) {\r\n                test\r\n            }\r\n}", operations: [ { operation: "Selection", span: { start: 46, length: 33 } } ], expected: "function foo4() {\r\n        test;\r\n        for (; ;) {\r\n            test\r\n            }\r\n}" },
{ input: "if (a   in      b) { }", operations: [ { operation: "Document" } ], expected: "if (a in b) { }" },
{ input: "\r\nfunction f() {\r\nlabel0:\r\nfor (var i = 0; i < 10; i++) {\r\nlabel1: {\r\nfor (var i = 0; i < 10; i++)\r\nx = 2;\r\nlabel2:\r\nfor (var i = 0; i < 10; i++) {\r\nbreak label2\r\n}\r\n}\r\n}\r\n}", operations: [ { operation: "Document" } ], expected: "\r\nfunction f() {\r\n    label0:\r\n        for (var i = 0; i < 10; i++) {\r\n            label1: {\r\n                for (var i = 0; i < 10; i++)\r\n                    x = 2;\r\n                label2:\r\n                    for (var i = 0; i < 10; i++) {\r\n                        break label2\r\n                    }\r\n            }\r\n        }\r\n}" },
{ input: "function f() {\r\nstring='string'}", operations: [ { operation: "CloseBrace", point: { position: 32 } } ], expected: "function f() {\r\n    string = 'string'\n}" },
{ input: "\r\nfunction a() {\r\nfunction test() /* test */\r\n{\r\nif (test) /* test */\r\n{\r\n}\r\n}\r\n}", operations: [ { operation: "Document" } ], expected: "\r\nfunction a() {\r\n    function test() /* test */ {\r\n        if (test) /* test */ {\r\n        }\r\n    }\r\n}" },
{ input: "that = {\r\n    method: function () {\r\n        return this.datum;\r\n                    }       ,  \r\n\r\n    datum: 0\r\n};", operations: [ { operation: "Enter", point: { position: 98 } } ], expected: "that = {\r\n    method: function () {\r\n        return this.datum;\r\n    },\r\n\r\n    datum: 0\r\n};" },
{ input: "for (; ;)\n// test\n    test;", operations: [ { operation: "Document" } ], expected: "for (; ;)\n    // test\n    test;" },
{ input: "(function () {\r\n    a({\r\n          b: 0\r\n    });\r\n\r\n})();", operations: [ { operation: "Enter", point: { position: 50 } } ], expected: "(function () {\r\n    a({\r\n          b: 0\r\n    });\r\n\r\n})();" },
{ input: "var f = function () {\n    mycanvas.onmousedown = function () {\n    };\n\n}", operations: [ { operation: "Enter", point: { position: 70 } } ], expected: "var f = function () {\n    mycanvas.onmousedown = function () {\n    };\n\n}" },
{ input: "var obj={a:{b:2,c:{d:{e:{}}}}};", operations: [ { operation: "Semicolon", point: { position: 31 } } ], expected: "var obj = { a: { b: 2, c: { d: { e: {} } } } };" },
{ input: "if (1)\r\n    x++;\r\nelse             x--;", operations: [ { operation: "Document" } ], expected: "if (1)\r\n    x++;\r\nelse x--;" },
{ input: "do{\r\nfor(var i=0;i<10;i++)i-=2}while(1!==1)", operations: [ { operation: "Enter", point: { position: 5 } } ], expected: "do {\r\n    for (var i = 0; i < 10; i++) i -= 2\n} while (1 !== 1)" },
{ input: "switch (a){\r\n    case 1,2,3:\r\n        break;\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "switch (a) {\r\n    case 1, 2, 3:\r\n        break;\r\n}\r\n" },
{ input: "    foo(function (file) {\r\n        return 0\r\n    })\r\n        .then(function (doc) {\r\n        return 1\r\n    });", operations: [ { operation: "Document" } ], expected: "foo(function (file) {\r\n    return 0\r\n})\r\n    .then(function (doc) {\r\n        return 1\r\n    });" },
{ input: "var a = 1;\nvar f = function () {\n    var b = 2;\n}\n", operations: [ { operation: "Enter", point: { position: 50 } } ], expected: "var a = 1;\nvar f = function () {\n    var b = 2;\n}\n" },
{ input: "do{for(var i=0;i<10;i++)i-=2}\r\nwhile(1!==1)", operations: [ { operation: "Enter", point: { position: 31 } } ], expected: "do { for (var i = 0; i < 10; i++) i -= 2 }\r\nwhile (1 !== 1)" },
{ input: " function  a( b,c ) \r\n {\r\n     var  d=0 ;\r\n            }", operations: [ { operation: "Document" } ], expected: "function a(b, c) {\r\n    var d = 0;\r\n}" },
{ input: "function f() {\r\n    /*\r\n                */ var          x\r\n\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 59 } } ], expected: "function f() {\r\n    /*\r\n                */ var x\r\n\r\n\r\n}" },
{ input: "if (x!=1^y===2)   x+=2\r\n", operations: [ { operation: "Enter", point: { position: 24 } } ], expected: "if (x != 1 ^ y === 2) x += 2\r\n" },
{ input: "function f() {\n    }", operations: [ { operation: "Enter", point: { position: 15 } } ], expected: "function f() {\n}" },
{ input: "function test() {\r\n    try { }\r\n    catch (e) { }\r\n        finally\r\n}", operations: [ { operation: "Document" } ], expected: "function test() {\r\n    try { }\r\n    catch (e) { }\r\n    finally\r\n    }" },
{ input: "a = [\n    // test\n    foo(\n                // test\n                1),\n    2\n];", operations: [ { operation: "Document" } ], expected: "a = [\n    // test\n    foo(\n                // test\n                1),\n    2\n];" },
{ input: "if (x!=1^y===2)   x+=2;", operations: [ { operation: "Semicolon", point: { position: 23 } } ], expected: "if (x != 1 ^ y === 2) x += 2;" },
{ input: "function foo() {\r\ntry {\r\nx+=2\r\n}\r\ncatch( e){\r\nx+=2\r\n}finally {\r\nx+=2\r\n}\r\n}", operations: [ { operation: "CloseBrace", point: { position: 71 } } ], expected: "function foo() {\r\ntry {\r\nx+=2\r\n}\r\ncatch( e){\r\nx+=2\r\n} finally {\r\n    x += 2\r\n}\r\n}" },
{ input: "switch (a) {\n    case 1: b++;\n        break;\n\n    default: a++;\n        break;\n}", operations: [ { operation: "Enter", point: { position: 46 } } ], expected: "switch (a) {\n    case 1: b++;\n        break;\n\n    default: a++;\n        break;\n}" },
{ input: "function test()       { }\r\n", operations: [ { operation: "Enter", point: { position: 27 } } ], expected: "function test() { }\r\n" },
{ input: "delete         x;", operations: [ { operation: "Document" } ], expected: "delete x;" },
{ input: "\r\n{\r\n\r\nvar a,\r\n    b;\r\n\r\nx = {\r\na: 1 +\r\n   2\r\n}\r\n\r\na(1,\r\n   2).\r\n     test();\r\n\r\nfunction foo(a, b,\r\n             c) {\r\n}\r\n\r\nfor (i = 0;\r\n     i < 1;\r\n     i++) {\r\n}\r\n\r\nfor (a\r\n     in b) {\r\n}\r\n\r\nwhile (i +\r\n       2) {\r\n}\r\n\r\nswitch (i +\r\n        2) {\r\n\r\n    case 1 +\r\n         3:\r\n        break;\r\n}\r\n\r\ntry {\r\n}\r\ncatch (\r\n    e) {\r\n}\r\n\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\n{\r\n\r\n    var a,\r\n        b;\r\n\r\n    x = {\r\n        a: 1 +\r\n           2\r\n    }\r\n\r\n    a(1,\r\n       2).\r\n         test();\r\n\r\n    function foo(a, b,\r\n                 c) {\r\n    }\r\n\r\n    for (i = 0;\r\n         i < 1;\r\n         i++) {\r\n    }\r\n\r\n    for (a\r\n         in b) {\r\n    }\r\n\r\n    while (i +\r\n           2) {\r\n    }\r\n\r\n    switch (i +\r\n            2) {\r\n\r\n        case 1 +\r\n             3:\r\n            break;\r\n    }\r\n\r\n    try {\r\n    }\r\n    catch (\r\n        e) {\r\n    }\r\n\r\n}\r\n" },
{ input: "function f() {\r\n    do{\r\nx++ }\r\n}", operations: [ { operation: "CloseBrace", point: { position: 30 } } ], expected: "function f() {\r\n    do {\r\n        x++\n    }\r\n}" },
{ input: "do\r\n{for(var i=0;i<10;i++)i-=2}while(1!==1)", operations: [ { operation: "Enter", point: { position: 4 } } ], expected: "do\r\n{ for (var i = 0; i < 10; i++) i -= 2 } while (1 !== 1)" },
{ input: "switch (a){\r\n    case 1  :\r\n x+=2\r\n    case 2:{\r\n    }\r\n}\r\n", operations: [ { operation: "Enter", point: { position: 28 } } ], expected: "switch (a){\r\n    case 1:\r\n        x += 2\r\n    case 2:{\r\n    }\r\n}\r\n" },
{ input: "var x = [\n        //comment\n        1,\n    2,\n    3\n]", operations: [ { operation: "Document" } ], expected: "var x = [\n        //comment\n        1,\n    2,\n    3\n]" },
{ input: "switch (a){\r\n    case 1: x += 2;\r\n\r\ncase 1  : x+=2;\r\n}\r\n", operations: [ { operation: "Enter", point: { position: 36 } } ], expected: "switch (a){\r\n    case 1: x += 2;\r\n\r\n    case 1: x += 2;\r\n}\r\n" },
{ input: "    foo(function (file) {\r\n        return 0\r\n    }).then(function (doc) {\r\n        return 1\r\n    });", operations: [ { operation: "Document" } ], expected: "foo(function (file) {\r\n    return 0\r\n}).then(function (doc) {\r\n    return 1\r\n});" },
{ input: "function f() {\r\nvar s=1  /**/;\r\n}", operations: [ { operation: "Semicolon", point: { position: 30 } } ], expected: "function f() {\r\n    var s = 1  /**/;\r\n}" },
{ input: "switch (a){\r\n    case 1: x+=2;\r\n    case 2:{\r\n    }\r\n      \r\n}", operations: [ { operation: "Enter", point: { position: 61 } } ], expected: "switch (a){\r\n    case 1: x+=2;\r\n    case 2:{\r\n    }\r\n\r\n}" },
{ input: "if(1)\r\nif(1)\r\nx++\r\nelse\r\nif(1)\r\nx+=2\r\nelse\r\nx+=2\r\n\r\n\r\n\r\n;", operations: [ { operation: "Semicolon", point: { position: 57 } } ], expected: "if (1)\r\n    if (1)\r\n        x++\r\n    else\r\n        if (1)\r\n            x += 2\r\n        else\r\n            x += 2\r\n\r\n\r\n\r\n;" },
{ input: "function a() {\r\nvar b  =  0;//\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 32 } } ], expected: "function a() {\r\n    var b = 0;//\r\n\r\n}" },
{ input: "if (a)\r\ntest;\r\nelse\r\nif (b)\r\ntest;", operations: [ { operation: "Document" } ], expected: "if (a)\r\n    test;\r\nelse\r\n    if (b)\r\n        test;" },
{ input: "for(var j=0;j<10;j++)j-=i;", operations: [ { operation: "Semicolon", point: { position: 26 } } ], expected: "for (var j = 0; j < 10; j++) j -= i;" },
{ input: "if(1)\r\nif(1)\r\nx++\r\nelse\r\nif(1)\r\nx+=2\r\nelse\r\nx+=2;", operations: [ { operation: "Semicolon", point: { position: 49 } } ], expected: "if (1)\r\n    if (1)\r\n        x++\r\n    else\r\n        if (1)\r\n            x += 2\r\n        else\r\n            x += 2;" },
{ input: "function test() {\r\n    var a\r\n    }", operations: [ { operation: "Document" } ], expected: "function test() {\r\n    var a\r\n}" },
{ input: "if (1) {\r\n}                                                else { }", operations: [ { operation: "Document" } ], expected: "if (1) {\r\n} else { }" },
{ input: "function f() {\r\n            /*\r\n\r\n    */\r\n}", operations: [ { operation: "Enter", point: { position: 32 } } ], expected: "function f() {\r\n    /*\r\n\r\n    */\r\n}" },
{ input: "if (x!=1^y===2) \r\n  x+=2", operations: [ { operation: "Enter", point: { position: 18 } } ], expected: "if (x != 1 ^ y === 2)\r\n    x += 2" },
{ input: "for (a in b) {\n    for (c in d) {\n        for (e in f) {\n            for (q in w) {}}}}\n", operations: [ { operation: "Enter", point: { position: 88 } } ], expected: "for (a in b) {\n    for (c in d) {\n        for (e in f) {\n            for (q in w) { }\n        }\n    }\n}\n" },
{ input: "a=a+\nb+\n           c+\n          d                +\ne                                          +\nm+f;", operations: [ { operation: "Semicolon", point: { position: 100 } } ], expected: "a = a +\nb +\n           c +\n          d +\ne +\nm + f;" },
{ input: "x = {\r\n              get a() {\r\n\r\n    }\r\n}", operations: [ { operation: "Enter", point: { position: 32 } } ], expected: "x = {\r\n    get a() {\r\n\r\n    }\r\n}" },
{ input: "if(1)\r\n;", operations: [ { operation: "Enter", point: { position: 7 } } ], expected: "if (1)\r\n    ;" },
{ input: "function test() {\r\n    return (\r\n            [\r\n                1\r\n            ]\r\n        );\r\n}", operations: [ { operation: "Document" } ], expected: "function test() {\r\n    return (\r\n            [\r\n                1\r\n            ]\r\n        );\r\n}" },
{ input: "string='string+=2\\r\n'", operations: [ { operation: "Enter", point: { position: 20 } } ], expected: "string = 'string+=2\\r\n'" },
{ input: "if(1)\r\nif(1)\r\nx++\r\nelse\r\n{if(1)\r\nx+=2\r\nelse\r\nx+=2}", operations: [ { operation: "CloseBrace", point: { position: 50 } } ], expected: "if(1)\r\n    if (1)\r\n        x++\r\n    else {\n        if (1)\r\n            x += 2\r\n        else\r\n            x += 2\n    }" },
{ input: "    function test() { function foo() { function foo3() { function foo4() { function foo5() { function foo6()\r\n{\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}", operations: [ { operation: "Selection", span: { start: 110, length: 19 } } ], expected: "    function test() { function foo() { function foo3() { function foo4() { function foo5() { function foo6()\r\n    {\r\n    }\r\n    }\r\n    }\r\n    }\r\n    }\r\n    }" },
{ input: "switch (a){\r\n    case 1: x+=2;\r\n case 2  :  {   x+=2;}\r\n}\r\n", operations: [ { operation: "Semicolon", point: { position: 53 } } ], expected: "switch (a){\r\n    case 1: x+=2;\r\n    case 2: { x += 2;}\r\n}\r\n" },
{ input: "//  ", operations: [ { operation: "Document" } ], expected: "//  " },
{ input: "for(var i=0;\r\ni<10;i++){for(var j=0;j<10;j++){j-=i}}", operations: [ { operation: "Enter", point: { position: 14 } } ], expected: "for (var i = 0;\r\ni < 10; i++) { for (var j = 0; j < 10; j++) { j -= i } }" },
{ input: "if (a) if (b) if (c) if (d)\r\ntest;", operations: [ { operation: "Document" } ], expected: "if (a) if (b) if (c) if (d)\r\n    test;" },
{ input: "do{for(var i=0;i<10;i++)i-=2}while(1!==1)", operations: [ { operation: "Semicolon", point: { position: 15 } } ], expected: "do { for (var i = 0;i<10;i++)i-=2}while(1!==1)" },
{ input: "$  (  '#TextBox1' )  . unbind ( ) ;", operations: [ { operation: "Document" } ], expected: "$('#TextBox1').unbind();" },
{ input: "do{do{do{}while(a!==b)}while(a!==b)}while(a!==b);", operations: [ { operation: "Semicolon", point: { position: 49 } } ], expected: "do { do { do { } while (a !== b) } while (a !== b) } while (a !== b);" },
{ input: "do{for(var i=0;i<10;i++)i-=2;}while(1!==1)", operations: [ { operation: "Semicolon", point: { position: 29 } } ], expected: "do { for (var i = 0; i < 10; i++) i -= 2;}while(1!==1)" },
{ input: "for(var i=0;i<10;i++){\r\nfor(var j=0;j<10;j++){\r\nj-=i\r\n}\r\n}", operations: [ { operation: "CloseBrace", point: { position: 55 } } ], expected: "for(var i=0;i<10;i++){\r\n    for (var j = 0; j < 10; j++) {\r\n        j -= i\r\n    }\r\n}" },
{ input: "function a() {\r\nfunction b() {\r\nfunction c() {\r\n}}}", operations: [ { operation: "CloseBrace", point: { position: 51 } } ], expected: "function a() {\r\n    function b() {\r\n        function c() {\r\n        }\n    }\n}" },
{ input: "         do do do do\r\n                test;\r\n            while (0)\r\n         while (0)\r\n            while (0)\r\n         while (0)", operations: [ { operation: "Document" } ], expected: "do do do do\r\n    test;\r\nwhile (0)\r\nwhile (0)\r\nwhile (0)\r\nwhile (0)" },
{ input: "/**/  ", operations: [ { operation: "Document" } ], expected: "/**/" },
{ input: "function a()\n{ var a\n}", operations: [ { operation: "Enter", point: { position: 21 } } ], expected: "function a()\n{\n    var a\n}" },
{ input: "for(var i=0;i<10;i++){for(var j=0;j<10;\r\nj++){j-=i}}", operations: [ { operation: "Enter", point: { position: 41 } } ], expected: "for (var i = 0; i < 10; i++) {\n    for (var j = 0; j < 10;\r\n    j++) { j -= i }\n}" },
{ input: "function a() {\r\n    if (true) {\r\n    }\r\n\r\n}", operations: [ { operation: "Enter", point: { position: 40 } } ], expected: "function a() {\r\n    if (true) {\r\n    }\r\n\r\n}" },
{ input: "string='string+=2'\r\n", operations: [ { operation: "Enter", point: { position: 20 } } ], expected: "string = 'string+=2'\r\n" },
{ input: "for (a in b) {\r\nx++;}\r\n", operations: [ { operation: "Enter", point: { position: 23 } } ], expected: "for (a in b) {\r\n    x++;\n}\r\n" },
{ input: "var obj={a:{b:2,c:{\r\nd:{e:{}}}}}", operations: [ { operation: "Enter", point: { position: 21 } } ], expected: "var obj = {\n    a: {\n        b: 2, c: {\r\n            d: { e: {} }\n        }\n    }\n}" },
{ input: "\r\n// test\r\n\r\n{\r\n// test\r\n}\r\n\r\nfunction foo() {\r\n// test\r\n\r\nswitch (a) {\r\n// test\r\ncase 1:\r\n// test\r\ndefault:\r\n// test\r\n}\r\n\r\nif (false)\r\n// test\r\nifblock;\r\n\r\nif (false) {\r\n//test\r\n}\r\n\r\nif (false) test;\r\nelse\r\n// test\r\ntest;\r\n\r\nif (false) test;\r\nelse {\r\n// test\r\ntest;\r\n}\r\n\r\nfor (; ;)\r\n// test\r\ntest;\r\n\r\nfor (; ;) {\r\n// test\r\nforblock;\r\n}\r\n\r\nfor (a in b)\r\n// test\r\ntest;\r\n\r\nfor (a in b) {\r\n// test\r\ntest\r\n}\r\n\r\nwhile (false)\r\n// test\r\ntest;\r\n\r\nwhile (false) {\r\n// test\r\ntest;\r\n}\r\n\r\nwith (a) {\r\n// test\r\n}\r\n\r\ndo\r\n// test\r\ntestl\r\nwhile (false)\r\n\r\ndo {\r\n// test\r\ntest;\r\n} while (false)\r\n\r\ntry {\r\n// test\r\n} catch (e) {\r\n// test\r\n} finally {\r\n// test\r\n}\r\n\r\n(function () {\r\nvar a = function () {\r\nreturn 1;\r\n},\r\n// This is a comment inline with a multiline statement\r\nb = 2,\r\nc = 3;\r\n})();\r\n\r\n\r\nvar a = {\r\n// test\r\nx: 1,\r\ny: 2 +\r\n// test\r\n3 +\r\n4,\r\n}\r\n\r\n\r\nvar a,\r\n// test\r\nb;\r\n\r\nvar a = [\r\n// test\r\n1,\r\n2,\r\n3\r\n];\r\n\r\na = 1 +\r\n// test\r\n2;\r\n\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\n// test\r\n\r\n{\r\n    // test\r\n}\r\n\r\nfunction foo() {\r\n    // test\r\n\r\n    switch (a) {\r\n        // test\r\n        case 1:\r\n            // test\r\n        default:\r\n            // test\r\n    }\r\n\r\n    if (false)\r\n        // test\r\n        ifblock;\r\n\r\n    if (false) {\r\n        //test\r\n    }\r\n\r\n    if (false) test;\r\n    else\r\n        // test\r\n        test;\r\n\r\n    if (false) test;\r\n    else {\r\n        // test\r\n        test;\r\n    }\r\n\r\n    for (; ;)\r\n        // test\r\n        test;\r\n\r\n    for (; ;) {\r\n        // test\r\n        forblock;\r\n    }\r\n\r\n    for (a in b)\r\n        // test\r\n        test;\r\n\r\n    for (a in b) {\r\n        // test\r\n        test\r\n    }\r\n\r\n    while (false)\r\n        // test\r\n        test;\r\n\r\n    while (false) {\r\n        // test\r\n        test;\r\n    }\r\n\r\n    with (a) {\r\n        // test\r\n    }\r\n\r\n    do\r\n        // test\r\n        testl\r\n    while (false)\r\n\r\n    do {\r\n        // test\r\n        test;\r\n    } while (false)\r\n\r\n    try {\r\n        // test\r\n    } catch (e) {\r\n        // test\r\n    } finally {\r\n        // test\r\n    }\r\n\r\n    (function () {\r\n        var a = function () {\r\n            return 1;\r\n        },\r\n        // This is a comment inline with a multiline statement\r\n        b = 2,\r\n        c = 3;\r\n    })();\r\n\r\n\r\n    var a = {\r\n        // test\r\n        x: 1,\r\n        y: 2 +\r\n        // test\r\n        3 +\r\n        4,\r\n    }\r\n\r\n\r\n    var a,\r\n    // test\r\n    b;\r\n\r\n    var a = [\r\n    // test\r\n    1,\r\n    2,\r\n    3\r\n    ];\r\n\r\n    a = 1 +\r\n    // test\r\n    2;\r\n\r\n}\r\n" },
{ input: " \r\n /* \r\n\r\n  a \r\n   a\r\n  a \r\n a \r\na \r\n \r\n\r\n */ \r\n ", operations: [ { operation: "Document" } ], expected: "\r\n/* \r\n\r\n a \r\n  a\r\n a \r\na \r\na \r\n\r\n\r\n*/\r\n" },
{ input: "string='{string +=2}'", operations: [ { operation: "CloseBrace", point: { position: 20 } } ], expected: "string='{string +=2}'" },
{ input: "var obj={a:{b:2,c:{d:{e:{}}}}}\r\n", operations: [ { operation: "Enter", point: { position: 32 } } ], expected: "var obj = { a: { b: 2, c: { d: { e: {} } } } }\r\n" },
{ input: "string='string\\r\n         line2'+'other part'\r\n", operations: [ { operation: "Enter", point: { position: 47 } } ], expected: "string='string\\r\n         line2' + 'other part'\r\n" },
{ input: " switch( a)\r\n{case  1 :x+=2 ;break\r\n    case 2:{\r\n    }\r\n}", operations: [ { operation: "Enter", point: { position: 13 } } ], expected: "switch (a)\r\n{\n    case 1: x += 2; break\r\n    case 2:{\r\n    }\r\n}" }