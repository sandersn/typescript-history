{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "consider the following class.\r\n```\r\nclass GenericPractice<T extends CouponInfo>{\r\n    private entity: T;\r\n    constructor(entity: T) {\r\n        this.entity = entity;\r\n    }\r\n\r\n    public add(item: T): string {\r\n        return item.toString();\r\n    }\r\n\r\n}\r\nclass CouponInfo {\r\n    public toString(): string {\r\n        return \"couponInfo\";\r\n    }\r\n}\r\nclass Snake{\r\n}\r\n```\r\nwhen we use the following code\r\n```\r\n var genericPractice = new GenericPractice(new CouponInfo());\r\ngenericPractice.add(new Snake(\"Sammy the Python\")));\r\n\r\n```\r\ntheoretically, this line:\r\n     genericPractice.add(new Snake(\"Sammy the Python\")));\r\nshould have compile time error since Snake doesn't extend CouponInfo.\r\n\r\nHowever, the compile pass which violates the fundamental concept of generic.",
    "LastUpdatedDate": "2015-05-26T22:13:26.927-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2015-05-26T22:13:26.927-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "generic bug",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2671
  },
  "FileAttachments": [],
  "Comments": []
}