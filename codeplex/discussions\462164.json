[
  {
    "Id": "1107460",
    "ThreadId": "462164",
    "Html": "Are there any plans to support different methods of module resolution in TypeScript's compiler?\r<br />\n<br />\nFor example, when you <code>require(&quot;foo&quot;)</code> in Node.js, it looks in the <code>node_modules/foo</code> subdirectory, checks for a <code>package.json</code>, and does a few other quirky things to locate the module.  When using RequireJS, its behavior is driven by a config file which often re-maps module locations from one path to another.\r<br />\n<br />\nIf TypeScript's compiler were to support module resolution plugins, these plugins could locate .ts and .d.ts files using Node.js's or RequireJS's behavior.  You could do something like:<br />\n<pre><code>npm install foo\ntsc --module commonjs --module-resolution nodejs myCode.ts</code></pre>\n\nAny node modules installed via npm can contain their own .d.ts files which will be found by TypeScript's compiler thanks to the &quot;nodejs&quot; module resolver.\r<br />\n<br />\nProjects like DefinitelyTyped can benefit as well.  If done correctly, the end-user can avoid some redundant ///&lt;require... comments.\r<br />\n<br />\nThis relates to <a href=\"https://typescript.codeplex.com/workitem/934\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/934</a> and <a href=\"https://typescript.codeplex.com/discussions/461449\" rel=\"nofollow\">https://typescript.codeplex.com/discussions/461449</a>.<br />\n",
    "PostedDate": "2013-10-14T21:51:26.27-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]