// Type definitions for Underscore 1.4.1
// Project: http://underscorejs.org/
// Definitions by: Boris Yankov <https://github.com/borisyankov/>
// Definitions: https://github.com/borisyankov/DefinitelyTyped


interface UnderscoreWrappedObject {
    value () : any;
}

interface TemplateSettings {
    evaluate?: RegExp;
    interpolate?: RegExp;
    escape?: RegExp;
}

interface ListIterator {
    (value, key, list?): void;
}

interface ObjectIterator {
    (element, index, list?): void;
}

interface UnderscoreStatic {

    /****
     Collections
    *****/
    each(list: any[], iterator: ListIterator, context?: any): any[];
    each(object: any, iterator: ObjectIterator, context?: any): any[];
    forEach(list: any[], iterator: ObjectIterator, context?: any): any[];
    forEach(object: any, iterator: ListIterator, context?: any): any[];

    map(list: any[], iterator: ListIterator, context?: any): any[];
    map(object: any, iterator: ObjectIterator, context?: any): any[];
    collect(list: any[], iterator: ListIterator, context?: any): any[];
    collect(object: any, iterator: ObjectIterator, context?: any): any[];

    reduce(list: any[], iterator: any, memo: any, context?: any): any[];
    inject(list: any[], iterator: any, memo: any, context?: any): any[];
    foldl(list: any[], iterator: any, memo: any, context?: any): any[];

    reduceRight(list: any[], iterator: any, memo: any, context?: any): any[];
    foldr(list: any[], iterator: any, memo: any, context?: any): any[];

    find(list: any[], iterator: any, context?: any): any;
    detect(list: any[], iterator: any, context?: any): any;

    filter(list: any[], iterator: any, context?: any): any[];
    select(list: any[], iterator: any, context?: any): any[];

    where(list: any[], properties: any): any[];

    reject(list: any[], iterator: any, context?: any): any[];

    all(list: any[], iterator: any, context?: any): bool;
    every(list: any[], iterator: any, context?: any): bool;

    any(list: any[], iterator?: any, context?: any): bool;
    some(list: any[], iterator?: any, context?: any): bool;

    contains(list: any, value: any): bool;
    contains(list: any[], value: any): bool;
    include(list: any, value: any): bool;
    include(list: any[], value: any): bool;

    invoke(list: any[], methodName: string, arguments: any[]): any;
    invoke(object: any, methodName: string, ...arguments: any[]): any;

    pluck(list: any[], propertyName: string): string[];
    max(list: any[], iterator?: any, context?: any): any;
    min(list: any[], iterator?: any, context?: any): any;
    sortBy(list: any[], iterator?: any, context?: any): any;
    groupBy(list: any[], iterator: any): any;
    countBy(list: any[], iterator: any): any;
    shuffle(list: any[]): any[];
    toArray(list: any): any[];
    size(list: any): number;

    /****
     Arrays
    *****/
    first(array: any[], n?: number): any;
    head(array: any[], n?: number): any;
    take(array: any[], n?: number): any;

    initial(array: any[], n?: number): any[];

    last(array: any[], n?: number): any;

    rest(array: any[], n?: number): any[];
    tail(array: any[], n?: number): any[];
    drop(array: any[], n?: number): any[];

    compact(array: any[]): any[];
    flatten(array: any[], shallow?: bool): any[];
    without(array: any[], ...values: any[]): any[];
    union(...arrays: any[][]): any[];
    intersection(...arrays: any[][]): any[];
    difference(array: any[], ...others: any[][]): any[];

    uniq(array: any[], isSorted?: bool, iterator?: any): any[];
    unique(array: any[], isSorted?: bool, iterator?: any): any[];

    zip(...arrays: any[]): any[];
    object(list: any[], values: any[]): any;
    indexOf(array: any[], value: any, isSorted?: bool): number;
    lastIndexOf(array: any[], value: any, fromIndex?: number): number;
    sortedIndex(list: any[], valueL: any, iterator?: any): number;
    range(stop: number): any[];
    range(start: number, stop: number, step?: number): any[];

    /****
     Functions
    *****/
    bind(func: (...as : any[]) => any, context: any, ...arguments: any[]): () => any;
    bindAll(object: any, ...methodNames: string[]): any;
    memoize(func: any, hashFunction?: any): any;
    defer(func: () => any);
    delay(func: any, wait: number, ...arguments: any[]): any;
    delay(func: any, ...arguments: any[]): any;
    throttle(func: any, wait: number): any;
    debounce(func: any, wait: number, immediate?: bool): any;
    once(func: any): any;
    after(count: number, func: any): any;
    wrap(func: (...as : any[]) => any, wrapper: any): () => any;
    compose(...functions: any[]): any;

    /****
     Objects
    *****/
    keys(object: any): any[];
    values(object: any): any[];
    pairs(object: any): any[];
    invert(object: any): any;

    functions(object: any): string[];
    methods(object: any): string[];

    extend(destination: any, ...sources: any[]): any;
    pick(object: any, ...keys: string[]): any;
    omit(object: any, ...keys: string[]): any;
    defaults(object: any, ...defaults: any[]): any;
    clone(object: any): any;
    tap(object: any, interceptor: (...as : any[]) => any): any;
    has(object: any, key: string): bool;
    isEqual(object: any, other: any): bool;
    isEmpty(object: any): bool;
    isElement(object: any): bool;
    isArray(object: any): bool;
    isObject(value: any): bool;
    isArguments(object: any): bool;
    isFunction(object: any): bool;
    isString(object: any): bool;
    isNumber(object: any): bool;
    isFinite(object: any): bool;
    isBoolean(object: any): bool;
    isDate(object: any): bool;
    isRegExp(object: any): bool;
    isNaN(object: any): bool;
    isNull(object: any): bool;
    isUndefined(value: any): bool;

    /****
     Utility
    *****/
    noConflict(): any;
    identity(value: any): any;
    times(n: number, iterator: (index : number) => void, context?: any): void;
    random(min: number, max: number): number;
    mixin(object: any): void;
    uniqueId(prefix: string): string;
    uniqueId(): number;
    escape(str: string): string;
    result(object: any, property: string): any;
    templateSettings: TemplateSettings;
    template(templateString: string, data?: any, settings?: any): (...data: any[]) => string;

    /****
     Chaining
    *****/
    chain(object: any): UnderscoreWrappedObject;
}

declare var _: UnderscoreStatic;


    
    interface IG_Game_Static {
        extend(members: IG_Game): IG_Game_Class;
    }

    interface IG_Game_Class extends IG_Game {
	    new(): IG_Game;
    }

    //The screen position in pixels. Think of it as the position of a window into the game world.
    interface IG_Screen {
        x: number;
        y: number;
    }
    interface IG_Game {
         parent?(...args:any[]): any;                     //call base
         font?: IG_Font;
         init() : void;
         update() : void;
         draw():void;

         //Loads the given levelObject as saved from Weltmeister.
         //This method deletes all entities and background and collision maps currently present in the game 
         // and resets the screen coordinates to 0, 0 prior to creating the new entities and maps.
         loadLevel?(levelObject: any) : void;

         //Get the entity with the name name from the .entities array. Returns undefined if the entity can't be found. 
         getEntityByName?(name: string): IG_Entity;

         //Get an array of entities with the given type from the .entities array. type can either be a string or the actual class object. E.g.:
         // var blobs = this.getEntitiesByType( 'EntityBlob' );
         // or 
         //var blobs = this.getEntitiesByType( EntityBlob );
         //Note that subclasses of EntityBlob (e.g. EntityBlobLarge) will also be of the type EntityBlob, because getEntitiesByType() traverses the whole prototype chain of your classes.
         getEntitiesByType?(type: string): IG_Entity[];
         getEntitiesByType?(type: any): IG_Entity[];

         screen?: IG_Screen;

    }

    interface IG_Font {
    }

    interface IG_Font_Class {
        new (filename: string): IG_Font;
    }

    interface IG_Image {
        //true when the image resource could not be loaded (e.g. at an 404 or 403 error)
        failed: bool;
        //true when the image resource has been loaded, false otherwise
        loaded: bool;
        //The path and name of the image file as passed to the constructor.
        path: string;
        //Size of the image in (unscaled) pixels.
        width: number;
        //Size of the image in (unscaled) pixels.
        height: number;
        //Draws the whole image at targetX, targetY, or a part of it when sourceX, sourceY and width and height are given.
        draw( targetX : number, targetY : number, sourceX?  : number, sourceY? : number, width? : number, height? : number ) : void;

        //Draws a single tile with the index tile at targetX, targetY.
        //The position of the specified tile is calculated with the given tileWidth and tileHeight. 
        // If tileHeight is ommitted, it is assumed to be the same as tileWidth.
        //flipX and flipY are booleans, denoting if the tile should be drawn flipped ("mirrored") on the given axis.

        drawTile( targetX : number, targetY : number, tile : number, tileWidth ? : number, tileHeight? : number, flipX? : bool, flipY? : bool ) : void;

    }

    interface IG_Image_Class {
        new (filename: string): IG_Image;
    }

    interface IG_Size {
        x: number;
        y: number;
    }

    interface IG_Entity_Static {
	    extend(members:IG_Entity): IG_Entity_Class;
	    COLLIDES: {
		    NEVER: number;
		    LITE: number;
		    PASSIVE: number;
		    ACTIVE: number;		
		    FIXED: number;
	    };
	    TYPE: {
		    NONE: number;
		    A: number;
		    B: number;
		    BOTH: number;
	    };
    }

    interface IG_Entity {
	    init(x: number, y: number, settings: any): void; //init constructor
	    parent?(...args:any[]): any;                     //call base
        animSheet?: IG_AnimationSheet;

        //Specify an animation for the entity's .animSheet. This method is essentially a shorthand for the Animation constructor.
        //name The name of the new animation in the entity's .anims object.
        //frameTime The time each frame of the animation will be displayed in seconds
        //sequence An array of frame numbers for the animation.
        //stop Boolean. Determines if the animation should stop at the last frame, or repeat indefinitely. Defaults to false.
        //If the entities .currentAnim is null, the newly created Animation is set as the .currentAnim.
	    addAnim?(name: string, frameTime: number, sequence: number[], stop?:bool): void;
	    anims?: any;
        currentAnim?: any;

	    update?(): void;

        checkAgainst?: number;
	    collides?: number;
	    health?: number;
        
        //The entity's size in pixels. This is used for collision detection and response.
        //The default x and y size is 16.
	    size?: IG_Size;

	    type?: number;
	    vel?: IG_Size;
        
        //The entity's position in the game world.
        pos?: IG_Size;

	    //Specifies the name of the entity, to be retrieved by the Game's getEntityByName() method. 
        //This should be set through the constructor or in Weltmeister with the key/value pair and should be unique per level.
        //The default is null (no name).
        name?: string;


    }

    interface IG_Entity_Class extends IG_Entity {
	    new(x: number, y: number, settings: any): IG_Entity;
        extend(members:IG_Entity): IG_Entity_Class;
    }

    interface IG_AnimationSheet {
        //path Location of the image file
        //width Width of a single animation frame
        //height Height of a single animation frame
	    new(file: string, width: number, height: number): IG_AnimationSheet;
        
        //The width/height for a single animation frame, as set in the constructor

        width: number;
        height: number;
    }


    // The ig object provides the Module definition and loading capabilities as well as some utility functions. 
    // All your code should be wrapped in Modules, so it can be properly loaded and baked.
    // ig is not an instance of a ig.Class, but just a simple JavaScript object and thus can't be subclassed.

    interface IG_ModuleRequires {
        defines(f: Function);
    }

    interface IG_Module{
        requires(...files: string[]): IG_ModuleRequires;
    }

    
    interface IG_Animation {
    }


    interface IG_Mouse {
        x: number;
        y: number;
    }
    // handles all Keyboard and Mouse input.
    //You can bind keys to specific actions and then ask if one of these actions is currently held down (.state()) or was just pressed down after the last frame (.pressed()).
    //Note that an instance of ig.Input is automatically created at ig.input (lowercase) by the ig.main() function.
    interface IG_Input {

        //Bind a Keyboard or Mouse button to an action. action is a string or integer, identifying the action in your game. Call this function for each button and action pair at the start of your game.
        //key can be anything of ig.KEY.*.
        //Several buttons can be bound to the same action, but a button can not be bound to several actions.
        // Binds both, UP_ARROW and SPACE, to the same action
        //ig.input.bind( ig.KEY.UP_ARROW, 'jump' );
        //ig.input.bind( ig.KEY.SPACE, 'jump' );
        //action is enum or string
        bind(key, action: any): void;  

        
        //Returns true if one of the buttons bound to the specified action was just pressed down, false otherwise.
        //In contrast to .state(), this method only returns true once for each button press.
        // You can use this for example if you want the user to repeatedly press a button to shoot instead of having "autofire".
        //action is enum or string;
        pressed(action: any): bool;

        mouse: IG_Mouse;

    }

    interface IG_Key {
        MOUSE1: any;
        MOUSE2: any;
        MWHEEL_UP: any;
        MWHEEL_DOWN: any;
        BACKSPACE: any;
        TAB: any;
        ENTER: any;
        PAUSE: any;
        CAPS: any;
        ESC: any;
        SPACE: any;
        PAGE_UP: any;
        PAGE_DOWN: any;
        END: any;
        HOME: any;
        LEFT_ARROW: any;
        UP_ARROW: any;
        RIGHT_ARROW: any;
        DOWN_ARROW: any;
        INSERT: any;
        DELETE: any;
        _0: any;
        _1: any;
        _2: any;
        _3: any;
        _4: any;
        _5: any;
        _6: any;
        _7: any;
        _8: any;
        _9: any;
        A: any;
        B: any;
        C: any;
        D: any;
        E: any;
        F: any;
        G: any;
        H: any;
        I: any;
        J: any;
        K: any;
        L: any;
        M: any;
        N: any;
        O: any;
        P: any;
        Q: any;
        R: any;
        S: any;
        T: any;
        U: any;
        V: any;
        W: any;
        X: any;
        Y: any;
        Z: any;
        NUMPAD_0: any;
        NUMPAD_1: any;
        NUMPAD_2: any;
        NUMPAD_3: any;
        NUMPAD_4: any;
        NUMPAD_5: any;
        NUMPAD_6: any;
        NUMPAD_7: any;
        NUMPAD_8: any;
        NUMPAD_9: any;
        MULTIPLY: any;
        ADD: any;
        SUBSTRACT: any;
        DECIMAL: any;
        DIVIDE: any;
        F1: any;
        F2: any;
        F3: any;
        F4: any;
        F5: any;
        F6: any;
        F7: any;
        F8: any;
        F9: any;
        F10: any;
        F11: any;
        F12: any;
        SHIFT: any;
        CTRL: any;
        ALT: any;
        PLUS: any;
        COMMA: any;
        MINUS: any;
        PERIOD: any;
    }
    


    interface IG {
        Entity: IG_Entity_Static;  //for extension
        AnimationSheet: IG_AnimationSheet;
        Game: IG_Game_Static;
        Font: IG_Font_Class;
        Image: IG_Image_Class;

        input: IG_Input;
        KEY: IG_Key;
        game: IG_Game; //current game

        //global object, window if in browser
        global: any;

        //moduleName = name of the file including the folder relative to lib. 
        //example: game.main => lib/game/main.js
        module(moduleName: string): IG_Module;

        //Initializes ig.system, ig.input, ig.soundManager and ig.music and starts the preloader. When the preloader has finished, an instance of gameClass is created at ig.game and the run loop is started.
        // canvas = A string with an ID selector for the canvas element in which the game will be drawn. E.g.: '#myCanvas'
        // gameClass = A subclass of ig.Game of which an instance will be created and the .run() method called fps times per second.
        //fps Desired frames per second - Ignored in 1.20
        //width, height Size of the game screen
        //scale Scaling of the game screen. E.g. a width of 320 and a scale of 2 will result in a 640 pixel wide canvas element. The default is 1 (no scaling).
        //loaderClass A subclass of ig.Loader to act as the preloader. The default is the ig.Loader class itself.
        //Note that as of 1.20, the fps parameter is ignored in favor of requestAnimationFrame. This allows the browser to decide the best drawing interval, based on the display's refresh rate. If the drawing interval drops below 20hz, the timestep will be capped at 1/20th of a second, essentially slowing the game down. E.g. when only 10 fps can be rendered, an "in game second" takes two "real time seconds". See ig.Timer.maxStep.
        main( canvas : string, gameClass : any, fps : number, width : number, height : number, scale? : number, loaderClass? : any);

        //The ig Core has 4 debug message functions. However, these functions will only do something when the debug module is loaded. 
        //This is useful when you want to release your game - simply remove the debug module and all debug messages are gone.
        
        //An alias for the browser's console.assert(). It's safe to use this function even if the browser doesn't have the console object defined, like for IE9 without the developer tools.
        assert( expression : any, message? : string ):void;
        
        //An alias for the browser's console.log().
        log(o: any): void;

        //Adds or updates the number for name in the debug menu on the right. E.g. if you want to display the player's x velocity for each frame, do the following in your update() method:
        // assuming #player# is an entity
        //ig.show( 'x vel', player.vel.x.round() ); // round before output
        show(name: string, n: number): void;

        //Adds the msg to the performance graph at the current time. The optional color parameter accepts a CSS color string such as '#f0f'. 
        //If the performance panel is currently inactive, the message will be ignored.
        mark(msg: string, color?: string): void;

    }

    declare var ig: IG;



module my {

    export interface IDelegate {
        self: any;
        handler: Function;
    }

    export class Event {
        private delegates: IDelegate[] = [];
        public add(delegate: IDelegate) : void {
            this.delegates.push(delegate);
        }
        public remove(delegate: IDelegate) : void {
            this.delegates = _.without(this.delegates, _.where(this.delegates, delegate));
        }
        public $raise(args : any[])
        { 
            for (var i = 0; i < this.delegates.length; i++) {
                var d = this.delegates[i];
                d.handler.apply(d.self, args);
            }
        }
    }

    export interface IEntityClickDelegate {
        self: any;
        handler: (e: IG_Entity, location : any) => void;
    }

    export class EntityClickEvent extends Event{
        public add(delegate: IEntityClickDelegate) {
            super.add(delegate);
        }
        public remove(delegate: IEntityClickDelegate) {
            super.remove(delegate);
        }
        public raise(e: IG_Entity) {
            super.$raise([e,undefined]);
        }
    }

    //declarations specific to my game
    export class InputAction {
        static LeftClick: string = 'leftClick';
    }

    export interface Entity_Class extends IG_Entity {
        new (x: number, y: number, settings: any): Entity;
        extend(members: Entity): Entity_Class;
    }

    export interface Entity extends IG_Entity {
        inFocus?: bool;
        onclick?: my.EntityClickEvent;
    }

    export var BaseEntity: Entity_Class = null;

    export var init = function()
    {
        //this method must be lazily called from impact own module setup, see below

        BaseEntity = < Entity_Class > ig.Entity.extend(
        {
            // in entity definition
            init: function (x: number, y: number, settings: any) {
                var base = <Entity>this;

                this.parent(x, y, settings);

                if (base.animSheet) {
                    base.size.x = base.animSheet.width;
                    base.size.y = base.animSheet.height;
                }
            },
            update: function () {
                var base = <Entity>this;
                this.parent();
                if (ig.input.pressed(InputAction.LeftClick) && this.inFocus()) {
                    ig.mark(base.name + ' clicked', '#FFFFFF');
                    base.onclick.raise(this);
                }
            },

            onclick: new my.EntityClickEvent(),

            inFocus: function () {
                var base = <Entity>this;
                return (
                   (base.pos.x <= (ig.input.mouse.x + ig.game.screen.x)) &&
                   ((ig.input.mouse.x + ig.game.screen.x) <= base.pos.x + base.size.x) &&
                   (base.pos.y <= (ig.input.mouse.y + ig.game.screen.y)) &&
                   ((ig.input.mouse.y + ig.game.screen.y) <= base.pos.y + base.size.y)
                );
            }
        });
    }
}



module Level01 {

    export class Zone{
        public data: IG_Entity[] = [];
        
        public add(entity: IG_Entity) : bool {
            if (_.contains(this.data, entity))
                return false;
            this.data = _.union(this.data, [entity]);
            return true;
           
        }
        public addRange(entities: IG_Entity[]) {
            for (var i = 0; i < entities.length; i++) {
                this.add(entities[i]);
            }
        }
        public get Count(): number {
            return this.data.length;
        }
        public contains(entity: IG_Entity): bool {
            return _.contains(this.data, entity);
        }
    }

    export class StaticZone  extends Zone {
        private locations = {};

        public add(entity: IG_Entity) : bool {
            var ret = super.add(entity);
            if (!ret)
                return false;

            var memPos = this.locations[entity.name];
            if (memPos) {
                entity.pos.x = memPos.x;
                entity.pos.y = memPos.y;   //when add restore the position if memorized
            }
            else {
                this.locations[entity.name] = entity.pos; //memorize
            }

            return true;
        }
    }

    //topLeft - guiding entity
    export class SlotsZone extends Zone {
        private topLeft: my.Entity;
        private slots: any[][];
        private maxItemHeight: number;

        constructor(topLeft : my.Entity, maxItemHeight : number, slots : any[][]){
            super();
            this.topLeft = topLeft;
            this.slots = slots;
            this.maxItemHeight = maxItemHeight;
        }
        public add(entity: IG_Entity) : bool {
            var ret = super.add(entity);
            if (!ret)
                return false;

            //find slot
            var rowTopLeft = this.topLeft.pos;
            for (var row = 0; row < this.slots.length; row++) {
                var rowData = this.slots[row];
                for (var col = 0; col > rowData.length; col++) {
                    var slot = rowData[col];
                    if (!slot) {
                        entity.pos = { x: rowTopLeft.x, y: rowTopLeft.y + this.maxItemHeight - entity.size.y };
                    }
                }
            }

            return true;
        }
    }
}


