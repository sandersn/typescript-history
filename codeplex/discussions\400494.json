[
  {
    "Id": "931219",
    "ThreadId": "400494",
    "Html": "\r\n<p>Why does this throw an error by the compiler?</p>\r\n<p>Of course, we have to &quot;solve&quot; the <a href=\"http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem\">\r\ndiamond problem</a>, but what are the reasons against multiple inheritance?</p>\r\n<div id=\"_mcePaste\" style=\"overflow:hidden; height:1px; left:-10000px; top:0px; width:1px\">\r\n&#65279;</div>\r\n",
    "PostedDate": "2012-10-23T10:34:23.333-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "931797",
    "ThreadId": "400494",
    "Html": "<p>At the risk of getting a little language-geeky -&nbsp;inheritance is generally split into two kinds of inheritance: interface inheritance and implementation inheritance.&nbsp; Interface inheritance is the inheritance that let subclasses follow the same interface as parent classes.&nbsp; There's no problem allowing multiple inheritance for interfaces, in fact you&nbsp; can do this now in TypeScript:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">interface</span> MyX {\r\n\tx: number;\r\n}\r\n\r\n<span style=\"color: blue;\">interface</span> MyY {\r\n\ty: number;\r\n}\r\n\r\n<span style=\"color: blue;\">class</span> MyClass <span style=\"color: blue;\">implements</span> MyX, MyY {\r\n\tx: number;\r\n\ty: number;\r\n}\r\n\r\n<span style=\"color: blue;\">function</span> f(xyz: MyClass) {\r\n\t<span style=\"color: blue;\">return</span> xyz.x + xyz.y;\r\n}\r\n</pre>\r\n</div>\r\n<p>Implementation inheritance is where you run into the diamond problem.</p>",
    "PostedDate": "2012-10-24T08:36:36.53-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "931847",
    "ThreadId": "400494",
    "Html": "<p>Thanks for your response.</p>\r\n<p>But that's not what I'm looking for. For example, I have a base class A and I want to extend it using a new class B. But the latter class should also inherit methods of another independent class C.</p>\r\n<p>Class C is actually a class defining some functions for event handling (addEventListener, ...).</p>\r\n<p>And are there any plans for implementing abstract classes and methods?&nbsp;They're of course not implementable in the compiled JavaScript but the compiler could still warn about using a class with abstract functions.</p>",
    "PostedDate": "2012-10-24T09:50:02.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "934846",
    "ThreadId": "400494",
    "Html": "<p>When you want to re-use behaviour form multiple classes, you can use delegation rather than inheritance.</p>\r\n<p>You can read a detailed comparison of these two styles here:</p>\r\n<p>http://www.objectmentor.com/resources/articles/inheritanceVsDelegation.pdf</p>",
    "PostedDate": "2012-10-31T09:08:47.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "947588",
    "ThreadId": "400494",
    "Html": "\r\n<p>Sometimes the best solution really is to emulate multiple inheritance (more verbosely) using interfaces, an attribute and many forwarding methods.</p>\r\n<p>Multiple inheritance is very unpopular though, partly I think because there are so many opinionated people who speak ill of it, and partly because it can be confusing in certain/many cases.</p>\r\n<p>Personally I'm a fan of Scala's traits mechanism as an alternative to multiple inheritance as it solves the diamond problem using a sensible and clearly defined mechanism. However I also feel that Scala traits have arbitrary restrictions purely because people\r\n are scared of having it &quot;look like multiple inheritance&quot; and thus offend aforementioned opinionated people.</p>\r\n",
    "PostedDate": "2012-11-27T04:30:29.19-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]