{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Discussion forum can handle this.",
    "ClosedDate": "2014-07-21T17:44:13.56-07:00",
    "CommentCount": 5,
    "Custom": null,
    "Description": "```\r\ninterface StringThing {\r\n  string;\r\n}\r\n\r\nfunction isFoo(s:StringThing) : boolean {\r\n  return (s === 'foo');\r\n}\r\n```\r\n\r\nI may be misunderstanding the structural typing rules and interface definitions, but I was thinking the above was staying that |StringThing| is a type-abbreviation for string. In which case the above should be fine, but instead I get this error: \r\n\r\n```\r\n/Users/ldixon/Desktop/foo.ts(19,11): error TS2009: Operator '===' cannot be applied to types 'StringThing' and 'string'.\r\n```",
    "LastUpdatedDate": "2014-07-21T17:44:13.56-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-06-29T13:19:36.767-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Type abbreviations are not structural extensions of primitive types (failure of structural typing)",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2587
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This should be a discussion, not an issue post.  \"string\" is a valid property name.  You created an interface for objects that expect \".string\" as a property.  You cannot cast primitive type names to interfaces.",
      "PostedDate": "2014-06-29T23:37:59.533-07:00",
      "Id": 151114
    },
    {
      "Message": "Sorry, by \"cast ...\" I meant to say \"you cannot use interfaces as an alias to represent typescript type names\".",
      "PostedDate": "2014-06-29T23:41:07.52-07:00",
      "Id": 151115
    },
    {
      "Message": "I think you want typedef: https://typescript.codeplex.com/workitem/119",
      "PostedDate": "2014-06-30T01:53:02.763-07:00",
      "Id": 151120
    },
    {
      "Message": "OK, I see I was confused by the capacity for an interface to describe a function (http://www.typescriptlang.org/Handbook#interfaces-function-types), so Function seems to be a primitive type that an interface can implement, but not `string` or other primitive types :/\n\nI didn't realize that `string` above was being interpreted as a property in the interface. \n\nI think it would be good to be able to able to extend string / abbreviate primitive types. If it worked, it would let you do nice things like this: https://github.com/iislucas/DefinitelyTyped/blob/iislucas-webrtc/webrtc/RTCPeerConnection.d.ts\n(you can use types as a comment for the intended use-case of the string; ideally you'd be able to create proper abstract types that require syntax to convert, but otherwise protect you from using strings for strings that are supposed to have a particular structure)",
      "PostedDate": "2014-07-01T07:23:09.027-07:00",
      "Id": 151244
    },
    {
      "Message": "Started discussion here: https://typescript.codeplex.com/discussions/550241",
      "PostedDate": "2014-07-01T08:47:25.233-07:00",
      "Id": 151249
    }
  ]
}