{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-12-18T18:01:49.527-08:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Let me show:\r\n```ts\r\ndeclare function f<T1, T>(func: (a?: T1) => T): T;\r\nvar str: string;\r\n\r\nstr = f((a?:number)=>\"\");\t// ok: T1 is number, T is string\r\n// try to pass function argument where optional parameter omitted\r\nstr = f(()=>\"\");\t\t\t// fail: T1 is string, T is {}\r\n```\r\nSo, when function with generic parameters have parameter with function type and should use parameters/return types for infer type arguments, it fails when some of parameters omitted in argument function.\r\nTo be clear, it infers type of omitted parameter in argument function as return type of the argument function.",
    "LastUpdatedDate": "2013-12-18T18:01:49.527-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-17T23:04:29.897-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Wrong inference of generic type with omitted parameter in callback argument",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2031
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This is working correctly in our latest bits now. I see the behavior you're describing with 0.9.5, but now the second assignment to str works correctly, T1 is {} and T is string.",
      "PostedDate": "2013-12-18T18:01:45.753-08:00",
      "Id": 128016
    }
  ]
}