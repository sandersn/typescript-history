{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:11.173-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "The ES6 spec calls for destructuring assignment, where in the left-hand side of an assignment expression you can provide something in a form similar to an array literal or object literal that is used to extract ordinal values from an array or a property path from an object and store the results in locals. This is equivalent to similar support in CoffeeScript. For example:\r\n\r\n```ts\r\n// swap\r\n[a, b] = [b, a]; \r\n\r\n// slice\r\n[...ar2] = ar1;\r\n\r\n// skip\r\n[a, , b] = ar1;\r\n\r\n// mixed\r\n[a, b, ...rest] = ar1;\r\n\r\n// refutable matching\r\n[a, b] = [1]; // error: index for b is out of range\r\n[a, ?b] = [1]; // pass: a = 1, b = undefined\r\n[a, ?b = 2] = [1]; // pass: a = 1, b = 2\r\n[a, ...b] = [1]; // pass: a = 1, b = []\r\n\r\n// multiple return values:\r\nfunction foo() {\r\n  return { a: 1, b: 2 };\r\n}\r\nvar { a, b } = foo();\r\nconsole.log(\"%s-%s\", a, b); // LOG: 1-2\r\n\r\n// deep property paths\r\nfunction bar() {\r\n  return { a: { b: { c: 1 } };\r\n}\r\nvar { a: { b: { c: d } } } = bar();\r\nconsole.log(d); // LOG: 1\r\n\r\n// refutable matching (run-time and compile-time)\r\nvar { a } = {}; // compile-time error\r\nvar { a } = <any>{}; // run-time error\r\nvar { ?a } = {}; // passes, a is undefined\r\nvar { ?a } = <any>{}; // passes, a is undefined\r\nvar { ?a = 1 } = {}; // passes, a == 1\r\n\r\n// type annotations\r\nvar { a: a: number } = foo(); // expects a is a number.\r\n```\r\n\r\nAs you can see there is an open issue about how best to support destructuring assignment and type annotations, due to possible ambiguity (e.g. cannot use type annotation with shorthand) and a somewhat odd syntax.\r\n\r\nYou also may want to investigate a pseudo-tuple syntax as part of type annotations to be future-proof for ES6 for things like Map#entries():\r\n\r\n```ts\r\nclass Map<K, V> {\r\n  ...\r\n  keys(): Iterable<K>;\r\n  values(): Iterable<V>;\r\n  entries(): Iterable<[K,V]>; // iterable of tuple [K,V]\r\n  ...\r\n}\r\n\r\nvar map = new Map<number, string>();\r\nfor (var [k,v] of map.entries()) {\r\n  // k should be :number\r\n  // v should be :string\r\n}\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-18T16:30:03.397-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Add support for destructuring assignment",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 13,
    "Id": 1368
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion. We'll be aligning with ES6 as best we can over time, this is one that's come up before and we'll be revisiting later.",
      "PostedDate": "2013-07-19T11:15:17.547-07:00",
      "Id": 106657
    }
  ]
}