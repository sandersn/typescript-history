[
  {
    "Id": "920114",
    "ThreadId": "397565",
    "Html": "\r\n<p>(Cross-posting my HN comment at&nbsp;http://news.ycombinator.com/item?id=4598036.)</p>\r\n<p>This looks nice.</p>\r\n<p>It'd be 100% more useful if it was more aware of nullable types -- as it is, it appears that\r\n<code>null * 7</code> compiles without any error messages. If you guys add a &quot;nullable number&quot; type distinct from &quot;number&quot;, I'll be a lot more likely to use it.</p>\r\n<p>It also appears that some other things compile that perhaps shouldn't, such as\r\n<code>7[2]</code> and <code>7[&quot;a&quot;]</code> even though (7).a is equivalent and (correctly) fails to compile.</p>\r\n<p>Nice work. :)</p>\r\n",
    "PostedDate": "2012-10-01T10:27:59.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920209",
    "ThreadId": "397565",
    "Html": "<p>Thanks! Great suggestions!</p>\r\n<p>Non-nullable types: There's a delicate balance we have to strike where the type system needs to be useful but not too complex. One guiding light for us here has been that toolability is more important than type safety. As non-nullness does little for e.g. auto-completion and comes with quite a lot of user-facing complexity, we've decided - for now! - not to track it. We note your feedback though; if this becomes a common request we'll take another look at it.</p>\r\n<p>As for the typing of e.g. \"null * 7\" we can look at that separately from the above question. We do have a null type and could choose to reject this expression. A tradeoff with operators in general is that JavaScript is awash with operator-based idioms that are concise and useful but inherently \"badly\" typed. We don't want to police these too strongly so there needs to be some wiggle room. That said, we'll look at this case and see if there's some tightening up we can do without breaking idiomatic scenarios.</p>\r\n<p>Finally, indexers: I am convinced we could have&nbsp;stronger typing here. In particular, since \"dotting\" in JavaScript is little more than syntactic sugar over indexing with constant strings, the type system could probably do a better job recognizing that and typingthose two syntaxes in a more similar fashion.</p>\r\n<p>Thanks again for the great feedback!</p>",
    "PostedDate": "2012-10-01T14:00:47.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920279",
    "ThreadId": "397565",
    "Html": "<p>Agree with this.&nbsp; Given that TS is adding a level of verifiability to the code at compile time it would be great to replace those asserts with something that the compiler can understand.&nbsp;</p>\r\n<p>In the same way I think adding an immutable decorator would also be useful.&nbsp; Like C++ const, this could help verify the code - even if no javaScript was emitted.</p>",
    "PostedDate": "2012-10-01T16:39:36.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1054744",
    "ThreadId": "397565",
    "Html": "I would also like to see nullable types in typescript.\r<br />\n<br />\nNullable types have helped me statically find many bugs in my code with googles closure compiler. They forced me to always be very mindful about which values may be null, thus avoiding the equivalent of null pointer dereferencing:<br />\n<pre><code>var x: number or null;\nvar y = x.toPrecision(2); // Error: x may be null, accessing member 'toPrecision' of null\nif (x != null) {\n    var y = x.toPrecision(2); // OK: x can't be null\n}</code></pre>\n\nNote that for this to work, one needs flow-based type inference (the compiler has to realize that x can't be null after we check its value for null).\r<br />\n<br />\nAs for the syntax, in closure, all types are nullable by default, but one can explicitely specify this as in the below example. I think a similar syntax would fit the spirit of typescript where the core language is very relaxed and you can explicitely add strictness to your code.<br />\n<ul>\n<li>&quot;!number&quot;: a number (must not be null)</li>\n<li>&quot;?number&quot;: a number or null</li>\n<li>&quot;number&quot;: a number or null (default if not explicitely stated)</li>\n</ul>\n",
    "PostedDate": "2013-06-10T01:43:46.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1054966",
    "ThreadId": "397565",
    "Html": "@crobi \r<br />\n<br />\nI suspect this will make the type system feel more complex (as Mads mentions in the previous reply), though it's also something that someone could experiment with in a fork of the compiler to see how it plays out in practice.  <br />\n",
    "PostedDate": "2013-06-10T10:02:24.3-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1229485",
    "ThreadId": "397565",
    "Html": "From my experience working with google closure, and F# option types, I find the nullability types very useful in finding bugs. When it comes to real world bugs, I'd probably trade nullability for all other type features! Right now this missing feature is one of the main things that is preventing me from wanting to switch from google closure compiler to wanting to work with typescript.<br />\n",
    "PostedDate": "2014-04-02T07:17:41.757-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]