[
  {
    "Id": "1251548",
    "ThreadId": "547163",
    "Html": "I'm the author of <a href=\"https://www.github.com/ivogabe/gulp-type\" rel=\"nofollow\">gulp-type</a>, a gulp plugin which compiles TypeScript with the TypeScript api. I had a problem with the following code:\r<br />\n<br />\nImagine a file <code>class.ts</code> which has an export assignment, that exports a class.\r<br />\n<code>exportimport.ts</code> exports that class: <code>export import MyClass = require('./class');</code>\r<br />\n<code>main.ts</code> imports <code>exportimport.ts</code> and creates a new instance of it:<br />\n<pre><code>import exportimport = require('./exportimport');\nvar test = new exportimport.MyClass();\n</code></pre>\n\nNow the strange part:\r<br />\nThe Compiler generates no error if the files are added to the Compiler in this order: class.ts, exportimport.ts, main.ts.\r<br />\nBut if the files are added in this order: main.ts, exportimport.ts, class.ts, you get the error <code>error TS2083: Invalid 'new' expression.</code>\r<br />\n<br />\nIs this by design? Should the files by added to the compiler in the order they reference each other? Or is this a bug?\r<br />\n<br />\nAs far as I know, other things (like <code>export class ...</code>) don't fail if you use another order.<br />\n",
    "PostedDate": "2014-05-31T05:04:07.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1251557",
    "ThreadId": "547163",
    "Html": "And even stranger, it works (in the order main, exportimport, class) with this <code>main.ts</code>:<br />\n<pre><code>import exportimport = require('./exportimport');\nexportimport.MyClass;\nvar test = new exportimport.MyClass();</code></pre>\n\n",
    "PostedDate": "2014-05-31T05:45:25.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]