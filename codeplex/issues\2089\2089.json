{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Thanks for the suggestion, this is a duplicate of an earlier suggestion [0]. Please vote on that item. \n\n[0] https://typescript.codeplex.com/workitem/1749",
    "ClosedDate": "2014-01-10T10:43:34.2-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "PROBLEM: when working with the dojo toolkit I want to be able to define ContentPane as a _Widget that also is a _Container.  The _Container is a mixin.  I want to be able to do this without re-declaring the _Container interface on the ContentPane class.\r\n\r\nThis code works in 0.9.5 but notice I had to re-declare the entire _Container interface:\r\n\r\n```\r\ndeclare module dijit {\r\n    module layout {\r\n        class ContentPane extends dijit._Widget\r\n        implements dijit._Container {\r\n            // how to avoid duplicating the _Container here?\r\n            addChild(widget: _WidgetBase, insertIndex?: number): void;\r\n            getIndexOfChild(child: _WidgetBase): number;\r\n            hasChildren(): boolean;\r\n            removeChild(widget: _WidgetBase): void;\r\n            removeChild(widget: number): void;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare module \"dijit/layout/ContentPane\" {\r\n    var ContentPane: typeof dijit.layout.ContentPane;\r\n    export = ContentPane;\r\n}\r\n```\r\n\r\nI want to avoid this.  I think it could be done in one of several ways:\r\n(1) allow typeof to operate on an interface when in the context of a d.ts file.\r\n(2) to not require classes to re-declare the interfaces it implements in the context of a d.ts file.\r\n(3) allow multiple inheritance in the context of a d.ts file.\r\n\r\nOption (1) would look like this:\r\n\r\n```\r\ndeclare module dijit {\r\n    module layout {\r\n        interface ContentPane extends dijit._Widget, dijit._Container {\r\n        }\r\n    }\r\n}\r\n\r\ndeclare module \"dijit/layout/ContentPane\" {\r\n    var ContentPane: typeof dijit.layout.ContentPane;\r\n    export = ContentPane;\r\n}\r\n```\r\n\r\nOption (2) would look like this:\r\n```\r\ndeclare module dijit {\r\n    module layout {\r\n        class ContentPane extends dijit._Widget implements dijit._Container {\r\n        }\r\n    }\r\n}\r\n\r\ndeclare module \"dijit/layout/ContentPane\" {\r\n    var ContentPane: typeof dijit.layout.ContentPane;\r\n    export = ContentPane;\r\n}\r\n```\r\n\r\nOption (3) probably not so good:\r\n```\r\ndeclare module dijit {\r\n    module layout {\r\n        class ContentPane extends dijit._Widget, dijit._Container {\r\n        }\r\n    }\r\n}\r\n\r\ndeclare module \"dijit/layout/ContentPane\" {\r\n    var ContentPane: typeof dijit.layout.ContentPane;\r\n    export = ContentPane;\r\n}\r\n```\r\n",
    "LastUpdatedDate": "2014-01-10T10:43:34.2-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-01-10T08:48:52.73-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Duplicate"
    },
    "Summary": "In a d.ts allow class to 'implement' without redeclaring",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2089
  },
  "FileAttachments": [],
  "Comments": []
}