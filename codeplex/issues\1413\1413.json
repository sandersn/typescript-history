{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:11.863-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "We are impressed with all the work you've done and now widely use TypeScript in our purposes. However, we are thinking about several improvements which still could be done. The aim of the changes is to make TypeScript code be more strict which, we hope, will save further development (debugging) time for potential bugs fixing. As you can see all the offers are borrowed from C#.\r\n\r\nFirst we see extreme necessity of having inheritance attributes being applied to base or derived classes:\r\n    abstract\r\n    sealed\r\n\r\nSimilar attributes would be surely useful for methods as well:\r\n    abstract\r\n    virtual\r\n    override\r\n\r\nNow to make our code more readable we use temporal solution with appropriate comments, for instance:\r\n    /* abstract */ class BaseClass {\r\n    ...\r\n    }\r\n\r\n    /* sealed */ class MyClass extends BaseClass {\r\n    ...\r\n    }\r\n\r\nThere is another issue with strange behavior of derived classes and interfaces. If we are trying to cast some object of class that surely implements some interface we got and exception, for example:\r\n\r\n    interface IMyInterface {\r\n    …\r\n    }\r\n\r\n    class MyClass implements IMyInterface {\r\n    …\r\n    }\r\n\r\n    var myClassObject = new MyClass();\r\n    <IMyInterface>myClassObject\r\n\r\n – would cause an exception, instead of that we should write the following:\r\n\r\n    <IMyInterface><any>myClassObject\r\n\r\nAlso is there any possibility to have something like _typeof_ from C#?\r\n\r\nIn addition standard attributes to declare member’s accessibility are highly appreciated:\r\n    private\r\n    protected\r\n    public\r\n\r\nThanks",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-31T23:22:05.177-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Inheritance attributes and derived classes behavior",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 7,
    "Id": 1413
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestions, assigned to Jon who handles suggestions.\r\n\r\nAlso I don't repro the 'exception' you're seeing.  Can you open a new bug for that with more detailed steps?",
      "PostedDate": "2013-08-01T13:41:44.13-07:00",
      "Id": 108241
    },
    {
      "Message": "I'd love to see this as well.  I routinely wish I could just type \"override\" on a derived type, and ONLY show the functions marked VIRTUAL in the selection.  As it is, I have to hunt down classes, buried deep in files, just to find the right signature (not efficient at all), or type \"new Type()...\" to see the members (just silly).  Any function not marked as \"virtual\" in a base type should be protected from being replaced, as it may break an API.",
      "PostedDate": "2014-04-03T15:09:47.8-07:00",
      "Id": 140472
    },
    {
      "Message": "I'd like to add my vote for an 'override' attribute on method; coming from a Java environment I know that the equivalent '@Override' annotation is extremely helpful during development, and good for spotting typos.",
      "PostedDate": "2014-04-04T07:12:44.35-07:00",
      "Id": 140544
    }
  ]
}