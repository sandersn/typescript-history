[
  {
    "Id": "1228048",
    "ThreadId": "540517",
    "Html": "<pre><code>class Unique {\n    uid = Unique['_static_counter']++;\n}\nUnique['_static_counter'] = 0;\nclass Kabucha extends Unique {\n    constructor(public name:string=&quot;busya&quot;) { \n        super(); /// &lt;&lt;THIS\n    }\n}</code></pre>\n\n<a href=\"http://www.typescriptlang.org/Playground/#src=function%20print(...args%3Aany%5B%5D)%7B%0A%09return%20document.writeln.apply(document%2Cargs)%3B%0A%7D%0Aprint(%22%3Cstyle%3Ebody%7Bwhite-space%3Apre%3B%7D%3C%2Fstyle%3E%22)%3B%0A%0Aclass%20Unique%20%7B%0A%09uid%20%3D%20Unique%5B'_static_counter'%5D%2B%2B%3B%0A%7D%0AUnique%5B'_static_counter'%5D%20%3D%200%3B%0A%0A%0Aclass%20Kabucha%20extends%20Unique%20%7B%0A%09constructor(public%20name%3Astring%3D%22busya%22)%7B%20super()%3B%20%7D%0A%7D%0A%0Aprint(new%20Kabucha().uid)%3B%0Aprint(new%20Kabucha().uid)%3B%0Aprint(new%20Kabucha().uid)%3B%0A\" rel=\"nofollow\">Link to the code</a><br />\n<br />\nWhy do we need a redundant super() call, when the compiler already knows that we should call it anyway, since a CT-error: &quot;<em>Constructor for derived classes must contain a super() call.</em>&quot; ?<br />\nWhy don't we assume that if there are no explicit super() call, then we always want to place it as a first instruction of a child constructor?<br />\n",
    "PostedDate": "2014-03-28T18:20:20.857-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1228779",
    "ThreadId": "540517",
    "Html": "What would you inject if the base class constructor has some number of required parameters of specific types?<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">class</span> Unique {\n    uid = Unique[<span style=\"color:#A31515;\">&#39;_static_counter&#39;</span>]++;\n    <span style=\"color:Blue;\">constructor</span>(name: <span style=\"color:Blue;\">string</span>) { }\n}\n\nUnique[<span style=\"color:#A31515;\">&#39;_static_counter&#39;</span>] = 0;\n\n<span style=\"color:Blue;\">class</span> Kabucha <span style=\"color:Blue;\">extends</span> Unique {\n    <span style=\"color:Blue;\">constructor</span>(<span style=\"color:Blue;\">public</span> name: <span style=\"color:Blue;\">string</span>) {\n        <span style=\"color:Green;\">// super(null); // inject this? or &quot;&quot;? or name or what?</span>\n    }\n}\r\n</pre></div>In addition, even if we had an acceptable pattern for this case I would find it a little strange if whenever looking at a derived constructor definition without a super() call I had to manually inspect the conditions surrounding it that may or may not lead to an injected super() call (and then remember what argument values are injected). Sometimes there is value in requiring something to be explicit and consistent.<br />\n",
    "PostedDate": "2014-03-31T14:25:51.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1228838",
    "ThreadId": "540517",
    "Html": "Not sure I follow, but in C# (and other languages I'm sure), if the base type has no parameters, the derived type doesn't need to explicitly show code to call it.  I don't think there's a good reason to force people to have to add in a &quot;super()&quot; call in this case.  In fact, when I started using TS, it was my very first pet peeve. <br />\n",
    "PostedDate": "2014-03-31T17:30:27.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]