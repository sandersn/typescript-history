[
  {
    "Id": "1216941",
    "ThreadId": "536392",
    "Html": "I've noticed that if I have a property with only a get accessor...<br />\n<pre><code>private _id: number = 1;\npublic get id(): number\n{\n    return this._id;\n}</code></pre>\n\n... that I can still <em>attempt</em> to set the property...<br />\n<pre><code>obj.id = 123;</code></pre>\n\n... and the TypeScript compiler won't complain. When this actually runs as JavaScript, the set simply fails - obj.id would still be '1' after the above line.\r<br />\n<br />\nI imagine JavaScript will silently swallow the bad assignment, but I'd have expected TypeScript to complain about this?<br />\n",
    "PostedDate": "2014-03-02T04:34:26.593-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1218103",
    "ThreadId": "536392",
    "Html": "This is a bit of a quirk from the fact that we don't describe readonly-ness in the type system.  We looked into doing this about a year ago, and once it was added, readonly-ness found its way into a lot of areas.  For example, you can get a handle on a function declaration, since we don't let you write to it would this also be readonly?  If so, how does this play with higher-order functions that themselves take a function?  Pretty quickly that readonly aspect spread to quite a lot of our code examples.\r<br />\n<br />\nIn short, there was a lot of trickiness, and we instead opted to not introduce that much complexity into the type system, which meant that you can't describe the situation above.  It's possible we may check for this in the future, or that linters will check and warn on this.<br />\n",
    "PostedDate": "2014-03-03T09:23:42.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]