{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "It's sort of confusing, but index signatures don't actually enforce the members of an object in declaration contexts like you have here. Index signatures are sort of unenforceable by default; for example, even the object literal you wrote has a valueOf method that isn't a string array. Hope that helps.",
    "ClosedDate": "2013-01-03T13:38:58.71-08:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "I'm playing with the latest TypeScript (0.8.1.1).  My code:\r\n\r\nclass MyClass {\r\n    getStringToStringArrayDict(): { [index: string]: string[]; } {\r\n        return {\r\n            \"key-1\": [\"value-1\", \"value-2\"],\r\n            \"key-2\": [new MyClass()], //// no warnings or errors\r\n            \"key-3\": new MyClass() //// no warnings or errors\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nIt looks like there isn't any static type checking on the return type of the function.  Bug ?",
    "LastUpdatedDate": "2013-08-13T12:35:39.767-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-01-03T08:08:18.51-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "associative array signature value in function return type - no static type checking ?",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 593
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "how about the type checking for the value part ?  that is, the two non string[] don't produce errors",
      "PostedDate": "2013-01-08T19:03:02.7-08:00",
      "Id": 85591
    }
  ]
}