{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-12-12T11:22:32.027-08:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "MyLibrary.d.ts\r\n```\r\nexport interface IA {\r\n    addNumbers(a?: number, b?: number): number;\r\n}\r\n\r\nexport interface IB {\r\n    addNumbers(a?: number, b?: number, c?: number): number;\r\n}\r\n\r\nexport interface IC extends IA, IB {\r\n}\r\n```\r\n\r\nError:\r\nBuild: Interface 'IC' cannot simultaneously extend types 'IA' and 'IB'.\r\nTypes of property 'addNumbers' of types 'IA' and 'IB' are not identical.\r\n\r\nNow the above piece of code was compilable in 0.9.1.1 but not in 0.9.5. Why can't IC support both definition of addNumbers(); ? \r\n\r\nWhat is the correct implementation if there is a multiple inheritance with same function identifier, different parameters?\r\n",
    "LastUpdatedDate": "2013-12-12T11:22:32.027-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-10T16:23:05.39-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Interface cannot simultaneously extend",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2004
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "There is no implementation for such a scenario because it isn't permitted. From 7.1 Interface Declarations in the language spec:\n\n_An interface is permitted to inherit identical members from multiple base types and will in that case only contain one occurrence of each particular member._\n\nwhere 3.8.2 describes what it means for types to be identical (in the case of functions they must always have the same number of parameters of the same optionality). 0.9.1.1 may have been incorrectly allowing this pattern. While it's possible to construct particular examples where non-identical signatures could be safely inherited from multiple base types in general it's unsafe which is part of why most languages do not allow classes to inherit multiple base classes. \n\n\n",
      "PostedDate": "2013-12-12T11:22:24.257-08:00",
      "Id": 127146
    }
  ]
}