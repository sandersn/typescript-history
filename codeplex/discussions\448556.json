[
  {
    "Id": "1062554",
    "ThreadId": "448556",
    "Html": "The keyword used in TypeScript 0.9 for generic type constraint is &quot;extends&quot; (like Java's) instead of &quot;where&quot; (in C#). What is the reason for choosing &quot;extends&quot;? In my opinion, &quot;where&quot; is clearer in expressing the constraint, especially when there are more than 1.<br />\n",
    "PostedDate": "2013-06-28T10:14:49.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1062800",
    "ThreadId": "448556",
    "Html": "I agree, this is much more familiar to me, and much cleaner. <code>where</code> really does express it better<br />\n<pre><code>where T: SomeClass</code></pre>\n\nAnd IMO:<br />\n<br />\nAnd in many more cases I would like to change things to look like C# (instead of <code>module</code>: <code>namespace</code>; instead of <code>extends</code>: <code>:</code>, instead of <code>import</code>: <code>using</code>)...<br />\n<br />\nI would really like it, but I don't think they will change that...<br />\n<br />\nAnd customizing the compiler to recognize these syntax would be a bad idea, the code would not be in the right syntax for others...<br />\n",
    "PostedDate": "2013-06-29T10:02:12.58-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1062895",
    "ThreadId": "448556",
    "Html": "I figure the reason is probably because it more closely maps the JavaScript code. The Typescript team does not like to inject their own code into your files, so they make their standards as close to JavaScript as possible.\r<br />\n<br />\nIn (the CommonJS) JavaScript specification module.exports is already specified, however the where keyword is not, so my guess is that they chose to go with what is already in a specification rather than inventing their own new way of importing stuff.<br />\n",
    "PostedDate": "2013-06-30T01:12:23.397-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]