[
  {
    "Id": "981299",
    "ThreadId": "427916",
    "Html": "\r\n<p>I have now been developing two projects with TypeScript and thought this would be a good moment to share some of my initial observations (just to get some discussion started):<br>\r\n<br>\r\n&#43; Love the type system. And when generics are added, this is a easy way to add type info to to your code without sacrificing too much of the flexibility that JS has to offer. One of my&nbsp;favorite&nbsp;features is the fact that Interfaces and Modules are\r\n open.<br>\r\n<br>\r\n&#43; The generated JS is so recognizable, that I sometimes&nbsp;bug-fix&nbsp;the JS code instead of the TS code. So this is&nbsp;definitely&nbsp;an advantage in figuring out why something goes wrong. I'm happy with plain JS debugging and don't even bother with\r\n generating source maps.<br>\r\n<br>\r\n&#43; The TS compiler is fast (even more so realizing it is running on top of a JS engine) and this makes the run/fix/compile cycles very quick.<br>\r\n<br>\r\n&#43; Having the JavaScript and HTML API in a separate declaration file, provides great flexibility to change something in there without having to hack the compiler itself.<br>\r\n<br>\r\n- External file modules really need some work. Right now they are not convenient to use, mainly due to the module alias that you are forced to use when accessing one of its exported members. Please allow somehow to import module members into the current scope\r\n without having to use a prefix all the time.<br>\r\n<br>\r\n- Enumerations should not compile to numbers, but use strings instead. But I believe this is already on the radar.<br>\r\n<br>\r\n- You should be able to set member variables in the constructor signature, but not define them. It makes the code much harder to read if you&nbsp; can define member variables at two different places. So the following approach (like Dart) seems to be nicer to\r\n me:&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> name:string; \r\nconstructor(<span style=\"color:blue\">this</span>.name) {}\r\n</pre>\r\n</div>\r\n<p>- Compiler needs some attention. Sometimes it misses type errors or even generates invalid code. Difficult to reproduce, but there has been cases that the _this was not generated while it was being used. Also nested functions are not type checked the same\r\n way as normal functions. But I'm sure these are things that will be fixed on the way.</p>\r\n<p><br>\r\n- HTML interface is bad!!! Not really a TS issue, but by exposing the HTML API in a typed manner it becomes more obvious. Too weakly typed, &nbsp;requiring too many typecasts and too many properties on the global (window) namespace. I now understand why Dart\r\n is coming up with a new API. Of course a TS user library could do the same and wrap the native API into something nicer to use without introducing too much glue.</p>\r\n<p><br>\r\n- One&nbsp;monolithic&nbsp;lib.d.ts file is not a good approach. Should be split into several files, so you can pick what aspect you want to include in your project. For example&nbsp;serverside&nbsp;development should not have the HTML API available by default\r\n or a web worker has only a subset of the full HTML available. But there are many more examples, so a more flexible approach would be nice.<br>\r\n<br>\r\nAnd finally a non-technical observation:</p>\r\n<p>- The Microsoft TS project team itself seems to be smaller and moving at a slower pace than say for example Dart. When I look at the changes made to the source repository and the number of people making these changes, they are only a few. The same is true\r\n when it comes to the&nbsp;interaction&nbsp;of the TS team with the community. Not saying this is&nbsp;necessary&nbsp;a bad thing, but it does leave the impression that this is not (yet) a strategic project for MS.&nbsp;</p>\r\n<p>Of course another reason could be that they are working hard behind the scene and not ready to share the results yet. But even then it would be nice to have more interaction between the MS team and the community.</p>\r\n<p>&nbsp;</p>\r\n<p>So far my&nbsp;rambling for today.</p>\r\n<p>// Peter</p>\r\n",
    "PostedDate": "2012-12-28T06:46:18.63-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "981405",
    "ThreadId": "427916",
    "Html": "\r\n<p>Thanks for the thoughtful feedback Peter. &nbsp;Really happy to see the pluses at the top of the list there :-)</p>\r\n<p>Regarding some of the minuses</p>\r\n<ul>\r\n<li>External modules: Yes, module confusion (including the internal/external distinction) is something we're very aware of, and is the source of much discussion internally. &nbsp;We do have the constraints of wanting to be a 'natural fit' with existing implementations\r\n and future proposals (e.g. Node, RequireJS, and ES6), but can hopefully make some improvements in this space (nothing concrete yet).\r\n</li><li>Regarding enums compiling to strings and not numbers: &nbsp;Can you expand on this?\r\n</li><li><span>&quot;You should be able to set member variables in the constructor signature, but not define them&quot;: I'll let someone with more background on the discussions that went into the class syntax comment here, but I do sympathize on this point.</span>\r\n</li><li><span>&quot;<span>Compiler needs some attention</span>&quot;: Most of the issues you mention (_this not generated, nested function type checking, etc...) we do have bug/fixes for currently. &nbsp;Please do log issues in the issue tracker for anything that needs attention\r\n that we appear unaware of - especially any incorrect codegen as these are top priority for us.</span>\r\n</li><li><span>The DOM API. &nbsp;No comment :-) &nbsp;We're trying to keep the codegen and dependencies to a minimal, so provide a library to wrap any of this is not in plan right now. &nbsp;Other libraries (and their TypeScript typings), such as jQuery, Q, etc... hopefully provide\r\n some relief here.</span> </li><li>Monolithic lib.d.ts: Yes, we're aware of this. &nbsp;Options here are being discussed. &nbsp;In the meantime, you can edit your own lib.d.ts, and if you reference this (with the same filename) we don't use the default one.\r\n</li><li>Team engagement: We are a relatively small team (relative being relative of course :-) ), and this time of year we have many folks out, slowing our responses even further, but we do aim do respond promptly to feedback, iterate quickly on new features, and\r\n also intent to make better use of our blog (http://blogs.msdn.com/b/typescript/) going forward.\r\n</li></ul>\r\n<p>&nbsp;</p>\r\n<p>Thanks again for the great feedback!</p>\r\n",
    "PostedDate": "2012-12-28T10:31:43.983-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "981475",
    "ThreadId": "427916",
    "Html": "\r\n<p>Thanks for the quick reply, I guess you just prove me wrong about the TS team not being fully engaged with the community ;)</p>\r\n<p>For the bugs, I'll open a ticket, although often they are almost impossible to reproduce in some isolated code fragment.&nbsp;</p>\r\n<p>With the enums they compile to numbers, right? So the first listed enum value gets the value &nbsp;0 and so on. When you assign an enum value to a variable, you&nbsp;basically&nbsp;assign a number to that variable. This solution is great for comparison/ordinality, but\r\n not so nice when debugging JS code or dealing with them in the JS space. It would be nicer if they would be strings (or perhaps even real objects). So enum could be generated as:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">enum</span> Test { \r\n FOO1, \r\n FOO2\r\n}\r\n\r\n<span style=\"color:blue\">var</span> Test;\r\n(<span style=\"color:blue\">function</span> (Test) {\r\n Test._map = {};\r\n Test._map[<span style=\"color:#a31515\">&quot;FOO1&quot;</span>] = 0;\r\n Test.FOO1 = <span style=\"color:#a31515\">&quot;FOO1&quot;</span>; \r\n Test._map[<span style=\"color:#a31515\">&quot;FOO2&quot;</span>] = 1;\r\n Test.FOO2 = <span style=\"color:#a31515\">&quot;FOO2&quot;</span>;\r\n})(Test || (Test = {}));\r\n</pre>\r\n<pre><br></pre>\r\n<pre>Of course you would need some extra method to check for things like (Test.FOO2 &gt; Test.FOO1), but for things like portability&nbsp;the above seems better than the current implementation.</pre>\r\n</div>\r\n<p>// Peter</p>\r\n",
    "PostedDate": "2012-12-28T14:05:47.443-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "981778",
    "ThreadId": "427916",
    "Html": "\r\n<p>@Peter,</p>\r\n<p>Agree with you on a number of points. We don't use source maps either and it is crucial that the generated JavaScript be readable. We don't see things as being mature enough yet to the point where JavaScript simply becomes what IL is to C# - as a few others\r\n have been advocating on the forum.</p>\r\n<p>&nbsp;</p>\r\n<p>The TS compiler is not fast from what we have experienced. I just ran rebuild on a solution containing 21 TypeScript projects - a total of about 130 TypeScript files, and that took 1 minute and 15 seconds. This is painfully slow - considering the number\r\n of times a rebuild is repeated over the course of a day's work.</p>\r\n<p>&nbsp;</p>\r\n<p>Not very sure about the &quot;this&quot; in the constructor. Looks a bit foreign and the field has to be defined twice. I agree that having declarations in two places can be a source of confusion, but perhaps it is only a transitionary problem. I've caught myself\r\n scratching my head when searching for a missing private field, only to realise it had been defined in the constructor, but I believe it is only a matter of time before the grey matter has trained itself to follow the correct line of thought!</p>\r\n<p>&nbsp;</p>\r\n<p>Regarding the bugs, these may be the ones being referred:</p>\r\n<p><strong>Missing _this</strong>:&nbsp;http://typescript.codeplex.com/workitem/181</p>\r\n<p><strong>Nested functions not being type checked</strong>:&nbsp;http://typescript.codeplex.com/workitem/450 &nbsp;(I believe this was a regression in TS 0.8.1)</p>\r\n<p>&nbsp;</p>\r\n<p>Do agree that Microsoft need to throw more resources into this project. We (and I believe many others) now already have a lot of time and effort invested in migrating to and developing in TypeScript and we need to see bugs being fixed and released sooner\r\n than it is at present.</p>\r\n<p>&nbsp;</p>\r\n<p>Noel</p>\r\n",
    "PostedDate": "2012-12-30T06:43:45.517-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "981784",
    "ThreadId": "427916",
    "Html": "\r\n<p>@Noel,</p>\r\n<p>Thanks for the references to the already opened issues, good to know that they are already worked on.</p>\r\n<p>Regarding the performance of the compiler, we do indeed have a very different experience. In my case I compile 71 files within 3,5 seconds:</p>\r\n<p>&nbsp;</p>\r\n<pre>&gt; time tsc @build\r\n\r\nreal 0m3.472s\r\nuser 0m3.068s\r\nsys 0m0.184s</pre>\r\n<p>&nbsp;</p>\r\n<p>So that is very different from your experience. FYI, I'm building on an old Linux laptop and using solely external modules, it is a node server-side project (also the build file contains a list of all the TS files in my project). Would be interesting to\r\n see what causes this big difference in performance.</p>\r\n<p>Regarding the declaration of properties in the constructor, I'm not sure yet. You might be right and it just takes some time to get used to a new way of working, time will tell. On the other hand the post-fix type annotation grew very quickly&nbsp;on me&nbsp;. But\r\n then again, this might be my old Turbo Pascal memories coming back to me from when I was a student ;)</p>\r\n<p>&nbsp;</p>\r\n<p>// Peter</p>\r\n",
    "PostedDate": "2012-12-30T08:20:45.193-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "981937",
    "ThreadId": "427916",
    "Html": "\r\n<p>&nbsp;</p>\r\n<p>I'm building in Visual Studio 2012. A Visual Studio TypeScript project works via a custom MSBuild task that executes tsc.exe, so that when the project is compiled the build task is executed, which in turn compiles all the TypeScript files in the project.&nbsp;The\r\n task looks like this:</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>  <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Target</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">BeforeBuild</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Message</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Compiling TypeScript files</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Message</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Executing tsc$(TypeScriptSourceMap) @(TypeScriptCompile -&gt;'&quot;%(fullpath)&quot;', ' ')</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Exec</span> <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">tsc$(TypeScriptSourceMap) @(TypeScriptCompile -&gt;'&quot;%(fullpath)&quot;', ' ')</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n  <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Target</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>As far as I know, this is the recommended way to compile TypeScript in Visual Studio. Also we do not use external modules, instead all files are referenced using the &lt;reference&gt; comment (since we are building a website and the external module pattern doesn't\r\n seem relevant).</p>\r\n<p>I'm kind of beginning to see where the problem is: since it took 3.472 to run tsc.exe just the once, and I have 21 projects, that works out at 21 x 3.472 = 72.9 seconds or 1 minute 13 seconds, which agrees with the time I quoted of 1 minute 15 seconds.</p>\r\n<p>It looks like there is a fixed overhead when tsc is run, so although we are both compiling a large number of files, in my case the times are much worse because tsc is being executed multiple times, which incurs the fixed overhead on every occasion.</p>\r\n<p>If there is no fixed overhead (i.e. when compiling say 8 TypeScript files tsc.exe completes in less than 3 seconds) then I think that tsc (in my case) is compiling the same files multiple times. Since each project contains &lt;reference&gt; includes, it is most\r\n likely that these references are compiled anew for each project.</p>\r\n<p>I wonder whether someone from the TS team is able to shed some light on this, and propose a solution?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>\r\n<p>Noel</p>\r\n",
    "PostedDate": "2012-12-31T05:15:03.06-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "982460",
    "ThreadId": "427916",
    "Html": "\r\n<p>Assuming I'm following the question (if not, let me know)...</p>\r\n<p>One way to speed up compiles is to use the same kinds of tricks you would use in other compiled languages.&nbsp; Namely, if your code is structured so that your various modules and classes depend on each other in clean, well-organized ways, then you should be\r\n able to use separate compilation techniques.</p>\r\n<p>Each separately compiled section of code would have its own .d.ts file (which you can autogenerate using the --declaration compiler flag).&nbsp; This is the file you'd reference from the other separately compiled code.&nbsp; This prevents you from having to rebuild\r\n everything each time, though there is a little extra maintenance.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2013-01-02T14:25:01.457-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]