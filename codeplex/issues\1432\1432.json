{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Thanks for reporting this! The issue has been fixed and can be tried out in the upcoming 0.9.5 release. We also have a beta available (https://typescript.codeplex.com/wikipage?title=TypeScript%200.9.5%20beta) if you'd like to try it out.",
    "ClosedDate": "2013-11-19T13:31:55.573-08:00",
    "CommentCount": 27,
    "Custom": null,
    "Description": "I can't edit TS files for more than a few minutes until VS 2012 consumes > 2 GB of RAM and crashes. 0.9.1 is unusable for me as it stands. I've rolled back to 0.9.0.1, which doesn't exhibit this behavior.\r\n\r\nUntil this gets fixed, TS 0.9.1 is unusable for me.",
    "LastUpdatedDate": "2014-01-10T10:34:33.287-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-06T15:02:43.767-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "TS 0.9.1 has horrific memory leaks",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 12,
    "Id": 1432
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "We're not seeing the issues you're reporting. Can you share more about your specific project, environment?\n\nHow many files, how large are the files?\n\nWhich version of Windows are you using?\n\nWhich libraries are you using (Jquery, knockout etc,) ?\n\n[closing for more info]",
      "PostedDate": "2013-08-06T15:27:43.623-07:00",
      "Id": 108715
    },
    {
      "Message": "It looks like I can repro it by opening the linq.d.ts file from here: https://linqjs.codeplex.com/\n\nIs that a file you're using?",
      "PostedDate": "2013-08-06T15:56:24.917-07:00",
      "Id": 108722
    },
    {
      "Message": "Actually, yes, I'm using linqjs, among others. A more-or-less full list:\n\n```\n07/31/2013  11:02 AM             3,129 jack.d.ts\n07/31/2013  11:02 AM            21,285 jquery.d.ts\n07/31/2013  11:02 AM             6,705 jquery.generics.d.ts\n07/31/2013  11:02 AM             3,114 jquery.layout.d.ts\n07/31/2013  11:02 AM             2,472 jqueryui.d.ts\n07/31/2013  11:02 AM             9,748 knockout-2.2.d.ts\n07/31/2013  11:02 AM            18,434 linq.d.ts\n07/31/2013  11:02 AM               204 linq.jquery.d.ts\n07/31/2013  11:02 AM             4,621 noVNC.d.ts\n07/31/2013  11:02 AM             4,500 qunit-1.10.d.ts\n07/31/2013  11:02 AM             5,452 require.d.ts\n07/31/2013  11:02 AM             8,120 sammyjs-0.7.d.ts\n07/31/2013  11:02 AM             3,005 signalr.d.ts\n07/31/2013  11:02 AM               455 toaster.d.ts\n07/31/2013  11:02 AM             2,900 WebRTC.MediaStream.d.ts\n07/31/2013  11:02 AM             6,760 WebRTC.PeerConnection.d.ts\n```\n\nI've got 46 .ts files in my project, totaling ~378K. I'm running Windows 7.\n\n",
      "PostedDate": "2013-08-06T16:06:31.75-07:00",
      "Id": 108724
    },
    {
      "Message": "I should also add that I'm running Resharper 8, but recently uninstalled WebEssentials, as it was screwing up my builds.",
      "PostedDate": "2013-08-06T16:11:02.317-07:00",
      "Id": 108725
    },
    {
      "Message": "Side note: it seems odd to close an issue - reported by more than one person, if you look at the \"Reviews\" - just because you don't have enough information. At least give me a chance to respond :-).",
      "PostedDate": "2013-08-06T16:12:13.5-07:00",
      "Id": 108726
    },
    {
      "Message": "I've seen this behaviour constantly in previous version (memory consumption and non-dying tsc.exe processes). Judging from number of complains now it's even worse and I shouldn't even try to update to new version :(",
      "PostedDate": "2013-08-07T03:42:06.31-07:00",
      "Id": 108817
    },
    {
      "Message": "@PaulB - Take a look at the reviews. This issue shouldn't be closed. It may only show up on some folks' machines, but it's clearly happening, and it's enough to make it unusable for a good chunk of us.",
      "PostedDate": "2013-08-07T08:43:24.07-07:00",
      "Id": 108843
    },
    {
      "Message": "We have a repro and a potential fix in hand.  We've doing some validation now.  Reopening for tracking.\n\np.s. @smithkl42 - Our process to date has been to close issues so they pop back on our radar when they are reopened and new info is added.  This is due to limitation of the tracking system and not because we don't believe there is an issue.  We recognize this can give a poor perception however, and we're working internally to update the system to allow for a better workflow.  In the meantime we'll still try to avoid closing issues that clearly are outstanding issues, and we'll just try to keep an eye on them manually for updates.  Sorry for any miscommunication on why this issue was closed and the perception this gave.  We certainly are tracking this specific issue with our very highest priority right now, and have been since the first report.",
      "PostedDate": "2013-08-07T09:14:09.42-07:00",
      "Id": 108846
    },
    {
      "Message": "\n\r\n\r** Closed by paulb 08/06/2013 3:27PM",
      "PostedDate": "2013-08-06T15:27:47.99-07:00",
      "Id": 108847
    },
    {
      "Message": "\n\r\n\r** Closed by billti 08/07/2013 9:15AM",
      "PostedDate": "2013-08-07T09:15:29.697-07:00",
      "Id": 108848
    },
    {
      "Message": "Looks like we have a workaround for the linq.d.ts file.\n\nUsing Notepad, add an interface above the IDictionary<TKey, TValue> interface (line 223):\n````\ninterface Pair<TKey, TValue>{\n    key:TKey;\n    value:TValue;\n}\n````\nAnd replace the toEnumerable method in the IDictionary<TKey, TValue> interface with the following:\n\n````\ntoEnumerable(): IEnumerable<Pair<TKey,TValue>>;\n````\n\n\nOn my machine, this reduced memory consumption from 3+GB to 450 MB when opening this single file.. If you still see errors, can you package your d.ts file and attach them to the bug?",
      "PostedDate": "2013-08-07T09:20:41.373-07:00",
      "Id": 108850
    },
    {
      "Message": "I too can confirm the issue with linq.d.ts (which did not cause problems in 0.9.0). I will test the workaround.",
      "PostedDate": "2013-08-07T09:43:31.3-07:00",
      "Id": 108859
    },
    {
      "Message": "@billti - Thanks for the explanation.\n\n@paulb - Thanks for the workaround. Unfortunately, I can't seem to find any linq.d.ts files that maps precisely to what you're describing. The linq.js.d.ts file from http://linq.codeplex.com/ only has 192 lines, and has all the generics stuff commented out. Where did you get that file? (Or should I just wait for the patch?)",
      "PostedDate": "2013-08-07T10:50:25.037-07:00",
      "Id": 108886
    },
    {
      "Message": "It's in their V3 branch\n\nhttps://linqjs.codeplex.com/SourceControl/latest#typescript/linq.d.ts",
      "PostedDate": "2013-08-07T11:07:03.253-07:00",
      "Id": 108889
    },
    {
      "Message": "I can also confirm that the modifications to linq.d.ts fixed the runaway memory issue. My solution still seems heavy on RAM though.",
      "PostedDate": "2013-08-07T15:44:30.073-07:00",
      "Id": 108939
    },
    {
      "Message": "Changing my review from one star to five. Updated all .d.ts files and the fix from https://typescript.codeplex.com/workitem/1432 has my project compiling in seconds. Big thanks to the team for looking into what is a problem for the linq team. Keep up the good work!!",
      "PostedDate": "2013-08-08T18:04:40.517-07:00",
      "Id": 109136
    },
    {
      "Message": "The same problem in Russian.\nTemporarily solved the problem by installing a language pack ENU\n\nwait to fix",
      "PostedDate": "2013-08-08T23:02:12.44-07:00",
      "Id": 109149
    },
    {
      "Message": "@jcutrono I don't use linqjs and I'm having the same memory issues. A work-around in code does not make this version less horrible.",
      "PostedDate": "2013-08-09T05:34:26.603-07:00",
      "Id": 109175
    },
    {
      "Message": "If you follow the code, it looks as if they're working hard on a 0.9.1.1. I agree that 0.9.1.0 is highly problematic, but I think we can expect a whole slough of fixes in short order.",
      "PostedDate": "2013-08-09T08:59:16.72-07:00",
      "Id": 109209
    },
    {
      "Message": "I'm using 0.9.1 with Visual Studio 2013 RC and this memory problem is causing me to restart Visual Studio more than once per hour with of course lots of lost productivity. Any news when this will be fixed? \n---bjorn\n",
      "PostedDate": "2013-09-24T11:56:40.66-07:00",
      "Id": 115511
    },
    {
      "Message": "@Bjorn - It's fixed in 0.9.1.1. Grab that.",
      "PostedDate": "2013-09-24T12:21:01.993-07:00",
      "Id": 115514
    },
    {
      "Message": "Thanks @smithkl42, but I'm already using 0.9.1.1.",
      "PostedDate": "2013-09-25T06:10:53.79-07:00",
      "Id": 115601
    },
    {
      "Message": "I am using 0.9.1.1 with Visual Studio 2012 Premium, and experience huge memory leaks. \n\nI noticed that when I excluded knockout definitions and scripts themselves from the project, the issue disappeared (compilation succeeds without them being in the project)\n\nJFYI, I am using knockout/knockout.d.ts, knockout.mapping/knockout.mapping.d.ts from the [https://github.com/borisyankov/DefinitelyTyped](https://github.com/borisyankov/DefinitelyTyped), and appropriate JS scripts from knockout.js.\n\nUnfortunately, was not able to reproduce that in a test project.",
      "PostedDate": "2013-10-03T23:36:53.13-07:00",
      "Id": 117440
    },
    {
      "Message": "Under huge memory leaks I mean the original issue: VS consumes more than 3 GB (not crashes, but becomes unusable, so I need to terminate it). Also I experience one core of CPU fully loaded. \n\nUsing Windows Server 2008 R2.",
      "PostedDate": "2013-10-03T23:42:44.63-07:00",
      "Id": 117441
    },
    {
      "Message": "Looks like the issue is related to the _order_ of TypeScript files in the project file (*.csproj). After excluding definitions/scripts and adding them to the project they started appear higher (close to the beginning of the file) than earlier, and I do not experience issue anymore (though loading first *.ts file consumes some CPU/memory)",
      "PostedDate": "2013-10-04T00:41:17.537-07:00",
      "Id": 117446
    },
    {
      "Message": "The order of TypeScript files in project helps only partially: I started experiencing memory leaks again, after adding more *.ts and *.d.ts files.",
      "PostedDate": "2013-10-24T00:26:54.137-07:00",
      "Id": 119478
    },
    {
      "Message": "I'm experiencing the same problem with Visual Studio 2013 and TypeScript 0.9.1.1. In about 30 minutes VS consumes over 3GB of memory and stops operating properly. Tried to turn off auto compiling for typescript files but it didn't help. The only library I'm using so far is jQuery.",
      "PostedDate": "2013-11-14T07:18:12.797-08:00",
      "Id": 123024
    }
  ]
}