[
  {
    "Id": "1140673",
    "ThreadId": "476854",
    "Html": "In the following example:<br />\n<pre><code>{\n    Key: 1,\n    Elements: [ &quot;1&quot;, &quot;2&quot; ],\n    toString: () =&gt; this.Elements.join(&quot;,&quot;)\n}</code></pre>\n\nIt will not work because the lambda expression is trying to get <code>_this</code> (outside) instead of <code>this</code> (inside).\r<br />\n<br />\nInstead I have to change to<br />\n<pre><code>{\n    Key: 1,\n    Elements: [ &quot;1&quot;, &quot;2&quot; ],\n    toString: function() { return this.Elements.join(&quot;,&quot;) }\n}</code></pre>\n\nIs there any other way to fix it?\r<br />\n<br />\nMaybe if TypeScript could also generate <code>self</code> or <code>_self</code>... I don't know what would be the implication of that though.\r<br />\n<br />\nShould I just use as the last example?<br />\n",
    "PostedDate": "2013-12-22T08:11:21.25-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1140821",
    "ThreadId": "476854",
    "Html": "<div style=\"color:Black;background-color:White;\"><pre>\r\n{\n    Key: 1,\n    Elements: [ <span style=\"color:#A31515;\">&quot;1&quot;</span>, <span style=\"color:#A31515;\">&quot;2&quot;</span> ],\n    toString() { <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>.Elements.join(<span style=\"color:#A31515;\">&quot;,&quot;</span>) }\n}\r\n</pre></div>Should work :P<br />\n",
    "PostedDate": "2013-12-23T03:48:01.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1140910",
    "ThreadId": "476854",
    "Html": "I had no idea this syntax even existed for object literals!<br />\n",
    "PostedDate": "2013-12-23T09:28:48.377-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1144261",
    "ThreadId": "476854",
    "Html": "If you use arrow function expressions, then you are explicitly stating you want 'this' to be a lexically captured 'this', not the usual JavaScript dynamic 'this'.  If you still want the regular JavaScript 'this', then use a regular function expression (as you have done).  This matches the behavior specified in the next revision of the JavaScript language (ES6).\r<br />\n<br />\nThe final form shown is shorthand for a method in an object literal (which expands to a member with a function expression in the generated code), and is also part of the new syntax coming in ES6 (see <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-method-definitions\" rel=\"nofollow\">http://people.mozilla.org/~jorendorff/es6-draft.html#sec-method-definitions</a> ).<br />\n",
    "PostedDate": "2013-12-31T09:29:21.427-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1149991",
    "ThreadId": "476854",
    "Html": "You could also vote on the <a href=\"https://typescript.codeplex.com/workitem/722\" rel=\"nofollow\">feature request</a> for thin-arrow lambdas, a la CoffeeScript, which complement the existing lambdas and do not capture <code>this</code>.<br />\n",
    "PostedDate": "2014-01-06T08:28:22.62-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]