{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:23.22-07:00",
    "CommentCount": 6,
    "Custom": null,
    "Description": "if u can add override keyword just like c# that can save lot of developer time",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-05-08T19:49:06.677-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "place add override keyword like c#",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 19,
    "Id": 1019
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion, assigning to Jon who looks at those.",
      "PostedDate": "2013-05-10T13:01:57.323-07:00",
      "Id": 99940
    },
    {
      "Message": "i agree.   comming from C#,  it's quite annoying to have to guess what I can and can not override\n\nthough it's not THAT bad, as I can type \"super.\" to get a list",
      "PostedDate": "2013-08-11T04:41:10.553-07:00",
      "Id": 109344
    },
    {
      "Message": "Not sure what the advantage of adding a keyword here is, since in JavaScript you can always override something that is in your prototype chain.  What pattern are you trying to do that having the keyword would help?",
      "PostedDate": "2013-10-29T16:36:07.683-07:00",
      "Id": 120121
    },
    {
      "Message": "@jonturner: Advantage is same as in java, you wont have to deal with this:\n\n```\nclass Parent {\n   void helloWorld() { }\n}\n\nclass Child extends Parent {\n   @overrides // compilsation error because method \"helloworld\" does not exist on parent\n   void helloworld() { }\n\n   void helloWorld() { } // compilation warning, so that you know you are actually overriding something\n}\n```",
      "PostedDate": "2013-11-11T05:01:23.25-08:00",
      "Id": 122615
    },
    {
      "Message": "+1\n\nI see several benefits:\n\n* Can be used or omitted without affecting generated code (like type declarations)\n* Intellisense shows list of overridable methods from super class.\n* Intellisense fills in the appropriate parameters and return type.\n* Helps document intent (as @jonturner points out)",
      "PostedDate": "2014-04-02T20:40:07.1-07:00",
      "Id": 140373
    },
    {
      "Message": "I agree.  It's a pain to keep looking up functions to override manually which exist in some class deep in another file.  As well, it's better for end users of frameworks to see what is expected to be overridden.  In fact, I would even go as far to say that a \"virtual\" key work should go along with it (required on the base types) so end users only see what SHOULD be allowed (but not prevented) to override, and not show ALL base functions (which I think is just clutter [and annoying really]).",
      "PostedDate": "2014-04-02T21:44:31.26-07:00",
      "Id": 140376
    }
  ]
}