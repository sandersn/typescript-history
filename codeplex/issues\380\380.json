{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex issues and suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some issues and feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:20:17.52-07:00",
    "CommentCount": 2,
    "Custom": "lukeh",
    "Description": "For future ES design to profit from the TypeScript experience, it would be useful:\r\n\r\n- to document the type system (rules of inference, design goals)\r\n\r\n- to track community feedback (what works, what doesn't, what works in unexpected ways);\r\n\r\nFrom comments here, I suspect the type system to be close to the one in\r\n\r\n \"The ins and outs of gradual type inference\"\r\n www.cs.umd.edu/~avik/papers/iogti.pdf\r\n\r\nso that might be a starting point? Or can you suggest/create a better one?\r\n\r\nI suggest to add a component \"type system\" to related tickets, to make them easy to find (the 'create issue' page doesn't allow submitters to do that, so all tickets tend to have unhelpful 'no component');\r\n\r\nAlso, please don't close tickets unless their information is recorded somewhere, even if they depend on features not yet supported/planned (such as generics) - community feedback on practical use cases is too valuable, and the TypeScript project is uniquely placed to collect it.\r\n\r\nOne way to approach both goals with minimal effort would be to open a FAQ page on type system issues, systematically fill it with answers to questions arising, describing the existing design, future plans, and future non-plans, then close the tickets, with reference to the type system FAQ. A well-organised FAQ page should be more helpful than a bunch of tickets.\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:34.097-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-11-06T11:27:00.513-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "please document type system and track feedback",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 380
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "The spec is out there on the website and checked in to the repository - can you talk about what you expect to be in there that isn't?",
      "PostedDate": "2012-11-06T12:10:29.937-08:00",
      "Id": 81804
    },
    {
      "Message": "Do you mean the language spec? That has informal descriptions spread throughout the text, which does not give the same at-a-glance/big-picture overview as the standard set-of-inference-rules. \n\nIt also does not describe design options that were considered, design rationales for the design decisions made, or comparisons to related work. What, if any, are your plans for integrating more of the advanced typing options from other JS type systems?\n\nIn brief, the language spec does not make it straightforward to answer the various type-related issues arising from TypeScript usage, eg here or in the discussions. I haven't seen spec references being used to answer such questions either.\n\nAs for tracking feedback: I'm rapidly losing track of the various issues and discussion posts relating to type-system limitations, and I wanted to encourage you to put better procedures in place for preserving/mining that feedback.",
      "PostedDate": "2012-11-07T01:52:58.637-08:00",
      "Id": 81861
    }
  ]
}