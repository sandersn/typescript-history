{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Yep, an unfortunate ambiguity.",
    "ClosedDate": "2012-11-13T09:46:56.19-08:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "In the following code:\r\nvar tt = e => {1 : 123};\r\nthere is no ambiguity, it's always object expression.\r\n\r\nIn the next sample\r\nvar tt = e => {x : 123};\r\nthe code can be parsed both ways. \r\n",
    "LastUpdatedDate": "2012-11-13T09:46:56.19-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-11-07T04:38:51.233-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Parser fails to distinguish expression lambda from block lambda.",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 383
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Arrow functions are an ES6 feature, where it was agreed (after lots of discussion on the es-discuss list and wiki) that braces always wrap function bodies, not objects, with no clever attempts to disambiguate. \n\nIf you check  your examples in the playground, both have type '(e:any)=>void' and their bodies compile to statement lists, not returned objects.\n\nIf you want to return object literals, just wrap them: 'e => ({x:123})'.",
      "PostedDate": "2012-11-07T08:50:41.083-08:00",
      "Id": 81895
    },
    {
      "Message": "Thanks. The same ambiguity exists in ES5 for expression statements but in this context I'd prefer to see object literal. Anyway this request can be closed.",
      "PostedDate": "2012-11-08T14:52:44.677-08:00",
      "Id": 82081
    }
  ]
}