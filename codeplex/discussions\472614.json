[
  {
    "Id": "1133871",
    "ThreadId": "472614",
    "Html": "Hello,\r<br />\n<br />\nAs for now the typescript compiler does not allow defining constants in code but it is possible in plain JavaScript:<br />\n<pre><code>const name = 3;</code></pre>\n\nIt is supported by modern browsers and could be turned into simple &quot;var&quot;s by typescript compiler for ES3 target (with checking that the constant is never assigned again).\r<br />\n<br />\nDetails here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const</a>\r<br />\n<br />\nWhat do you think about it?<br />\n",
    "PostedDate": "2013-12-10T12:52:21.973-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1135129",
    "ThreadId": "472614",
    "Html": "As we add support for ES6 features, we'll no doubt add support for this.<br />\n\r<br />\nWe did debate a bit on adding readonly for 1.0 early on, which would have made this easier to add, though it turns out that 'readonly' was more complex than it first seemed.  Making properties readonly meant that the type system would have to traffic that information around properly, and if we ever implied readonly-ness during type inference, then the user would have to understand how it worked.  Long story short, we decided to hold off until we were going to do a more complete alignment and address it more holistically with the other ES6 features.<br />\n",
    "PostedDate": "2013-12-12T08:52:02.797-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1135229",
    "ThreadId": "472614",
    "Html": "Thanks for the info.\r<br />\n<br />\nReading about the readonly properties reminded me about another thing. Have you thought about adding &quot;nullable/non-null&quot; concept to the type system? It seems to be similar to the readonly feature. Or something a lot more powerful like code contracts. Of course I'm well aware of the complexity of those features but I was just curious if you had something like that in mind for future (post 1.0) TypeScript.<br />\n",
    "PostedDate": "2013-12-12T11:48:36.633-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]