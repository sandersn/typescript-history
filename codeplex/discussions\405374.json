[
  {
    "Id": "950530",
    "ThreadId": "405374",
    "Html": "\r\n<p>&nbsp;</p>\r\n<p>1 ) The problem is that ImpactJs uses a customized version of John Resig inheritance.&nbsp;</p>\r\n<p>I have no idea how i could derive my own typescript classes from ImpactJs core classes.</p>\r\n<p>2) other point would be the module management from Impact...but that is acceptable in that form.</p>\r\n<p>The problem is that i cannot define a typescript module inside a function...</p>\r\n<p>&nbsp;</p>\r\n<p>Has anyone had similar problems with other javascript frameworks?&nbsp;</p>\r\n<p>Any&nbsp;advice?</p>\r\n<p>&nbsp;</p>\r\n<p>Thank you.</p>\r\n",
    "PostedDate": "2012-12-03T05:36:49.523-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "950540",
    "ThreadId": "405374",
    "Html": "\r\n<p>That would be a right ball-ache to try and get impact working with TS.</p>\r\n<p>Quite frankly you'd be much better off just re-writing the impact functions in native TS yourself. It's not like there are that many of them, it wouldn't take too long.</p>\r\n",
    "PostedDate": "2012-12-03T05:46:04.993-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "950542",
    "ThreadId": "405374",
    "Html": "\r\n<p>I would have to merge future updates of the framework into my Typescript code...</p>\r\n<div>Anyway, it's an option to rewrite it all...</div>\r\n<div></div>\r\n<div>I felt it were simpler to create a declaration file for it. Translating it into TypeScript may bring hard to spot scope bugs...</div>\r\n<div></div>\r\n<div><br>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2012-12-03T05:52:09.51-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "950545",
    "ThreadId": "405374",
    "Html": "\r\n<p>You'd have to do that anyway really as there's no &quot;fits in neatly&quot; solution.</p>\r\n<p>Besides the more you start hacking around with impact the sooner you'll realise there isn't all that much in there anyway. What is in there is great and works well, don't get me wrong, but it wouldn't be a massive task to port over at all - just check if\r\n you're allowed to re: license.</p>\r\n",
    "PostedDate": "2012-12-03T05:58:11.423-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "950550",
    "ThreadId": "405374",
    "Html": "You seem to have tried impactjs for yourself.\r\n<div>Am i asking too much to recommend me a better game framework :) even commercial...</div>\r\n<div>I've chosen ImpactJs because there is a tool that would translate the games for iOS (painless they say :) )</div>\r\n<div><br>\r\n</div>\r\n<div><br>\r\n</div>\r\n<div><br>\r\n<br>\r\n<div>On Mon, Dec 3, 2012 at 3:58 PM, photonstorm <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: photonstorm</p>\r\n<div>\r\n<p>You'd have to do that anyway really as there's no &quot;fits in neatly&quot; solution.</p>\r\n<p>Besides the more you start hacking around with impact the sooner you'll realise there isn't all that much in there anyway. What is in there is great and works well, don't get me wrong, but it wouldn't be a massive task to port over at all - just check if\r\n you're allowed to re: license.</p>\r\n</div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/405374#post950545\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:405374]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/discussions/405374/unsubscribe/\" target=\"_blank\">\r\nunsubscribe</a> on CodePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</p>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2012-12-03T06:04:49.733-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951153",
    "ThreadId": "405374",
    "Html": "\r\n<p>I haven't ever used ImpactJS but I did just watch the tutorial video and agree that using TypeScript classes to inherit from Impact classes would be difficult at best. What you could do, however, is use interfaces to model the framework and&nbsp;use their\r\n style of class definitions versus TypeScripts.&nbsp; Classes in TypeScript are completely optional and modeling the classes used in ImpactJS is fairly straight forward with a caveat or two.</p>\r\n<p>Below is an example I created in the playground. I defined a minimal&nbsp;set of ImpactJS.d.ts&nbsp;definitions (just enough to implement an example entity), then implemented the example entity from their docs, and finally&nbsp;added an example of creating\r\n this entity.&nbsp; All of this is inline with the ImpactJS docs&nbsp;and should&nbsp;work fine:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Minimal ImpactJS.d.ts</span>\r\n<span style=\"color:blue\">interface</span> IG_XY {\r\n\tx?: number;\r\n\ty?: number;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> IG_Entity_Static {\r\n\textend(members:IG_Entity): IG_Entity_Class;\r\n\tCOLLIDES: {\r\n\t\tNEVER: number;\r\n\t\tLITE: number;\r\n\t\tPASSIVE: number;\r\n\t\tACTIVE: number;\t\t\r\n\t\tFIXED: number;\r\n\t};\r\n\tTYPE: {\r\n\t\tNONE: number;\r\n\t\tA: number;\r\n\t\tB: number;\r\n\t\tBOTH: number;\r\n\t};\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> IG_Entity {\r\n\tinit(x: number, y: number, settings: any): <span style=\"color:blue\">void</span>;\r\n\tparent?(...args:any[]): any;\r\n\t\r\n\taddAnim?(name: string, frameTime: number, sequence: number[], stop?:bool): <span style=\"color:blue\">void</span>;\r\n\tanimSheet?: IG_AnimationSheet;\r\n\tanims?: any;\r\n\tcheckAgainst?: number;\r\n\tcollides?: number;\r\n\tcurrentAnim?: any;\r\n\thealth?: number;\r\n\tsize?: IG_XY;\r\n\ttype?: number;\r\n\tupdate?(): <span style=\"color:blue\">void</span>;\r\n\tvel?: IG_XY;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> IG_Entity_Class <span style=\"color:blue\">extends</span> IG_Entity {\r\n\t<span style=\"color:blue\">new</span>(x: number, y: number, settings: any): IG_Entity;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> IG_AnimationSheet {\r\n\t<span style=\"color:blue\">new</span> (file: string, x: number, y: number): IG_AnimationSheet;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> IG {\r\n\tEntity: IG_Entity_Static;\r\n\tAnimationSheet: IG_AnimationSheet;\r\n\tinput: {\r\n\t\tpressed(action: string): bool;\r\n\t};\r\n}\r\ndeclare <span style=\"color:blue\">var</span> ig: IG;\r\n\r\n<span style=\"color:green\">// Define a new entity</span>\r\n<span style=\"color:blue\">var</span> EntityPlayer = ig.Entity.extend({\r\n\r\n    <span style=\"color:green\">// Set some of the properties</span>\r\n    collides: ig.Entity.COLLIDES.ACTIVE,\r\n    type: ig.Entity.TYPE.A,\r\n    checkAgainst: ig.Entity.TYPE.B,\r\n\r\n    size: {x: 16, y: 16},\r\n    health: 50,\r\n    \r\n    <span style=\"color:green\">// Load an animation sheet</span>\r\n    animSheet: <span style=\"color:blue\">new</span> ig.AnimationSheet( <span style=\"color:#a31515\">'media/player.png'</span>, 16, 16 ),\r\n    \r\n    init: <span style=\"color:blue\">function</span>( x, y, settings ) {\r\n\t\t<span style=\"color:blue\">var</span> _this = &lt;IG_Entity&gt;<span style=\"color:blue\">this</span>;\r\n\r\n        <span style=\"color:green\">// Add animations for the animation sheet</span>\r\n        _this.addAnim( <span style=\"color:#a31515\">'idle'</span>, 0.1, [0,1,2] );\r\n        _this.addAnim( <span style=\"color:#a31515\">'jump'</span>, 0.1, [3,4,5] );\r\n        \r\n        <span style=\"color:green\">// Call the parent constructor</span>\r\n        _this.parent( x, y, settings );\r\n    },\r\n    \r\n    update: <span style=\"color:blue\">function</span>() {\r\n\t\t<span style=\"color:blue\">var</span> _this = &lt;IG_Entity&gt;<span style=\"color:blue\">this</span>;\r\n\r\n        <span style=\"color:green\">// This method is called for every frame on each entity.</span>\r\n        <span style=\"color:green\">// React to input, or compute the entity's AI here.</span>\r\n        \r\n        <span style=\"color:blue\">if</span>( ig.input.pressed(<span style=\"color:#a31515\">'jump'</span>) ) {\r\n            _this.vel.y = -100;\r\n            _this.currentAnim = _this.anims.jump.rewind();\r\n        }\r\n        \r\n        <span style=\"color:green\">// Call the parent update() method to move the entity</span>\r\n        <span style=\"color:green\">// according to its physics</span>\r\n        _this.parent(); \r\n    }\r\n});\r\n\r\n<span style=\"color:green\">// Create instance of entity</span>\r\n<span style=\"color:blue\">var</span> player = <span style=\"color:blue\">new</span> EntityPlayer(0, 0, {});\r\n\r\n</pre>\r\n</div>\r\n<p>If you plunk that into the playground you'll see that you get pretty rich intelisense throughout the sample.&nbsp; The biggest deviation I had to make from the entity example in the docs is I needed to cast &quot;this&quot; to a new&nbsp;strongly typed &quot;_this&quot; variable\r\n in each of the implemented methods.&nbsp; That's because TypeScript thinks the 'this' pointer is an &lt;any&gt; so you don't get any intelisense without a cast (which I think is actually a bug.)</p>\r\n<p>The two other places where intelisense breaks down is; 1) with the _this.parent() method as this is a magic method added to the 'this' pointer of each invocation by the framework, and 2) with the _this.anims property which is&nbsp;a dynamic map of Animation\r\n objects.&nbsp; You can in fact model that through an interface&nbsp;definition like &quot;anims?: { [x:string]: IG_Animation; }&quot; which says anims is a map of IG_Animation objects but then you would need to access this map using &quot;_this.currentAnim = _this.anims['jump'].rewind();&quot;\r\n which isn't horrible.</p>\r\n<p>Hope that helps...</p>\r\n<p>-steve&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n",
    "PostedDate": "2012-12-04T06:10:45.247-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951163",
    "ThreadId": "405374",
    "Html": "\r\n<p>Thank you very much steve, eventually i thought creating something similar too.</p>\r\n<div>I will continue using your suggestion.</div>\r\n<div>Just i wouldn't use _this for fear of clashing with typescript own generated _this...<br>\r\n<br>\r\n<div>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<div></div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2012-12-04T06:21:29.637-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951175",
    "ThreadId": "405374",
    "Html": "\r\n<p>Sure... You're probably not going to want to do anything that would cause TypeScript to generate an _this (like a lambda or something) as you would lose intelisense in doing so.&nbsp; But&nbsp;you could easily use something else like&nbsp;_self or _entity if you'd like.&nbsp;</p>\r\n",
    "PostedDate": "2012-12-04T06:40:33.533-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "953798",
    "ThreadId": "405374",
    "Html": "\r\n<p>to ickman.</p>\r\n<p>Thank you again for your example. It got me started on the right track, and showed me some features i did not know about typescript:</p>\r\n<p>&nbsp;</p>\r\n<p>a) I can define a &quot;new&quot; constructor method on interfaces</p>\r\n<p>&nbsp; interface IG_Entity_Static{ &nbsp;new(x,y,settings) : IG_Entity }</p>\r\n<p>b) the &quot;new&quot; call on interface is not allowed, but one can define a property with interface type, and call new on the property:</p>\r\n<p>&nbsp; new ig.Entity() where ig &nbsp;has Entity : IG_Entity_Static</p>\r\n<p>This is very cool.</p>\r\n<p>&nbsp;</p>\r\n<p>I have a big problem with the ImpactJs' own module pattern implementation.</p>\r\n<p>ig.module('moduleName').references(...).defines( function(){ code&nbsp;});</p>\r\n<p>TypeScript does not allow defining modules inside functions, and typescript module code actually executes a call, which implies that all dependent modules must already be initialized.</p>\r\n<p>I modified the typescript compiler to generate this plumbing code, that is wrap the module javascript in an ig.module call, and i am now testing if the source maps are correct. My changes are as following:</p>\r\n<p>If there is a variable named ImpactJs defined inside the module, it must be initialized with an anonymous object like:</p>\r\n<p>var impactJs = { moduleName: 'xxx', references : ['r1','r2'] };</p>\r\n<p>I evaluate the initialization and wrap the moduleDeclaration at emit time with the correct ig.module calls.</p>\r\n<p>I don't know if there is an alternative other that not using typescript modules at all...</p>\r\n",
    "PostedDate": "2012-12-10T02:02:44.703-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]