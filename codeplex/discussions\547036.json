[
  {
    "Id": "1251178",
    "ThreadId": "547036",
    "Html": "Would you guys kindly spare few minutes briefing the community about incremental compilation that keeps being mentioned in the commits on develop branch?\r<br />\n<br />\nI assume that is the reason you leave VS2012 behind and focus on VS2013?\r<br />\n<br />\nI'm guessing you want to boost the performance of the parser to enable more structural understanding of the code in the editor, and adding all those fancy in-place callouts with tests, references and other hints, right?\r<br />\n<br />\nPlease don't reply with yes/no, give us some meat here :-)<br />\n",
    "PostedDate": "2014-05-30T03:02:28.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1251481",
    "ThreadId": "547036",
    "Html": "Hey there,<br />\n<br />\nCould you be more specific?  Which checkins are you referring to?  Thanks!<br />\n",
    "PostedDate": "2014-05-30T16:58:28.437-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1251900",
    "ThreadId": "547036",
    "Html": "When I open the history page and Ctrl+F for 'incremental', I find commits by one Cyrus Najmabadi. Perhaps you might ask him to be more specific? ;-)\r<br />\n<br />\nInceremental parsing, right? What is it, how one can invoke it from services?<br />\n",
    "PostedDate": "2014-06-02T03:57:50.41-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1251902",
    "ThreadId": "547036",
    "Html": "<a href=\"https://typescript.codeplex.com/SourceControl/changeset/9998ee3808caba5bd6730cb5600ed2ca4f7782a2\" rel=\"nofollow\">https://typescript.codeplex.com/SourceControl/changeset/9998ee3808caba5bd6730cb5600ed2ca4f7782a2</a>\r<br />\nthrow an exception if someone tries to incrementally parse an abstract syntax tree.\r<br />\n<br />\n<a href=\"https://typescript.codeplex.com/SourceControl/changeset/584f39e10c4962e11156d66f717ca0bc03891e22\" rel=\"nofollow\">https://typescript.codeplex.com/SourceControl/changeset/584f39e10c4962e11156d66f717ca0bc03891e22</a>\r<br />\nRevert &quot;Allow incremental parsing to work in more situations.&quot;\r<br />\nThis reverts commit 9f5faddb3a88ce6cda98b354ec35338665ad85a3.\r<br />\nThere were still some sitations where parent pointers were wrong. I've added more aggressive checks\r<br />\nin the test harness to catch this, and i've reverted this optimization. We now incrementally parse\r<br />\nas before. i.e. if we're speculatively parsing, we don't reuse nodes from the old tree.\r<br />\n<br />\n<a href=\"https://typescript.codeplex.com/SourceControl/changeset/9f5faddb3a88ce6cda98b354ec35338665ad85a3\" rel=\"nofollow\">https://typescript.codeplex.com/SourceControl/changeset/9f5faddb3a88ce6cda98b354ec35338665ad85a3</a>\r<br />\nAllow incremental parsing to work in more situations.\r<br />\nPreviously, we restricted incremental parsing so that it wouldn't apply during speculative\r<br />\nscenarios (like when trying to determine if &lt; was part of a generic type argument list, or just an\r<br />\narithmetic operator). This was due to how the parser updated nodes and tokens, and how that could\r<br />\nthrow off the incremental parser. Because of that, hte incremental parser would effectively shut\r<br />\nitself off in speculative scenarios. Now, we properly handle speculative parsing, and can reuse\r<br />\nfar more nodes. It also means less abstraction leakage betweeen the incremental parser and the\r<br />\nunderlying scanner it sometimes needs to defer to.\r<br />\n<br />\n<a href=\"https://typescript.codeplex.com/SourceControl/changeset/7884875f2bd32363318a6ead4155283028f23ef4\" rel=\"nofollow\">https://typescript.codeplex.com/SourceControl/changeset/7884875f2bd32363318a6ead4155283028f23ef4</a>\r<br />\nUpdate comment to make incremental parser rules clearer.\r<br />\n<br />\n<a href=\"https://typescript.codeplex.com/SourceControl/changeset/08f3dc079276db78a7faab82ec7936e1e55325fd\" rel=\"nofollow\">https://typescript.codeplex.com/SourceControl/changeset/08f3dc079276db78a7faab82ec7936e1e55325fd</a>\r<br />\nAdd incremental tests.\r<br />\n<br />\n<a href=\"https://typescript.codeplex.com/SourceControl/changeset/161342a8851849cd828744c7e495b9c601faeea9\" rel=\"nofollow\">https://typescript.codeplex.com/SourceControl/changeset/161342a8851849cd828744c7e495b9c601faeea9</a>\r<br />\nAdding incremental test.\r<br />\n<br />\n<a href=\"https://typescript.codeplex.com/SourceControl/changeset/18daa4380c90039c36a6d0c3283aaeab5df7b570\" rel=\"nofollow\">https://typescript.codeplex.com/SourceControl/changeset/18daa4380c90039c36a6d0c3283aaeab5df7b570</a>\r<br />\nAdding some incremental parser tests.\r<br />\n<br />\n<a href=\"https://typescript.codeplex.com/SourceControl/changeset/0665ea51ecb4e70b55e56c836c168101a2f49200\" rel=\"nofollow\">https://typescript.codeplex.com/SourceControl/changeset/0665ea51ecb4e70b55e56c836c168101a2f49200</a>\r<br />\nMove the incremental parser almost entirely over to functions instead of classes.<br />\n",
    "PostedDate": "2014-06-02T04:03:27.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1251904",
    "ThreadId": "547036",
    "Html": "Looks like pretty significant piece of functionality someone is working on. By the amount of design changes and refactorings, it looks like that stuff is not entirely agreed upon by some of the 'architecty' chiefs. Imagine working under Anders might be tough at times.<br />\n",
    "PostedDate": "2014-06-02T04:10:31.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1252083",
    "ThreadId": "547036",
    "Html": "Hi Mihailik,<br />\n<br />\n&quot;Inceremental parsing, right? What is it, &quot;<br />\n<br />\nIncremental parsing is the functionality we have for more efficiently producing a syntax tree after a text change if we already parsed a tree prior to the change.  i.e. instead of needing to parse the entire file again, we can essentially (and i'm vastly oversimplifying here) only reparse the parts of the file that have changed.<br />\n<br />\n&quot;how one can invoke it from services?&quot;<br />\n<br />\nIncremental parsing is already invoked from the services layer as necessary.  For example, say a request for brace matching comes in.  The first thing the services layer will do is see if there have been any text changes on the host side.  If so, it will take in those changes and incrementally parse if it can.  This allows it to answer the brace matching question faster than if it had to do a full parse.<br />\n<br />\nI hope that helps explain things.  <br />\n",
    "PostedDate": "2014-06-02T10:39:33.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1252085",
    "ThreadId": "547036",
    "Html": "&quot;throw an exception if someone tries to incrementally parse an abstract syntax tree. &quot;\r<br />\n<br />\nIncremental parsing only works when we have a concrete syntax tree and not an abstract syntax tree (i.e. a lossy tree). We want to throw in that case to let someone know if they're doing something they should not be doing. <br />\n",
    "PostedDate": "2014-06-02T10:40:27.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1252087",
    "ThreadId": "547036",
    "Html": "&quot;Revert &quot;Allow incremental parsing to work in more situations.&quot; \r<br />\nThis reverts commit 9f5faddb3a88ce6cda98b354ec35338665ad85a3. \r<br />\nThere were still some sitations where parent pointers were wrong.&quot;\r<br />\n<br />\nI previously put in an optimization to allow us to incrementally parse in more situations (including in the parts of the parse where were 'speculatively' parsing to figure out what sort of construct we have).  However, the optimization wasn't completely correct.\r<br />\n<br />\nA necessary invariant of incremental parsing is that it must produce the same results as a regular parse.  If it is not maintaining that invariant, then that is a bug that must be addressed.  In this case, post my optimization, it was the case that you could end up with a syntax tree where some tokens had parents pointing to nodes <em>not</em> in the tree.  That's obviously bad.  So i reverted the work until the point that i can actually produce an algorithm that doesn't have that problem.<br />\n",
    "PostedDate": "2014-06-02T10:42:54.457-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1252088",
    "ThreadId": "547036",
    "Html": "The next batch of changes are all around incremental parser tests.  I just want our test bed to be strong so that it catches any issues as refactorings occur.<br />\n<br />\n&quot;Move the incremental parser almost entirely over to functions instead of classes.&quot;<br />\n<br />\nThis change is around a new style of coding that we're investigating.  Because JavaScript is routinely written with Functions+Nested-Functions+Function Captures, i wanted to see what it would be like to use such patterns on a significant piece of code.  This helps inform us of how best to move our own features (like Language Services) forward now that we can have some code that more accurately represents the type of code you might see in the JavaScript community.<br />\n<br />\nIf there are any other questions you have, please don't hesitate to ask!<br />\n<ul>\n<li>Cyrus</li>\n</ul>\n",
    "PostedDate": "2014-06-02T10:46:08.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1252090",
    "ThreadId": "547036",
    "Html": "Pretty decent and clear explanation, great thanks Cyrus! Very helpful indeed. <br />\n",
    "PostedDate": "2014-06-02T10:51:27.887-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]