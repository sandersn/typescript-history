[
  {
    "Id": "920686",
    "ThreadId": "397731",
    "Html": "\r\n<p>There is linq.js, but will be native LINQ included in the TypeScript language specification?</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-10-02T09:32:49.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920900",
    "ThreadId": "397731",
    "Html": "<p>This has already been suggested elsewhere. Since TypeScript is guided by EcmaScript 6, perhaps the&nbsp;<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:array_comprehensions\">array comprehension and generators syntax</a> is what TypeScript should implement.</p>",
    "PostedDate": "2012-10-02T14:53:03.423-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922508",
    "ThreadId": "397731",
    "Html": "<p>We're in the process now of getting to a 1.0 where the language has stabilized.&nbsp; Features like linq and array comprehensions would be a good things to ask about in the post-1.0 timeframe.&nbsp;</p>",
    "PostedDate": "2012-10-05T09:00:40.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1012958",
    "ThreadId": "397731",
    "Html": "Still no <strong>LINQ</strong> csharp like operators supported?<br />\n",
    "PostedDate": "2013-03-10T09:19:00.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013004",
    "ThreadId": "397731",
    "Html": "DotNetWise, we're still in pre-1.0. Check out the TypeScript roadmap, and you'll see that LINQ-style stuff isn't planned. However, the next version, 0.9.x, does have ECMAScript 6 alignment planned, which includes <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators\" rel=\"nofollow\">generators</a>, which is similar to yield return functionality upon which C#'s LINQ is built.<br />\n<br />\nBottom line: once the next version is released, we should have ECMAScript 6 alignment, which would allow you to easily implement LINQ yourself. You wouldn't have syntax support, but you could write something like:<br />\n<pre><code>items\n    .Where(i =&gt; i.Foo = 42)\n    .Select(i =&gt; { Blah = i.Foo });</code></pre>\n\nAnd still have it all lazily-evaluated, just like LINQ. I think that may be sufficient for most of us LINQ fans.<br />\n",
    "PostedDate": "2013-03-10T13:50:04.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013857",
    "ThreadId": "397731",
    "Html": "It's already possible to write the following with TS as it stands:<br />\n<pre><code>var items = [{ foo: 41}, { foo: 42}];\n\nvar result =\nitems\n    .filter(i =&gt; i.foo === 42)\n    .map(i =&gt; ({ bar: i.foo }));\n\nconsole.log(JSON.stringify(result)); // [{&quot;bar&quot;:42}]</code></pre>\n\nThere doesn't seem to be a strong case for introducing LINQ-like syntax (Select, Where etc.) into the language. \r<br />\n<br />\nThat would create two competing syntaxes for doing the same job.<br />\n",
    "PostedDate": "2013-03-12T06:10:45.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013859",
    "ThreadId": "397731",
    "Html": "So if they arelady exist, why not supporting both (aliases)?\r<br />\nPeople who know LINQ will simply reuse their knowledge, people who will learn javascript/typescript can use the above ones.<br />\n",
    "PostedDate": "2013-03-12T06:13:05.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013868",
    "ThreadId": "397731",
    "Html": "@DotNetWise, sure. How many other languages would you like to see supported?!<br />\n",
    "PostedDate": "2013-03-12T06:25:09.283-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013871",
    "ThreadId": "397731",
    "Html": "@DotNetWise, sure. How many other languages would you like to see supported?!<br />\n",
    "PostedDate": "2013-03-12T06:26:28.36-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013874",
    "ThreadId": "397731",
    "Html": "<strong>nabog wrote:</strong><br />\n<blockquote>\n@DotNetWise, sure. How many other languages would you like to see supported?!<br />\n</blockquote>\nWait, it's not technically a language, and it's already partially supported :)\r<br />\n<br />\nIt's a mindset that most of .NET world already have so why not reuse it? :)\r<br />\nTypeScript it's exactly all about that!\r<br />\nIterators, enumerators and queryables (projections) really suck in native javascript.\r<br />\nSo why not writing less and getting more?<br />\n",
    "PostedDate": "2013-03-12T06:28:44.94-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013881",
    "ThreadId": "397731",
    "Html": "\r\n<div dir=\"ltr\">Linq in C# is lazily evaluated. When i personally think of Linq in typescript/javascript i tend to think about generators.\r\n<div style=\"\">i agree that eager evaluated linq is very easy to write in javascript...</div>\r\n</div>\r\n<div><br>\r\n<br>\r\n<div>On Tue, Mar 12, 2013 at 3:28 PM, DotNetWise <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: DotNetWise</p>\r\n<div>\r\n<div><strong>nabog wrote:</strong><br>\r\n<blockquote>@DotNetWise, sure. How many other languages would you like to see supported?!<br>\r\n</blockquote>\r\n</div>\r\nWait, it's not technically a language, and it's already partially supported :) <br>\r\n<br>\r\nIt's a mindset that most of .NET world already have so why not reuse it? :) <br>\r\nTypeScript it's exactly all about that! <br>\r\nIterators, enumerators and queryables (projections) really suck in native javascript.\r\n<br>\r\nSo why not writing less and getting more?<br>\r\n</div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/397731#post1013874\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:397731]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2013-03-12T06:33:52.387-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013886",
    "ThreadId": "397731",
    "Html": "lazyily evaluated is not really needed in javascript. We just need to have easier (known) ways of doing stuff that is currently possible in javascript by scratching your head  with the foot (long, complex/complicated code for the simple reusable operations when working with arrays)<br />\n",
    "PostedDate": "2013-03-12T06:41:06.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013904",
    "ThreadId": "397731",
    "Html": "<strong>DotNetWise wrote:</strong><br />\n<blockquote>\nlazyily evaluated is not really needed in javascript. We just need to have easier (known) ways of doing stuff that is currently possible in javascript by scratching your head  with the foot (long, complex/complicated code for the simple reusable operations when working with arrays)<br />\n</blockquote>\nYou may not be working with large datasets but others are. Running multiple enumerations of a set of data (the result of non-lazy evaluation of LINQ calls) can be very inefficient. <br />\n",
    "PostedDate": "2013-03-12T07:04:33.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013909",
    "ThreadId": "397731",
    "Html": "I don't think the discussion here is about performance, but more about the way you can 'write' the simple actions which normally take a longer approach in plain javascript.\r<br />\nOf course we can debate performance in itself but that should be a separate thread.<br />\n",
    "PostedDate": "2013-03-12T07:11:47.973-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013910",
    "ThreadId": "397731",
    "Html": "You said &quot;lazyily evaluated is not really needed in javascript&quot;. I was refuting that point. <br />\n",
    "PostedDate": "2013-03-12T07:13:51.753-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013928",
    "ThreadId": "397731",
    "Html": ".map and .filter are not the same thing. They are eager evaluated. LINQ is lazy evaluated. Lazy evaluation is needed, and not just for large datasets.<br />\n",
    "PostedDate": "2013-03-12T07:26:24.567-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013932",
    "ThreadId": "397731",
    "Html": "\r\n<div dir=\"ltr\">Me too, but i felt the absurdity of that statement does not deserve an answer :)</div>\r\n<div><br>\r\n<br>\r\n<div>On Tue, Mar 12, 2013 at 4:13 PM, MgSam <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: MgSam</p>\r\n<div>You said &quot;lazyily evaluated is not really needed in javascript&quot;. I was refuting that point.\r\n<br>\r\n</div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/397731#post1013910\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:397731]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2013-03-12T07:28:02.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013946",
    "ThreadId": "397731",
    "Html": "Correct me if I'm wrong, but I don't think there is a sensible way to implement lazy evaluation until generators are natively supported by browser JavaScript engines.\r<br />\n<br />\n(It may be possible by executing a callback at each iteration - but that's not sensible, right?)\r<br />\n<br />\nWhen generators do land in the language then we can have the cake and eat it.\r<br />\n<br />\nBut until then what would we have TypeScript do?<br />\n",
    "PostedDate": "2013-03-12T07:42:00.177-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013948",
    "ThreadId": "397731",
    "Html": "\r\n<div dir=\"ltr\">Maybe state machine based generators as c# does?</div>\r\n<div><br>\r\n<br>\r\n<div>On Tue, Mar 12, 2013 at 4:42 PM, nabog <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: nabog</p>\r\n<div>Correct me if I'm wrong, but I don't think there is a sensible way to implement lazy evaluation until generators are natively supported by browser JavaScript engines.\r\n<br>\r\n<br>\r\n(It may be possible by executing a callback at each iteration - but that's not sensible, right?)\r\n<br>\r\n<br>\r\nWhen generators do land in the language then we can have the cake and eat it. <br>\r\n<br>\r\nBut until then what would we have TypeScript do?<br>\r\n</div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/397731#post1013946\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:397731]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2013-03-12T07:43:22.417-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013953",
    "ThreadId": "397731",
    "Html": "\r\n<div dir=\"ltr\">It's possible to do without generators, after all, &quot;generators&quot; in C# just spit out plain old procedural code, and\r\n<a href=\"http://linqjs.codeplex.com/\">linq.js</a> already implements lazy evaluation.\r\n<div><br>\r\n</div>\r\n<div>But since it's a lot of manual code to implement lazy sequence evaluation in JS, a good solution would be to wait until we have ECMAScript 6 generators in TypeScript. At that point, implementing a lazy .map and .filter (or .Select and .Where, if you prefer)\r\n would be trivial, and might make a good foundation for a TypeScript standard library.</div>\r\n</div>\r\n",
    "PostedDate": "2013-03-12T07:47:32.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013957",
    "ThreadId": "397731",
    "Html": "\r\n<div dir=\"ltr\">I read some articles from 2008 when people were happy that Ecmascript4 supports decimal:\r\n<div><br>\r\n</div>\r\n<div style=\"\">use decimal;</div>\r\n<div style=\"\">var a = 0.1;</div>\r\n<div style=\"\">var b = 0.2;</div>\r\n<div style=\"\"><br>\r\n</div>\r\n<div style=\"\">if (a&#43;b === 0.3)</div>\r\n<div style=\"\">alert('Unbelievable!!');</div>\r\n<div style=\"\"><br>\r\n</div>\r\n</div>\r\n<div><br>\r\n<br>\r\n<div>On Tue, Mar 12, 2013 at 4:51 PM, Liviu U <span dir=\"ltr\">&lt;<a href=\"mailto:liviu.u@gmail.com\" target=\"_blank\">liviu.u@gmail.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div dir=\"ltr\">I digress, but maybe you guys have more knowledge about EcmasScript 6: is the decimal data type going to be supported?\r\n<div>Is there now any browser that supports it?</div>\r\n<div>Is there any hope to have decent financial calculations in browser?</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div><br>\r\n<br>\r\n<div>On Tue, Mar 12, 2013 at 4:47 PM, JudahGabriel <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: JudahGabriel</p>\r\n<div>\r\n<div dir=\"ltr\">It's possible to do without generators, after all, &quot;generators&quot; in C# just spit out plain old procedural code, and\r\n<a href=\"http://linqjs.codeplex.com/\" target=\"_blank\">linq.js</a> already implements lazy evaluation.\r\n<div><br>\r\n</div>\r\n<div>But since it's a lot of manual code to implement lazy sequence evaluation in JS, a good solution would be to wait until we have ECMAScript 6 generators in TypeScript. At that point, implementing a lazy .map and .filter (or .Select and .Where, if you prefer)\r\n would be trivial, and might make a good foundation for a TypeScript standard library.</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/397731#post1013953\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:397731]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2013-03-12T07:52:28.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013958",
    "ThreadId": "397731",
    "Html": "\r\n<div dir=\"ltr\">I digress, but maybe you guys have more knowledge about EcmasScript 6: is the decimal data type going to be supported?\r\n<div style=\"\">Is there now any browser that supports it?</div>\r\n<div style=\"\">Is there any hope to have decent financial calculations in browser?</div>\r\n</div>\r\n<div><br>\r\n<br>\r\n<div>On Tue, Mar 12, 2013 at 4:47 PM, JudahGabriel <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: JudahGabriel</p>\r\n<div>\r\n<div dir=\"ltr\">It's possible to do without generators, after all, &quot;generators&quot; in C# just spit out plain old procedural code, and\r\n<a href=\"http://linqjs.codeplex.com/\" target=\"_blank\">linq.js</a> already implements lazy evaluation.\r\n<div><br>\r\n</div>\r\n<div>But since it's a lot of manual code to implement lazy sequence evaluation in JS, a good solution would be to wait until we have ECMAScript 6 generators in TypeScript. At that point, implementing a lazy .map and .filter (or .Select and .Where, if you prefer)\r\n would be trivial, and might make a good foundation for a TypeScript standard library.</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/397731#post1013953\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:397731]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2013-03-12T07:52:29.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013959",
    "ThreadId": "397731",
    "Html": "\r\n<div dir=\"ltr\">and now 4 years after, there is no trace of such thing\r\n<div><br>\r\n</div>\r\n</div>\r\n<div><br>\r\n<br>\r\n<div>On Tue, Mar 12, 2013 at 4:52 PM, Liviu U <span dir=\"ltr\">&lt;<a href=\"mailto:liviu.u@gmail.com\" target=\"_blank\">liviu.u@gmail.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div dir=\"ltr\">I read some articles from 2008 when people were happy that Ecmascript4 supports decimal:\r\n<div><br>\r\n</div>\r\n<div>use decimal;</div>\r\n<div>var a = 0.1;</div>\r\n<div>var b = 0.2;</div>\r\n<div><br>\r\n</div>\r\n<div>if (a&#43;b === 0.3)</div>\r\n<div>alert('Unbelievable!!');</div>\r\n<div><br>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div><br>\r\n<br>\r\n<div>On Tue, Mar 12, 2013 at 4:51 PM, Liviu U <span dir=\"ltr\">&lt;<a href=\"mailto:liviu.u@gmail.com\" target=\"_blank\">liviu.u@gmail.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div dir=\"ltr\">I digress, but maybe you guys have more knowledge about EcmasScript 6: is the decimal data type going to be supported?\r\n<div>Is there now any browser that supports it?</div>\r\n<div>Is there any hope to have decent financial calculations in browser?</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div><br>\r\n<br>\r\n<div>On Tue, Mar 12, 2013 at 4:47 PM, JudahGabriel <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: JudahGabriel</p>\r\n<div>\r\n<div dir=\"ltr\">It's possible to do without generators, after all, &quot;generators&quot; in C# just spit out plain old procedural code, and\r\n<a href=\"http://linqjs.codeplex.com/\" target=\"_blank\">linq.js</a> already implements lazy evaluation.\r\n<div><br>\r\n</div>\r\n<div>But since it's a lot of manual code to implement lazy sequence evaluation in JS, a good solution would be to wait until we have ECMAScript 6 generators in TypeScript. At that point, implementing a lazy .map and .filter (or .Select and .Where, if you prefer)\r\n would be trivial, and might make a good foundation for a TypeScript standard library.</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/397731#post1013953\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:397731]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2013-03-12T07:53:02.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]