[
  {
    "Id": "1037708",
    "ThreadId": "442107",
    "Html": "Hello, I've been writing a game using typescript to access the HTML5 canvas element, and since I was hoping to run it on several platforms, I've built it using a variable timestep. Now the odd thing is, since I'm multiplying all velocities by the time step worked out that frame, you would think that there wouldn't be a difference between 60 and 30 FPS, aside from some stuttering in 30 for obvious reasons.<br />\n<br />\nThe weird the is that jumping is MUCH higher when at 30FPS than 60, which is the opposite of what I would have thought would happen if something had gone wrong with the timestep. Can anyone see any problems in this code which could cause it?<br />\n<br />\nPlayer class:<br />\n<pre><code>        update() {\n\n            //W:87 S:83 A:65 D:68\n\n            this.velocity.y += this.gravity;\n\n            if (SandLib.Input.isKeyJustDown(16)) {\n                this.gravity *= -1;\n                this.jumpPow *= -1;\n            }\n\n            this.velocity.x += this.accel;\n\n            if (this.velocity.x &gt; this.maxVel) {\n                this.velocity.x -= this.decel;\n            }\n\n            if (this.x &gt; this.cameraMoveZone) {\n                SandLib.Engine.currentScene.camera.x = this.x - this.cameraMoveZone;\n            }\n\n            //Collision code here, works fine\n\n            //Jump code vvvvvv\n            if (SandLib.Input.isKeyJustDown(32) &amp;&amp; this.onGround) {\n                this.velocity.y -= this.jumpPow;\n                this.velocity.x *= this.jumpBoost;\n                this.onGround = false;\n                Main.jumpSnd.play();\n            }\n\n            if (this.y &gt; 800 || this.y &lt; -800) {\n                this.die();\n            }            \n            super.update();\n        }</code></pre>\n\nEngine working out timestep:<br />\n<pre><code>static update() {\n            Engine.timeInterval = (Date.now() - Engine.lastUpdate) / 1000;\n            Engine.lastUpdate = Date.now();\n            Input.update();\n            currentScene.update();            \n            draw();\n            Engine.debugText[&quot;Interval&quot;] = Engine.timeInterval.toString();\n        }</code></pre>\n\nEDIT: oh, and in the players super.update() I multiply his velocity x and y by the timestep.<br />\n",
    "PostedDate": "2013-04-30T09:12:14.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1037735",
    "ThreadId": "442107",
    "Html": "Since this is more specific to JavaScript/HTML5 rather than to TypeScript, you might have better luck asking on other forums like StackOverflow.<br />\n",
    "PostedDate": "2013-04-30T10:29:41.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1037754",
    "ThreadId": "442107",
    "Html": "<pre><code>this.velocity.y += this.gravity;</code></pre>\n\nYour acceleration also has to be scaled by the timestep. At 60 FPS you're applying twice as much gravity per second as at 30 FPS.<br />\n",
    "PostedDate": "2013-04-30T11:22:48.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1037760",
    "ThreadId": "442107",
    "Html": "Hmm, but wouldn't multiplying the whole y velocity by the time at the end sorta do that? Either way though, shall give it a try.<br />\n",
    "PostedDate": "2013-04-30T11:44:31.223-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1037787",
    "ThreadId": "442107",
    "Html": "I think what Ryan is trying to say is that ALL motion in the game has to be multiplied by the delta timer, not just velocity, but anything that influences movement.\r<br />\n<br />\nPretend that there are 16ms between each loop, i.e. a perfect 60fps rate. Based on your current code and a velocity of 100:<br />\n<pre><code>position = 0\nvelocity = 100\ngravity = 20\n\n... loop\n\nposition += gravity\nposition += velocity * delta (0.016)\n\n... repeat x60 (for 60fps)\n\nposition = 1295\n</code></pre>\n\nNow assume 30fps (so 33.33ms between loop)<br />\n<pre><code>position = 0\nvelocity = 100\ngravity = 20\n\n... loop\n\nposition += gravity\nposition += velocity * delta (0.033)\n\n... repeat x30 (for 30fps)\n\nposition = 698\n</code></pre>\n\nNow look what happens if you multiply gravity by the delta as well:<br />\n<pre><code>position = 0\nvelocity = 100\ngravity = 20\n\n... loop\n\nposition += gravity * delta\nposition += velocity * delta (0.016)\n\n... repeat x60 (for 60fps)\n\nposition = 115\n</code></pre>\n\nand 30fps:<br />\n<pre><code>position = 0\nvelocity = 100\ngravity = 20\n\n... loop\n\nposition += gravity * delta\nposition += velocity * delta (0.033)\n\n... repeat x30 (for 30fps)\n\nposition = 118\n</code></pre>\n\nThe small variance between 30fps and 60fps there is to be expected given CPU rounding, JavaScript, milliseconds, etc.<br />\n",
    "PostedDate": "2013-04-30T12:45:17.6-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1037801",
    "ThreadId": "442107",
    "Html": "Yeah I understand, thing is, I've already done that. I don't directly update the position in any of that code, it's all the velocity, which is multiplied by the timestep in the super.update() before the player moves :/<br />\n",
    "PostedDate": "2013-04-30T13:18:52.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1037819",
    "ThreadId": "442107",
    "Html": "Multiplying the velocity alone by the timestep is not enough. You need to multiply the acceleration by the timestep as well.<br />\n<br />\nConsider these parallel statements:<br />\n<ul>\n<li>At a velocity of 8 miles per hour, you move 4 miles in 30 minutes, or 2 miles in 15 minutes. The length of time spent moving changes the distance.</li>\n<li>\nAt an acceleration of 8 miles per hour per hour, you accelerate to 4 miles per hour in 30 minutes, or 2 miles per hour in 15 minutes. The length of time spent accelerating changes the velocity.<br />\n</li>\n</ul>\nYour code's version of physics is that if you drop a ball, the speed of the ball does not depend on how long it's been falling, but rather on how many times you've measured its position so far.<br />\n",
    "PostedDate": "2013-04-30T14:02:48.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1037827",
    "ThreadId": "442107",
    "Html": "Aah of course. I understand now, thanks! I'll give that a try when I can.<br />\n",
    "PostedDate": "2013-04-30T14:13:10.82-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]