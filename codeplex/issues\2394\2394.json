{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.44-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "One of my biggest problems with typescript so far is that its integration with RequireJS always assumes the very bare minimum implementation. You have to simply declare \"export [class]\" or \"export [function]\". \r\n\r\nBut module loading is more robust than that - is it possible to extend add a new keyword to the typescript compiler? Perhaps called \"named\" that can take a string?\r\n\r\n```\r\nexport class Horse extends Animal implements IAnimal named \"Horsie\" {\r\n    constructor(name: string) { super(name); }\r\n}\r\n```\r\n\r\nWhich would allow interpreters to use explicit module names for better organization and behavior. This would essentially compile to ...\r\n\r\n```\r\ndefine(\"Horsie\", [\"require\", \"exports\"], function(require, exports) {\r\n    var Animal = (function () {\r\n        function Animal(name) {\r\n            this.name = name;\r\n        }\r\n        Animal.prototype.move = function (meters) {\r\n            alert(this.name + \" moved \" + meters + \"m.\");\r\n        };\r\n        return Animal;\r\n    })();\r\n\r\n    var Horse = (function (_super) {\r\n        __extends(Horse, _super);\r\n        function Horse(name) {\r\n            _super.call(this, name);\r\n        }\r\n        return Horse;\r\n    })(Animal);\r\n    exports.Horse = Horse;\r\n});\r\n```\r\n\r\nI get that this isn't that cut and dry, but it has driven me nuts since I started to use Typescript. It has made organizing projects a little more frustrating than it should have been.\r\n\r\nA string literal may not even be possible, I just know that this really ought to be possible, and the way TypeScript is currently set up, I searched for weeks and was never able to find a single person that could help me make named modules. For having such a push to modular javascript, I feel this is kind of imperative. \r\n\r\nIt is not as if *.ts files have to be directly read, they are compiled into *.js - so I think we do have some wriggle room. Another option may be to just have a name(string) function similar to require(string) and import(string) now.\r\n\r\nRight now, if you create a website using typescript in Visual Studio, and you want to use requireJS, you have 2 options for minification.\r\n\r\n1) You minify your files individually using a third party mechanism (Web Workbench, etc) and all of your require calls summon on the minified versions (this makes code disparate and confusing.\r\n\r\n2) You use a tool like r.js along with nodejs and a .bat file to minify them at compile time, which is tedious and irritating when we have so many other useful ways of deploying files (like ASP.NET Bundling and Minification)\r\n\r\nAs it stands right now, typescript compiles .js files that use no defined name; So you have to refer to them by the exact path. If you try to use bundling and minification, this process is broken. So the above two are the only methods I have found to appropriately get typescript output minified in an environment that is remotely sane to me.\r\n\r\nHowever, if typescript were to allow the modules to be named, per the requirejs documentation __[requirejs documentation on named modules](http://requirejs.org/docs/api.html#modulename)__ then this problem would no longer exist, and we could freely use bundling and minification to compress and store files appropriately, even while using requirejs and typescript together.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-04-06T10:23:21.777-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Create a process for \"named\" modules/exports.",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 4,
    "Id": 2394
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Hey, I haven't received any feed back on this, but I did notice that it says it was \"Assigned\" to someone. Does that mean it is being entertained in some facet? If so, that is really awesome and it makes me pretty excited!",
      "PostedDate": "2014-05-05T04:26:15.11-07:00",
      "Id": 145583
    },
    {
      "Message": "Hey, I'm just posting again, I know that this is probably not going to happen, but I feel the need to explain why I think it needs to.\n\nRight now, if you create a website using `typescript` in Visual Studio, and you want to use `requireJS`, you have 2 options for minification.\n\n1) You minify your files individually using a third party mechanism (Web Workbench, etc) and all of your require calls summon on the minified versions (this makes code disparate and confusing.\n\n2) You use a tool like `r.js` along with `nodejs` and a `.bat` file to minify them at compile time, which is tedious and irritating when we have so many other useful ways of deploying files (like _ASP.NET Bundling and Minification_)\n\nAs it stands right now, typescript compiles `.js` files that use no defined name; So you have to refer to them by the exact path. If you try to use bundling and minification, this process is broken. So the above two are the only methods I have found to appropriately get typescript output minified in an environment that is remotely sane to me.\n\nHowever, if typescript were to allow the modules to be named, per the requirejs documentation [requirejs documentation on named modules](http://requirejs.org/docs/api.html#modulename) then this problem would no longer exist, and we could freely use bundling and minification to compress and store files appropriately, even while using requirejs and typescript together.",
      "PostedDate": "2014-06-10T05:05:13.037-07:00",
      "Id": 149244
    }
  ]
}