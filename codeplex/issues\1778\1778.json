{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This is intentional.",
    "ClosedDate": "2013-10-11T13:23:45.59-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "When a method must have a return result and it is in an IF statement, the compiler does not catch the fact that not all code path return a value.\r\n\r\nexample \r\n\r\nfunction () : number {\r\n  if (1==2) return 0;\r\n}",
    "LastUpdatedDate": "2013-10-13T09:39:34.54-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-10-11T06:49:51.14-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "function return value on all code path",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1778
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Would be great if you can clarify why this design was chosen. I've opened up a discussion topic for this:\nhttps://typescript.codeplex.com/discussions/461963",
      "PostedDate": "2013-10-12T03:16:16.92-07:00",
      "Id": 118235
    },
    {
      "Message": "In JavaScript it is perfectly valid to \"fall out\" of a function. It causes the value 'undefined' to be returned, and 'undefined' is in the domain of every type. So, your example above is technically not an error, and it really becomes an issue of where to put the dial on classifying valid JavaScript functions as errors. We've found that it is almost always an error when there *no* return statements anywhere in the function body, but beyond that we start to see too many false positives and it turns into an exercise in silencing errors that aren't really errors. It's all about balancing pros and cons. We may at some point introduce stricter modes of checking, but probably not for 1.0.\n",
      "PostedDate": "2013-10-13T09:39:34.54-07:00",
      "Id": 118285
    }
  ]
}