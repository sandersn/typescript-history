{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "We tried a bunch of different overload ordering algorithms during the design process and all of them ended up being really hard to understand, and still fell back on \"first wins\" or \"last wins\" as a last resort. People trying to write .d.ts files felt that the overload picking algorithm was giving unexpected results that were hard to predict.\n\nUltimately we decided that an overload picking algorithm that was trivial to explain (\"first that works wins\") was the best design. It gave API designers the most flexibility. It it doesn't require intimate knowledge of the type system to understand.\n\nNow that 1.0 has shipped changing the overload picking would be a breaking change; given how many problems the first time we changed this was, and how many times we tried to have a 'smart' ordering algorithm, I don't see us changing this at all.",
    "ClosedDate": "2014-04-16T09:55:49.977-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Back when TypeScript was v0.9.1 there was no need to order overloads in typing files.  Then come 0.9.5 there was this breaking change:\r\n\r\n> ## Overload resolution rules simplified\r\n\r\n> Description: Overload resolution now follows a much simpler algorithm. When multiple overloads fit for a given call, we pick the first fit rather than the trying to find the \"best fit\". \r\n\r\n> This means that code with overloads should now be manually sorted from the tightest/more-specific overload to loosest. The one exception is that an 'any' in the callee will try to match an 'any' in the caller. \r\n\r\nI understand the reasons for this but speaking as someone involved with the Definitely Typed project I would love to see a return to the previous functionality where ordering was no longer so key.  It's easy to get wrong and frustrating to tweak it until everything lines up as you would hope.\r\n\r\nIs this something you might consider in a post v1.0 world? Could we have the \"best fit\" functionality back?",
    "LastUpdatedDate": "2014-04-16T10:42:50.427-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-04-16T05:17:48.993-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Remove overload ordering requirement",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2442
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Well that's a shame. But thanks for the explanation. I must admit to being surprised that the algorithm was so problematic to implement given other languages (C# etc) have no need for specific ordering. Is there an obvious reason for the difficulty I've missed? ",
      "PostedDate": "2014-04-16T10:42:50.427-07:00",
      "Id": 142124
    }
  ]
}