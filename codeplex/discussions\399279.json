[
  {
    "Id": "926335",
    "ThreadId": "399279",
    "Html": "\r\n<p>Title pretty much says it. We don't have them and it would be a nice addition.</p>\r\n",
    "PostedDate": "2012-10-14T05:51:47.057-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926749",
    "ThreadId": "399279",
    "Html": "<p>I would expect an interface to define the property, but not whether it is implemented with getters and setters.</p>\r\n<p>You can use getters and setters in TypeScript if you target ECMAScript 5, rather than the default ECMAScript 3 - but you should check browser support.</p>",
    "PostedDate": "2012-10-15T07:43:19.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926797",
    "ThreadId": "399279",
    "Html": "<p>Right, that's the idea.&nbsp; An interface doesn't enforce a style of implementation, but rather says an API must exposed.&nbsp; You can use interfaces to describe that a property should be available, and it's up to the implementer to decide how.</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">interface</span> Foo {\r\n\tx:number;\r\n}\r\n\r\n<span style=\"color: blue;\">class</span> FooGetSet <span style=\"color: blue;\">implements</span> Foo {\r\n\tconstructor(<span style=\"color: blue;\">private</span> my_x:number) { \r\n\t}\r\n\t\r\n\tget x() { <span style=\"color: blue;\">this</span>.my_x = <span style=\"color: blue;\">this</span>.my_x + 1; <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.my_x; }\r\n\t\r\n\t<span style=\"color: blue;\">public</span> set x(new_x: number) { \r\n\t\t<span style=\"color: blue;\">this</span>.my_x = 1000;\r\n\t}\r\n}\r\n\r\n<span style=\"color: blue;\">class</span> FooDirect <span style=\"color: blue;\">implements</span> Foo {\r\n\tconstructor(<span style=\"color: blue;\">public</span> x:number) { }\r\n}\r\n\r\n<span style=\"color: blue;\">var</span> fgs = <span style=\"color: blue;\">new</span> FooGetSet(1);\r\n<span style=\"color: blue;\">var</span> fd = <span style=\"color: blue;\">new</span> FooDirect(2);\r\n</pre>\r\n</div>",
    "PostedDate": "2012-10-15T09:02:39.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926807",
    "ThreadId": "399279",
    "Html": "<p>Maybe the request is really for the ability to describe read-only properties in an interface?</p>\r\n<p>I agree that adding features to interfaces that would constrain the implementation is not desirable, which is why I wonder whether that's really what's being requested.</p>",
    "PostedDate": "2012-10-15T09:09:53.077-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926860",
    "ThreadId": "399279",
    "Html": "<p>Thanks, Alexjs. Read-only properties are exactly what I'm hoping for.</p>",
    "PostedDate": "2012-10-15T10:50:26.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926959",
    "ThreadId": "399279",
    "Html": "This discussion has been copied to a work item. Click <a href=\"http://typescript.codeplex.com/workitem/260\">here</a> to go to the work item and continue the discussion.",
    "PostedDate": "2012-10-15T13:33:07.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926960",
    "ThreadId": "399279",
    "Html": "<p>Ah yes, my bad.&nbsp; That would be handy.&nbsp; I've added this as a feature request.</p>",
    "PostedDate": "2012-10-15T13:33:55.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]