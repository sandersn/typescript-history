{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Interfaces can be used both like the regular interfaces you're used to, and structs that just have a collection of properties.",
    "ClosedDate": "2014-03-10T09:53:26.857-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "I found that \"interface\" has some special usages, compared with C#:\r\n\r\n【1、Used as a struct type's defination】\r\n```\r\ninterface Point\r\n{\r\n    X: number;\r\n    Y: number;\r\n}\r\n```\r\n【2、Used as a real \"interface\" to be implemented by classes】\r\n```\r\ninterface ICalculate\r\n{\r\n    Calculate(a: number, b: number): number;\r\n}\r\n```\r\nHowever you CANNOT implement an interface that ONLY HAS properties (e.g1). So in fact example 1's real meaning of interface is really a stuct rather than an interface itself. So Microsoft should differ the usage from \"struct\" from \"interface\"—__I mean \"struct\" should be created as a keyword used as example 1, and \"interface\" should be only implemented (so interface shouldn't allow properties to be included).__",
    "LastUpdatedDate": "2014-03-10T09:53:26.857-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-03-08T19:37:48.09-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Not clear usage and defination of \"interface\"",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2283
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Do you have a specific example where this is the case?  I tested this on the playground, and could implement an interface that just had properties without issue.\n\n```\ninterface IGreeter {\n\tgreeting: string;\n\totherValue: number;\n}\n\nclass Greeter implements IGreeter {\n    greeting: string;\n\totherValue: number = 1;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nvar greeter = new Greeter(\"world\");\nvar iGreeter : IGreeter = greeter;\n\nvar button = document.createElement('button');\nbutton.textContent = \"Say Hello\";\nbutton.onclick = function() {\n\tiGreeter.greeting = 'interface that implements properties!' + iGreeter.otherValue;\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n```\n\nAlso keep in mind TypeScript is not designed to be a complete stand in for C#, but instead of a superset of JavaScript that allows for strong typing of both first party and third party code.  If the third party code was not coded in TypeScript (coffeescript, plain js, etc) interfaces let us define the static interface for that library, as if it was coded in TypeScript.",
      "PostedDate": "2014-03-09T07:19:00.317-07:00",
      "Id": 136327
    },
    {
      "Message": "OK I think I should say an interface——if that contains unimplemented methods, it can be implemented. But in my mind, there's no meaning to implement an interface that only contains pure properties, because we can just use class that has these properties instead.\n\nMaybe I'm wrong, but would you mind what benifits I can fetch from the \"implementing from an interface that only contains properties\"?\n\nThanks",
      "PostedDate": "2014-03-09T21:55:43.33-07:00",
      "Id": 136349
    }
  ]
}