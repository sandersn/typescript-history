{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-06-12T09:36:46.257-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "TL;DR: line 760 of harness/harness.ts has 'libFolder + \"../../tests/minimal.lib.d.ts\" '.  I have a hard time importing harness/harness.ts.  Do you know of a an easier way to import it as a reference?\r\n\r\n\r\nLong version:\r\nI have a file Main.ts which uses harness/harness.ts as a reference (TypeScriptLS is an amazing class).  Unfortunately, I'm running into problems when I try to import it in a naive fashion.\r\n\r\nThere's a pair of lines:\r\n 759         export var libText = IO ? IO.readFile(libFolder + \"lib.d.ts\").contents() : '';\r\n 760         export var libTextMinimal = IO ? IO.readFile(libFolder + \"../../tests/minimal.lib.d.ts\").contents() : '';\r\n\r\nMy experience leads me to believe that libFolder seems to default to the folder where main.js (the compiled Main.ts) runs.  \r\n\r\nTo get around this I run main.js out of bin/ to pick up lib.d.ts and made a tests folder outside of the git repo to fix this.  However, I hate doing this, it just doesn't feel right; there has to be an easier way.  Do you know a better way to import this file in a clean manner?",
    "LastUpdatedDate": "2013-06-12T09:36:46.257-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-06-10T18:28:20.037-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Postponed"
    },
    "Summary": "using harness/harness.ts and minimal.lib.d.ts",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1135
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Harness.ts (and most of the test files) are very much designed for their current usage.  The relative path above is arguably wrong, but if you code is running under './built/localtest' (as run.js does which harness.ts compile into) it should resolve fine.\n\nWe are looking to make some general improvement in the harness, but will continue foremost to target it's main goal of running the TypeScript tests, rather than being a reusable & flexible framework. Of course, you are free to fork and modify it to suite your needs also :-)",
      "PostedDate": "2013-06-12T09:36:24.12-07:00",
      "Id": 102867
    }
  ]
}