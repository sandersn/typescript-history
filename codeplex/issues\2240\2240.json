{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2014-02-27T16:32:45.673-08:00",
    "CommentCount": 5,
    "Custom": null,
    "Description": "This is with TS 0.9.7. I compile my app and generate a .d.ts declaration. Then I import this declaration into another app, and compile that.\r\n\r\nThe second time, the compiler spits out a bunch of errors because the .d.ts got generated without some typing information. So, I get a ton of \"error TS7008: Member 'instance' of object type implicitly has an 'any' type.\"\r\n\r\nFor instance:\r\n\r\n```\r\nmodule MyNamespace {\r\n    export class MyLocalStorage {\r\n        private static instance: Storage = window.localStorage;\r\n    }\r\n}\r\n```\r\nwill generate this .d.ts:\r\n```\r\ndeclare module MyNamespace {\r\n    class LocalStorage {\r\n        private static instance;\r\n    }\r\n}\r\n```\r\nwhere it should be generating:\r\n```\r\ndeclare module MyNamespace {\r\n    class LocalStorage {\r\n        private static instance: Storage;\r\n    }\r\n}\r\n```\r\n\r\nApologies if this has already been fixed in 1.0 RC.",
    "LastUpdatedDate": "2014-03-31T16:38:34.323-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-02-27T14:30:49.697-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Generated .d.ts Are Not Valid",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2240
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This is by design. Private types are emitted into .d.ts with name only and no type annotation. \n\nBecause private members are an important part of the type's identity they must be preserved in the .d.ts lest someone intentionally or unintentionally attempt to use that name for a new member in their implementation/derived type (which would materially change the type's identity due to how private members work in identity/subtype/assignment checks). But no type is emitted for that private member because a) it's a private member so you shouldn't be accessing it and thus shouldn't need the type and b) it's quite likely a private member could be using a private type and then this .d.ts would be invalid for using a type that is not accessible. Then you'd be required to export all types used by private members in order for the .d.ts emit to be valid.",
      "PostedDate": "2014-02-27T14:54:05.923-08:00",
      "Id": 135339
    },
    {
      "Message": "So, a file generated by the compiler breaks if used by the very same compiler. How is that possibly by design? What the heck is the purpose of generating the .d.ts if I can't use it?\n\nAt least stick an \": any\" in it so the compiler doesn't complain. I'm perfectly fine with:\n```\ndeclare module MyNamespace {\n    class LocalStorage {\n        private static instance: any;\n    }\n}\n```\nbeing generated.\n\nSettings \"noImplicitAny\" to false for my tests just feels like a crappy solution to get rid of:\n```\nerror TS7008: Member 'instance' of object type implicitly has an 'any' type.\n```\nThat the compiler makes itself.",
      "PostedDate": "2014-02-27T16:26:02.637-08:00",
      "Id": 135347
    },
    {
      "Message": "\n\r\n\r** Closed by danquirk 02/27/2014 2:54PM",
      "PostedDate": "2014-02-27T14:54:09.807-08:00",
      "Id": 135348
    },
    {
      "Message": "Sorry, was doing this too quickly. Yes the compiler should not give an error there with --noImplicitAny. There was a bug here for privates that were also static but it's been fixed for 1.0 (but not in 1.0RC). So everything should work as you expect going forward.",
      "PostedDate": "2014-02-27T16:32:37.467-08:00",
      "Id": 135349
    },
    {
      "Message": "Great! Thank you!",
      "PostedDate": "2014-02-27T16:51:10.44-08:00",
      "Id": 135350
    }
  ]
}