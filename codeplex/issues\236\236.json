{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This should be fixed in develop branch after checkin http://typescript.codeplex.com/SourceControl/changeset/3f653261aa76\n",
    "ClosedDate": "2012-11-09T15:25:35.81-08:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "var f = function (...args: any[]) { return args }\r\n\r\nis a valid TypeScript program.\r\n\r\n\r\nvar g = (...args: any[]) => args\r\n\r\nis not.\r\n\r\n\r\nI would have expected the second form to desugar to the first. Is there any reason it doesn't?",
    "LastUpdatedDate": "2017-11-27T11:51:34.217-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-11T13:37:30.047-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Make arrow function expressions support varargs",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 7,
    "Id": 236
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Confirmed. The ArrowFunction is loosing rest param desugaring when the only arg is rest. \n\nThis works:\nvar g = (str: string, ...args: any[]) => args\n\nThis does not:\nvar g = ( ...args: any[] ) => args\n",
      "PostedDate": "2012-10-13T13:21:58.05-07:00",
      "Id": 79684
    },
    {
      "Message": "Thanks for reporting this issue - we'll be taking a look.",
      "PostedDate": "2012-10-15T10:07:21.23-07:00",
      "Id": 79785
    },
    {
      "Message": "Yes - this is a known limitation of the implementation.  Currently, our ES6-style lambdas do not support varargs or optional parameters.",
      "PostedDate": "2012-10-17T10:19:24.013-07:00",
      "Id": 80223
    }
  ]
}