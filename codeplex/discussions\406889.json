[
  {
    "Id": "956540",
    "ThreadId": "406889",
    "Html": "\r\n<p><strong>Part #1</strong> (based on my knowledge of Java/ActionScript/C# and what I see in TypeScript):<br>\r\n<br>\r\nThere are 2 two ways in order to specify namespace:<br>\r\n<br>\r\nHow it occurs in Java/ActionScript:<br>\r\nthere is &quot;source root&quot; path and all namespaces should be same as path to file relative to &quot;source root&quot; path.<br>\r\nI.e. if &quot;source root&quot; is C:\\project\\src and some source file at C:\\project\\src\\view\\maps\\MyMapView.java then it should to have &quot;view.maps.MyMapView&quot; namespace<br>\r\n<br>\r\nHow it occurs in C#:<br>\r\nnamespace not depends from file path<br>\r\n<br>\r\nHow it occurs in TypeScript<br>\r\nNow I see triple standard in order to specify/use namespace:<br>\r\n*) if to use <br>\r\n<br>\r\nimport myModule = module(&quot;relativePathToTypeScriptFile&quot;);<br>\r\n<br>\r\nthen there are two ways for namespaces declaration:<br>\r\n<br>\r\n1) single TypeScript file contains definition of single class without module declaration like:<br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// &quot;src/view/MyClass.ts&quot; file</span>\n<span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> MyClass {\n    constructor(){\n        <span style=\"color:green\">// Do something</span>\n    }\n}\n</pre>\r\n</div>\r\n<p><br>\r\nin result when if this class will be imported into src/App.ts like <br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// &quot;src/App.ts&quot; file</span>\n<span style=\"color:blue\">import</span> myClassModule = module(<span style=\"color:#a31515\">&quot;./view/MyClass&quot;</span>);\n\n<span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> App {\n    constructor(){\n        <span style=\"color:blue\">var</span> myClassModule.MyClass = <span style=\"color:blue\">new</span> myClassModule.MyClass();\n        <span style=\"color:green\">// Do something</span>\n    }\n}\n</pre>\r\n</div>\r\n<p><br>\r\nthis &quot;MyClass&quot; class will have &quot;view&quot; namespace in this context. In other TypeScript file, which\r\n<br>\r\nlocated in other file path, &quot;MyClass&quot; will have other namespace.<br>\r\n<br>\r\nIn this case namespace depends from file path.<br>\r\n<br>\r\n(The fact that &quot;myClassModule&quot; is superfluous already written here so I'll not repeat it)<br>\r\n<br>\r\n2) single TypeScript file contains definition of module with inner class(es) declaration:<br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// &quot;src/view/ViewModule.ts&quot; file</span>\n<span style=\"color:blue\">export</span> module View {\n    <span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> MyClass {\n        constructor(){\n            <span style=\"color:green\">// Do something</span>\n        }\n    }\n}\n</pre>\r\n</div>\r\n<p><br>\r\nin result when if this class will be imported into src/App.ts like <br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// &quot;src/App.ts&quot; file</span>\n<span style=\"color:blue\">import</span> viewModule = module(<span style=\"color:#a31515\">&quot;./view/ViewModule&quot;</span>);\n\n<span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> App {\n    constructor(){\n        <span style=\"color:blue\">var</span> viewModule.View.MyClass = <span style=\"color:blue\">new</span> viewModule.View.MyClass();\n        <span style=\"color:green\">// Do something</span>\n    }\n}\n</pre>\r\n</div>\r\n<p><br>\r\nIn this case namespace depends from file path and from module declaration in TypeScript file.<br>\r\n<br>\r\n*) if to use /// &lt;reference path=&quot;pathToTypeScriptFile&quot; /&gt; <br>\r\nthen namespace depends from module declaration in TypeScript file<br>\r\n<br>\r\nIn result we have:<br>\r\n*) If single TypeScript file contains &quot;single class/entity&quot;, import files using &quot;import moduleName = module('...');&quot; and compile as AMD modules then we have something like Java/ActionScript namespaces scheme.<br>\r\n*) If single TypeScript file contains module declaration and include TypeScript files using /// &lt;reference ... /&gt; and compile it as CommonJS modules then we have C# namespace scheme. And this is single case when compiller &quot;--out&quot; flag work in correct\r\n way.<br>\r\n*) third case is combined version (if use &quot;single TypeScript file contains module declaration&quot; and use file importing) when entity namespace depends from module declaration and from file path<br>\r\n<br>\r\nIn my opinion it is too much and <span id=\"result_box\" lang=\"en\"><span>this leads</span>\r\n<span>to confusion</span></span>. In my opinion there should be single way for importing something into current source file. And there should be single standard for namespace declaration.</p>\r\n<p>Because there are 3 compiler targets:<br>\r\n*) AMD modules<br>\r\n*) CommonJS modules<br>\r\n*) namespaces declared in global namespace (and included with help /// &lt;reference ... /&gt;)<br>\r\n<br>\r\nI would prefer to have hidden implementation of how something will be imported:<br>\r\nI'm just write</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">import</span> something\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>and set appropriate flag for compiler.<br>\r\n<br>\r\n<strong>Part #2</strong></p>\r\n<p>I can mistaken, but I'm think that most part of developers who use or want to use TypeScript come from static typed languages like Java, ActionScript, C# and so on.<br>\r\nIn my opinion, Python, Ruby developers choose CoffeeScript just because it is closer for their languages.<br>\r\n<br>\r\nAll listed languages have term &quot;namespace&quot;.<br>\r\n<br>\r\nIf I have <br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// View1.cs</span>\n<span style=\"color:blue\">namespace</span> View\n{\n    <span style=\"color:blue\">class</span> View1\n    {\n       \n    }\n}\n\n<span style=\"color:green\">// View2.cs</span>\n<span style=\"color:blue\">namespace</span> View\n{\n    <span style=\"color:blue\">class</span> View2\n    {\n       \n    }\n}\n</pre>\r\n</div>\r\n<p><br>\r\nthen in <br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// App.cs</span>\n<span style=\"color:blue\">using</span> View;\n<span style=\"color:blue\">class</span> App\n{\n    View1 view1 = <span style=\"color:blue\">new</span> View1();\n    View2 view2 = <span style=\"color:blue\">new</span> View2();\n}\n</pre>\r\n</div>\r\n<p><br>\r\nI'm not need to import each file from this namespace.<br>\r\n<br>\r\nAnd if I have <br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// src/view/View1.java</span>\n<span style=\"color:blue\">package</span> view;\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> View1\n{\n\n}\n\n<span style=\"color:green\">// src/view/View2.java</span>\n<span style=\"color:blue\">package</span> view;\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> View2\n{\n\n}\n</pre>\r\n</div>\r\n<p><br>\r\nthen in <br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// src/App.java</span>\n<span style=\"color:blue\">import</span> view.*;\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> App\n{\n    View1 view1 = <span style=\"color:blue\">new</span> View1();\n    View2 view2 = <span style=\"color:blue\">new</span> View2();\n}\n</pre>\r\n</div>\r\n<p><br>\r\nI'm not need to import each file from this namespace too.<br>\r\n<br>\r\nTypeScript require to import each file. <br>\r\n<br>\r\nFor Java / ActionScript / C# developers so habitually just write <br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> View;\n</pre>\r\n</div>\r\n<p><br>\r\nor <br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">import</span> view.*;\n</pre>\r\n</div>\r\n<p><br>\r\nand not care where classes of this namespace was declared - in single module or in several files.<br>\r\n<br>\r\nSimilar feature in TypeScript will make life easier.</p>\r\n",
    "PostedDate": "2012-12-15T15:30:28.923-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1040263",
    "ThreadId": "406889",
    "Html": "Please add the feature mentioned in Part #2. Besides Generics this is the most needed feature for &quot;application scale&quot; development, because an application scale app will have lots of files and it is impractical to import all the needed files in every file.<br />\n",
    "PostedDate": "2013-05-07T01:24:22.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1040283",
    "ThreadId": "406889",
    "Html": "See also <a href=\"https://typescript.codeplex.com/discussions/433456\" rel=\"nofollow\">https://typescript.codeplex.com/discussions/433456</a><br />\n",
    "PostedDate": "2013-05-07T02:00:14.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1040655",
    "ThreadId": "406889",
    "Html": "I just discovered today that you can't compile commonjs files into one nice big file to be required later, I think a more abstract approach like what is being suggested with #2 would solve this problem.\r<br />\n<br />\nExample, a project indevelopment:<br />\n<pre><code>project\n |- File 1\n |- File 2\n |- File 3\n |- Folder 1\n |  |- File 4\n |  |- File 5</code></pre>\n\nBecomes (for the end user):<br />\n<pre><code>project</code></pre>\n\nIf in each of those files I could say that they were part of the &quot;project&quot; package, then the compiler could output them to a single file when a particular compiler flag was set.\r<br />\n<br />\nThat way those who want to use the project simply import it as project (one file).\r<br />\n<br />\nAnother thing this would help immensely, which there is currently no/little support for is creating a .d.ts file for concatenated output of <strong>commonjs</strong> modules.\r<br />\n<br />\nAlso, .d.ts files that specify the package should have their corresponding javascript files concatenated into the file (only if the javascript file is in the same location as the .d.ts file and shares the same name).<br />\n",
    "PostedDate": "2013-05-07T18:48:10.523-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]