[
  {
    "Id": "925793",
    "ThreadId": "399113",
    "Html": "\r\n<p>Hello, I'm very impressed of your work, and I'm happy that MS&nbsp;get involved into js world.&nbsp;</p>\r\n<p>For the last years I worked on huge project made in&nbsp;GWT. The main problems with GWT was:</p>\r\n<ul>\r\n<li>the&nbsp;rigid approach to crating the web app - In GWT you always have to work on app, you cant crate simple code snippet, compile it, use on the page and simple integrate with other snippets, this can be done only in &quot;native&quot; js. This is particularly\r\n inconvenient in pluggable architecture.&nbsp; </li><li>compilation time - The compilation time for our project at the end take 15 minutes !!! Of course for development time we used dev hosted mode for debugging, but it works slowly and not all web mode bugs are appear in the hosted mode\r\n</li><li>error handling after compilation - There was many problems to find a bug in source code when bug appear on the production.&nbsp;\r\n</li><li>... and others &nbsp; </li></ul>\r\n<p>After project ends I started looking for alternatives, like CofeeScript, ClousureCompiler, Hexe, and others. But I do not found the approach to solve all my problems. I want to create applications in static typed language, with simple debugging, make this\r\n quickly (without &quot;edit-&gt;&nbsp;compileeeeeeeeee -&gt; run&quot; cycle). I want to create pluggable architecture with simple code parts integration,&nbsp;especially integration with existing js libraries. So I started thinking about my own solution for all this\r\n problems.&nbsp;&nbsp;&nbsp;<br>\r\n<br>\r\nMain assumptions that I took:</p>\r\n<ul>\r\n<li>there is no whole-source-code-compilation needed for&nbsp;running&nbsp;the application\r\n</li><li>code have to work in any browser without any plugin </li><li>simple, natural integration with js code </li><li>simple debugging in existing tools </li></ul>\r\n<p>The idea which was born, is to replace the whole-source-code-compilation by the single file (syntax, not contextual) translation on the fly, without any interaction from developer.</p>\r\n<p>In the simple words:&nbsp;</p>\r\n<ul>\r\n<li>developer open the js file,&nbsp; </li><li>file is translated on the fly by the editor (IDE) to&nbsp;high level static typed language,&nbsp;\r\n</li><li>developer is writing code in the high level static typed language,&nbsp; </li><li>the tool (IDE) on save translate edited file to javascript,&nbsp; </li><li>developer click f5 on browse and&nbsp;everything&nbsp;works (if there is no bug :)). &nbsp;\r\n</li><li>developer can also run the compiler to find compile time errors, optimize, obfuscate, .... create production ready code, and create &quot;externs&quot;/&quot;declaration&quot; file.&nbsp;\r\n</li></ul>\r\n<p>This approach resolve the&nbsp;&quot;edit-&gt;&nbsp;compileeeeeeeeee -&gt; run&quot; cycle problem</p>\r\n<p>For simple debugging, the translation have to preserve lines (source code have to be in the same line after translation).</p>\r\n<p>Similar to TypeScript I choose the ES4/AS3 syntax as base language. For AS3 there are existing editors, on one hand AS3 is very similar to the JS, on second is static typed and easy to read/learn&nbsp;for Java/C# developers. &nbsp;</p>\r\n<p>I do not solve dependency resolving problem (super class have to be loaded&nbsp;before inheritance)&nbsp;, but developer can manage dependencies by self.</p>\r\n<p>This is simple example how this can be done:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">///////////////////////////////////////////////////////</span>\n<span style=\"color:green\">// Base Class</span>\n\n<span style=\"color:green\">// file org/Base.as</span>\n<span style=\"color:blue\">package</span> org {\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Base {\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">function</span> base():String {\n            <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Base.base()&quot;</span>;\n        }\n    }\n}\n\n<span style=\"color:green\">// Translated org/Base.as to js</span>\n<span style=\"color:blue\">var</span> org = org || {}; (<span style=\"color:blue\">function</span>() {\n    <span style=\"color:green\">/*/public class/*/</span> org.Base = <span style=\"color:blue\">function</span>() {_EX_ || !<span style=\"color:blue\">this</span>.Base || <span style=\"color:blue\">this</span>.Base.apply(<span style=\"color:blue\">this</span>,arguments); }; <span style=\"color:blue\">var</span> Base = org.Base; {\n        <span style=\"color:green\">/*/public static/*/</span> Base.base = <span style=\"color:blue\">function</span> ()<span style=\"color:green\">/*/:String/*/</span> {\n            <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;base&quot;</span>;\n        };\n    }\n})();\n\n<span style=\"color:green\">///////////////////////////////////////////////////////</span>\n<span style=\"color:green\">// IFoo Interface</span>\n\n<span style=\"color:green\">// file org/test/IFoo.as</span>\n<span style=\"color:blue\">package</span> org.test {\n    internal <span style=\"color:blue\">interface</span> IFoo {\n        <span style=\"color:blue\">function</span> foo():String\n    }\n}\n\n<span style=\"color:green\">// Translated org/test/IFoo.as to js</span>\n<span style=\"color:blue\">var</span> org = org || {}; org.test = org.test || {}; (<span style=\"color:blue\">function</span>() {\n    <span style=\"color:green\">/*/internal interface/*/</span> org.test.IFoo = <span style=\"color:blue\">function</span>() {}; <span style=\"color:blue\">var</span> IFoo = org.test.IFoo; {\n        IFoo.prototype.foo = <span style=\"color:blue\">function</span> ()<span style=\"color:green\">/*/:String/*/</span> {};\n    }\n})();\n\n<span style=\"color:green\">///////////////////////////////////////////////////////</span>\n<span style=\"color:green\">// Foo Class</span>\n\n<span style=\"color:green\">// file org/test/Foo.as</span>\n<span style=\"color:blue\">package</span> org.test {\n\n    <span style=\"color:blue\">import</span> org.Base;\n    <span style=\"color:blue\">import</span> org.test.IFoo;\n\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Foo <span style=\"color:blue\">implements</span> IFoo {\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> Foo() {\n            console.log(<span style=\"color:#a31515\">&quot;Foo.Foo()&quot;</span>);\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> foo():String {\n            <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Foo.foo()&quot;</span>;\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> baseFromFoo():String {\n            <span style=\"color:blue\">return</span> Base.base();\n        }\n    }\n}\n\n<span style=\"color:green\">// Translated org/test/Foo.as to js</span>\n<span style=\"color:blue\">var</span> org = org || {}; org.test = org.test || {}; (<span style=\"color:blue\">function</span>() {\n\n    <span style=\"color:blue\">var</span> Base;\n    <span style=\"color:blue\">var</span> IFoo = org.test.IFoo;\n\n    <span style=\"color:green\">/*/public class/*/</span> org.test.Foo = <span style=\"color:blue\">function</span>() { _EX_ || !<span style=\"color:blue\">this</span>.Foo || <span style=\"color:blue\">this</span>.Foo.apply(<span style=\"color:blue\">this</span>,arguments); Base = org.Base; }; <span style=\"color:blue\">var</span> Foo = org.test.Foo; {\n\n        <span style=\"color:green\">/*/public/*/</span> Foo.prototype.Foo = <span style=\"color:blue\">function</span>() {\n            console.log(<span style=\"color:#a31515\">&quot;Foo.Foo()&quot;</span>);\n        };\n\n        <span style=\"color:green\">/*/public/*/</span> Foo.prototype.foo = <span style=\"color:blue\">function</span>()<span style=\"color:green\">/*/:String/*/</span> {\n            <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Foo.foo()&quot;</span>;\n        };\n\n        <span style=\"color:green\">/*/public/*/</span> Foo.prototype.baseFromFoo = <span style=\"color:blue\">function</span>()<span style=\"color:green\">/*/:String/*/</span> {\n            <span style=\"color:blue\">return</span> Base.base();\n        };\n    }\n})();\n\n<span style=\"color:green\">///////////////////////////////////////////////////////</span>\n<span style=\"color:green\">// Bar Class</span>\n\n<span style=\"color:green\">// file org/test/Bar.as</span>\n<span style=\"color:blue\">package</span> org.test {\n\n    <span style=\"color:blue\">import</span> org.Base;\n    <span style=\"color:blue\">import</span> org.test.Foo;\n\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Bar <span style=\"color:blue\">extends</span> Foo {\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> Bar(){\n            <span style=\"color:blue\">super</span>();\n            console.log(<span style=\"color:#a31515\">&quot;Bar.Bar()&quot;</span>);\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> bar():String {\n            <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Bar.bar()&quot;</span>;\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> barByReference():String {\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.execute(<span style=\"color:blue\">this</span>.bar);\n        }\n        \n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> fooFromBar():String {\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">super</span>.foo();\n        }        \n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> fooByReference():String {\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.execute(<span style=\"color:blue\">this</span>.foo);\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> baseFromBar():String {\n            <span style=\"color:blue\">return</span> Base.base();\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> execute(fn:Function):String {\n            <span style=\"color:blue\">return</span> String(fn.call(<span style=\"color:blue\">this</span>));\n        }\n    }\n}\n\n<span style=\"color:green\">// Translated org/test/Bar.as to js</span>\n<span style=\"color:blue\">var</span> org = org || {}; org.test = org.test || {}; (<span style=\"color:blue\">function</span>() {\n\n    <span style=\"color:blue\">var</span> Base;\n    <span style=\"color:blue\">var</span> Foo = org.test.Foo;\n\n    <span style=\"color:green\">/*/public class/*/</span> org.test.Bar = <span style=\"color:blue\">function</span>() {_EX_ || !<span style=\"color:blue\">this</span>.Bar || <span style=\"color:blue\">this</span>.Bar.apply(<span style=\"color:blue\">this</span>, arguments); Base = org.Base;}; <span style=\"color:blue\">var</span> Bar = org.test.Bar; <span style=\"color:blue\">var</span> _super = Foo; _EX_ = <span style=\"color:blue\">true</span>; Bar.prototype = <span style=\"color:blue\">new</span> Foo(); _EX_ = <span style=\"color:blue\">false</span>; {\n\n        Bar.prototype.Bar = <span style=\"color:green\">/*/public/*/</span> <span style=\"color:blue\">function</span>() {\n            _super.call(<span style=\"color:blue\">this</span>);\n            console.log(<span style=\"color:#a31515\">&quot;Bar.Bar()&quot;</span>);\n        };\n\n        <span style=\"color:green\">/*/public/*/</span> Bar.prototype.bar = <span style=\"color:blue\">function</span>()<span style=\"color:green\">/*/:String/*/</span> {\n            <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Bar.bar()&quot;</span>;\n        };\n\n        <span style=\"color:green\">/*/public/*/</span> Bar.prototype.barByReference = <span style=\"color:blue\">function</span>()<span style=\"color:green\">/*/:String/*/</span> {\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.execute(<span style=\"color:blue\">this</span>.bar);\n        };\n\n        <span style=\"color:green\">/*/public/*/</span> Bar.prototype.fooFromBar = <span style=\"color:blue\">function</span> ()<span style=\"color:green\">/*/:String/*/</span> {\n            <span style=\"color:blue\">return</span> _super.prototype.foo.call(<span style=\"color:blue\">this</span>);\n        };\n\n        <span style=\"color:green\">/*/public/*/</span> Bar.prototype.fooByReference = <span style=\"color:blue\">function</span>()<span style=\"color:green\">/*/:String/*/</span> {\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.execute(<span style=\"color:blue\">this</span>.foo);\n        };\n\n        <span style=\"color:green\">/*/public/*/</span> Foo.prototype.baseFromBar = <span style=\"color:blue\">function</span>()<span style=\"color:green\">/*/:String/*/</span> {\n            <span style=\"color:blue\">return</span> Base.base();\n        };\n\n        <span style=\"color:green\">/*/public/*/</span> Bar.prototype.execute = <span style=\"color:blue\">function</span> (fn<span style=\"color:green\">/*/:Function/*/</span>)<span style=\"color:green\">/*/:String/*/</span> {\n            <span style=\"color:blue\">return</span> <span style=\"color:green\">/*/String()/*/</span>fn.call(<span style=\"color:blue\">this</span>);\n        };\n    }\n})();\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Test for translated code.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;!</span><span style=\"color:#a31515\">DOCTYPE</span> <span style=\"color:red\">HTML</span> <span style=\"color:red\">PUBLIC</span> <span style=\"color:blue\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>\n    <span style=\"color:blue\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span style=\"color:blue\">&gt;</span>\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">html</span><span style=\"color:blue\">&gt;</span>\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">head</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">title</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">title</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/javascript&quot;</span>  <span style=\"color:red\">src</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;org/Base.js&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/javascript&quot;</span>  <span style=\"color:red\">src</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;org/test/IFoo.js&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/javascript&quot;</span>  <span style=\"color:red\">src</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;org/test/Foo.js&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/javascript&quot;</span>  <span style=\"color:red\">src</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;org/test/Bar.js&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>\n\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/javascript&quot;</span><span style=\"color:blue\">&gt;</span>\n            (<span style=\"color:blue\">function</span>() {\n                <span style=\"color:blue\">var</span> base = <span style=\"color:blue\">new</span> org.Base();\n                <span style=\"color:blue\">var</span> foo = <span style=\"color:blue\">new</span> org.test.Foo();\n                <span style=\"color:blue\">var</span> bar = <span style=\"color:blue\">new</span> org.test.Bar();\n\n                base <span style=\"color:blue\">instanceof</span> org.Base || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n\n                foo <span style=\"color:blue\">instanceof</span> org.test.Foo || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n                !(foo <span style=\"color:blue\">instanceof</span> org.Base) || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n                bar <span style=\"color:blue\">instanceof</span> org.test.Bar || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n                bar <span style=\"color:blue\">instanceof</span> org.test.Foo || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n                !(bar <span style=\"color:blue\">instanceof</span> org.Base) || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n\n                !(foo <span style=\"color:blue\">instanceof</span> org.test.Bar) || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n\n                org.Base.base() == foo.baseFromFoo() || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n                org.Base.base() == bar.baseFromFoo() || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n                org.Base.base() == bar.baseFromBar() || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n\n\n                foo.foo() == bar.foo() || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n                foo.foo() == bar.fooByReference() || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n                foo.foo() == bar.fooFromBar() || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n\n                bar.bar() == bar.barByReference() || console.log(<span style=\"color:#a31515\">&quot;Assert Exception&quot;</span>);\n            })();\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">head</span><span style=\"color:blue\">&gt;</span>\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">body</span><span style=\"color:blue\">&gt;</span>\n\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">body</span><span style=\"color:blue\">&gt;</span>\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">html</span><span style=\"color:blue\">&gt;</span>\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The source code is 100% syntax correct as3. The translated version is 100% clean javascript. If you will open the AS3 code in editor like IntelliJ Idea all futures are working (intelisense , refactoring, ect.).&nbsp;</p>\r\n<p>This solution have the same limitations as TypeScript:<br>\r\n-&nbsp;manual&nbsp;dependency&nbsp;management&nbsp;<br>\r\n- instanceof not work for interfaces<br>\r\n- etc.</p>\r\n<p>But the key point is that compilation all of your code is not needed to see results of changes.<br>\r\nMy idea is to move compilation to the&nbsp;later time to create the production ready, obfuscated code, which can be reused with auto generated &quot;externs&quot;/&quot;declarations&quot; file (to be&nbsp;compatible with as3 all public members have to be in &quot;declarations&quot;, as3\r\n have &quot;internal&quot; modifier).&nbsp;</p>\r\n<p>I do not have time to realize this idea. So maybe my&nbsp;thoughts will be&nbsp;useful&nbsp;for you guys. &nbsp;</p>\r\n<p>Regards</p>\r\n<p>Pawel</p>\r\n",
    "PostedDate": "2012-10-12T06:20:17.653-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "925853",
    "ThreadId": "399113",
    "Html": "<p>Thanks for sharing your idea with the TypeScript community.</p>",
    "PostedDate": "2012-10-12T08:18:45.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]