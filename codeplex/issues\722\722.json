{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.017-07:00",
    "CommentCount": 5,
    "Custom": null,
    "Description": "Using the ECMAScript 6/TypeScript syntax for lambdas is annoying with JQuery and other libraries, as these libraries reassign the `this` pointer, which the fat arrow lambdas override. \r\n\r\nIt would be very useful to be able to also declare lambdas with __thin arrow functions__ that don't maintain the `this` pointer of the outer scope. CoffeeScript uses this approach.\r\n\r\nInstead of:\r\n``` TypeScript\r\nfunction foo()\r\n{\r\n  $('div').click(() => {\r\n       var value = $(this).val();\r\n      //Whoops! This isn't the \"this\" set by JQuery anymore!\r\n  }\r\n}\r\n```\r\n\r\nHave:\r\n``` TypeScript\r\nfunction foo()\r\n{\r\n  $('div').click(() -> {\r\n       var value = $(this).val();\r\n      //Now everything is good\r\n  }\r\n}\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-02-13T08:50:18.997-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Thin arrow lambda functions",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 9,
    "Id": 722
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for reporting this. Assigned to Jon who manages our suggestions.\r\n\r\nA workaround, which I'm sure you're aware of is using 'function' instead of the 'fat arrow'.",
      "PostedDate": "2013-02-13T11:15:17.677-08:00",
      "Id": 89215
    },
    {
      "Message": "Thanks for taking the time to respond.\n\n`function` is still available, but besides the word \"function\" being bulkier to write and read, it doesn't have the implicit brackets or `return` statement so it makes what could/should be a short little lambda into an ugly beast.",
      "PostedDate": "2013-02-13T12:09:16.2-08:00",
      "Id": 89223
    },
    {
      "Message": "Not that I'd recommend this, but you can hack your own thin arrow:-)\n```\nfunction thin(arr) {\n\treturn function(...args:any) {\n\t\t\treturn arr.apply(this,[this].concat([args]))\n\t\t\t}\n}\n\nvar obj = {name:\"obj\"\n\t\t  ,f:thin( (it,msg)=>it.name+\" says \"+msg )\n\t\t  };\n\nalert(obj.f(\"hello\"));\n```",
      "PostedDate": "2013-02-13T16:53:12.173-08:00",
      "Id": 89249
    },
    {
      "Message": "Besides the convenience, using '->' instead of 'function' also increases the code readability. Please consider add this feature, would be great!. Thanks.",
      "PostedDate": "2013-03-08T13:45:54.627-08:00",
      "Id": 92759
    },
    {
      "Message": "I think in terms of readability, -> is too similar to => and will easily be misread. The function() { } syntax is fine; it's basic JavaScript.",
      "PostedDate": "2013-04-10T22:02:10.463-07:00",
      "Id": 96716
    }
  ]
}