[
  {
    "Id": "1034034",
    "ThreadId": "441175",
    "Html": "I have a project using RequireJS and AMD modules. Now I want to import some old-skool javascript modules. Since I use RequireJS I followed this guide to setup <code>require.config</code> with <code>paths</code> and <code>shims</code>:<br />\n<br />\n<a href=\"http://blorkfish.wordpress.com/2012/10/23/typescript-organizing-your-code-with-amd-modules-and-require-js/\" rel=\"nofollow\">http://blorkfish.wordpress.com/2012/10/23/typescript-organizing-your-code-with-amd-modules-and-require-js/</a><br />\n<br />\nBut this guide only has the modules accessible in the main file using a <code>require()</code>, while I want to <code>import()</code> these modules in a TypeScript submodule (one that also has some other import/export statements).<br />\n<pre><code>import myShimmed = module('myShimName');\nimport myRegular = module('myRegularModule');\n\nexport class MyClass {\n    //etc\n}</code></pre>\n\nThe compiler won't do this because it cannot find the 'myShimName' module I've setup in the RequireJS config. The only way I can make it load the dependency runtime without compiler error is to use an AMD <code>define()</code>, but then I cannot define classes and modules.<br />\n<br />\nSo how do I let TypeScript generate the proper require statements without complaining about missing files?<br />\n<br />\nedit: I know I could load the shimmed modules in the regular require in the main file and use some globals but that defeats the whole purpose of dependency resolution.<br />\n",
    "PostedDate": "2013-04-22T09:14:46.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1034243",
    "ThreadId": "441175",
    "Html": "If I understand correctly, you can use declare modules to help fill out the information of what is being imported for the TypeScript compiler.  Something like:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">module</span> <span style=\"color:#A31515;\">&quot;myModule&quot;</span> {\n    <span style=\"color:Blue;\">export</span> <span style=\"color:Blue;\">function</span> moduleFunction(): <span style=\"color:Blue;\">string</span>;\n}\n\n<span style=\"color:Blue;\">import</span> baz = <span style=\"color:Blue;\">module</span>(<span style=\"color:#A31515;\">&quot;myModule&quot;</span>);\r\n</pre></div>",
    "PostedDate": "2013-04-22T17:59:22.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]