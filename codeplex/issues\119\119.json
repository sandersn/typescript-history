{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:09.097-07:00",
    "CommentCount": 9,
    "Custom": null,
    "Description": "In addition to my other suggestion for multiple type specifiers, it would be nice to have typedefs as in C++ or other languages.\r\n\r\nAs TypeScript will also support Generics in the future as per the spec (see here), that'll be also a use case.\r\n\r\nI could imagine something like this:\r\n\r\n```TypeScript\r\n// JSON style\r\ntypedef [string, number] TestData;\r\n\r\ntypedef string|number TestData;\r\n\r\ntypedef string, number TestData\r\n\r\n// or with announced generics\r\ntypedef Vector<number> TestData\r\n\r\ninterface Test {\r\n  data: TestData\r\n}\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 2.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-05T11:33:09.637-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Suggestion: typedefs",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 22,
    "Id": 119
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Just to state what is currently available for people looking at this, you can do a form of type aliasing using 'interface' and 'extends' like this:\n\ninterface MyName extends String { }\n\nwhich provides an alternative name ('MyName') for an existing type ('String').\n\nYou can also currently specify a new name for a union of multiple types by defining an interface that extends multiple types.",
      "PostedDate": "2012-10-05T11:55:27.69-07:00",
      "Id": 78703
    },
    {
      "Message": "I don't see this suggestion adding anything that isn't already available with interfaces. I would vote not to add redundant syntax if that's true.",
      "PostedDate": "2012-10-05T12:11:19.29-07:00",
      "Id": 78710
    },
    {
      "Message": "@justinc, @Alexjs:\n\nI think this covers more than a simple subclass with another name! That could also be a (bad - in my opinion) usecase but this is not the main reason for my suggestion.\n\nBut if you want for example 'Vector<number>' to be available as 'TestData', do you really create an interface or a subclass? That's not as elegant as writing a 'typedef'.\n\nA very nice example is also declaring a 'typedef' for a function pointer. We can already specify a function pointer as a parameter type as far as I've read here, but it would be easier to 'typedef' it if you write the same more than once.\nThe same would apply to sum types if they're getting implemented:\nhttp://typescript.codeplex.com/workitem/120\n\nIf you want more reasons, just look for the reasons why this is implemented in C-Plus-Plus. Of course, not all features apply, but some points should match.",
      "PostedDate": "2012-10-05T12:28:14.237-07:00",
      "Id": 78720
    },
    {
      "Message": "@ComFreek: you can declare function signatures with interfaces in TypeScript. I honestly think what you're describing is already covered by interfaces... unless I'm missing something.\n\ninterface IFooFunction {\n  (x: number) : any;  // call signature for a function.\n}",
      "PostedDate": "2012-10-05T14:06:47.5-07:00",
      "Id": 78739
    },
    {
      "Message": "I agree that having some kind of shortcut to refer to a type name would be handy.  There's actually a workaround until then that uses interfaces:\n\n```TypeScript\ninterface ReallyReallyLongName<T> { ... }\n\ninterface ShortName<T> extends ReallyReallyLongName<T> { }\n```\n\nTo your other point, we probably won't support disjunction with types (x: X|Y).  This would cause type-checking to run slower, as in examples like this:\n\n```TypeScript\nfunction f(a: X|Y, b: A|B|C, c: D|E) { }\n```\n\nWhere you'd have to check all possible combinations.  If instead you assumed the subset of functionality, it would end up being less expressive while potentially being more confusing.  A simpler case in that situation would be to create an interface that represented that subset.\n\n",
      "PostedDate": "2013-03-07T11:23:39.78-08:00",
      "Id": 92558
    },
    {
      "Message": "+1 for shorter, less hacky syntax to declare interface aliases.\n\nBoth\n\n```\nimport IFace = require('module').IFace;\n```\n\nand\n\n```\nimport mod = require('module');\ninterface IFace = mod.IFace;\n```\n\nwould be really useful",
      "PostedDate": "2013-12-14T08:25:19.627-08:00",
      "Id": 127502
    },
    {
      "Message": "1+ Having a typedef would be great!",
      "PostedDate": "2014-02-25T09:36:16.267-08:00",
      "Id": 134678
    },
    {
      "Message": "This covers more than a simple `interface WidgetId extends Number {}`. Because that runs into errors such as:\n\n```\nThe left side of an 'in' expression must be of types 'any', 'string', or 'number'.\n```",
      "PostedDate": "2014-04-09T15:07:01.55-07:00",
      "Id": 141256
    },
    {
      "Message": "Worth noting that the work-around do not work for primitive types. (e.g. type-abbreviations for string), which can be used as a nice form of commenting.",
      "PostedDate": "2014-07-01T07:15:03.61-07:00",
      "Id": 151242
    }
  ]
}