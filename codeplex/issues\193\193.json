{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.08-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "It is perfectly valid JavaScript to declare a class within a function's scope and I've used this pattern before for defining test classes within Jasmine tests as well as defining classes that can take advantage of the enclosing function's closure. However, TS throws a compiler error when doing so. Here's an example:\r\n\r\n```TypeScript\r\n/// <reference path=\"../../Jasmine/jasmine.d.ts\" />\r\ndescribe('My Test', function () {\r\n\r\n    class TestClass { // At this line it throws the error: Expected '}'\r\n        someValue: number;\r\n        constructor (val: number) {\r\n            this.someValue = val;\r\n        }\r\n\r\n        setValue(val: number) {\r\n            this.someValue = val;\r\n        }\r\n    }\r\n\r\n    var instance: TestClass;\r\n    beforeEach(function () {\r\n        instance = new TestClass(42);\r\n    });\r\n\r\n    afterEach(function () {\r\n        instance = null;\r\n    });\r\n\r\n    // Some tests here\r\n});\r\n```\r\nAny chance you guys can fix this in a future release?",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 1.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-08T20:00:38.48-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Allow 'class expression's",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 23,
    "Id": 193
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion! Assigning to Jonathan who is handling our suggestions.",
      "PostedDate": "2012-10-09T10:39:19.883-07:00",
      "Id": 79184
    },
    {
      "Message": "I would also love to see this so I can make use of inner classes without having to revert to plain Javascript.",
      "PostedDate": "2013-08-06T16:25:35.207-07:00",
      "Id": 108730
    }
  ]
}