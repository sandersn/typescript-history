[
  {
    "Id": "1108095",
    "ThreadId": "462410",
    "Html": "<strong>We just  released VCL.JS  a free open source typescript framework for building an enterprise web application.</strong><br />\n<br />\nWe will appreciate your comments <strong><a href=\"http://www.vcljs.com\" rel=\"nofollow\">http://vcljs.com</a></strong><br />\n<br />\nThese are the features that make VCL.JS a joy to use:<br />\n <em>Visual Component Library- include Page,Grid,Input,Gauges,Charts and many more<br />\n Visual studio integration<br />\n Pure TypeScript<br />\n Single page application<br />\n .Net Backend<br />\n Data binding<br />\n Simple database query execution<br />\n Routing<br />\n Twitter bootstrap<br />\n AMD - Module loader</em><br />\n <br />\nCode example<br />\n<pre><code>import V = require(&quot;VCL/VCL&quot;);\n\nexport class PageTabHome extends V.TPage {\n  constructor() {\n     super();\n     var qur = new V.TQuery(this);\n     qur.SQL = &quot;SELECT ID,NAME FROM CUSTOMERS&quot;\n     qur.open();\n\n     var grid=new V.TDbGrid(this,&quot;grid&quot;);\n     grid.DataSet=qur;\n     var col = grid.createColumn(&quot;NAME&quot;);\n     col.onClicked = ()=&gt;{\n           //do somthing\n     }\n   }\n}</code></pre>\n\n<pre><code>  &lt;div class=&quot;row&quot;&gt;\n        &lt;div id=&quot;grid&quot; class=&quot;span9&quot;/&gt;\n  &lt;/div&gt;</code></pre>\n\n",
    "PostedDate": "2013-10-15T22:46:44.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1108177",
    "ThreadId": "462410",
    "Html": "That looks very nice. Should be of interest to the banking sector.\r<br />\n<br />\nA note on the casing: in JavaScript the preference is to only use Pascal (capitalise first letter) for constructor functions. All other identifiers (including namespaces and enum values) should be camelcase.\r<br />\n<br />\nSo instead of <br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n        <span style=\"color:Blue;\">import</span> V = require(<span style=\"color:#A31515;\">&quot;VCL/VCL&quot;</span>);\n      <span style=\"color:Green;\">// ...</span>\n        <span style=\"color:Blue;\">var</span> btn1 = <span style=\"color:Blue;\">new</span> V.TButton(<span style=\"color:Blue;\">this</span>,<span style=\"color:#A31515;\">&quot;bt1&quot;</span>, <span style=\"color:#A31515;\">&quot;Primary Large&quot;</span>);\n        btn1.ButtonSize = V.ButtonSize.Large;\n        btn1.ButtonStyle = V.ButtonStyle.Primary;\r\n</pre></div>the preference is:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n        <span style=\"color:Blue;\">import</span> v = require(<span style=\"color:#A31515;\">&quot;VCL/VCL&quot;</span>);\n      <span style=\"color:Green;\">// ...</span>\n        <span style=\"color:Blue;\">var</span> btn1 = <span style=\"color:Blue;\">new</span> v.TButton(<span style=\"color:Blue;\">this</span>,<span style=\"color:#A31515;\">&quot;bt1&quot;</span>, <span style=\"color:#A31515;\">&quot;Primary Large&quot;</span>);\n        btn1.buttonSize = v.ButtonSize.large;\n        btn1.buttonStyle = v.ButtonStyle.primary;\r\n</pre></div>Also are you using knockout for the binding? What about the routing? Is everything bespoke?<br />\n",
    "PostedDate": "2013-10-16T02:39:44.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1108216",
    "ThreadId": "462410",
    "Html": "Thanks nabog<br />\n<ol>\n<li>Since its typescript have properties (setter getters) all of them are starting with capital and all method start's with lower case (make sense?)</li>\n<li>All components are starting with Txxx, The bindable components starts with TDBxxx which mean you can set the dataset property and enjoy seamless data binding.</li>\n<li>Routing is done internally with sammy.js but i dont need to know sammy at all(see example below)</li>\n<li>\nWhat do u mean by &quot;bespoke&quot;?<br />\n</li>\n</ol>\n<strong>PageHome.ts</strong> <br />\n<pre><code>export class PageHome extends V.TPage {\n  constructor() {\n        var btn = new V.TButton(this, &quot;btn&quot;);\n        btn.Text = &quot;Hit&quot;;\n        btn.onClicked = () =&gt; {\n            V.Application.navigateToPage(&quot;Page2&quot;, [&quot;firstParam&quot;]);\n        }\n} </code></pre>\n\n<strong>PageHome.html</strong> <br />\n<pre><code>  &lt;div id=&quot;btn&quot;&gt; </code></pre>\n\n<strong>Page2.ts</strong> <br />\n<pre><code>export class Page2 extends V.TPage {\n  constructor(customer:string) {\n        var btn = new V.TButton(this, &quot;btn&quot;);\n        btn.Text = customer;\n} </code></pre>\n\n<strong>Page2.html</strong> <br />\n<pre><code>  &lt;div id=&quot;btn&quot;&gt; </code></pre>\n\n",
    "PostedDate": "2013-10-16T04:12:34.697-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1108510",
    "ThreadId": "462410",
    "Html": "delphi for typescript! :)<br />\n",
    "PostedDate": "2013-10-16T13:42:43.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1110957",
    "ThreadId": "462410",
    "Html": "FYI running SQL statements on the client is a very bad idea, most problematic when it comes to the security.<br />\n",
    "PostedDate": "2013-10-23T02:36:41.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1111124",
    "ThreadId": "462410",
    "Html": "To be fair this is already acknowledged in the <a href=\"http://vcljs.com/using-tquery-and-tqueryremote/\" rel=\"nofollow\">docs</a>  and an alternative provided:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n\n    <span style=\"color:Green;\">//this is a “bit” unasafe way to run a query</span>\n    <span style=\"color:Blue;\">var</span> qur = <span style=\"color:Blue;\">new</span> V.TQuery(<span style=\"color:Blue;\">this</span>);\n    qur.SQL = “Select * from orders”\n    qur.open();\n \n    <span style=\"color:Green;\">//this is a better approach, the query now is located on the server, so injection is impossible</span>\n    <span style=\"color:Blue;\">var</span> secureQur = <span style=\"color:Blue;\">new</span> V.TQueryRemote(<span style=\"color:Blue;\">this</span>);\n    secureQur.QueryID = “ord100″;\n    secureQur.open();\n\r\n</pre></div>",
    "PostedDate": "2013-10-23T08:19:54.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1111173",
    "ThreadId": "462410",
    "Html": "Hi\r<br />\n<br />\nCan you give us your opinion on the framework?( its still under alpha so its probably a bit buggy :) )\r<br />\nDo you think it’s useful for enterprise database driven application?\r<br />\nDid you find it intuitive to use?\r<br />\nWhat do you think we can improve?\r<br />\n<br />\nj.<br />\n",
    "PostedDate": "2013-10-23T10:21:26.3-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1137176",
    "ThreadId": "462410",
    "Html": "VCL.js is an intersting framework to begin SPA development with TypeScript. As you say all the glue like page manipulation is transparent for the developper.\r<br />\nIt's a good start but for enterprise application you need to provide better features for:<br />\n<ul>\n<li>\nThe Grid component is anemic compared to equivalent provided by Jquery.UI. \r<br />\n   For exemple you dont have edition in the grid<br />\n</li>\n<li>\nThe integration with the backend is too simple : Juste query or what you call remote query where the query is replaced by and ID. You have also proxy to invoke remote web service passing a json object. Why not use more mature OData technology to integrate and abstract datasource and use a library like breeze.js or jaydata? With odata you have a completly open backend and you can made business logic on the server. Tuneling the query via JSON is like building 2 tear architectures replacing fat client by a browser! How you manage scalability if many user are doing query or actions on the server? \r<br />\nHow you manage the transaction? <br />\n</li>\n</ul>\nAt this stage you have a RAD tool to adress small business application but not enterprise applications.\r<br />\nYou have small depedency with existing javascript UI controls , it's good because these components are compeltly developed with your typeescript framework but important component like the grid provided is poor compared with existing free grid component developped in javascript.\r<br />\nI think the price to pay to redevelop completly controls with typescript is heavy and would be better to have and hybrid approach using d.ts definition available in definitely typed site.\r<br />\n<br />\nAngelo Pacifico<br />\n",
    "PostedDate": "2013-12-17T08:41:46.657-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]