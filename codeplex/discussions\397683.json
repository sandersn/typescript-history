[
  {
    "Id": "920523",
    "ThreadId": "397683",
    "Html": "\r\n<p>In JS we offen pass args of different types to functons. in TypeScript we describe this using overload.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">function</span> f(n: number);\n<span style=\"color:blue\">function</span> f(s: string);</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">// but in other case</div>\r\n<div style=\"color:black; background-color:white\"><span style=\"color:green\">// options.data is object OR string</span></div>\r\n<div style=\"color:black; background-color:white\"><span style=\"color:green\">// options.selector is string OR function</span></div>\r\n<div style=\"color:black; background-color:white\"><span style=\"color:blue\">function</span> f(options) { }\r\n<br>\r\nI don't see how to describe &quot;options&quot; arg using TypeScript type system. May be need expand language? I think&nbsp;it's very common use case</div>\r\n",
    "PostedDate": "2012-10-02T05:08:14.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920777",
    "ThreadId": "397683",
    "Html": "<p>You can use an interface but I do not know a way for allowing multiple types:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">interface</span> fOptionsData {\r\n\tstr: string;\r\n}\r\n\r\n<span style=\"color: blue;\">interface</span> fOptions {\r\n\tdata: fOptionsData;\r\n}\r\n\r\n<span style=\"color: blue;\">function</span> test(options : fOptions) {\r\n\talert(options.data.str);\r\n}\r\n\r\ntest({data: {str : <span style=\"color: #a31515;\">\"Hello World!\"</span>}});\r\n</pre>\r\n</div>",
    "PostedDate": "2012-10-02T11:42:14.13-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920831",
    "ThreadId": "397683",
    "Html": "\r\n<p>You can use&nbsp;method overloading but the final definition needs to be of type any. Example:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">class</span> Foo {\r\n     <span style=\"color:blue\">public</span> bar(n: number);\r\n     <span style=\"color:blue\">public</span> bar(s: string);\r\n     <span style=\"color:blue\">public</span> bar(o: any): <span style=\"color:blue\">void</span> {\r\n          <span style=\"color:blue\">if</span> (o <span style=\"color:blue\">typeof</span> <span style=\"color:#a31515\">&quot;string&quot;</span>) {\r\n          \r\n          } <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (o <span style=\"color:blue\">typeof</span> <span style=\"color:#a31515\">&quot;number&quot;</span>) {\r\n          \r\n          }\r\n     }\r\n}\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2012-10-02T13:08:05.097-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]