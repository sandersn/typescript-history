[
  {
    "Id": "920963",
    "ThreadId": "397800",
    "Html": "\r\n<p>Although having static typing is awesome and great and I love it, sometimes it would be nice to have dynamic typing as well, in a &quot;having my cake and eating it too&quot; kind of way.</p>\r\n<p>Concrete example: I've made a start on a Declaration Source File for AngularJS (<a href=\"http://github.com/markrendle/AngularTS\">http://github.com/markrendle/AngularTS</a>). An Angular controller in plain JS looks like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">function</span> HomeController($scope) {\r\n    $scope.title = <span style=\"color:#a31515\">&quot;AngularTS&quot;</span>;\r\n}\r\n</pre>\r\n</div>\r\n<p>That can be declared as a class with a constructor in TypeScript, works great. The issue is that the\r\n<strong>$scope</strong> argument is an instance of the Angular class <strong>Scope</strong>, which has methods and properties for which I am declaring a TypeScript class, but it is also valid to set arbitrary properties on the\r\n<strong>$scope</strong> instance, as in the above code.</p>\r\n<p>Could there be a modifier or a special member or something which would allow a class or interface to accept arbitrary properties in this way, so that this would work:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> HomeController {\r\n    constructor ($scope: Scope) {\r\n        $scope.title = <span style=\"color:#a31515\">&quot;AngularTS&quot;</span>;\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>Suggestions:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\"><pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:green\">// Add &quot;implements dynamic&quot; to a class or interface</span>\r\ndeclare <span style=\"color:blue\">class</span> Scope <span style=\"color:blue\">implements</span> dynamic {\r\n    $destroy();\r\n    $digest();\r\n}\r\n\r\n<span style=\"color:green\">// Add a &quot;dynamic&quot; modifier to class or interface declarations</span>\r\ndeclare dynamic <span style=\"color:blue\">class</span> Scope {\r\n    $destroy();\r\n    $digest();\r\n}\r\n\r\n<span style=\"color:green\">// Add a special member type, e.g. &quot;.*&quot;:</span>\r\ndeclare <span style=\"color:blue\">class</span> Scope {\r\n    $destroy();\r\n    $digest();\r\n    .*: any;\r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n</span></pre>\r\n</div>\r\n",
    "PostedDate": "2012-10-02T17:32:03.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922631",
    "ThreadId": "397800",
    "Html": "<p>While classes in TypeScript aren't open-ended, interfaces are.&nbsp; The Warship sample does this, where it uses jquery.d.ts to describe interfaces which are later added to by jqueryui.d.ts.&nbsp;</p>\r\n<p>By modeling it using interfaces, you could extend the interface further as you extended the object.</p>",
    "PostedDate": "2012-10-05T13:31:27.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922946",
    "ThreadId": "397800",
    "Html": "<p>I was just looking at a similar issue. According to the language specification, a Declaration Source File (*.d.ts) is restricted to ambient declarations. According to the language specification, ambient declarations can be for variables, functions, classes and modules. Is this just missing information from the language specification?</p>",
    "PostedDate": "2012-10-06T16:36:44.913-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922994",
    "ThreadId": "397800",
    "Html": "<p>So the expected way to do this would be something like:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// in angular.d.ts</span>\r\n<span style=\"color: blue;\">interface</span> Scope {\r\n    $digest(): <span style=\"color: blue;\">void</span>;\r\n}\r\n\r\n<span style=\"color: green;\">// in HomeController.ts</span>\r\n<span style=\"color: blue;\">interface</span> HomeScope <span style=\"color: blue;\">extends</span> Scope {\r\n    pageTitle: string;\r\n}\r\n\r\n<span style=\"color: blue;\">class</span> HomeController {\r\n    constructor($scope: HomeScope) {\r\n        $scope.pageTitle = <span style=\"color: #a31515;\">\"Home\"</span>;\r\n        $scope.$digest();\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Is that right?</p>",
    "PostedDate": "2012-10-07T01:47:06.417-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923605",
    "ThreadId": "397800",
    "Html": "<p>In addition to your example, you can&nbsp;also reuse Scope and extend the interface.&nbsp; It's up to the situation which one works better.&nbsp; Here's an example of extending:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// in angular.d.ts</span>\r\n<span style=\"color: blue;\">interface</span> Scope {\r\n    $digest(): <span style=\"color: blue;\">void</span>;\r\n}\r\n\r\n<span style=\"color: green;\">// in HomeController.ts</span>\r\n<span style=\"color: blue;\">interface</span> Scope {\r\n    pageTitle: string;\r\n}\r\n\r\n<span style=\"color: blue;\">class</span> HomeController {\r\n    constructor($scope: Scope) {\r\n        $scope.pageTitle = <span style=\"color: #a31515;\">\"Home\"</span>;\r\n        $scope.$digest();\r\n    }\r\n}\r\n</pre>\r\n</div>",
    "PostedDate": "2012-10-08T11:26:36.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "923625",
    "ThreadId": "397800",
    "Html": "\r\n<p>Yes, I saw that that would work too, but having a custom Scope interface per controller seems to be a better pattern for Angular.</p>\r\n<p>Cheers,<br>\r\nMark</p>\r\n<div>On Oct 8, 2012 7:26 PM, &quot;jonturner&quot; &lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt; wrote:<br type=\"attribution\">\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: jonturner</p>\r\n<div>\r\n<p>In addition to your example, you can also reuse Scope and extend the interface. It's up to the situation which one works better. Here's an example of extending:</p>\r\n<div style=\"\">\r\n<pre><span style=\"color:green\">// in angular.d.ts</span>\r\n<span style=\"color:blue\">interface</span> Scope {\r\n    $digest(): <span style=\"color:blue\">void</span>;\r\n}\r\n\r\n<span style=\"color:green\">// in HomeController.ts</span>\r\n<span style=\"color:blue\">interface</span> Scope {\r\n    pageTitle: string;\r\n}\r\n\r\n<span style=\"color:blue\">class</span> HomeController {\r\n    constructor($scope: Scope) {\r\n        $scope.pageTitle = <span style=\"color:#a31515\">&quot;Home&quot;</span>;\r\n        $scope.$digest();\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</div>\r\n<div>\r\n<p>Read the <a href=\"http://typescript.codeplex.com/discussions/397800#post923605\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:typescript@discussions.codeplex.com?subject=[typescript:397800]\" target=\"_blank\">typescript@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:typescript@discussions.codeplex.com\" target=\"_blank\">\r\ntypescript@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://typescript.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n",
    "PostedDate": "2012-10-08T12:06:04.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "961785",
    "ThreadId": "397800",
    "Html": "\r\n<p><br>\r\nAlternatively you can treat a type as &quot;any&quot;... that has the unfortunetly side effect that we lose all intellisense and &quot;type&quot; checking.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> MyClass {\n\tconstructor(<span style=\"color:blue\">public</span> title: string){\n\t}\n}\n\n<span style=\"color:blue\">function</span> Append(value: string){\n\t<span style=\"color:blue\">var</span> div = document.createElement(<span style=\"color:#a31515\">'div'</span>)\n\tdiv.innerHTML = value;\n\tdocument.body.appendChild(div)\n}\n\n<span style=\"color:green\">//Option 1</span>\n<span style=\"color:blue\">var</span> obj1: any = <span style=\"color:blue\">new</span> MyClass(<span style=\"color:#a31515\">&quot;Dyns 2 Title&quot;</span>);\nAppend(obj1.title);\nobj1.name = <span style=\"color:#a31515\">&quot;Dyns Name&quot;</span>;\nAppend(obj1.name);\n\n<span style=\"color:green\">//Option 2</span>\n<span style=\"color:blue\">var</span> obj2: MyClass = <span style=\"color:blue\">new</span> MyClass(<span style=\"color:#a31515\">&quot;Dyns 2 Title&quot;</span>);\nAppend(obj2.title);\n(&lt;any&gt;obj2).name = <span style=\"color:#a31515\">&quot;Dyns Name&quot;</span>;\nAppend((&lt;any&gt;obj2).name);\n\n<span style=\"color:green\">//Option 3</span>\n<span style=\"color:blue\">var</span> obj3: MyClass = <span style=\"color:blue\">new</span> MyClass(<span style=\"color:#a31515\">&quot;Dyns 2 Title&quot;</span>);\nAppend(obj3.title);\n<span style=\"color:blue\">var</span> dyn3: any = obj3;\ndyn3.name = <span style=\"color:#a31515\">&quot;Dyns Name&quot;</span>;\nAppend(dyn3.name);\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Ofc. it would be somewhat nice that we could do that explicit 'behave as any' in a more easy way... But I am not sure where what the right route would be either, there is&nbsp;certainly&nbsp;implications to it.</p>\r\n<p>I think I would prefere to have option 2 made easier if anything, so that I in a single call on the type could say &quot;now I wan't to use you as any&quot;... (&lt;any&gt;&quot;...&quot;) is allot of extra stuff to type. That also ensures that if I change the name of title\r\n on MyClass, the compiler would catch this... (oh and if the compiler in that special case would strip away the&nbsp;surrounding&nbsp;()'s as well &gt;.&lt;)<br>\r\n<br>\r\nOfc. adding to the interfaces is possible as well, but sometimes thats also just allot of extra typing for extremely simple cases.</p>\r\n<p>Last thing to consider though, is how it would align the ECMA 6... I am not sure how classes will be treated there at all, but as I understand it, classes will merely be\r\n<span>syntactic sugar so we should still be able to add new properties etc. to an object on the fly.</span></p>\r\n",
    "PostedDate": "2012-12-20T06:32:51.127-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1011125",
    "ThreadId": "397800",
    "Html": "Just to add something to this old discussion, as I ran into a use case.\r<br />\nI have been working on some core parts for Angular, and specifying routes is done with &quot;objects&quot;, say like:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n  $routeProvider.when(<span style=\"color:#A31515;\">&#39;/home&#39;</span>, { <span style=\"color:Green;\">/* some object. */</span> });\n\n  <span style=\"color:Blue;\">interface</span> IRouteProvider {\n    when(path: <span style=\"color:Blue;\">string</span>, route: <span style=\"color:Blue;\">any</span>);\n  }\r\n</pre></div>We have to use any here as technically the object has no constraints as such, but if that object contains certain properties, those begin to have meaning. So to serve &quot;discoverablity&quot; it would be nice to define route as IRoute...<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n  <span style=\"color:Blue;\">interface</span> IRouteProvider {\n    when(path: <span style=\"color:Blue;\">string</span>, route: IRoute);\n  }\n\n  <span style=\"color:Blue;\">interface</span> IRoute {\n    controller?: (...args: <span style=\"color:Blue;\">any</span>[]) =&gt; <span style=\"color:Blue;\">any</span>;\n    templateUrl?: <span style=\"color:Blue;\">any</span>;\n    <span style=\"color:Green;\">//...Ect</span>\n  }\r\n</pre></div>But since the consumer of the API can actually add additional properties which would just be passed on. We have to stick to &quot;any&quot; and that means we can't give him some help in the definition files.\r<br />\n<br />\nSo the motivation in this case becomes an API developer that want's to provide an interface to the consumers of his API, and signal to them that &quot;This parameter can contain these parameters, and if it does ill use them for something, but you can add your own on top of that and ill hand those back to you when I activate your route by handing you this entire object&quot;...\r<br />\n<br />\nBack to the fact that Interfaces are open ended, means that the consumer could ofc. just define those extra things on the interface, inherit from the original IRoute interface and be ok with it, or he can treat the parameters he pass into the &quot;when&quot; method with &quot;any&quot;... So the same workarounds are still there, but this adds another case where it could be useful.<br />\n",
    "PostedDate": "2013-03-06T04:21:48.917-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]