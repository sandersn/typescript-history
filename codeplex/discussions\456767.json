[
  {
    "Id": "1092145",
    "ThreadId": "456767",
    "Html": "If there any way for a member / argument type to be specified as: (e.g.)<br />\n<ul>\n<li>a 'string' or a 'number' (a: string | number)</li>\n<li>an 'array of string' or 'array of number' (a: string[] | number[])</li>\n<li>\nan 'array of string and number' (a: { string | number } [])<br />\n</li>\n</ul>\nI think arguments are somewhat covered by multiple signatures, but I'm not sure they can handle the other scenarios.\r<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2013-09-13T01:42:11.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1092248",
    "ThreadId": "456767",
    "Html": "I asked for this sometime ago, but there is no way currently to do this. The way to go is just use &quot;any&quot;.\r<br />\n<br />\nThere are some implications about how to show code completion for this, or how the compiler would check for the correct usage. The probable way to handle this would be to treat it as &quot;any&quot; and don't check anything, and if you are going to do that, just use &quot;any&quot; anyway.\r<br />\n<br />\nFor variables, there would be no real benefits. For functions, there are already overloads that can handle this.\r<br />\nThe only place I miss this is member declarations, where an instance variable could be a number or a function to a number, but not a string for example.<br />\n",
    "PostedDate": "2013-09-13T04:16:09.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1092517",
    "ThreadId": "456767",
    "Html": "No, there is no notion of 'union' types in TypeScript at the moment. It's possible you could find a workaround with generic arguments and appropriate constraints on them that establish the classes of operations you want to permit.<br />\n",
    "PostedDate": "2013-09-13T14:25:51.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]