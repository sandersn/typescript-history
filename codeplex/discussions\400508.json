[
  {
    "Id": "931285",
    "ThreadId": "400508",
    "Html": "\r\n<p>In Kendo UI a new Model is defined and used as follows (see <a href=\"http://docs.kendoui.com/api/framework/model\">\r\nhttp://docs.kendoui.com/api/framework/model</a>):</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> Person = kendo.data.Model.define( {\r\n    id: <span style=\"color:#a31515\">&quot;personId&quot;</span>, <span style=\"color:green\">// the identifier of the model</span>\r\n    fields: {\r\n        <span style=\"color:#a31515\">&quot;name&quot;</span>: {\r\n            type: <span style=\"color:#a31515\">&quot;string&quot;</span>\r\n        },\r\n        <span style=\"color:#a31515\">&quot;age&quot;</span>: {\r\n            type: <span style=\"color:#a31515\">&quot;number&quot;</span>\r\n        }\r\n    }\r\n});\r\n\r\n<span style=\"color:blue\">var</span> person = <span style=\"color:blue\">new</span> Person( {\r\n    name: <span style=\"color:#a31515\">&quot;John Doe&quot;</span>,\r\n    age: 42\r\n});\r\n\r\n</pre>\r\n</div>\r\n<p>The fields object is an associative array. Each element must structurally match the KendoFieldOptions interface as per the&nbsp;definition file I created below:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">interface</span> KendoEventObject <span style=\"color:blue\">extends</span> JQueryEventObject {\r\n    field: string;\r\n    value?: any;\r\n    action?: string;\r\n    index?: number;\r\n    items?: any[];\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> KendoObservableObject {\r\n    uid: string;\r\n    bind(eventName: string, handler: (eventObject: KendoEventObject) =&gt; any): <span style=\"color:blue\">void</span>;\r\n    get(name: string): any;\r\n    parent(): KendoObservableObject;\r\n    set(name: string, value: any): <span style=\"color:blue\">void</span>;\r\n    toJSON(): any;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> KendoObservableArray {\r\n    length: number;\r\n    bind(eventName: string, handler: (eventObject: KendoEventObject) =&gt; any): <span style=\"color:blue\">void</span>;\r\n    join(separator: string): string;\r\n    parent(): KendoObservableObject;\r\n    pop(): any;\r\n    push(...items: any[]): number;\r\n    slice(begin: number, end?: number): any[];\r\n    splice(index: number, howMany: number, ...items: any[]): any[];\r\n    shift(): any;\r\n    toJSON(): any[];\r\n    unshift(...items: any[]): number;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> KendoModel <span style=\"color:blue\">extends</span> KendoObservableObject {\r\n    dirty: bool;\r\n    editable(field: string): bool;\r\n    isNew(): bool;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> KendoFieldOptions {\r\n    defaultValue?: any;\r\n    editable?: bool;\r\n    nullable?: bool;\r\n    parse?: (value: any) =&gt; any;\r\n    type?: string;\r\n    validation?: any;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> KendoFields {\r\n    [index: string]: KendoFieldOptions;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> KendoModelOptions {\r\n    id?: string;\r\n    fields: KendoFields;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> KendoModelStatic {\r\n    define(options: KendoModelOptions): <span style=\"color:blue\">new</span> (data?: any) =&gt; KendoModel;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> KendoDataStatic {\r\n    ObservableObject: <span style=\"color:blue\">new</span> (data: any) =&gt; KendoObservableObject;\r\n    ObservableArray: <span style=\"color:blue\">new</span> (data: any[]) =&gt; KendoObservableArray;\r\n    Model: KendoModelStatic;\r\n}\r\n\r\n<span style=\"color:blue\">interface</span> KendoStatic {\r\n    format(format: string, ...args: any[]): string;\r\n    data: KendoDataStatic;\r\n    observable(data: any): KendoObservableObject;\r\n    observable(data: any[]): KendoObservableArray;\r\n}\r\n\r\ndeclare <span style=\"color:blue\">var</span> kendo: KendoStatic;\r\n</pre>\r\n</div>\r\n<p>As it happens all the properties of the KendoFieldOptions are optional, but even if I make one required, for instance the defaultValue property, I don't get any compiler warnings to say the defaultValue property is required when it is not specified. Is there\r\n a way TypeScript can help me to make sure each element in an associate array structurally matches an interface?</p>\r\n<p>As a side note: I really wish Telerik would create a definition file themselves. If everybody creates one themselves everybody is going to come up with slightly different interface names etc.&nbsp;I'm sure that when Telerik do provide a definition file it\r\n will&nbsp;be different from mine in a breaking&nbsp;way.&nbsp;I'm thinking I should not adopt typescript until all libraries I use provide&nbsp;their own&nbsp;definition file. &nbsp;It's a checken or egg issue as Telerik will probably not create one until\r\n TypeScript is more widely adopted. See <a href=\"http://www.kendoui.com/forums/integration/integration/kendo-ui-typescript.aspx\">\r\nhttp://www.kendoui.com/forums/integration/integration/kendo-ui-typescript.aspx</a></p>\r\n",
    "PostedDate": "2012-10-23T12:35:02.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "931799",
    "ThreadId": "400508",
    "Html": "<p>I don't seem to see the problem you're mentioning.&nbsp; When I make the change of making defaultValue required.&nbsp; In the example below I get an error telling me that I did not create the object with the required defaultValue property:&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">interface</span> KendoFieldOptions {\r\n    defaultValue: any;\r\n    editable?: bool;\r\n    nullable?: bool;\r\n    parse?: (value: any) =&gt; any;\r\n    type?: string;\r\n    validation?: any;\r\n}\r\n\r\n<span style=\"color: blue;\">var</span> kfo : KendoFieldOptions = {};</pre>\r\n</div>\r\n<p>It'd be great if JS library makers would also support .d.ts files. Even if they aren't using TypeScript directly, having the .d.ts files is a good way of having documentation about the library.</p>",
    "PostedDate": "2012-10-24T08:43:30.853-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "931805",
    "ThreadId": "400508",
    "Html": "\r\n<p>When you do</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> kfo : KendoFieldOptions = {};\r\n</pre>\r\n</div>\r\n<p>then yes you get a compiler warning, but you do not get a compiler warning when you do:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> kmo: KendoModelOptions = {\r\n    fields: { \r\n        <span style=\"color:#a31515\">&quot;name&quot;</span>: {} \r\n    }\r\n};\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2012-10-24T08:51:28.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]