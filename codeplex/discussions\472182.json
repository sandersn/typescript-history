[
  {
    "Id": "1132753",
    "ThreadId": "472182",
    "Html": "Works:<br />\n<pre><code>    foo&lt;T&gt;(): T;\n    foo&lt;T&gt;(x: string): T;\n    foo&lt;T&gt;(x: Date): T;\n    foo(x?: any): any {\n        return null;\n    }</code></pre>\n\nDoes not work:<br />\n<pre><code>    foo&lt;T&gt;(): T;\n    foo&lt;T&gt;(x: string): T;\n    foo&lt;T&gt;(x: Date): T;\n    foo&lt;T&gt;(x?: any): T {\n        return null;\n    }</code></pre>\n\nThis used to work in 0.9.1.1. This is a problem when the function implementation needs to make a call to another function using the generic argument. Or is the suggestion to simply pass &lt;any&gt; in that case?<br />\n<br />\n<strong>EDIT</strong><br />\nI suppose that might make sense actually, seeing as you can't directly call the implementation signature, and because generics are compile-time constructs only, and therefore non-reflectable, it would serve no purpose to place them on the implementation signature.<br />\n",
    "PostedDate": "2013-12-07T06:03:44.07-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132895",
    "ThreadId": "472182",
    "Html": "I had a similar issue. See <a href=\"https://typescript.codeplex.com/workitem/1918\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/1918</a>\r<br />\n<br />\nAlthough your case is different because you are not really specialising the return value.\r<br />\n<br />\nThe specialised overload signatures can be claimed to be a subtype of the non-specialised signature hence shouldn't be an error.<br />\n",
    "PostedDate": "2013-12-08T04:33:15.843-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]