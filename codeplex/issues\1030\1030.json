{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex issues and suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some issues and feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:20:17.007-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "Copying from https://typescript.codeplex.com/workitem/1025\r\n\r\nDojo has a configuration system that allows it to load AMD modules from multiple paths depending on prefix. Therefore, module files can reside in multiple locations. \r\n\r\nShort of writing numerous .d.ts files, one corresponding to one Dojo module and rebuilding the Dojo directory structure, it is not easy to simply \"require\" standard Dojo modules because TypeScript will complain that the module does not exist in the current path -- although the lack of RequireJS-style AMD structure makes it a moot point at this time (see Issue #1). \r\n\r\nThus, it is not easy to simply write a massive dojo.d.ts for inclusion without rebuilding the Dojo tree structure. An feature in the compiler to remap module paths, or to disable checking module file existence will help a great deal here! ",
    "LastUpdatedDate": "2017-11-27T11:51:34.097-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-05-13T09:58:58.743-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Pathing issues with AMD and Dojo",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 4,
    "Id": 1030
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "In addition, there needs to be a way to tell the compiler what type the imported module is, if the module file does not exist on the path and the compiler is told to be silent and just allow it.\n\nThat type can be defined by a \"declare interface\" reference loaded in a massive standard .d.ts file.\n\nSo the additional question is: can there be a way to \"link\" an \"declare\"d interface/class with a module name?\n",
      "PostedDate": "2013-05-13T20:29:27.603-07:00",
      "Id": 100124
    }
  ]
}