{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "I believe this is fixed in 0.8.1.0. Please reactivate if you're still seeing it. Thanks!",
    "ClosedDate": "2012-11-28T17:23:50.73-08:00",
    "CommentCount": 4,
    "Custom": null,
    "Description": "If you have a .ts file encoded in ANSI (say 1252) and you have diacritics in it (say a string \"ãéìôü\"), they are lost during compilation even though the output .js file is also 1252.\r\n\r\nIf the input .ts file is UTF-8, everything is fine after conversion, though.\r\n\r\nWe like using UTF-8 for all of our files, since that avoids us lots of problems. BUT, Visual Studio insists on saving files with diacritics as 1252 and not UTF-8, so that makes the process very error-prone.\r\n\r\nSuggestions:\r\n\r\n1) Make tsc deal correctly with encodings, of course;\r\n2) Add input and output encoding switches to tsc to give us a way of forcing encodings for both input and output",
    "LastUpdatedDate": "2017-11-27T11:51:35-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-15T05:58:43.613-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "tsc doesn't respect 1252 encoding correctly",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 254
  },
  "FileAttachments": [
    {
      "FileId": 509251,
      "FileName": "tests.zip",
      "DownloadUrl": ".\\509251"
    }
  ],
  "Comments": [
    {
      "Message": "I'm not able to reproduce the issue - can you upload a file that reproduces the behavior?",
      "PostedDate": "2012-10-15T09:35:38.33-07:00",
      "Id": 79772
    },
    {
      "Message": "Tests submitted using 3 encodings for the input (ANSI [1252], UTF-8 and UTF-8 with BOM).\r\n\r\ntsc outputs all 3 as UTF-8 (without BOM), but messes the diacritics for the ANSI input.",
      "PostedDate": "2012-10-15T10:06:25.73-07:00",
      "Id": 79783
    },
    {
      "Message": "Very odd - the behavior I'm seeing is that the output is correct *except* for the UTF-8 without BOM file. The ANSI and UTF-8/BOM .js files are binary-identical when run on my machine. I'll see what changes we made here recently...",
      "PostedDate": "2012-10-19T18:07:54.537-07:00",
      "Id": 80514
    },
    {
      "Message": "Odd indeed. Just checked the tests I've sent, and the MD5 for the outpute .js files are as follows:\n\ninput_1252.js = 7C5FF28C03F35A033EDC0B9D20D4CEAC\ninput_utf-8.js = 232f05296a53d7f00b277c299fa5e768\ninput_utf-8-bom.js = 232f05296a53d7f00b277c299fa5e768",
      "PostedDate": "2012-10-19T19:02:04.147-07:00",
      "Id": 80518
    }
  ]
}