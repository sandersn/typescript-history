[
  {
    "Id": "1085712",
    "ThreadId": "454746",
    "Html": "I'm trying to define a function that operates on an object where all the attributes are of the same type:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> O&lt;T&gt; {\n    [index: <span style=\"color:Blue;\">string</span>]: T;\n}\n\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">function</span> f1&lt;T&gt;(o: O&lt;T&gt;): O&lt;T&gt;;\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">function</span> f2&lt;T&gt;(o: O&lt;T&gt;): T;\n\n<span style=\"color:Blue;\">var</span> o = {a: <span style=\"color:#A31515;\">&#39;x&#39;</span>, b: <span style=\"color:#A31515;\">&#39;y&#39;</span>};\n<span style=\"color:Blue;\">var</span> o1 = f1(o);\n<span style=\"color:Blue;\">var</span> o2 = f2(o);\r\n</pre></div>The problem is that the compiler detects the type of <code>o1</code> as <code>O&lt;any&gt;</code> and <code>o2</code> as <code>any</code> while I expected it to detect it as <code>O&lt;string&gt;</code> and <code>string</code> respectively. The generated type file:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> O&lt;T&gt; {\n    [index: <span style=\"color:Blue;\">string</span>]: T;\n}\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">var</span> o: {\n    a: <span style=\"color:Blue;\">string</span>;\n    b: <span style=\"color:Blue;\">string</span>;\n};\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">var</span> o1: O&lt;<span style=\"color:Blue;\">any</span>&gt;;\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">var</span> o2;\r\n</pre></div>Also if I change <code>o</code> to <code>{a: 'x', b: 10}</code> the compiler doesn't give any errors.\r<br />\n<br />\nHow can I get the compiler to correctly detect the correct return type?<br />\n",
    "PostedDate": "2013-08-28T03:37:48.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1085718",
    "ThreadId": "454746",
    "Html": "Some more information. It looks like it works better for arrays. For:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> A&lt;T&gt; {\n    [index: <span style=\"color:Blue;\">number</span>] : T;\n    length: <span style=\"color:Blue;\">number</span>;\n}\n\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">function</span> f1&lt;T&gt;(a: A&lt;T&gt;): A&lt;T&gt;;\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">function</span> f2&lt;T&gt;(a: A&lt;T&gt;): T;\n\n<span style=\"color:Blue;\">var</span> a = [<span style=\"color:#A31515;\">&#39;x&#39;</span>, <span style=\"color:#A31515;\">&#39;y&#39;</span>];\n<span style=\"color:Blue;\">var</span> a1 = f1(a);\n<span style=\"color:Blue;\">var</span> a2 = f2(a);\r\n</pre></div>The generated type file:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> A&lt;T&gt; {\n    [index: <span style=\"color:Blue;\">number</span>]: T;\n    length: <span style=\"color:Blue;\">number</span>;\n}\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">var</span> a: <span style=\"color:Blue;\">string</span>[];\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">var</span> a1: A&lt;<span style=\"color:Blue;\">string</span>&gt;;\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">var</span> a2: <span style=\"color:Blue;\">string</span>;\r\n</pre></div>However if I change the <code>a</code> to <code>['x', 10]</code> there is no compiler error.<br />\n",
    "PostedDate": "2013-08-28T03:49:33.02-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1085961",
    "ThreadId": "454746",
    "Html": "This particular area isn't fully implemented in the compiler yet, but eventually the following will work:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> O&lt;T&gt; {\n    [index: <span style=\"color:Blue;\">string</span>]: T;\n}\n\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">function</span> f1&lt;T&gt;(o: O&lt;T&gt;): O&lt;T&gt;;\n<span style=\"color:Blue;\">declare</span> <span style=\"color:Blue;\">function</span> f2&lt;T&gt;(o: O&lt;T&gt;): T;\n\n<span style=\"color:Blue;\">var</span> o1 = f1({a: <span style=\"color:#A31515;\">&#39;x&#39;</span>, b: <span style=\"color:#A31515;\">&#39;y&#39;</span>});  <span style=\"color:Green;\">// O&lt;string&gt;</span>\n<span style=\"color:Blue;\">var</span> o2 = f2({a: <span style=\"color:#A31515;\">&#39;x&#39;</span>, b: <span style=\"color:#A31515;\">&#39;y&#39;</span>});  <span style=\"color:Green;\">// string</span>\r\n</pre></div>However, your original example will continue to infer O&lt;any&gt; and any. The reason is that we only know about the statically declared properties of 'o', but not other properties that might be present in the object. Consider this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> o = {a: <span style=\"color:#A31515;\">&#39;x&#39;</span>, b: <span style=\"color:#A31515;\">&#39;y&#39;</span>};\no = {a: <span style=\"color:#A31515;\">&#39;a&#39;</span>, b: <span style=\"color:#A31515;\">&#39;b&#39;</span>, c: 123};\n<span style=\"color:Blue;\">var</span> o1 = f1(o);\n<span style=\"color:Blue;\">var</span> o2 = f2(o);\r\n</pre></div>The only thing we can safely infer here is O&lt;any&gt; and any because we don't know what other properties 'o' might have. However, if you restrict 'o' to a type that contains a string index signature then we can know for sure:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> o: O&lt;<span style=\"color:Blue;\">string</span>&gt; = {a: <span style=\"color:#A31515;\">&#39;x&#39;</span>, b: <span style=\"color:#A31515;\">&#39;y&#39;</span>};\no = {a: <span style=\"color:#A31515;\">&#39;a&#39;</span>, b: <span style=\"color:#A31515;\">&#39;b&#39;</span>, c: 123};  <span style=\"color:Green;\">// Error</span>\n<span style=\"color:Blue;\">var</span> o1 = f1(o);  <span style=\"color:Green;\">// O&lt;string&gt;</span>\n<span style=\"color:Blue;\">var</span> o2 = f2(o);  <span style=\"color:Green;\">// string</span>\r\n</pre></div>Hope this helps.<br />\n",
    "PostedDate": "2013-08-28T14:37:56.307-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1086081",
    "ThreadId": "454746",
    "Html": "Thanks for the detailed response. I also understand why it works for the array case. When I defined all properties of <code>o</code> as <code>string</code> I could still add other properties the are not of type <code>string</code> but when I defined all items of <code>a</code> as <code>string</code> it inferred the type as <code>string[]</code> and it considers it an error to add items of another type:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> o = {a: <span style=\"color:#A31515;\">&#39;x&#39;</span>, b: <span style=\"color:#A31515;\">&#39;y&#39;</span>}; <span style=\"color:Green;\">// type is {a: string, b: string}</span>\no[<span style=\"color:#A31515;\">&#39;c&#39;</span>] = 10;  <span style=\"color:Green;\">// ok to add property with type number</span>\n\n<span style=\"color:Blue;\">var</span> a = [<span style=\"color:#A31515;\">&#39;x&#39;</span>, <span style=\"color:#A31515;\">&#39;y&#39;</span>]; <span style=\"color:Green;\">// type is string[]</span>\na[2] = 10; <span style=\"color:Green;\">// type error can&#39;t convert number to string</span>\n\r\n</pre></div>",
    "PostedDate": "2013-08-29T02:35:08.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]