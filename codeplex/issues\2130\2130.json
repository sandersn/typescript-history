{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:22.72-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "When I have a class that use an interface declared in the same module we cannot use export assignment :\r\n\r\n```typescript\r\n\r\nexport interface MyIface {\r\n    //etc....\r\n}\r\n\r\nclass A {\r\n    prop: MyIface;\r\n}\r\n\r\nexport = A; // Export assignment not allowed in module with exported element\r\n```\r\n\r\nthe only way to obtains the typings is  to do that : \r\n\r\n```typescript\r\n\r\n\r\nclass A {\r\n    prop: A.MyIface;\r\n}\r\n\r\nmodule A {\r\n    export interface MyIface {\r\n        //etc....\r\n    }\r\n}\r\n\r\nexport = A;\r\n```\r\n\r\nthe compiler could compute that for us at least for interface. (I can understand that this is more problematic for function/variable)",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-01-27T07:38:49.267-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Export assignment and exported interface ",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 2130
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Technically we could do this, it does add some complexity to the rules around export vs export= (where today it is a simple choice of only one or the other). Marked as a suggestion for Jonathan to look at in a future version.",
      "PostedDate": "2014-01-27T17:16:19.58-08:00",
      "Id": 131818
    },
    {
      "Message": "This is actually really inconvenient. When exporting an interface it just needs to get pushed out into the definition file as soon as possible. Having to import interfaces using require syntax is really clunky given that they don't exist at runtime.\n\nRelated to this is the fact that the compiler prevents you from 'declaring' an interface (TS1045) - there is special handling going on there which prevents interfaces being used to best effect IMHO. If you don't want to add the extra complexity around multiple exports then perhaps this special handling could be removed instead?\n\n",
      "PostedDate": "2014-07-17T01:22:18.82-07:00",
      "Id": 152668
    }
  ]
}