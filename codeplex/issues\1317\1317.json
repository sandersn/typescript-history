{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This is outside the scope of the compiler.",
    "ClosedDate": "2013-07-08T10:12:59.283-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "It would be interesting to see (optional) support for emitting type metadata in a cheap 'reflection' manner:\r\n\r\n```\r\nclass Foo {\r\n    method() : number {...}\r\n    constructor(blah: Blah) {...}\r\n    getType() {  // automatically generated at compile time\r\n        return { \r\n            ctor: { func: Foo, parameters: [ Blah ] },\r\n            methods: [ { func: this.method, parameters: [], returnType: Number ] \r\n        };\r\n    }\r\n}\r\n```\r\n\r\nI realize that interfaces does not exist att runtime and as such it would be difficult to reference them in the same way as Blah and Foo are referenced in the example. But perhaps they could be emitted as strings. That would also work for anonymous types.\r\n\r\nThe primary use case that I see is dependency injection, but could also be used for serialization etc.",
    "LastUpdatedDate": "2013-07-08T10:12:59.283-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-07-08T02:57:11.823-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Support emitting optional \"getType\"",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1317
  },
  "FileAttachments": [],
  "Comments": []
}