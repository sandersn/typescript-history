{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:42.613-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "Currently optional function parameters with a default value have generated code like the following:\r\n\r\nif (typeof someParam === \"undefined\") {somParam = _someDefaultValue_;}\r\n\r\nSince the parameter of the function is a defined variable, it should be safe to do:\r\n\r\nif(someParam === undefined) {somParam = _someDefaultValue_;}\r\n\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-06-24T06:40:34.717-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Unnecessary use of typeof detecting undefined parameters for default value assignment.",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 1,
    "Id": 1218
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for reporting assigning to Jon who handles our suggestions.",
      "PostedDate": "2013-06-24T11:49:40.373-07:00",
      "Id": 103951
    },
    {
      "Message": "\nComparing an undeclared variable to undefined results in an error -> but as you're using parameters in a function that will never happen.\n\nhttp://stackoverflow.com/questions/4725603/variable-undefined-vs-typeof-variable-undefined\n\n___Unconfirmed:___\n__I heard rumours that the following could happen, but I made a jsFiddle of it that proved otherwise - this might still be applicable to older browsers which didn't implement the spec properly:__\nThis is not necessarily the case because in JavaScript because you can assign values to undefined, and then the check will yield invalid results:\n\ne.g.:\n```\nundefined = \"foo\";\nvar x = \"foo\";\nif (undefined === \"foo\") //true\nif (x === undefined) //true\nif (typeof x === \"undefined\") //false -> as the programmer would be expecting.\nif (typeof undefinedvar === \"undefined\") //true\nif (undefinedvar === undefined) //false\n```\n_(rumour source)_\nhttp://stackoverflow.com/questions/10790300/should-i-use-typeofval-undefined-or-val-undefined\n\nAlso, please note that it is possible (although not likely) for an external JavaScript file to change the value of undefined.\n\nJSFIDDLE:\nhttp://jsfiddle.net/Griffork/G4Y2j/",
      "PostedDate": "2013-06-27T20:06:20.703-07:00",
      "Id": 104470
    },
    {
      "Message": "In IE6, IE7, IE8 assiging to the global undefined does cause the check\n\nif (someparam === undefined) \n\nto not function correctly. \n\nThat is enough for me to say that using typeof is required for the test to work reliably.  \n\nI think this issue can be closed.",
      "PostedDate": "2013-06-28T07:10:08.697-07:00",
      "Id": 104529
    }
  ]
}