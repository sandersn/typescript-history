[
  {
    "Id": "963278",
    "ThreadId": "411547",
    "Html": "\r\n<p>Are there are near-future plans to add readonly member support to TypeScript? i.e.</p>\r\n<p>class Point<br>\r\n{<br>\r\n&nbsp; &nbsp; public static readonly Zero = new Point(0, 0);<br>\r\n}&nbsp;</p>\r\n<p>Point.Zero = new Point(1, 1); // Won't compile</p>\r\n<p>At the moment, I'm achieving this with a private member and a property getter.</p>\r\n<p>Thanks, and great work on TypeScript. I only discovered it this week and I'm already in the middle porting my current project over to it. I hope to see some new developments soon!</p>\r\n",
    "PostedDate": "2012-12-20T12:32:51.83-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "981429",
    "ThreadId": "411547",
    "Html": "\r\n<p>Readonly is on our backlog for discussion, but no concrete plans currently. If you're targeting ES5, then using a getter is the best approach currently.</p>\r\n<p>Thanks for the kind words and for using TypeScript!</p>\r\n",
    "PostedDate": "2012-12-28T11:28:22.743-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1041861",
    "ThreadId": "411547",
    "Html": "As part of the discussion, will &quot;readonly&quot; convert to:<br />\n<pre><code>Object.defineProperty(Point, &quot;Zero&quot;, { value: new Point(0, 0), writable: false });</code></pre>\n\nGetters are great, but not as performant.<br />\n<br />\nIt would also be nice to be able to create a constructor as follows:<br />\n<pre><code>constructor(public readonly Point: Point) {\n}</code></pre>\n\n",
    "PostedDate": "2013-05-10T06:44:27.423-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1091910",
    "ThreadId": "411547",
    "Html": "After days of trying to find an alternative solution, I ended up changing all my interface to abstract classes and define read onlyproperty that way. <br />\n",
    "PostedDate": "2013-09-12T14:00:03.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]