{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:23.44-07:00",
    "CommentCount": 6,
    "Custom": null,
    "Description": "The only javascript pattern I've not been able to express in the type system are tuple return values. Since js obviously lacks a tuple type, these are simply fixed length arrays with types at known locations. The pattern isn't popular; I've mostly seen the\r\n pattern in parsers but with the destructuring strawman accepted for ES6, I expect the usage to increase.\r\n\r\nSimple example (it doesn't make a lot of sense not to add the type to the object...):\r\n\r\n```TypeScript\r\nfunction tokenize (source) {\r\n  // ...\r\n  return ['binaryOp', {op: '+', left: '2', right: '2'}];\r\n  // ...\r\n}\r\n``` \r\n\r\nTrying to express the type signature of the function in obvious ways doesn't work:\r\n\r\n```TypeScript\r\n(string) => [string, Token]     // first try\r\n(string) => {0:string, 1:token} // second try\r\n```\r\nFrom reading the language spec, it looks like the first is being used for type annotating [] property access for number vs string and the second fails because 0 and 1 aren't getting parsed as valid identifiers, nor are strings.\r\n\r\n \r\n\r\nI appreciate you working on this and open sourcing it permissively. I've been interested in providing quality completion for JS for a while and from a quick scan it looks like I might be able to get it from what's there plus some appropriate .d.ts annotations.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 1.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-05T13:29:18.917-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Tuple types",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 32,
    "Id": 123
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "As noted, there is no way to describe the type of an object with integer property names of heterogeneous types in TypeScript currently.  There are additional related limitations around expression interface types with non-identifier property names, which also need to be addressed.  We are hoping that we can address both of these cases.  If we can, the syntax would be like the second example above.",
      "PostedDate": "2013-03-09T18:48:32.613-08:00",
      "Id": 92823
    },
    {
      "Message": "Why use the syntax from the 2nd example? In my opinion, the first example is more intuitive...",
      "PostedDate": "2013-05-11T17:23:07.13-07:00",
      "Id": 100004
    },
    {
      "Message": "May revisit this after 1.0, though this feels more \"nice to have\", and as Luke says we don't have an easy way of typing indexers where each number could return a different type.  Adding this sounds like it would add a bit complexity to indexers, though I'd be curious if there are other patterns this opens up.",
      "PostedDate": "2013-10-24T10:27:14.953-07:00",
      "Id": 119544
    },
    {
      "Message": "With promise libraries, this pattern is very common when fetching results in parallel:\n\n    promise\n        .then(val => [fetch1(val), fetch2(val)])\n        .spread((res1, res2) => ...)\n\nCurrently the workaround is to use a Promise.join (or something shorter like P.J)\n\n    promise\n        .then(val => Promise.join(fetch1(val), fetch2(val)))\n        .spread((res1, res2) => ...)\n",
      "PostedDate": "2013-12-27T05:00:25.507-08:00",
      "Id": 128496
    },
    {
      "Message": "Please consider adding tuples asap!",
      "PostedDate": "2014-01-08T11:58:17.98-08:00",
      "Id": 129828
    },
    {
      "Message": "+1 for this. We have a use case where we are specifying sort order for a mongodb service. The sort is a list of pairs: [ [\"attribute\", direction], ... ]. It would be great to be able to specify the inner value as a fixed-sized array with a string and a number.",
      "PostedDate": "2014-04-29T09:45:23.2-07:00",
      "Id": 145099
    }
  ]
}