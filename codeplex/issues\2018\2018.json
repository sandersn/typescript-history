{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "The type of `this` in a function expression in an object literal is `any`. Basically, we don't have much faith that the function will be called in an `obj.method()` context, so it's left untyped. You can work around it fairly cleanly like this:\n\n```\nvar Test = {\n    val: 3,\n    \n    func: function () {\n\t\tvar self: typeof Test = this;\n        self.val1 = 4; // error\n    }\n}\n```",
    "ClosedDate": "2013-12-16T09:31:59.67-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hello,\r\n\r\nI don't know if this is actually  a bug or a feature, considering that it might not be clear within what context a function is called and what the actually 'this' will be (consider mixins) ... but I was a little surprised that the following example does only give one 'property does not exist'-error:\r\n\r\n```\r\nvar Test = {\r\n\tval: 3,\r\n\t\r\n\tfunc: function () {\r\n\t\tthis.val1 = 4; // no error - unexpected\r\n\t}\r\n}\r\n\r\nTest.val1 = 4; // error - expected\r\n```\r\n\r\nIt seems 'this' does not have the type of Test within a function ...\r\n\r\nIs this by design?",
    "LastUpdatedDate": "2013-12-16T09:31:59.67-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-14T13:37:01.64-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Type of this in function member of object literal (error expected)",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2018
  },
  "FileAttachments": [],
  "Comments": []
}