{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Thanks for logging this issue. We've moved to a new codebase on GitHub; please try your issue against the new compiler (once possible) and log an issue on the GitHub site if it still reproduces.",
    "ClosedDate": "2014-07-21T13:21:29.877-07:00",
    "CommentCount": 1,
    "Custom": null,
    "Description": "(from: https://typescript.codeplex.com/discussions/532862)\r\n\r\nSpecification ver. 0.9.5, p. 3.8.7:\r\n> A type reference which, directly or indirectly, references G through open type references and which contains a wrapped form of any of Gâ€™s type parameters in one or more type arguments is classified as an infinitely expanding type reference.\r\n\r\nWell, we've tried to implement it somehow, and it seems to work in most cases. But to say that some explanation about \"directly or indirectly\" is omitted in spec would be a severe understatement. Specification needs to be expanded here to describe a complete algorithm.",
    "LastUpdatedDate": "2017-11-27T11:51:34.217-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-02-20T10:10:14.807-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Infinitely expansion checking algorithm",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2200
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "As far as I understand algorithm, \"directly or indirectly references\" means:\n1. Take a type A without instantiating (or with?)\n2. Take all of A's type references, including type references in properties, in return types of methods and signatures, in parameters of methods and signatures, and in heritage specification (both \"extends\" and \"implements\"? or only \"extends\"?), but excluding any type reference from method bodies.\n3. If any of the type reference references G, then A references G directly.\n4. Otherwise, process all types referenced by type references (aside from types already being processed by this algorithm). If any of these types references G directly or indirectly, then A references G indirectly.\n\nBut then we have strange problems like https://typescript.codeplex.com/workitem/2198 , which contradict this algorithm. That is why we ask for a more detailed specification here. Thanks!",
      "PostedDate": "2014-02-21T04:59:15.243-08:00",
      "Id": 134316
    }
  ]
}