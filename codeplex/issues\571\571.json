{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:22.517-07:00",
    "CommentCount": 6,
    "Custom": null,
    "Description": "Just a suggestion, but it would be very cool if one could create a TypeScript Library project to contain nothing but TypeScript files, which would compile to a single JavaScript file that could then be linked from other projects. Maybe have a Definitions folder to contain .d.ts files. If the source-map-based debugging could be made to work with this project type, then even better.\r\n\r\nI'm guessing the project would need the same kind of ordering semantics as F# projects, so that the output was concatenated in the correct order.\r\n\r\nSince TypeScript's raison d'etre is large-scale applications, it would seem to make sense to support this level of componentization in a Visual Studio solution, right?",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 1.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-12-23T08:49:19.237-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "TypeScript Library project type in Visual Studio",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 81,
    "Id": 571
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Agreed.  We're looking into ways we can support this better.  I've marked this as something we'll circle back to after the 1.0 release (though it's possible we may get to it even sooner)",
      "PostedDate": "2013-03-07T14:52:06.27-08:00",
      "Id": 92577
    },
    {
      "Message": "very needed in large projects",
      "PostedDate": "2014-02-03T02:01:05.61-08:00",
      "Id": 132391
    },
    {
      "Message": "we do this currently with a node r.js build file which can be done automatically.  We manually make a d.ts at the moment, this would be neat.",
      "PostedDate": "2014-03-05T07:59:02.463-08:00",
      "Id": 135899
    },
    {
      "Message": "You can actually do this right now with an empty C# library project right now, but you're just left with built javascript files that don't go anywhere.  You'd have to have some sort of manual process to copy the javascript files where you want them and then modify that projects deployment process to make sure it copies the generated javascript.  \n\nThis gets weird when you start having duplicate files everywhere.  All of your libraries would exist both in this project and your WebUI project.  \n\nI ended up researching grunt and gulp.  You use those to build your project, in place, on top of your WebUI project.  I kicked off that build as a post build task.",
      "PostedDate": "2014-06-03T10:01:52.143-07:00",
      "Id": 148709
    },
    {
      "Message": "I forgot to add... if you do this with a C# library project, you need to copy the references to the typescript .targets file and put it into your C# library project's csproj file.",
      "PostedDate": "2014-06-03T10:02:53.327-07:00",
      "Id": 148710
    },
    {
      "Message": "If you count the 10 votes at the duplicate issue over here (https://typescript.codeplex.com/workitem/2171), this becomes the 6th-highest-voted issue at the moment.",
      "PostedDate": "2014-06-20T07:21:15.293-07:00",
      "Id": 150335
    }
  ]
}