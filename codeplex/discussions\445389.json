[
  {
    "Id": "1050392",
    "ThreadId": "445389",
    "Html": "You guys emit extra helper functions for certain features like __extends, which is only 5 lines. Are the devs willing to emit a much larger number of lines of code? I fear that if the answer is no, we won't see features like function generators and async/await in environments pre-ES.next. Being able to use features like function generators (and classes and modules) in ES3 and ES5 environments is one of the biggest draws of TypeScript.<br />\n",
    "PostedDate": "2013-05-29T17:24:44.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1050741",
    "ThreadId": "445389",
    "Html": "Right - we generally want to keep the extra code we generate as isolated and as small as possible.  If ES6 gets generators, I could imagine us supporting those in a future release and then polyfilling to ES5/ES3.  Once we have generators, then the codegen for async/await can be simplified.  \r<br />\n",
    "PostedDate": "2013-05-30T09:59:21.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1052618",
    "ThreadId": "445389",
    "Html": "On a related issue, would it be possible to have the option NOT to put this boiler code into every compiled .js file.\r<br />\n<br />\nI'm new to TypeScript, and I'm currently trying to use TypeScript in my own module loading system, and it seems a waste that every unit would have to have the __extends boilder code attached to it, but rather having the __extends as a global would be better.  There might already be a way to do this, but looking a the tsc --help I didn't see anything obvious.<br />\n",
    "PostedDate": "2013-06-04T06:40:37.07-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1052701",
    "ThreadId": "445389",
    "Html": "+ 1 for this. And since I overwrite _extends function a option to turn off will be very useful.<br />\n",
    "PostedDate": "2013-06-04T09:20:34.08-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]