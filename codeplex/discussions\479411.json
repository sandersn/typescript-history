[
  {
    "Id": "1144961",
    "ThreadId": "479411",
    "Html": "Why does the type-cast operator look like as it does? What is the reason for it to not look the same as in Java, C#, etc.? This syntax makes it (almost?) impossible to add TypeScript support into JSX, Facebook's JavaScript XML syntax transform. See the discussion here: <a href=\"https://github.com/facebook/react/issues/759\" rel=\"nofollow\">https://github.com/facebook/react/issues/759</a><br />\n<br />\nMore about JSX: &quot;<a href=\"http://blog.vjeux.com/2013/javascript/jsx-e4x-the-good-parts.html\" rel=\"nofollow\">JSX: E4X The Good Parts</a>&quot;<br />\n",
    "PostedDate": "2014-01-03T03:04:48.143-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1145006",
    "ThreadId": "479411",
    "Html": "We don't actually have a type-cast operator.  Did you mean the type assertion operator?<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> MyInterface { height: <span style=\"color:Blue;\">number</span>; };\n<span style=\"color:Blue;\">var</span> x = &lt;MyInterface&gt; {height: 3};\r\n</pre></div>The type assertion operator does look like the cast operator in other languages, though it works a bit differently.  It checks to make sure the type is compatible in either direction, then we treat the expression as the type in the assertion.\r<br />\n<br />\nAre you asking why didn't we use () instead of &lt;&gt;?\r<br />\n<br />\nI suspect the issue here is that this would be perfectly valid JavaScript if MyInterface was also a value, making it ambiguous whether it was a function call or a type assertion:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> x = (MyInterface)({height: 3});\r\n</pre></div>",
    "PostedDate": "2014-01-03T06:22:51.71-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1146073",
    "ThreadId": "479411",
    "Html": "Sounds reasonable. However, <code>Greeter&lt;string&gt;(&quot;Hello, world&quot;)</code> is perfectly valid JavaScript as well, which stopped nobody from adopting such syntax...<br />\n",
    "PostedDate": "2014-01-03T15:14:43.76-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1150008",
    "ThreadId": "479411",
    "Html": "Yup, that's true.  I remember us doing quite a bit of searching through JavaScript to make sure we weren't going to break anything choosing that syntax.<br />\n",
    "PostedDate": "2014-01-06T09:17:12.133-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1151420",
    "ThreadId": "479411",
    "Html": "Is there a chance that this syntax (type assertion) will change?\r<br />\n<br />\nWhile E4X was a failure, XML-like syntax extensions is a good and obvious idea, which perfectly might make it into some next ECMAScript version. But if it happens, it will be impossible to incorporate that syntax into TS because of type assertions.<br />\n",
    "PostedDate": "2014-01-09T09:19:16.95-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1151803",
    "ThreadId": "479411",
    "Html": "No, the chance is slim the syntax will change at this point.  We're working on the last block of tasks for hitting 1.0.<br />\n",
    "PostedDate": "2014-01-10T07:35:44.35-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]