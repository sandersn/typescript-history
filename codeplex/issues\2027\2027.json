{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:27.627-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "We have split a large Typescript project into multiple onces, each project generating a declaration file (.d.ts)\r\n\r\nTo our surprise the total compilation time went from 8 seconds to 25 seconds, even though the same files are being compiled...\r\n\r\nIt seems that every time the TSC compiler is invoked, it will reparse all declaration files (lib.d.ts, jquery.d.ts, and our own), and that takes a very long time. Since we now invoke TSC once of each module project instead of once for the single application project, this gets very slow.\r\n\r\nIn C/C++ land, precompiled headers were invented to solve this problem. \r\n\r\nDoes the Typescript team has any plans to implement something like this? It basically involves saving and loading the internal state of the compiler...\r\n\r\nDo you know other ways to improve the complication speed of large multi-module typescript projects?\r\n\r\nThanks,\r\nPeter\r\n\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-12-17T05:32:26.877-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Precompiled declaration files",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 5,
    "Id": 2027
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I second the request for some form of incremental build option.  It would be wonderful if tsc didn't have to recompile the entire project when just one or two files have actually changed.",
      "PostedDate": "2013-12-17T12:36:09.867-08:00",
      "Id": 127808
    },
    {
      "Message": "Thanks.  The startup cost is a challenge (for any app).  There are certain complications added by our type system that would also limit our ability to reuse types (e.g. what if your code in one compilation extended some of the types from lib.d.ts, and the other doesn't?).\n\nThat said, improvements in this area are definitely something we are tracking (e.g. even stuff as basic as incremental build is not built into our compiler/project system yet).  Assigning this to Jonathan for track for our next major release.",
      "PostedDate": "2013-12-17T13:38:34.72-08:00",
      "Id": 127831
    },
    {
      "Message": "Another data point, I have a really small project and compilation times are > 10 seconds.\nAn empty file takes 5 seconds. sourcing AngularJS And Lodash definitions adds ~2 seconds to every build. I deleted a lot of definitions from lodash.d.ts that I was not using and compilation time got ~0.5 seconds better. But running this through grunt means I am at > 7 seconds before having written a line of my own code.",
      "PostedDate": "2014-03-17T14:28:08.763-07:00",
      "Id": 137149
    }
  ]
}