{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Yes, this is unfortunate, but as specified in 4.12.2\tType Argument Inference in the spec.",
    "ClosedDate": "2013-10-25T12:17:44.84-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "The following compiles under 0.9.1-1 but not under \"develop\". The workaround is to add explicit type parameters `<a,b>` in the recursive call to `foldl`, but I don't believe this should be necessary.\r\n\r\n    class List<a> {\r\n    }\r\n\r\n    class Nil<a> extends List<a> {\r\n    }\r\n\r\n    class Cons<a> extends List<a> {\r\n       head: a;\r\n       tail: List<a>;\r\n    }\r\n\r\n    function foldl <a, b> (op: (x: a, y: b) => a, z: a, xs: List<b>): a {\r\n       if (xs instanceof Nil)\r\n          return z\r\n       var xs_ = <Cons<b>>xs\r\n       // Without explicit type parameters here compiler gets confused.\r\n       return foldl(op, op(z, xs_.head), xs_.tail)\r\n    }\r\n",
    "LastUpdatedDate": "2013-10-25T12:17:44.84-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-10-25T00:58:48.32-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Type inference bug with generic function",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 1837
  },
  "FileAttachments": [],
  "Comments": []
}