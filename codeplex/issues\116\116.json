{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:23.953-07:00",
    "CommentCount": 7,
    "Custom": null,
    "Description": "For example at this stage we do not have constructs like those in Coffeescript or c#:\r\n\r\n```TypeScript\r\nforeach x in y {\r\n\r\n}\r\n\r\nforeach x of y {\r\n\r\n}\r\n```\r\nrepeat { } n times\r\n\r\nlinq to js      var query = from a in arr where (a>0);\r\n\r\nMacros could be useful to implement some kind o internal DSLs...",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 2.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Medium",
      "Severity": 100,
      "Id": 2
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-05T10:17:08.853-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Would not be interesting if typescript will add \"macros\"?",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 26,
    "Id": 116
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Macros would indeed be interesting, but your examples are far from compellingâ€“considering all of them are possible with array comprehension and I'm sure support is planned \n",
      "PostedDate": "2012-10-05T14:58:23.507-07:00",
      "Id": 78746
    },
    {
      "Message": "Related: inline functions.",
      "PostedDate": "2012-10-09T15:29:29.74-07:00",
      "Id": 79249
    },
    {
      "Message": "There is a very interesting project:  http://sweetjs.org/\nthat adds macros to javascript:\n\nThe motto:\nSweet.js brings hygienic macros from languages like Scheme and Rust to JavaScript. Macros allow you to sweeten the syntax of JavaScript and craft the language you've always wanted.\n\nIt would be very interesting if typescript would support something similar...",
      "PostedDate": "2012-10-15T07:34:44.277-07:00",
      "Id": 79758
    },
    {
      "Message": "teaching sweetjs enough to ignore typescript should be possible. sweetjs -> typescript -> javascript :)",
      "PostedDate": "2012-10-24T15:53:05.423-07:00",
      "Id": 80934
    },
    {
      "Message": "As long as reflection is not available - performance is expected to drop when fully supported - macro's are a solutiona in my opinion to introduce a reduced form of discovering objects. The macro's hide complex code from programmers that need more focus on the business domain and less on technical issues. In this way a kind of DSL can be introduced when needed.",
      "PostedDate": "2012-11-12T11:48:34.347-08:00",
      "Id": 82301
    },
    {
      "Message": "Macros are an interesting topic, but not something that is currently central to TypeScrripts goals.  \n\nMacros are very powerful, and enable/encourage developers to introduce new and divergent syntaxes into each different codebase.  This is something that we are currently hesitant to avoid in TypeScript, as we want syntax to be a simple and predictable extension to JavaScript that is consistent across TypeScript projects (part of the value of have *a* class syntax in TypeScript is that it answers the question of *which* class modeling approach to use).\n\nThat said, macros can be a powerful tool in general, and are something that might fit for TypeScript in the future.  If anyone has compelling examples of how macros can significantly benefit TypeScript, feel free to share here.  For now though, as others have noted, SweetJS provides a great tool focused on offering heavily macro-driven compilation to JavaScript experience.",
      "PostedDate": "2013-02-26T10:11:44.65-08:00",
      "Id": 91573
    },
    {
      "Message": "One use case for macros might be for accessing the name of a member as a string.\n\npropName: string = $NAME(this.myProperty);\nthis.publish(propName);\n\nMight be used for controlling which properties get serialized to JSON.\n",
      "PostedDate": "2013-12-18T03:24:47.723-08:00",
      "Id": 127907
    }
  ]
}