{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:42.143-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "If you're creating a publicly consumable API in TypeScript that has classes the exposed classes can be invoked as standard functions with unexpected side effects.\r\n\r\nIt'd be better if this code\r\n\r\n```\r\nclass Foo {\r\n    constructor(public bar: string) { }\r\n}\r\n```\r\n\r\nWould generate like this:\r\n\r\n```\r\nfunction Foo (bar) {\r\n    if (!(this instanceof Foo)) {\r\n        return new Foo(bar);\r\n    }\r\n\r\n    this.bar = bar;\r\n}\r\n```\r\n\r\nDoing `instanceof` checks is a very common practice so I don't think it'd be anything drastically unexpected from the generated code.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-14T23:04:00.213-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Classes don't respect the new operator",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 1513
  },
  "FileAttachments": [],
  "Comments": []
}