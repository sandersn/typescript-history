[
  {
    "Id": "943646",
    "ThreadId": "403711",
    "Html": "\r\n<p>In some classes configuration we often allow&nbsp;configure properties with multiple signatures:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">new</span> Ext.Panel({\n\ntbar : <span style=\"color:blue\">new</span> Ext.Toolbar({\n\nitems : [{text : <span style=\"color:#a31515\">'save'</span>}, {text : <span style=\"color:#a31515\">'cancel'</span>}]\n})\n\n}):\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>or</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">new</span> Ext.Panel({\n\ntbar : [{text : <span style=\"color:#a31515\">'save'</span>}, {text : <span style=\"color:#a31515\">'cancel'</span>}]\n\n}):\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>It would be really nice if we had, only in compile time, a feature like C# implicit operator.</p>\r\n<p>This pattern is used in scriptsharp.</p>\r\n<p>&nbsp;</p>\r\n<p><a title=\"http://msdn.microsoft.com/en-us/library/z5z9kes2(v=vs.100).aspx\" href=\"http://msdn.microsoft.com/en-us/library/z5z9kes2(v=vs.100).aspx\">http://msdn.microsoft.com/en-us/library/z5z9kes2(v=vs.100).aspx</a></p>\r\n<p><a title=\"http://extsharp.codeplex.com/SourceControl/changeset/view/94877#1716706\" href=\"http://extsharp.codeplex.com/SourceControl/changeset/view/94877#1716706\">http://extsharp.codeplex.com/SourceControl/changeset/view/94877#1716706</a></p>\r\n<p><a title=\"http://extsharp.codeplex.com/SourceControl/changeset/view/94877#1716724\" href=\"http://extsharp.codeplex.com/SourceControl/changeset/view/94877#1716724\">http://extsharp.codeplex.com/SourceControl/changeset/view/94877#1716724</a></p>\r\n<p>&nbsp;</p>\r\n<p>so instead of declaring type any</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Panel { \n    <span style=\"color:blue\">public</span> tbar: any;\n}\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>we could create a class to inform what types we can convert</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Panel { \n    <span style=\"color:blue\">public</span> tbar: TbarConfig;\n}\n\n<span style=\"color:blue\">class</span> TbarConfig { \n    implicit operator Ext.Toolbar(items : any);\n    implicit operator Ext.Toolbar(items : Ext.Toobar);\n}\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-11-18T13:04:00.927-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944676",
    "ThreadId": "403711",
    "Html": "This discussion has been copied to a work item. Click <a href=\"http://typescript.codeplex.com/workitem/467\">here</a> to go to the work item and continue the discussion.",
    "PostedDate": "2012-11-20T09:05:49.827-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]