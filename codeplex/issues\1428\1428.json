{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:42.02-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "```\r\ninterface IBaseView {\r\n\r\n    on(eventName: string, callback: () => void );\r\n}\r\ninterface IDerivedView extends IBaseView {\r\n    on(eventName: \"click\", callback: () => void );\r\n}\r\n\r\n```\r\nthe above code is showing error. \r\n\r\nif u can permit \"string literal specialization \" in derived classes  that will be awesome",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-06T05:54:30.4-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "string literal specilization in derived types",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 2,
    "Id": 1428
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion. As you may be aware, section 7.1 of the language spec is quite explicit that a signature hides the base type signature.  We have had discussions on exactly the problem you outline, and we could make this experience better, but it does introduce some more significant changes to the language that we want to take right now.\n\nI will assign this suggestion to Jonathan to track for consideration in future releases though.  Thanks!",
      "PostedDate": "2013-08-06T14:56:24.623-07:00",
      "Id": 108710
    },
    {
      "Message": "Currently the only way to me is to duplicate the entire lot of overload-on-constant definitions for *EVERY* interface and class.  This is a huge code bloat for overload-on-constant's and extremely prone to errors.  Essentially, overload-on-constant is only useable on flat interfaces and classes not inheriting from anything.\n\nSo essentially the language spec says: Overload-on-constant and inheritance don't mix.\n",
      "PostedDate": "2013-08-06T23:46:52.15-07:00",
      "Id": 108794
    }
  ]
}