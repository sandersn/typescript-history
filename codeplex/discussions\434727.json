[
  {
    "Id": "1007742",
    "ThreadId": "434727",
    "Html": "Hi.  I'm working on moving an existing solution of &gt; 1,000 classes and several projects to TypeScript.  Currently each class is in its own file and assigned to the global namespace under something like company.foo.bar.Class.  These files are concatenated together as a compile step.  So I'm not just moving the project to TypeScript I'm moving it to AMD as well.\r<br />\n<br />\nI want to keep each class in its own file but importing each class individually and always referring to it with an arbitrary prefix strikes me as awkward.  To that end I thought it would be useful to have modules that aggregate related classes.  eg:<br />\n<pre><code>// alphabet/abc/Alpha.ts\nexport class Alpha {\n    private greeting: String;\n    constructor(greeting: String) {\n        this.greeting = greeting;\n    }\n    greet(): String {\n        return this.greeting;\n    }\n}</code></pre>\n\n<pre><code>// alphabet/abc/Bravo.ts\nexport class Bravo {\n    private greeting: String;\n    constructor() {\n        this.greeting = &quot;Bravo don't take no constructor&quot;;\n    }\n    greet(): String {\n        return this.greeting;\n    }\n}</code></pre>\n\n<pre><code>// alphabet/abc/index.ts\n// This file would be trivial to generate\nimport alpha = module(&quot;alphabet/abc/Alpha&quot;);\nexport var Alpha: new (String) =&gt; alpha.Alpha = alpha.Alpha;\n\nimport bravo = module(&quot;alphabet/abc/Bravo&quot;);\nexport var Bravo: new () =&gt; bravo.Bravo = bravo.Bravo;</code></pre>\n\nAnd now over in an application class I can do this:<br />\n<pre><code>import abc = module(&quot;alphabet/abc/index&quot;);\nvar a = new abc.Alpha(&quot;Hello world&quot;);\ndocument.getElementById('content').innerText += a.greet();</code></pre>\n\nSo that looks pretty cool because the pattern feels comfortable, the generated JavaScript does exactly what you'd hope, VS finds the type and the &quot;a&quot; var gets autocomplete.  The only problem is that abc.Alpha is a constructor but not a type so either of these are compile errors:<br />\n<pre><code>var a: abc.Alpha = new abc.Alpha(&quot;Hello world&quot;);\nfunction foo(bar: abc.Alpha): void { }</code></pre>\n\nIn fact there's nothing I can put in for those types without importing the original class.  Is there a reason the constructor shouldn't be usable as a type?  It feels like given the way JavaScript works it should be safe.  Is there a better way to accomplish what I'm trying to do here?\r<br />\n<br />\nCheers.<br />\n",
    "PostedDate": "2013-02-27T09:48:56.963-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1008902",
    "ThreadId": "434727",
    "Html": "We've seen some variations on this, and they end in about the same pain point.  You need to be able to set what exactly you want to export.  In your case, it looks like you want to be able to export a class as the external component that is imported.\r<br />\n<br />\nIn module systems, it's not uncommon to want to do this by assigning to the exports and replacing the default object.  In Node it's &quot;module.exports = ???&quot;\r<br />\n<br />\nWe're looking into ways to do something similar in TypeScript where you can set the symbol you want to export, and it will export not just that symbol but also its type information.  This would give you a more straightforward way to put one class in each external module.<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// Alpha.ts</span>\n<span style=\"color:Blue;\">class</span> Alpha { ... }\n<span style=\"color:Blue;\">export</span> = Alpha;\n\n<span style=\"color:Green;\">// main.ts</span>\n<span style=\"color:Blue;\">import</span> ExternalAlpha = <span style=\"color:Blue;\">module</span>(<span style=\"color:#A31515;\">&quot;Alpha&quot;</span>);\n<span style=\"color:Blue;\">var</span> a = <span style=\"color:Blue;\">new</span> ExternalAlpha();\r\n</pre></div>",
    "PostedDate": "2013-03-01T08:08:35.197-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]