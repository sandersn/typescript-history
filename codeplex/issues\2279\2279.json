{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.347-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "This is a work-item for a recent discussion: https://typescript.codeplex.com/discussions/538334\r\n\r\nThe problem that should be solved is how to publish usable declaration files together with their JavaScript modules that are compiled from TypeScript source code.\r\n\r\nSo when the module is published to a JS package manager (like npm or bower) it would be usable as any vanilla JS module, but added to that there would be this feature that would link the JavaScript module to a declaration file bundled in the distributed package (npm tarball or bower tag or whatever).\r\n\r\nThe solution would expose the declaration in a way that makes sense with the module resolution system so the correct definition would be resolved when you `import` the JS module.\r\n\r\nIf this is solved we can distribute TS based code more effectively in the open source JS ecosystem and allow TS based packages to escape from NuGet and reach more open source users (the WebStorm/Sublime crowd).\r\n\r\nOut of hand there are a few options:\r\n\r\n1): Add an element in `package.json` (and `bower.json` etc) that refers to the declaration:\r\n\r\n````\r\n{\r\n    \"version\": \"0.1.2\",\r\n    \"name\": \"typedwidget\",\r\n    \"main\": \"./dist/TypedWidget.js\",\r\n    \"typescript\": {\r\n        \"definitions\": \"./dist/TypedWidget.module.d.ts\"\r\n    }\r\n}\r\n````\r\n\r\n2): Add a magic comment to the output JS file, similar to how source-map's link to the `.js.map`:\r\n\r\n````\r\n//#typeDefURL \"./dist/myModule.d.ts\"\r\n````\r\n\r\nThere is something to be said for both of these:\r\n\r\nI like #1 because it is more of an addon, and could even work for modules that are not even compiled from TypeScript. Eg: it would allow for some creative use and can be added in user space.\r\n\r\nSolution #2 is attractive because it would be compiler generated and stick with the file, but not sure if current generator is good enough (we end up manually adding a missing `declare module 'xyz' { export = XYZ }` statement, like in https://github.com/AndrewGaspar/TypedPromises/blob/master/TypedPromises.node.d.ts).\r\n\r\nBoth have the issue on how to link the declaration to the module: it could be tricky with module name resolutions (eg: how to manage this reliably: http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders)\r\n\r\nThe low tech way is to write a tool that loops the `node_modules` and created a `.d.ts` bundle. That works easily for both.\r\n\r\nAlternately the compiler can do some magic, that would work best with #2 (it could scan for the magic comment and automagically apply it).",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-03-08T06:17:41.917-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Export and load declarations with package-manager published JS modules",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 3,
    "Id": 2279
  },
  "FileAttachments": [],
  "Comments": []
}