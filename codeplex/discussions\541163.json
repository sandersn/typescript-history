[
  {
    "Id": "1230258",
    "ThreadId": "541163",
    "Html": "Hey everyone,\r<br />\n<br />\nI really like the way you designed TypeScript. It addresses some features that are really missing from JavaScript, but still provide really useful features. What I really appreciate is the close mapping between the TypeScript code and the resulting JavaScript code which makes it attractive for framework authors as well, because even if the framework is written in TypeScript it's still absolutely usable with pure JavaScript if the user of the framework chooses to.\r<br />\n<br />\nThere's one area were this isn't true though in my opinion: <strong>Inheritance</strong>. If I write a framework and provide certain classes that the user has to inherit from to interact with the framework this is not really straightforward to do when the user is programming in JavaScript. The user would need to do the inheritance by herself, because the __extends function that is generated is in the scope of the generated scope â€“ and even if the __extends function would be accessible from the user code, it would still be cumbersome to use.\r<br />\n<br />\nWhy did you choose to implement inheritance in that way and not provide an &quot;extend method&quot; as it is for example provided by Backbone.js? In that case the following code:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">class</span> Snake <span style=\"color:Blue;\">extends</span> Animal {\n    <span style=\"color:Green;\">//...</span>\n}\r\n</pre></div>would be translated into the following JS code:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> Snake = Animal.extend({\n});\r\n</pre></div>This is a) much easier to use for someone writing pure JavaScript and b) is much closer to the code written in TypeScript. Really interested in the design decision :)<br />\n",
    "PostedDate": "2014-04-04T02:23:30.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1230392",
    "ThreadId": "541163",
    "Html": "Interesting you brought up this point, as I have myself had to reference the &quot;_extend&quot; method in my framework in a way that end user's could use as part of the API.  I did notice this issue exists:\r<br />\n<a href=\"https://typescript.codeplex.com/workitem/2255\" rel=\"nofollow\">https://typescript.codeplex.com/workitem/2255</a>\r<br />\n...which suggests that even the global &quot;_extends&quot; routine needs some rethinking.  Should it be left global and set on static types (sort of like &quot;Type.extends = _extends&quot;), or redefine the function for EVERY static type? (since there is no pre-existing static type that TypeScript can use for this purposes)  Perhaps just define it on base types, and let the extend function copy the &quot;extends&quot; property forward to derived types.  Just some things to think about. :)<br />\n",
    "PostedDate": "2014-04-04T08:50:35.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1230414",
    "ThreadId": "541163",
    "Html": "You can change the compiler to emit code in your style... Its not fun for all, but it can work. I changed compiler to emit code in  ExtJS style:<br />\n<br />\n<a href=\"https://github.com/fabioparra/TypeScriptExtJSEmitter\" rel=\"nofollow\">https://github.com/fabioparra/TypeScriptExtJSEmitter</a><br />\n",
    "PostedDate": "2014-04-04T09:42:42.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1230496",
    "ThreadId": "541163",
    "Html": "@jamesnw: Thanks for the pointer. It's good to know that they have it on the radar :)\r<br />\n@fabioparra: Excellent! I did not know that. Will look into it when I have the time!<br />\n",
    "PostedDate": "2014-04-04T12:10:36.737-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]