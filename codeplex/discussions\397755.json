[
  {
    "Id": "920774",
    "ThreadId": "397755",
    "Html": "\r\n<p>Please tell me the point of putting a colon between the type and the identifier? And what is the thinking behind the order? Look at the function declaration and then look at the function signature, its inconsistent. Consider the following code in which you\r\n would like to take argument defaults, it starts to look especially bad...</p>\r\n<p>This looks bad...</p>\r\n<p>const decode(foo:string=&quot;foobar&quot;, bar:number=10) { ... }</p>\r\n<p>This looks better...</p>\r\n<p>const decode(string foo=&quot;value&quot;, number bar=10) { ... }</p>\r\n<p>and this is ok...</p>\r\n<p>const decode(string foo=&quot;value&quot;, const number bar=10) { ... }</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-10-02T11:34:04.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920778",
    "ThreadId": "397755",
    "Html": "<p>Agreed. Consistency in identifier declarations is important.</p>",
    "PostedDate": "2012-10-02T11:43:06.74-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920784",
    "ThreadId": "397755",
    "Html": "<p>I agree, but I believe this is mainly to account for parameters that require specific function signatures. For example you can do something like this:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">function</span> foo(bar: (string) =&gt; bool){\r\n\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>To Specify that a function should take a parameter that is itself a function which accepts a string, and returns a boolean. Trying to accomplish this without having some sort of alias (a generic Action&lt;T&gt;, Func&lt;T&gt; definitions) may have been difficult.</p>",
    "PostedDate": "2012-10-02T11:52:18.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920792",
    "ThreadId": "397755",
    "Html": "\r\n<p>The complex case should never dictate the simple case. And here, the complex case in&nbsp;unnecessary and possibly should not be allowed for the sake of sanity! :) Consider the simplicity and sanity of this sudo code...</p>\r\n<p>string f(string s) {</p>\r\n<p>&nbsp; return s;</p>\r\n<p>}</p>\r\n<p>void foo(function f) {</p>\r\n<p>&nbsp;console.log(f('hello, world'));</p>\r\n<p>}</p>\r\n",
    "PostedDate": "2012-10-02T12:01:59.583-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920793",
    "ThreadId": "397755",
    "Html": "<p>Note that when you assign a default parameter value you do not need to provide a type annotation as it is inferred from the default value. The reasoning behind the pascal-style type annotations is that it was a more straight forward addition on top of JS syntax. It is also easier when types are optional as they are in TypeScript.</p>",
    "PostedDate": "2012-10-02T12:02:34.793-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920797",
    "ThreadId": "397755",
    "Html": "\r\n<p>I think pascal-style type annotations are very alien in an already javascript-heavy aesthetic. What makes it more strait-forward? Your straight-forwardness assertion is simply a straw-man. I also dont understand who its easier for, the parser/lexer or the\r\n coder?</p>\r\n<p>&nbsp;</p>\r\n<p>Edit: I'm cool with inferred types, but the main argument still stands. If you can't find an argument *for* using the colon or the specified order, it will continue to seem awkward and wrong in some way.</p>\r\n",
    "PostedDate": "2012-10-02T12:08:18.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920840",
    "ThreadId": "397755",
    "Html": "<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// valid TS:</span>\r\n\r\n<span style=\"color: blue;\">function</span> foo( a = <span style=\"color: #a31515;\">\"test\"</span>: string) { \r\n  <span style=\"color: blue;\">return</span> a; \r\n}\r\n</pre>\r\n<pre><br /></pre>\r\n<pre><br /></pre>\r\n<pre>... That's not to say that I like it. Just that it's not an issue with ES6 default params</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-02T13:17:57.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921086",
    "ThreadId": "397755",
    "Html": "<p>With\r\n<pre>function (a = \"test\")</pre>\r\nthe parameter type is inferred to a string. An additionally type annotation is not needed.</p>",
    "PostedDate": "2012-10-03T01:20:31.84-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921179",
    "ThreadId": "397755",
    "Html": "<p>@teyde, im just going to assume you are a bot or you have not read the entire conversation.</p>\r\n<p>@all There really is still no reasonable answer to this question. I'm guessing this is the direction that will this community will take.</p>",
    "PostedDate": "2012-10-03T04:43:49.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921345",
    "ThreadId": "397755",
    "Html": "<p>@hij1nx, this was answered in the thread \"Why the backwards colon parameter typing?\".<br /><br />Also note that mathematicians use the so called \"ascii vomit\". And most of the more advanced statically typed programming languages use : or ::.&nbsp;</p>\r\n<p>Bjarne Stroustrup, the creator of C++ stated this: \"<span>I consider the C declaration syntax an experiment that failed\".<br /><br />Personally I vastly prefer the \"ascii vomit\" to the C style, there's a world of&nbsp;beauty in the notation f: X-&gt;Y, used by mathematics and many programming languages.<br />&nbsp;</span></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-03T09:32:20.643-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921359",
    "ThreadId": "397755",
    "Html": "\r\n<p>&nbsp;</p>\r\n<p>By attempting to point out the obvious fact that&nbsp;<span>mathematicians use operators, you have pretty much lost all self-respect as a programmer. Any good PL researcher/implementer understands that cognitive load is an important consideration for adoption.\r\n I think by more advanced you mean more complex, not better.</span></p>\r\n<p><span><span>Bjarne Stroustrup (the creator of C&#43;&#43;) also said &quot;<span>You don't improve a language by simply adding every feature that someone considers a good idea.</span>&quot; Funny, considering how Bjarne is possibly the one person who could write a program\r\n that used every C&#43;&#43; feature.</span></span></p>\r\n<p>Do you have a github account? I'd love to read some of your code.</p>\r\n",
    "PostedDate": "2012-10-03T09:46:50.74-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921385",
    "ThreadId": "397755",
    "Html": "<p>I was pointing out the fact that mathematicans, who also care about cognitive load, use the notation you consider vomit. It seems to me that most PL researchers also prefer and use the mathematical notation.<br /><br />BTW: My code has quite a lot of \"ascii vomit\" in it (and \"<span>unnecessary complex\" types like string-&gt;bool)&nbsp;</span>so I think it's best you don't read my code, it could make you really sick. ;)</p>",
    "PostedDate": "2012-10-03T10:39:56.91-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921390",
    "ThreadId": "397755",
    "Html": "<p>no github? you are more than likely a software manager or a troll. #gtfo.</p>",
    "PostedDate": "2012-10-03T10:46:40.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921401",
    "ThreadId": "397755",
    "Html": "<p>I have a github account and have probably written hundreds of thousands of lines more code than you. But now I'll follow your friendly advice.</p>",
    "PostedDate": "2012-10-03T11:09:33.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921415",
    "ThreadId": "397755",
    "Html": "\r\n<p>Cool story, bro. I found your github account here:&nbsp;https://github.com/jarlest</p>\r\n<ul>\r\n<li>1 Repo (2 lines of code) </li><li><a href=\"https://github.com/jarlest/followers\"><strong>0&nbsp;</strong><span>followers</span></a>\r\n</li><li><a href=\"https://github.com/jarlest/following\"><strong>2&nbsp;</strong><span>starred</span></a>&nbsp;\r\n</li><li><a href=\"https://github.com/jarlest/following\"><strong>38&nbsp;</strong><span>following</span></a>\r\n</li><li>404 on your personal site </li></ul>\r\n<p>&nbsp;</p>\r\n<ul>\r\n</ul>\r\n",
    "PostedDate": "2012-10-03T11:39:25.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926755",
    "ThreadId": "397755",
    "Html": "<p>I hope that I can help to explain why the types were implemented as they are.</p>\r\n<p>In a language where types are mandatory, it makes sense to use:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">string</span> name = <span style=\"color: #a31515;\">\"hij1nx\"</span>;\r\n</pre>\r\n</div>\r\n</p>\r\n<p>But in a language where the type is optional, it makes more sense to add it after the name of the variable, parameter, function...</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">var</span> name: string = <span style=\"color: #a31515;\">\"hij1nx\"</span>;\r\n</pre>\r\n</div>\r\nPlacing the type after the name makes it explicit that the type is optional.</p>",
    "PostedDate": "2012-10-15T07:58:48.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "928328",
    "ThreadId": "397755",
    "Html": "<pre><span>your answer says \"x makes sense\", and \"x makes it explicit\"; but consider the following statements which are easier to read, just as effective and ultimately less complex...</span></pre>\r\n<pre><span><br /></span></pre>\r\n<pre><span>string</span> name = <span>\"hij1nx\"</span>; // (an explicit type)</pre>\r\n<pre><br /></pre>\r\n<pre>var name = \"hij1nx\"; // (a variable type)</pre>",
    "PostedDate": "2012-10-17T13:40:36.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]