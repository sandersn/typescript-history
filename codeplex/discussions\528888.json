[
  {
    "Id": "1202522",
    "ThreadId": "528888",
    "Html": "Hi,\r<br />\n<br />\nin the language specification only overriding is explained (see chapter 8.2.3). Hiding of class members is (for me not exactly) explained in chapter 3.8.1. But what are the differences? Can I say, only properties can be hidden by sub classes and only methods can be overriden by sub classes?\r<br />\n<br />\nclass A {\r<br />\n  public a: number;\r<br />\n  public test(): void {}\r<br />\n}\r<br />\n<br />\nclass B extends A {\r<br />\n  // hiding property A.a\r<br />\n  public a: number;\r<br />\n  // overriding method A.test\r<br />\n  public test(): void {}\r<br />\n}\r<br />\n<br />\nThank you!<br />\n",
    "PostedDate": "2014-02-04T07:39:49.247-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1202627",
    "ThreadId": "528888",
    "Html": "<em>removing untrue statement so I don't look stupid</em><br />\n<br />\nDeclaring members of the same name and type in a subclass does nothing.  You're declaring a member to be part of the shape of B and it's compatible with the shape of A so that's fine.  What's useful is if the member in the subclass has a narrower type.<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">class</span> Alpha {\n    <span style=\"color:Blue;\">public</span> a: <span style=\"color:Blue;\">number</span>;\n}\n\n<span style=\"color:Blue;\">class</span> Bravo <span style=\"color:Blue;\">extends</span> Alpha {\n    <span style=\"color:Blue;\">public</span> b: <span style=\"color:Blue;\">number</span>;\n}\n\n<span style=\"color:Blue;\">class</span> Charlie {\n    <span style=\"color:Blue;\">public</span> member: Alpha;\n}\n\n<span style=\"color:Blue;\">class</span> Delta <span style=\"color:Blue;\">extends</span> Charlie {\n    <span style=\"color:Blue;\">public</span> member: Bravo;  <span style=\"color:Green;\">// all Bravos are Alphas so all Deltas can still be treated as Charlies</span>\n}\r\n</pre></div>",
    "PostedDate": "2014-02-04T11:32:19.09-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1202694",
    "ThreadId": "528888",
    "Html": "See section 7.1 Interfaces in the language specification for some definitions of hiding members. <br />\n<blockquote>\nAn interface has the members specified in the ObjectType of its declaration and furthermore inherits all base type members that aren’t hidden by declarations in the interface:<br />\n•\tA property declaration hides a public base type property with the same name.<br />\n•\tA call signature declaration hides a base type call signature that is identical when return types are ignored.<br />\n•\tA construct signature declaration hides a base type construct signature that is identical when return types are ignored.<br />\n•\tA string index signature declaration hides a base type string index signature.<br />\n•\tA numeric index signature declaration hides a base type numeric index signature.<br />\n</blockquote>\nBut there's no distinction like the C# new vs override keywords on derived method signatures.<br />\n",
    "PostedDate": "2014-02-04T14:59:27.533-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1202868",
    "ThreadId": "528888",
    "Html": "Hi danquirk,\r<br />\n<br />\nthank you, but are the same hiding rules for interfaces applied to classes, as well?\r<br />\n<br />\nIs it true that,<br />\n<ul>\n<li>a property (or instance/static variable) of the sub class HIDES a property (or instance/static variable) of the super class with the same name?</li>\n<li>a property (or instance/static variable) of the sub class OVERRIDES a property (or instance/static variable) of the super class with the same name AND the same kind (instance or static). Furthermore the type of the overriding property (or instance/static variable) has to be a sub type of the overridden property (or instance/static variable)?\r<br />\nThe two rules above are applied to methods, too.</li>\n</ul>\n",
    "PostedDate": "2014-02-05T02:59:34.097-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]