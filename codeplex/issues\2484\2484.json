{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:11.313-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "It'd be handy to be able to import a single export from a module. For example:\r\n```\r\n// foo.ts\r\nexport class A {\r\n}\r\n\r\nexport class B {\r\n}\r\n```\r\n\r\n```\r\n// bar.ts\r\nimport A = require(\"foo\").A;\r\n```\r\n\r\nAt the moment, you can do the following to make this work:\r\n```\r\nimport foo = require(\"foo\");\r\nvar A = foo.A;\r\n```\r\nBut the simpler, more concise syntax would be nice to have.\r\n\r\nEDIT: I'm mistaken! The workaround I suggested for this only works in certain circumstances. For example, casting:\r\n```\r\nimport foo = require(\"foo\");\r\nvar A = foo.A;\r\nvar a = new A(); // works\r\nvar a2 = <A>a; // error\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-05-01T04:18:22.07-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "import a single export from a module",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 2484
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Marked as a suggestion. We'll have to see how this aligns with ES6 module syntax too.\n\nFor your edit, that is working as intended. When you write\n```TypeScript\nvar A = foo.A;\n```\nyou have created a new value bound to the value of foo.A, ie the constructor function for the class foo.A. However, A is just a value, not a type, so it cannot be used as a cast like you've attempted. What you want to do is import alias:\n```TypeScript\nimport A = foo.A\n```",
      "PostedDate": "2014-05-01T14:02:52.323-07:00",
      "Id": 145360
    },
    {
      "Message": "I've seen the following syntax being used in regards to ES6 modules:\n\nimport { A, B } from \"Foo\";\n\nWhich seems it'd be a good syntax for importing one or more exports as individual imports rather than as members of a single imported module.\n\n",
      "PostedDate": "2014-05-06T03:57:19.793-07:00",
      "Id": 145670
    },
    {
      "Message": "I run into this all the time and frequently wish it were possible. I suspect there's 10 similar requests in this tracker as well :)",
      "PostedDate": "2014-05-12T01:28:04.227-07:00",
      "Id": 146270
    }
  ]
}