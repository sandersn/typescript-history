[
  {
    "Id": "1209610",
    "ThreadId": "532380",
    "Html": "Currently in the process of writing some documentation for TypeScript and associated tools.  Hopefully, while it still needs to get a bit more fleshed-out, it'll already be helpful for some.\r<br />\n<br />\n<a href=\"https://typescript.codeplex.com/wikipage?title=TypeScript%20Documentation\" rel=\"nofollow\">https://typescript.codeplex.com/wikipage?title=TypeScript%20Documentation</a>\r<br />\n<br />\nIf you get a chance to read through it, let me know what you think.<br />\n",
    "PostedDate": "2014-02-17T14:09:45.677-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1210061",
    "ThreadId": "532380",
    "Html": "The advanced topic on the mixins was quite instructive, thanks for the documentation.<br />\n",
    "PostedDate": "2014-02-18T12:45:11.327-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1210405",
    "ThreadId": "532380",
    "Html": "Very helpful documentation. I like the examples (what is equivalent to what) and the topics that are outside JS (static side of class, import aliases vs var).\r<br />\n<br />\nMy comments:\r<br />\n<br />\n 1 <a href=\"https://typescript.codeplex.com/wikipage?title=Interfaces%20in%20TypeScript&amp;referringTitle=TypeScript%20Documentation\" rel=\"nofollow\">https://typescript.codeplex.com/wikipage?title=Interfaces%20in%20TypeScript&referringTitle=TypeScript%20Documentation</a><br />\n<ul>\n<li>\nThe example with dictionary is interesting:<br />\n</li>\n</ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> Dictionary {\n  [index: <span style=\"color:Blue;\">string</span>]: <span style=\"color:Blue;\">string</span>;\n  length: <span style=\"color:Blue;\">number</span>;    <span style=\"color:Green;\">// error, the type of &#39;length&#39; is not a subtype of the indexer</span>\n} \r\n</pre></div>But I'm missing the explanation why there is an error here (the explanation for readers) - because in JS <code>obj[&quot;length&quot;]</code> and <code>obj.length</code> is the same in JS the type returned from <em>string</em> indexer must match with other properties (as <code>obj.length</code> is a special case of <code>obj[&quot;length&quot;]</code>);\r<br />\n<br />\nAnd contrasting it with a similar looking code but using numeric index:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">interface</span> StringArray {\n  [index: <span style=\"color:Blue;\">number</span>]: <span style=\"color:Blue;\">string</span>;\n  length: <span style=\"color:Blue;\">number</span>;    <span style=\"color:Green;\">// this is OK as numeric indexer is used</span>\n}\r\n</pre></div><ul>\n<li>\nOh, the difference between static and instance side of class was really interesting.<br />\n</li>\n</ul>\n2 <a href=\"https://typescript.codeplex.com/wikipage?title=Classes%20in%20TypeScript&amp;referringTitle=TypeScript%20Documentation\" rel=\"nofollow\">https://typescript.codeplex.com/wikipage?title=Classes%20in%20TypeScript&referringTitle=TypeScript%20Documentation</a><br />\n<ul>\n<li>Understanding private - I didn't know about that! :) Very helpful!</li>\n<li>Constructor functions - I like topics such as those, showing how to work with structural typing.</li>\n<li>\nUsing a class as an interface - Another interesting thing!<br />\n</li>\n</ul>\n3 <a href=\"https://typescript.codeplex.com/wikipage?title=Modules%20in%20TypeScript&amp;referringTitle=TypeScript%20Documentation\" rel=\"nofollow\">https://typescript.codeplex.com/wikipage?title=Modules%20in%20TypeScript&referringTitle=TypeScript%20Documentation</a><br />\n<ul>\n<li>\nThe examples are good. I just wish there was a way of downloading them or running them online. That'd be a big help for beginners starting with modules (as looking at working solution is always a big help).<br />\n</li>\n<li>\nAlias - nice, shows difference between var and import.<br />\n</li>\n<li>\nOptional Module Loading and Other Advanced Loading Scenarios - nice technique, may come in handy.<br />\n</li>\n<li>\nAmbient External Modules - The example with multiple ambient external modules in one d.ts file and then /// referencing it is okay and useful in node.js context. When I'm using AMD modules written in JS I tend to add one .d.ts file per JS module so that <code>import X = require('jslib')</code> works without /// references and the definitions are cleanly split into small modules. Something like this:<br />\n</li>\n</ul>\nClient:\r<br />\n<a href=\"https://github.com/wiktor-k/ts-amd/blob/master/scripts/example.ts\" rel=\"nofollow\">https://github.com/wiktor-k/ts-amd/blob/master/scripts/example.ts</a>\r<br />\n<br />\nNative JS module:\r<br />\n<a href=\"https://github.com/wiktor-k/ts-amd/blob/master/scripts/lib/pure.js\" rel=\"nofollow\">https://github.com/wiktor-k/ts-amd/blob/master/scripts/lib/pure.js</a>\r<br />\n<br />\nDefinition file:\r<br />\n<a href=\"https://github.com/wiktor-k/ts-amd/blob/master/scripts/lib/pure.d.ts\" rel=\"nofollow\">https://github.com/wiktor-k/ts-amd/blob/master/scripts/lib/pure.d.ts</a>\r<br />\n<br />\nMaybe an example of this technique would be worth adding.<br />\n<ul>\n<li>\nTrade-offs for External Modules - a note about the possibility of using external build tool to concatenate output JS files (like r.js), example here: <a href=\"https://github.com/wiktor-k/ts-amd/\" rel=\"nofollow\">https://github.com/wiktor-k/ts-amd/</a><br />\n</li>\n</ul>\n4 <a href=\"https://typescript.codeplex.com/wikipage?title=Functions%20in%20TypeScript&amp;referringTitle=TypeScript%20Documentation\" rel=\"nofollow\">https://typescript.codeplex.com/wikipage?title=Functions%20in%20TypeScript&referringTitle=TypeScript%20Documentation</a><br />\n<ul>\n<li>I think it's important to highlight that the <code>pickCard</code> function below has only <em>two</em> signatures and that the implementation signature is never considered:</li>\n</ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">function</span> pickCard(x: {suit: <span style=\"color:Blue;\">string</span>; card: <span style=\"color:Blue;\">number</span>; }[]): <span style=\"color:Blue;\">number</span>;\n<span style=\"color:Blue;\">function</span> pickCard(x: <span style=\"color:Blue;\">number</span>): {suit: <span style=\"color:Blue;\">string</span>; card: <span style=\"color:Blue;\">number</span>; };\n<span style=\"color:Blue;\">function</span> pickCard(x): <span style=\"color:Blue;\">any</span> {\n  <span style=\"color:Green;\">// implementation</span>\n}\r\n</pre></div>Thanks for the documentation - it's really useful - advanced and yet approachable! <br />\n",
    "PostedDate": "2014-02-19T02:17:08.243-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]