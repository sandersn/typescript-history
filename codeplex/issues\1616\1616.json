{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:11.253-07:00",
    "CommentCount": 13,
    "Custom": null,
    "Description": "Somehow you guys and Mads Kristensen came to an unholy agreement that Web Essentials should [remove all TypeScript support](http://vswebessentials.com/changelog). This was done to prevent the _possibility_ that there are incompatibilities between Web Essentials and future versions of TypeScript, and specifically done in response to the issues caused when Web Essentials was doing compile-on-save itself. \r\n\r\nI disagree with this decision, because I think the benefits provided by Web Essentials are very useful compared with what TypeScript offers out-of-the-box, and Mads is typically more responsive in addressing these UI-related VS issues than the TS team is. \r\n\r\nHowever, if the stance the TS team has is that they don't want these possible headaches, then you guys should accept responsibility for duplicating __all__ the features Web Essentials currently offers for TypeScript. I don't think a solution of anything less is acceptable, as manually editing project files is extremely inconvenient, potentially error prone, and dangerous. This shouldn't even be difficult to kick off, as the source code for Web Essentials is easily available to you. \r\n\r\nWe (users) cannot be expected to simply give up features we're currently using just to make the TS team's job _slightly_ less complicated.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-28T10:47:58.43-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Replicate all features of Web Essentials",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 27,
    "Id": 1616
  },
  "FileAttachments": [
    {
      "FileId": 722583,
      "FileName": "WebEssentialsScreenshot.jpg",
      "DownloadUrl": ".\\722583"
    }
  ],
  "Comments": [
    {
      "Message": "Can't someone just take the TS parts of Web Essentials and make 'TS Essentials'? Maybe include TSLint too",
      "PostedDate": "2013-08-29T14:09:43.817-07:00",
      "Id": 111597
    },
    {
      "Message": "We're fully aware of additional features that need to be added to the TypeScript language service and project system and we fully intend to add them over time. Our resources are finite and thus features must be prioritized. If we have to frequently spend time diagnosing customer performance issues (which are notoriously hard to diagnose) caused by 3rd party extensions then that affects our ability to develop the official solution (and we cannot expect the user to realize that the issue is not caused by the TypeScript plugin). As you've noticed, important features like Compile On Save have now made their way into the official plugin, while many of the others have workarounds (like manually editing the project file, which while not ideal, is preferable to no option at all) until we develop and test the necessary UI.\r\n\r\nLeaving this open as a suggestion for others to vote on.",
      "PostedDate": "2013-08-29T18:39:13.13-07:00",
      "Id": 111620
    },
    {
      "Message": "> ...until we develop and test the necessary UI. \n\nSurely the source from Web Essentials would not be impossible to adapt? Mads had most of that stuff ready the day after you guys went public with TypeScript; it may not be super-high priority, but on the other hand it seems like pretty low-hanging fruit to just go and get it done.",
      "PostedDate": "2013-09-03T06:49:33.027-07:00",
      "Id": 111911
    },
    {
      "Message": "WebEssentials TS support was one of the good reasons to use VS2012 for TypeScript developement.\nnow that they no more support TS ... many developers will move to other IDEs like webstorm or sublime text",
      "PostedDate": "2013-09-08T14:07:01.193-07:00",
      "Id": 112810
    },
    {
      "Message": "We have been using the following options/features extensively for our large SharePoint projects. Could you have them in the next build, please?:\n\n1. Add generated files to project\n2. Minify generated JavaScript.\n\nThanks.",
      "PostedDate": "2013-09-11T23:41:09.67-07:00",
      "Id": 113320
    },
    {
      "Message": "Could you also make sure, the generated files are grouped as dependent files? We now need to do this manually. ",
      "PostedDate": "2013-09-12T04:24:43.337-07:00",
      "Id": 113340
    },
    {
      "Message": "most two useful features of web essentials were for me : \n- paste json as interface\n- reference file by drag and drop\n\nLosing these two by installing web essentials 3 led me to downgrade quickly to 2.9.\n\nPlease add that in the plugin (this should not impact the compiler :) )",
      "PostedDate": "2013-09-17T03:23:50.713-07:00",
      "Id": 114775
    },
    {
      "Message": "Like many others I've stopped upgrading Web Essentials at the last version which had TypeScript support in place because it's so useful.  It would be fantastic if the main options could be ported into VS.  And ideally not just VS 2013 but VS 2012 as well.\n",
      "PostedDate": "2013-10-02T01:53:13.5-07:00",
      "Id": 117169
    },
    {
      "Message": "Vote for this one - TypeScript support in VS2013 is rubbish. \n\nUsing TFS and your TypeScript .js output is checked into source (and therefore readonly): WE 2.9 would check it out to compile, VS2013RC just crashes with write errors. Duh\n\nCompile-on-save? Works perfectly with WE 2.9, broken on VS2013RC.\n\nSide-by-side TS/JS view? Really helpful in WE 2.9, missing in VS2013RC.\n\nIf these are not in the release version of VS2013 (which I don't expect they will be) we simply _cannot_ upgrade - we would not be able to use TS any more. Instead we're stuck on WE 2.9 and VS2012",
      "PostedDate": "2013-10-03T03:24:23.197-07:00",
      "Id": 117322
    },
    {
      "Message": "A quick PS: \n\nIt's frustrating that the option marked \"Compile On Save\" is appears actually to be \"Compile on Save or Build\" and doesn't appear to work unless the relevant ____additional____ elements are added to your csproj file as well ( see http://stackoverflow.com/a/18446838/761388 for details). This means you need to install TypeScript on your build server (if you have one) otherwise when you check in your code you get build errors as TypeScript cannot be compiled.  More frustratingly, without this csproj change in place you don't seem to get \"Compile On Save\".\n\nFor now I've decided to revert back to Web Essentials 2.9 so I get the ability to \"Compile on Save\" alone back. \n\nI can't emphasis how irritating little niggles like this are.  I know TypeScript is still in Alpha but for my money this sort of quirkiness is only likely to hurt adoption of what otherwise is a fantastic technology.",
      "PostedDate": "2013-10-11T07:27:54.217-07:00",
      "Id": 118150
    },
    {
      "Message": "While this feature request is a helpful place for fans of WebEssentials to voice concerns, there look to be a number of issues under the surface here.\n\n@Quango - Why is compile-on-save broken?  It should work as well as the compile-on-save from WebEssentials.  Are there specific things that aren't working?\n\nSide-by-side TS/JS view - I don't use this one, but if you pull up the .js file and dock it beside your .ts file, and then turn on \"Auto-load changes, if saved\" from Environment/Documents settings, don't you get a similar experience?\n\nTFS and .js output checked in is something that has come up quite a bit.  The current suggestion, though this has trade-offs and depends on your particular project setup, is to not check in the .js files but still have them as part of the project.  There's discussion here: https://typescript.codeplex.com/workitem/108\n\n@purvd - not sure what you mean about generated files grouped as dependent files.  The compiler can output a number of files during compilation, and we don't have a way, currently, of tracking this ahead of time.\n\n@JeWaVe - agreed, those would be handy.\n\nIt almost seems like we need a TSEssentials, where we can play with ideas, and then bring in the good ones into TS main.  :)\n",
      "PostedDate": "2013-10-24T10:03:08.62-07:00",
      "Id": 119536
    },
    {
      "Message": "+1 for TSEssentials!\n\nRe the side-by-side TS/JS view, what you suggest is a similar experience.  However, 1 nice thing about the Web Essentials implementation of this was that the JS view showed the build errors if the TypeScript didn't compile.  This was a nice \"Danger, Will Robinson\" feature which I really valued.  :-)",
      "PostedDate": "2013-10-25T01:41:11.337-07:00",
      "Id": 119618
    },
    {
      "Message": "@jonturner I did log a bug for compile-on-save not working but it was a while ago, and VS2012 update 4 works as advertised.\n\nWhat's still missing is all the great WebEssentials functionality:\n* checkout .js on compile\n* include .js in source (as an OPTION not the default)\n* nesting of .js under .ts files\n* side-by-side ts/js view\n\nI even tried to find the WebEssentials 2012 source fir version 2.9 so I could find all this lovely functionality and extract it out, but WE2012 didn't come to GitHub until after this was all ripped out and thrown away.\n\nSo now we either have to conform to the new Microsoft-approved-way-to-do-TypeScript, or keep opening our projects in VS2012 with WE 2.9 (which is what we do).\n\nPut simply - Mads did a better job in WE, unsupported and by himself, than the whole VS team did.\n\nWhy is MS resisting these changes so much? Do they want Typescriot to fail because the tool support is now so poor?",
      "PostedDate": "2013-11-26T04:01:00.333-08:00",
      "Id": 124286
    }
  ]
}