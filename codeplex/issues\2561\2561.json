{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:10.22-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "Please consider adding a module level visibility modifier or signature files like in F# or export lists like in Haskell.",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-06-16T07:21:11.337-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Feature request: add module level visibility modifiers",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2561
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks for the suggestion. If there're any particular scenarios or libraries where this would be helpful please do include details. It's always helpful to have specific motivating scenarios when evaluating potential new features.",
      "PostedDate": "2014-06-16T12:24:38.87-07:00",
      "Id": 149862
    },
    {
      "Message": "Module level visibility modifiers is another encapsulation measure. It helps hiding implementation details.\nFor example, I want a module for manipulations on a doubly-linked-list.\n\n```\nmodule list {\n    export interface List<a> {\n        /* module */ last: Node<a>;\n        /* module */ first: Node<a>;\n    }\n\n    export interface Node<a> {\n        /* module */ next: Node<a>;\n        /* module */ previous: Node<a>;\n        /* module */ value: a;\n    }\n\n    function nodeFrom<a>(previous: Node<a>, value: a, next: Node<a>) : Node<a> {\n        var result : Node<a> = { previous: previous, value: value, next: next };\n        if (previous != null) { previous.next = result; }\n        if (next != null) { next.previous = result; }\n        return result;\n    }\n\n    export function append<a>(list: List<a>, value: a) : List<a> {\n        if (list.last == null) {\n            list.last = list.first = nodeFrom(null, value, null)\n        } else {\n            list.last = nodeFrom(list.last, value, null);\n        }\n        return list;\n    }\n\n    export function valueOf<a>(node: Node<a>) : a {\n         return node.value;\n    }\n\n    // reset of the list manipulation functions\n}\n```\n\nNow I don't want to expose the `first` and `last` properties of the List interfaces to the outside world, I want these properties to only be visible inside the module, to protect the integrity of the list. Same thing for the properties of the Node interface.",
      "PostedDate": "2014-06-16T13:42:43.58-07:00",
      "Id": 149867
    }
  ]
}