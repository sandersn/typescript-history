{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Fixed in develop branch",
    "ClosedDate": "2013-06-13T11:25:06.77-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Given the following .d.ts declaration:\r\n```\r\ndeclare function create<T>(initialValues?: T[]): MyArrayWrapper<T>;\r\n\r\ninterface MyArrayWrapper<T> {\r\n\r\n    constructor(initialItems?: T[]);\r\n    doSomething(predicate: (x: T, y: T) => boolean): void;\r\n}\r\n```\r\nAnd the following usage:\r\n```\r\nvar thing = create([\r\n    {name: \"bob\", id: 24}, \r\n    {name: \"doug\", id: 32}\r\n]);\r\nthing.doSomething((x, y) => x.name === \"bob\");\r\n```\r\n\r\nThe compiler correctly infers the type of thing to be MyArrayWrapper<{name: string; id: string;>, but fails to compile the thing.doSomething call. If I mouse-over thing.doSomething, it shows the following:\r\n```\r\n(method) MyArrayWrapper<{name: string; id: string;>.doSomething(predicate: (x: T, y: T) => boolean): void;\r\n```\r\n\r\nAlso, if I explicitly try to specify the type on the call like so:\r\n```\r\nthing.doSomething((x: { name: string; id: number; }, y: { name: string; id: number; }) => x.name === \"bob\");\r\n```\r\n\r\nIt gives me a different compiler error about the type not being compatible with (x: T, y: T) => boolean",
    "LastUpdatedDate": "2014-01-10T10:34:33.287-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-04-28T14:20:39.697-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Incorrect type inference for callbacks when type returned from method",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 975
  },
  "FileAttachments": [],
  "Comments": []
}