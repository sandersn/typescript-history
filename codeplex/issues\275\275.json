{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:27.253-07:00",
    "CommentCount": 6,
    "Custom": null,
    "Description": "Related to this exchange (http://typescript.codeplex.com/discussions/399052) I propose that it be added to the language a way to specify the expected type of the implicit `this` parameter in the function signature.\r\n\r\nA function which is expected to be .call()ed or .apply()ed with a non-locally-available argument as its eventual `this` context could have an optional first parameter named `this` for which a type can be asserted.\r\n\r\n// current:\r\n\r\nvar delegate = function() { this.doSomething(); }; // lack of type safety\r\ndelegate.call(canDoSomething);\r\ndelegate.call(5); // no complaint\r\n\r\n// should be:\r\n\r\nvar delegate = function(this : CanDoSomething) { this.doSomething(); };\r\ndelegate.call(canDoSomething);\r\ndelegate.call(5); // type error",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-17T10:20:36.383-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Specifying the type of implicit `this`",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 5,
    "Id": 275
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "This...\n\nvar delegate = function(this : CanDoSomething) { this.doSomething(); };\n\n...Looks like Python and breaks TypeScript as a \"Superset of JavaScript\" ",
      "PostedDate": "2012-10-18T09:16:44.26-07:00",
      "Id": 80337
    },
    {
      "Message": "I don't think it breaks the \"superset of javascript\".  Please elaborate on that claim.\n\nIn javascript, it's not allowed (I strongly believe) to have a parameter to a function named `this`.  So there is no javascript which could be misinterpreted by the TypeScript compiler by making an option first `this` parameter allowed for the purposes of type specification.\n\nFurther, at call-sites, whether called normally, with .call(), or .apply() the `this` parameter would not be shown as part of the signature.  (Though, it'd probably be good to indicate the expected type somehow)",
      "PostedDate": "2012-10-18T19:08:48.683-07:00",
      "Id": 80418
    },
    {
      "Message": "No, you can't have a named parameter called \"this\", but making the function's formal parameters \"appear\" to have a leading scope parameter but then it's \"not [] shown\" as you've described, or simply removed—which is what I was assuming you meant—that's what breaks the \"superset of JavaScript\".\n\nIf a context type is to be definable, it should simply be done by other means, not by overloading the formal parameter list.",
      "PostedDate": "2012-10-18T20:23:55.753-07:00",
      "Id": 80421
    },
    {
      "Message": "How is that particular syntax change different from the kind of change that TypeScript's type specifiers require?  Having `: string` after a parameter will break javascript too.  Having a parameter named `this` would not be valid and could never be found in valid javascript, so it's presence (just like the presence of the type specifiers) means that this MUST mean the special TypeScript usage.  \n\nC# extension methods do a similar syntax but of course the meaning is different.  And I doubt TypeScript needs to reserve that syntax for extension methods - I don't see a need for extension methods in TypeScript/javascript since it's very easy to do the same thing by augmenting prototypes.\n\nRegarding \"...it should simply be done by other means...\", Do you have a better suggestion for a syntax?\n\nPerhaps there's a bigger reason that a type specifier for `this` isn't allowed or isn't necessary and I'm looking forward to that explanation.",
      "PostedDate": "2012-10-31T06:58:50.473-07:00",
      "Id": 81352
    },
    {
      "Message": "The strongest vote count seems to be on this issue : https://typescript.codeplex.com/workitem/507. +1 there ",
      "PostedDate": "2013-08-22T03:06:23.34-07:00",
      "Id": 110724
    },
    {
      "Message": "vote for the same feature here : https://typescript.codeplex.com/workitem/507 ",
      "PostedDate": "2013-08-22T03:07:00.687-07:00",
      "Id": 110725
    }
  ]
}