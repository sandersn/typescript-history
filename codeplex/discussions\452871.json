[
  {
    "Id": "1078448",
    "ThreadId": "452871",
    "Html": "I will try and keep this short, but I am sure I will ramble on for a while... a bit of background first.<br />\n<br />\nI was converting a large predominantly JS browser app over to use typescript, which has been brilliant and works fine. In this environment I was laying my code out like I would with a c# project in .net, so I would have a module called &quot;Shared&quot; in a folder called &quot;Shared&quot; and that would contain lots of files within that namespace. Then they would all be compiled into one js file, in this case called &quot;Shared.js&quot; which would contain all the Shared.* namespaces.<br />\n<br />\nSo then in another <em>module</em> I could do &quot;var localStorage = Shared.LocalStorage.LawnchairBackedStorage(&quot;some-store-name&quot;);&quot;, which all worked great as they were all done as internal modules, so due to the browsers global scoping they could all just be bulk included in the page and would all just work. So providing everything was included in order the module namespaces would all get shared so my module mentioned above would know about the Shared.* namespace as its in the global scope.<br />\n<br />\nThen I decided I was sick of having 2 versions of my app models and certain logic, as the web service was all written in C# with ASP.MVC, so nodejs made sense as I can re-use a lot of the same code and to be honest it looked like it would solve more of my problems easier than MVC (such as sending back models with dynamic json data).<br />\n<br />\nSo I am now going down that path and the first issue I encountered was that nodejs would not require my modules, as if I did &quot;var Shared = require('shared.js')&quot; it would just complain because there is no module export definition in the file. Which made sense as to this point I had been using internal modules, but was happy to use exported modules, as this would make more sense than having ///references all over the place.<br />\n<br />\nSo I asked this question:<br />\n<a href=\"http://stackoverflow.com/questions/17719258/wrap-many-internal-modules-for-exporting-in-typescript\" rel=\"nofollow\">http://stackoverflow.com/questions/17719258/wrap-many-internal-modules-for-exporting-in-typescript</a><br />\n<br />\nHowever most answers were all aimed at using internal modules with ///references sprinkled throughout my app, which I didnt want to do. So like the answer in that question shows, I found a nice hack which would let me have my cake and eat it (or so I thought).<br />\n<br />\nSo now lets fast forward to my current problem, So I have <em>module_a</em> which is dependant upon <em>module_b</em>, both modules are comprised of many smaller files all within a given root level namespace, so &quot;ModuleA.<em>&quot; and &quot;ModuleB.</em>&quot;, now although my &quot;export.modules = &lt;MyModuleRootNamespace&gt;&quot; hack seemed to work, where there are module dependencies it just falls over, as within the context of the &quot;ModuleB.js&quot; file it wont know about the stuff within &quot;ModuleA.js&quot; as each node.js require is in its own scope. So in the browser all the namespaces just kinda oozed together like a nice blob of logic, whereas in node.js each is compartmentalised and although I do like this approach, I cannot see how I can achieve the following 3 things:<br />\n<ul>\n<li>Have my module code split out over many files</li>\n<li>Have my code grouped via namespaces</li>\n<li>\nHave my modules know about other Modules<br />\n</li>\n</ul>\nI am currently looking at doing some sort of pre-processing hack so the top of each file would have a &quot;var ModuleA = require(&quot;ModuleA.js&quot;);&quot; so it would at least let me continue on with my project until I find a better solution, but its all very hacky.<br />\n<br />\nI did find this question below, which seemed to give me one avenue to look down but again the module flag paired with the out flag dont seem to play well with code grouped by namespaces. <br />\n<br />\n<a href=\"http://stackoverflow.com/questions/14287954/compiling-multiple-typescript-files\" rel=\"nofollow\">http://stackoverflow.com/questions/14287954/compiling-multiple-typescript-files</a><br />\n<br />\nSo could anyone offer any advice? as I need to share these <em>modules</em> between the browser and the server, each which consumes them in different ways, but currently it seems like I cannot have inter-module dependencies on the nodejs side...<br />\n<br />\nAny help would be great!<br />\n",
    "PostedDate": "2013-08-08T13:55:24.577-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1078629",
    "ThreadId": "452871",
    "Html": "Just to add to this, currently I have added a preprocessor file which will add the &quot;Module1 = require(&quot;Module1&quot;);&quot; so it will satisfy the internal dependencies between the modules, it feels a bit like a hack but without it the generated Typescript will never be able to satisfy its references at compile time without global scoping.<br />\n",
    "PostedDate": "2013-08-09T02:47:44.127-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1078857",
    "ThreadId": "452871",
    "Html": "Just to make sure I understand, it sounds like what you're basically asking about is:<br />\n<ul>\n<li>Having multiple TS files contribute to a single external module (roughly analogous to multiple C# source files contributing to a single DLL), which currently is not supported by the Typescript compiler.</li>\n<li>\nHow to manage circularity between these individual files which would somehow contribute to a single external module.<br />\n</li>\n</ul>\nIs that right?<br />\n",
    "PostedDate": "2013-08-09T12:33:19.797-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1078988",
    "ThreadId": "452871",
    "Html": "First bit is correct, second point not so much.\r<br />\n<br />\nAs I do not have any circular dependencies, I just have a lot of modules which just expose logic for re-use or extending within other modules, so currently the problems are that typescript is not compiling my module (like c# dll) with any exports, so I have to manually append &quot;module.exports = mymoduleroot&quot; to my compiled files which outputs the module in a node compatible format for requiring. However if a given module depends upon other given modules I could not find a way to represent this dependency through typescript, so currently I manually pre-process the typescript files with the requires I need in place.\r<br />\n<br />\nIt all works, it just feels a bit hacky, I may not be developing 100% the way I should be as in an ideal world each one of these modules would be its own  node package, however I cannot find a solid way to flag these dependencies to node package manager without them being in their own git repository, which would make the project unwieldy as there are lots of modules and various application end points which use them (web-service, web-ui, mobile-ui  etc). So maybe if I was developing this way it would be slightly easier to require modules.<br />\n",
    "PostedDate": "2013-08-10T00:30:27.07-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]