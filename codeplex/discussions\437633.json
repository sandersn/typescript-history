[
  {
    "Id": "1019536",
    "ThreadId": "437633",
    "Html": "In order to force a class function THIS pointer to refer to the class instance in typescript we must implement the function body in the constructor as:\r<br />\n<br />\nexample function onTabSelected declared in the class as<br />\n<pre><code>    onTabSelected(e: any): void {\n        // implemented in constructor for closure purposes\n    }\n\n    constructor\n    {\n        this.onTabSelected = (e: any) =&gt; {\n           // Body of function here\n    }\n</code></pre>\n\nNeedless to say this is quite inelegant, unnatural and complex.\r<br />\n<br />\nThe THIS issue will probably prove to be the single most confusing problem in TypeScript for those who come to it hoping to avoid JavaScript &quot;strangeness&quot;.\r<br />\n<br />\nPerhaps it would be clearer to have a function declaration within a class that explicitly binds THIS to the class instance where the function is declared regardless of where that function is called. \r<br />\n<br />\nSomething like:\r<br />\n<br />\nLocal myFunction(arg1:any): number {};  (Local or Self)\r<br />\n<br />\nor\r<br />\n<br />\nSelf.myFunction(arg1: any): number {}; \r<br />\n<br />\nWhen called as a callback, for example with JQuery, the THIS pointer would always be the class instance.\r<br />\nThese functions, as an added benefit, would not require the use of THIS when referring to class owned members. The Constructor should be local be default.\r<br />\n<br />\nAn alternative, cleaner solution could be to declare functions that do not want to bind THIS to the class instance with a modifier like using the FUNCTION keyword to indicate respect of the JavaScript binding model:\r<br />\n<br />\nFunction myFunction(arg1:any): number {};     // acts as a JavaScript function\r<br />\nmyFunction(arg1:any): number {};  // Binds this the class instance\r<br />\n<br />\nI believe that learning TypeScript would be a lot easier and the language much cleaner and frankly logical.\r<br />\n<br />\n<br />\nPhilippe Moransais<br />\n",
    "PostedDate": "2013-03-22T07:14:40.137-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1019619",
    "ThreadId": "437633",
    "Html": "Hi Philippe,\r<br />\n<br />\nTypeScript actually went through a couple class designs, but ultimately we aligned with ES6, the new version of JavaScript currently being designed.  It's easier for JavaScript programmers to just have to learn one style which works in both places.  One of the side effects here is that you end up thinking about JavaScript when you write TypeScript because TypeScript is still just JavaScript under the surface.  Using 'this' follows the same rules as JavaScript, so if you wanted to capture a particular instance of 'this', you would use a different pattern (like the one you describe).  \r<br />\n",
    "PostedDate": "2013-03-22T08:50:23.74-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1019816",
    "ThreadId": "437633",
    "Html": "Hello people.\r<br />\n<br />\nIf we need JavaScript we will write JavaScript. But we need modern sane elegant strongly typed CLASS based language like ActionScript. If we can't access class context in method it means this not a method â€” this is just a function with implicit parameter <em>this</em>. Please make something syntax sugar to bind method to it's class.\r<br />\n<br />\nThanks.<br />\n",
    "PostedDate": "2013-03-22T14:54:37.973-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020632",
    "ThreadId": "437633",
    "Html": "Hi Jon,\r<br />\n<br />\nDubrovsky tells it quite well! We need a &quot;modern, sane and elegant language&quot; to program HTML/CSS based applications and typescript is only partially delivering on that.\r<br />\nJavaScript is important because we cannot go around it. Since we cannot wait for ever on comities and browsers, the only way to move forward is to consider JavaScript as an intermediary language that we compile to. No sane person programs directly in .net IL. Your beautiful C# and Visual Basic compilers do that.\r<br />\n<br />\nJavaScript cannot be allowed by default to be the foundation of the future of application development! To me, the only reason to keep Typescript close to JavaScript is to preserve full access to the JavaScript ecosystem. \r<br />\n<br />\nI think I understand why Microsoft is trying to align with the standard, but I believe that in this case it is a strategic mistake. The application landscape has changed and is incredibly fractured. For the fist time in years developing within the Microsoft ecosystem is just too limiting in terms of reaching all platforms. Even the Windows development story is hopelessly fractured (Classic Desktop, Windows 8 Apps, Windows Phone), and that environment is quickly loosing market shares. Basically, our clients want their apps on IPads, and one way or the other they will get them there.\r<br />\n<br />\nThis new landscape is not favoring Microsoft. Many long time Microsoft developers are reevaluating their technology choices because Microsoft is no longer delivering a development solution that provides apps with sufficient reach.\r<br />\n<br />\nThis is why I think typescript is a critical product and why I fear that you are being too cautious.\r<br />\n<br />\nThis is just my two cents, but imagine an environment centered on a new .net, call it @net, which is based on typescript which provides the best of the .net libraries (rewritten in typescript and including client based Linq and an Entity Framework context with transparent socket optimized server access), and which preserves access to the full JavaScript ecosystem and allows pure JavaScript as well as C# and even VB like syntaxes (you know, just like .net).\r<br />\n<br />\nImagine also that typescript could be used to program on the server directly. I mean that we would have an environment with a client and a server project which use the same language on both and leverage all Microsoft technologies (SQL, Azure) in a dramatically simplified and optimized way. \r<br />\n<br />\nImagine now that this environment could also offer a framework like Silverlight with best of class client controls that would be able to create applications for the web, Windows 8 and through a phone gap like solution even to apps. By creating a VM, this could also provide 'native' apps on many platforms.\r<br />\n<br />\nI hope Microsoft is secretly building something like this. The company needs it and we developers need it desperately too.\r<br />\n<br />\nThe key, is to transfer into Typescript most of the progress Microsoft has made in the last 20 years.\r<br />\n<br />\nPlease let that be. Be bold.\r<br />\n<br />\nPhilippe Moransais <br />\n",
    "PostedDate": "2013-03-25T06:51:37.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020668",
    "ThreadId": "437633",
    "Html": "Philippe <br />\n<br />\nUhm... There are quite a few solutions that has taken the path of a new language witch treats JS as an intermediate language... I suppose that Coffee script is the more successful one here. Dart never really landed imo... and then there is the forest of C#, Java, ...insert other lang here... to JavaScript compilers...<br />\n<br />\nI think that all those has more than shown that they just don't gain that much traction in the end...<br />\nI think the choice MS have made here, making TypeScript so closely aligned to JavaScript is what will give it a chance to succeed where others have failed...<br />\n<br />\nBesides, the new range of markets surely makes things more difficult, but funny enough, Microsoft are now the only one who actually has gone down the road of supporting JavaScript/HTML as a &quot;native&quot; choice for Windows 8/RT Application development... For Android and iOS your still forced down a workaround of creating a Objective-C or Java where you use a WebView or alternatively one of the many cross-compilers... Unfortunetly for us developers, the consumers doesn't really care what pains we have to go through to provide them with their iPhone, iPad, Android etc. apps...<br />\n<br />\nBesides, Dubrovsky's comment does indeed say it well... The thing is just that some of us actually do wan't to write JavaScript... We just happen to really enjoy the optional type layer on top of this... That why I am Happy with TypeScript and would NEVER use Coffee Script, Dart etc...<br />\n<br />\nBut Opinions are Opinions...<br />\n",
    "PostedDate": "2013-03-25T07:43:48.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020679",
    "ThreadId": "437633",
    "Html": "Hang on a minute, I'm confused. I thought that in methods defined on a class, this referred to the instance of the object. For example:<br />\n<pre><code>class Dog {\n    private _isDead = false;\n    shoot() {\n        this._isDead = true;\n    }\n    get isDead() {\n        return this._isDead;\n    }\n}\n\nvar dog = new Dog();\ndog.shoot();\nassert.isTrue(dog.isDead);</code></pre>\n\nIn what situation would the assert in the code above fail?<br />\n",
    "PostedDate": "2013-03-25T08:08:15.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020689",
    "ThreadId": "437633",
    "Html": "jmelgaard\r<br />\n<br />\nIt seems that in this debate the opinions are forged by background and our various experiences. \r<br />\n<br />\nI personally get uncomfortable when I need to type === to check for equality. Having to use 'this' to refer to the rest of my class is very awkward and inelegant. My unease rises when I have no clear way to immediately know the context my functions operate in and the only &quot;pattern&quot; available is to declare them in one place and create their body in a constructor. It gets even worse when I realize I can obliterate system variables without warning. Books have been written about this.\r<br />\n<br />\nI did not adopt Dart or Coffee Script because of fear of ending in a dead end.\r<br />\n<br />\nMy point is that I whish Microsoft would try to give us the best of both worlds like they did in .net (many more worlds there including Cobol).\r<br />\nI am advocating for a typescript that lets us have full JavaScript compatibility if we want or need it, while also allowing a &quot;modern, sane&quot;, highly productive and safe C# syntax and compiler assistance. It would be a matter of declaring classes or blocks as JavaScript compliant or typescript (probably more complicated that I can imagine, but the team that gave us Linq can surely do anything).\r<br />\n<br />\nIt is becoming clear that Entreprise applications will have to choose between a closed existence within Windows, a closed existence as Android or IOS apps or an open and ubiquitous life on the Internet.\r<br />\n<br />\nThe millions of Microsoft developers need tools so they can contemplate the later. This is why I think typescript's (or other similar efforts) direction may well be critical.\r<br />\n<br />\nYou observe very justly &quot;Unfortunetly for us developers, the consumers doesn't really care what pains we have to go through to provide them with their iPhone, iPad, Android etc. apps...&quot;. I was just adding by two cents in the hope that Microsoft would care about our pain and do something about it.\r<br />\n<br />\nPhilippe<br />\n",
    "PostedDate": "2013-03-25T08:38:15.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020699",
    "ThreadId": "437633",
    "Html": "@markrendle the thing they're after is this:<br />\n<pre><code>function foo(bar: () =&gt; void){\n    bar();\n}\nvar dog = new Dog();\nfoo(dog.shoot);\n\nassert.isTrue(dog.isDead); // Fails\n</code></pre>\n\nFurthermore it appears they also don't want to do this:<br />\n<pre><code>    shoot() {\n        this._isDead = true;\n    }\n</code></pre>\n\nand instead write<br />\n<pre><code>    shoot() {\n        _isDead = true;\n    }</code></pre>\n\nIMO, there are many other interesting problems that the TypeScript team could spend their time solving than either of these (dare I say newbie) issues.<br />\n",
    "PostedDate": "2013-03-25T08:48:09.383-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020707",
    "ThreadId": "437633",
    "Html": "Markrendle,\r<br />\n<br />\nThe problem in my post arises when you provide a typescript function as a call back that will be triggered  by a library. JQuery or wijmo for example will change the context of the 'this' pointer from the class that contains your function to the DOM element that JQuery selected and operated on (at least I think this is what happens).\r<br />\n<br />\nIf you need to refer to a class or module level variable in that function well you can no longer do it unless you reestablish the context of 'this' to the class. This is what I understand but it is quite esoteric to me. Anyway, you need to do some strange stuff like I describe in my original post because the class context is gone. \r<br />\n<br />\nInterestingly , if you do try to use your variables, the typescript compiler has no way of knowing that you cannot because it does know what 'this' will end up refering to. You will have a run time issue with an undefined variable. That will not crash either. It will just be wrong. It's like doing trapeze without a net: heroic and stupid.\r<br />\n<br />\ntypescript provides the (attr) =&gt; {} function declaring syntax to coerce the 'this' pointer. But I could not make it work with wijmo (may be because you have to specify the call back functions in a JavaScript object.\r<br />\n<br />\nSo, in order to be fully JavaScript compliant we have two function declaring syntaxes in type script:\r<br />\n  myFunction () {}\r<br />\n  myFunction() =&gt;{}\r<br />\n and also the javascript form:  Function myFunction() {}\r<br />\n<br />\nPhilippe<br />\n",
    "PostedDate": "2013-03-25T08:59:32.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020722",
    "ThreadId": "437633",
    "Html": "Nabog,\r<br />\n<br />\nIt is deeper than that, even though style and elegance does matter in life and this.myvar is neither  stylish nor elegant.\r<br />\n<br />\nI am a JavaScript newbie (not completely though) but I have 30 years of programming in a number of other languages and technologies. \r<br />\n<br />\nI stumbled onto the following problem:\r<br />\n<br />\nLet say that we write a Class with a function onClick that needs to count the clicks and needs to save the increment to a class variable myCounter declared on the class.\r<br />\n<br />\nThe onClick function must be used as a call back from a wijmo widget. It turns out that the context of 'this' will be changed by the library and the beautiful and elegant construct this.mycounter will be undefined (without ever having a compiler or interpreter error thrown.\r<br />\n<br />\nThe only way I found to make this work was to declare the function with an empty body in the class and to assign the body from within the constructor. \r<br />\nI also had to declare a  var self = this to capture the class context so that I could do self.mycounter. Jon called that a pattern. To a javaScript newbie this is a cluster... \r<br />\n<br />\n<br />\n<br />\nContrary to your thinking, I believe that typescript should correct all of these JavaScript flaws. I think it is essential as I have said before.\r<br />\n<br />\nPlease if you know of a better solution to my problem share it with me.\r<br />\n<br />\nThanks\r<br />\n<br />\nPhilippe<br />\n",
    "PostedDate": "2013-03-25T09:17:46.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020732",
    "ThreadId": "437633",
    "Html": "Something like this might work;<br />\n<pre><code>class Foo {\n    public myCounter: number = 0;\n    public onClick(){\n        this.myCounter++;\n    }\n} \n\nclass WijmoWidget{\n    public bar(baz: () =&gt; void){\n        baz();\n    }\n}\n\nvar foo = new Foo();\nvar widget = new WijmoWidget();\n\nwidget.bar(foo.onClick.bind(foo));\n\nconsole.log(foo.myCounter); // 1</code></pre>\n\nThe idea is to bind the context to the callback before passing it to the wiget.<br />\n",
    "PostedDate": "2013-03-25T09:40:23.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020772",
    "ThreadId": "437633",
    "Html": "Ah, I see. That's OK, I thought I'd misunderstood something fundamental about TypeScript.\r<br />\n<br />\nI think nabog's foo.onClick.bind(foo) example is the correct approach. Assigning functions as properties of an object in the object's constructor is going to create potentially hundreds of copies of those functions, so no.\r<br />\n<br />\nAs for all the people wishing that TypeScript were something else, some magical thing that was simultaneously C# and JavaScript and Dart and Smalltalk, well, I'm British and old enough to remember this:\r<br />\n<br />\n<a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=ERDUbAv8Qz0#t=44s\" rel=\"nofollow\">http://www.youtube.com/watch?feature=player_detailpage&v=ERDUbAv8Qz0#t=44s</a>\r<br />\n<br />\nTypeScript cannot &quot;correct JavaScript's flaws&quot; while maintaining its aim of being a strict superset of JavaScript (and ECMAScript 6), and that aim is surely fundamental to any chance of success TypeScript may have in the world.<br />\n",
    "PostedDate": "2013-03-25T10:48:08.863-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020845",
    "ThreadId": "437633",
    "Html": "nabob\r<br />\n<br />\nI did not know about the ability to bind a different context to a function.\r<br />\nIt does resolve the issue.\r<br />\n<br />\nWould it not be preferable for the library to pass its return object explicitly as a parameter of the function, in full view, rather than altering the context of the this keyword? The variable function scope will prevent typescript from doing any type checking on the scope and leave opened the possibility for run time bugs, in part defeating one of typescript purposes. \r<br />\n<br />\nAnyway thanks for your help. The solution is very clean.\r<br />\n<br />\nmarkrendle\r<br />\n<br />\nThanks for the you tube laugh. I am not looking for the moon, just for a development platform that makes HTML/CSS/JavaScript development productive, safe and easy. That will not happen with typescript if the language remains a superset of JavaScript. There would be nothing magical in making typescript able to check strict JavaScript in some modules, classes or blocks marked as strict and provide what is the real magic, a language that benefits from 20 some years spent perfecting modern languages from Pascal to Delphi and c# while remaining CLOSE to JavaScript. It could still be used only for type checking and inference and code structuring with modules and classes by making all modules STRICT or users could benefit from a more advanced development experience where they do not need JavaScript compatibility.\r<br />\n<br />\nIt would still produce pure JavaScript.\r<br />\n<br />\nI'll concede that it may well not make typescript successful with JavaScript programmers, but is that Microsoft's only target?\r<br />\n<br />\nPhilippe<br />\n",
    "PostedDate": "2013-03-25T12:54:46.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020869",
    "ThreadId": "437633",
    "Html": "<strong>nabog wrote:</strong><br />\n<blockquote>\nThe idea is to bind the context to the callback before passing it to the wiget.<br />\n</blockquote>\nAlternatively you could pass the context to the method and then function.apply() it. I do this quite a lot as it allows me to avoid using bind in a method call, avoids un-necessary anonymous function creation and allows me to swap the context to whatever I need at the time.\r<br />\n<br />\nOr alternatively you don't use callbacks at all but some other method like events or signals. It would be cleaner if Foo was listening for a custom &quot;count me!&quot; event which Widget dispatched, or listened for a Signal directly from Widget.\r<br />\n<br />\nIt becomes harder when you have to integrate with 3rd party libraries outside of your remit of course, but if you've complete control over the flow then there is no reason why you can't design something more elegant from the get-go.<br />\n",
    "PostedDate": "2013-03-25T13:34:38.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020919",
    "ThreadId": "437633",
    "Html": "I've been wrapping callbacks in lambdas to get around the this-binding issue, e.g.:<br />\n<pre><code>class Foo {\n    public myCounter: number = 0;\n    public onClick(){\n        this.myCounter++;\n    }\n} \n\nclass WijmoWidget{\n    public bar(baz: () =&gt; void){\n        baz();\n    }\n}\n\nvar foo = new Foo();\nvar widget = new WijmoWidget();\n\nwidget.bar(() =&gt; {\n    foo.onClick();\n});\n\nconsole.log(foo.myCounter); // 1</code></pre>\n\nIt works, but is there any reason to prefer the '.bind(foo)' method (other than the marginal gain in brevity)?<br />\n",
    "PostedDate": "2013-03-25T15:42:43.39-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1021131",
    "ThreadId": "437633",
    "Html": "@dbbrown,\r<br />\n<br />\nBrevity is actually not a factor because the callback wrapper can be abbreviated to<br />\n<pre><code>var foo = new Foo();\nvar widget = new WijmoWidget();\n\nwidget.bar(() =&gt; foo.onClick());</code></pre>\n\nThe callback wrapper is also <a href=\"http://jsperf.com/function-bind-vs-callback-wrapper\" rel=\"nofollow\">faster than bind</a>.\r<br />\n<br />\nHowever, the callback wrapper creates a closer coupling between the Widget and the client, for example, when the widget is generating data that needs to be passed into the callback, then we must write:<br />\n<pre><code>class Foo {\n    public myCounter: number = 0;\n    public fooVal:string;\n    public onClick(one:string, two:string, three:number){\n        this.myCounter++;\n        // Do something with parameters\n    }\n} \nclass WijmoWidget{\n    public bar(baz: (one:string, two:string, three:number) =&gt; void){\n        baz(&quot;one&quot;, &quot;two&quot;, 3);\n    }\n}\n\nvar foo = new Foo();\nvar widget = new WijmoWidget();\n\nwidget.bar((one:string, two:string, three:number) =&gt; foo.onClick(one, two, three));</code></pre>\n\nWhereas with bind one may simply write:<br />\n<pre><code>widget.bar(foo.onClick.bind(foo));</code></pre>\n\nand still be able to change both the client and the Widget without breaking the binding. <br />\n",
    "PostedDate": "2013-03-26T03:00:31.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]