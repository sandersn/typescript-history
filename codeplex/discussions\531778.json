[
  {
    "Id": "1208081",
    "ThreadId": "531778",
    "Html": "I did some changes in TypeScript.Emitter class to emit code in a ExtJS class style. <br />\n<br />\n<br />\n<img src=\"https://raw2.github.com/fabioparra/TypeScriptExtJSEmitter/master/TypeScriptExtJSEmitter/images/screenshot.jpg\" alt=\"Image\" /><br />\n<br />\ndemo:<br />\n<a href=\"https://rawgithub.com/fabioparra/TypeScriptExtJSEmitter/master/TypeScriptExtJSEmitter/index.html\" rel=\"nofollow\">https://rawgithub.com/fabioparra/TypeScriptExtJSEmitter/master/TypeScriptExtJSEmitter/index.html</a><br />\n<br />\nProjects:<br />\n<br />\n<a href=\"https://github.com/fabioparra/TypeScriptExtJSEmitter\" rel=\"nofollow\">https://github.com/fabioparra/TypeScriptExtJSEmitter</a><br />\n<br />\n<a href=\"https://typescript.codeplex.com/SourceControl/network/forks/fabioparra/ExtJSEmitter\" rel=\"nofollow\">https://typescript.codeplex.com/SourceControl/network/forks/fabioparra/ExtJSEmitter</a><br />\n",
    "PostedDate": "2014-02-13T12:13:14-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1208493",
    "ThreadId": "531778",
    "Html": "I'd also be very interested in this. In fact, it seems like the best option would be if the compiler would allow us to specify a custom emitter to use instead of the default one. This way, people could override parts of the emitter logic and alter the generated code. A built-in way to alter the generated output would have a lot of flexibility, and I don't think it would be difficult to allow this?<br />\n",
    "PostedDate": "2014-02-14T10:07:31.127-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1273617",
    "ThreadId": "531778",
    "Html": "Hi I also created a custom compiler for ExtJS. I'm going to be using it on several projects, and so I'll try to keep it more up to date. Also it infers more of the ExtJs conventions and thus helps out more with intelisense when writing code. For example you can tell the compiler to infer a configuration interface that you can use to pass to the constructor, and then you get help when calling the constructor. Since the typescript language service can be changed for visual studio by changing the typescriptServices.js the changes are available right from Visual Studio.\r<br />\n<br />\n<a href=\"https://typescript4extjs.codeplex.com/\" rel=\"nofollow\">https://typescript4extjs.codeplex.com/</a><br />\n",
    "PostedDate": "2014-07-17T09:23:04.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]