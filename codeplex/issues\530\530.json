{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "The problem is this line:\nvar b = new b.Foo();\n\nRecall that variable declarations in JavaScript are hoisted. Therefore, the 'b' symbol in the \"new b.Foo()\" expression refers to the local variable 'b', not the module 'b'. If you change the name of the variable from 'b' to 'c', you get the expected behavior.",
    "ClosedDate": "2012-12-06T12:06:01.81-08:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "(Version: 0.8.1)\r\n\r\nThe code below can be compiled without any errors even though the class b.Foo is not exported. An error happens when executing it. Is this behavior correct?\r\n\r\nmodule b {\r\n    class Foo {\r\n        public foo() {\r\n            console.log('B foo');\r\n        }\r\n    }\r\n}\r\n\r\nmodule a {\r\n    export class Foo {\r\n        public foo() {\r\n            var b = new b.Foo();\r\n            b.foo();\r\n        }\r\n    }\r\n}\r\n\r\nvar aFoo = new a.Foo();\r\naFoo.foo();\r\n",
    "LastUpdatedDate": "2013-08-13T09:47:11.273-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-12-05T07:44:02.54-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "An class which is not exported can be externally referred.",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 530
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I pasted this into the playground and it doesn't work. I can't seem to step through the code in Chrome, but it appears `b` is undefined.",
      "PostedDate": "2012-12-06T09:16:41.347-08:00",
      "Id": 83699
    },
    {
      "Message": "> Recall that variable declarations in JavaScript are hoisted. Therefore, the 'b' symbol in the \"new b.Foo()\" expression refers to the local variable 'b', not the module 'b'. If you change the name of the variable from 'b' to 'c', you get the expected behavior.\n\nI got it.  Just a little mistake.  Thank you so much.",
      "PostedDate": "2012-12-09T07:21:23.653-08:00",
      "Id": 83838
    }
  ]
}