{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex issues and suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some issues and feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:20:16.91-07:00",
    "CommentCount": 9,
    "Custom": null,
    "Description": "JavaScript recommends underscore for private members. Most of TypeScript code in this project adheres to that, but some don't follow the convention.\r\n\r\nSample recent commits with that problem:\r\n\r\nhttp://typescript.codeplex.com/SourceControl/changeset/ba415eef362dc0d66dac4c37850660195c23cfc9\r\nhttp://typescript.codeplex.com/SourceControl/changeset/0427b604b0c129038f4f3a8acfa15b2bd854acd9\r\nhttps://typescript.codeplex.com/SourceControl/changeset/a2d918c07a36b95b93e1400e704439c48867f45e\r\n\r\n(the code in that area was particularly inconsistent even before these commits)\r\n\r\nHaving no underscores complicates reading code, debugging and using the API from both TypeScript and JavaScript.",
    "LastUpdatedDate": "2017-11-27T11:51:35.523-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-05-13T00:41:10.277-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "No underscore on private methods/properties",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 2501
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I don't really agree with the statement \"JavaScript recommends underscore for private members\".\n\nI'd be very interested to know who this \"JavaScript\" is that made this recommendation!",
      "PostedDate": "2014-05-13T10:32:04.69-07:00",
      "Id": 146451
    },
    {
      "Message": "All will be rvalued.\n\nhttp://lmgtfy.com/?q=javascript+underscore+private+methods+naming+convention",
      "PostedDate": "2014-05-13T11:12:21.883-07:00",
      "Id": 146460
    },
    {
      "Message": "Hilarious. But it is a subjective view nevertheless, a view with which I don't agree. IMO the claim that \"JavaScript recommends underscore for private members\" is rather misleading, when the only evidence provided is that some people believe that it is a useful convention.\n",
      "PostedDate": "2014-05-13T12:28:15.457-07:00",
      "Id": 146472
    },
    {
      "Message": "Absolutely. As with most conventions there are points for and against. But it's very hard to justify following a convention for one property and arbitrarily ignoring it for another.",
      "PostedDate": "2014-05-13T14:49:00.703-07:00",
      "Id": 146493
    },
    {
      "Message": "```\nclass Madness {\n    private x; // TS private only; JS only users understand this as public! \n    y; // TS public - and JS users see this as public. \n\t_x; // public to all; but read only?\n\t__x; // public to all, but understood to be totally hands off!?\n\t__x__; // Hidden native properties (__proto__); private?\n\t___x; // what!?\n\t____x; // OMG!\n\t_$_$_$x; // MADNESS!\n\t_ = 1; // Underscore.JS\n\t__ = 2; // read only reference to Underscore.JS?\n\t___ = 3; // private reference to Underscore.JS? o_O\n\t_____ = 5; // hidden property reference to Underscore.JS? o_O\n}\n\n```\n;)",
      "PostedDate": "2014-05-13T15:56:34.12-07:00",
      "Id": 146501
    },
    {
      "Message": "Generally this isn't too much of an issue since we're relying on actual compiler verification of privates to be used correctly and not naming conventions. That said, it's true that there's value in being consistent in the naming scheme.",
      "PostedDate": "2014-05-13T19:28:39.82-07:00",
      "Id": 146516
    },
    {
      "Message": "It's not just common sense theoretical benefit. On the practical side having a decoration for privates helps a lot during debugging.\n\nModern browsers have awesome debuggers, and TS compiler/services codebase is generally quite approachable in step-by-step debugging, monitoring values and so on.\n\nBut naturally 'private' is ignored by browser debuggers, so having a decoration is a good clue to tell internal state from public API. It's particularly useful because there's neither docs nor even blogs/articles on TS compiler/services design. All you rely on is clues, which better be consistent :-)",
      "PostedDate": "2014-05-13T23:38:15.743-07:00",
      "Id": 146538
    },
    {
      "Message": "> JavaScript recommends underscore for private members.\nNo that is a style guideline you may have,but nowhere is javascript spec it is told that developpers should use \"hungarian notation\" to differentiate public/private methods. Dont push your style guidelines on others,that's bascially what you are asking.",
      "PostedDate": "2014-05-19T02:28:38.49-07:00",
      "Id": 147023
    },
    {
      "Message": "I am asking for following a consistent style. That is professional courtesy one expects as a baseline.\n\nUsing underscore for one field, then no underscore for another in the same class, nevermind same project â€” that is just plain madness.",
      "PostedDate": "2014-05-19T03:04:24.93-07:00",
      "Id": 147025
    }
  ]
}