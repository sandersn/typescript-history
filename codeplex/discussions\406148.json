[
  {
    "Id": "953601",
    "ThreadId": "406148",
    "Html": "\r\n<p>I expected this contrived example to output &quot;test executed!&quot; and it does not:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>module UI {\n\n    <span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> AbstractCommand {\n\n        <span style=\"color:blue\">private</span> _isEnabled = <span style=\"color:blue\">true</span>;\n\n        constructor (<span style=\"color:blue\">public</span> name: string) {\n        }\n\n        <span style=\"color:blue\">public</span> get isEnabled(): bool {\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._isEnabled;\n        }\n\n        <span style=\"color:blue\">public</span> set isEnabled(value: bool) {\n            <span style=\"color:blue\">this</span>._isEnabled = value;\n        }\n\n        <span style=\"color:blue\">public</span> get canExecute(): bool {\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.isEnabled;\n        }\n\n        <span style=\"color:blue\">public</span> execute() {\n<span style=\"color:green\">            </span><span style=\"color:green\">// abstract</span>\n        }\n\t\t\n<span style=\"color:blue\">        </span><span style=\"color:blue\">public</span> trigger() {\n<span style=\"color:blue\">            </span><span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.canExecute) {\n<span style=\"color:blue\">                </span><span style=\"color:blue\">this</span>.execute();\n            }\n        }\n\n    }\n\n    <span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> TestCommand <span style=\"color:blue\">extends</span> AbstractCommand {\n\n        constructor () {\n<span style=\"color:blue\">            </span><span style=\"color:blue\">super</span>(<span style=\"color:#a31515\">&quot;test&quot;</span>);\n        }\n\t\t\n        <span style=\"color:blue\">public</span> get canExecute(): bool {\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">super</span>.canExecute;\n        }\n\n        <span style=\"color:blue\">public</span> execute() {\n            alert(<span style=\"color:blue\">this</span>.name &#43; <span style=\"color:#a31515\">&quot; executed!&quot;</span>);\n        }\n\n    }\n\n}\n\n<span style=\"color:blue\">var</span> command = <span style=\"color:blue\">new</span> UI.TestCommand();\ncommand.trigger();\n</pre>\r\n</div>\r\n<p>In the debugger, super.canExecute is undefined. What am I doing wrong? It works if I command out the overridden canExecute property in TestCommand or change it to return true.</p>\r\n<p>It also works if I change canExecute to be a method instead of a property.&nbsp;So, is using super with ES5 properties busted in TypeScript?</p>\r\n",
    "PostedDate": "2012-12-09T11:29:54.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]