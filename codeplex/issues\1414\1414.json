{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:09.783-07:00",
    "CommentCount": 6,
    "Custom": null,
    "Description": "Perhap it is possible to manage variables on reference tag, and specify it on compiler options.\r\nFiles like this for exemple:\r\n```\r\n/// <reference path=\"{pathProjectA}/Foo.ts\" />\r\n/// <reference path=\"{pathProjectB}/Bar.ts\" />\r\n```\r\n\r\nwith compiler like this:\r\n```\r\ntsc ... --var pathProjectA=... pathProjectB=...\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Medium",
      "Severity": 100,
      "Id": 2
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-08-01T07:57:34.947-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Absolute root path for reference / import",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 25,
    "Id": 1414
  },
  "FileAttachments": [
    {
      "FileId": 761304,
      "FileName": "TypeScript src path.png",
      "DownloadUrl": ".\\761304"
    }
  ],
  "Comments": [
    {
      "Message": "This looks like essential for larger projects separated into multiple repos and having peer dependencies.\n\nFor example:\nLib A depends on B and C\n\nProj D depends on A and C\n\n\nCompiling Lib A independently (for unit testing) means referencing B and C relative to A path.\nWhen compiling Lib D the package manager will download A, B and C to some \"libs\" folder and relative paths from A to C will be different.\n\nIt would be much easier if the paths were configurable.\nLike in require.js where I can specify paths for all prefixes:\n\"libA\": \"../components/lib-a\"\n\"libB\": \"../components/lib-b\"\n\netc",
      "PostedDate": "2013-10-30T04:41:45.217-07:00",
      "Id": 120171
    },
    {
      "Message": "In Eclipse/Java, a project usually has one or several java src folder(s) specified in its \".project\" file. The specified folder(s) are root folders, references specified in java file are relative to these root folders.   \r\n\r\nI think such approach may apply to Visual Studio project as well. Attached is a reference screen shot of eclipse java project. ",
      "PostedDate": "2013-11-21T18:19:58.583-08:00",
      "Id": 123825
    },
    {
      "Message": "Or maybe something like this:\n\n    /// <reference path=\"//Foo.ts\" />\n    /// <reference path=\"//Bar.ts\" />\n\nand\n\n    import SomeClass = require('//Some/NameSpace/SomeClass');\n\nwhere `//` would be taken to mean the project root.",
      "PostedDate": "2014-04-23T00:51:25.727-07:00",
      "Id": 142721
    },
    {
      "Message": "+1 for this. I have a case with a subproject where I have to import external modules.\n\nProject structure:\n\n````\nmainproject/\n    src/\n        components/\n            subproject/... (same structure)\n        ts/\n            main.ts\n        js/\n        typings/\n````\n\nIt gets very tedious doing this (names changed to protect the innocent modules):\n\n```\nmain.ts:\n\nimport module1 = require('../components/subproject/src/ts/module1');\nimport module2 = require('../components/subproject/src/ts/module2');\nimport module3 = require('../components/subproject/src/ts/submodule/module3');\nimport module4 = require('../components/subproject/src/ts/submodule/module4');\n```\n\nIt would be great if I could set a path for the subproject like:\n\n````\n$ tsc --path subproject:../components/subproject/src/ts\n````\n\nand then do this in the main project:\n\n````\nimport module1 = require('subproject:module1');\nimport module2 = require('subproject:module2');\nimport module3 = require('subproject:submodule/module3');\nimport module4 = require('subproject:submodule/module4');\n````",
      "PostedDate": "2014-06-06T06:16:45.14-07:00",
      "Id": 149050
    },
    {
      "Message": "I'm trying to migrate a project previously using absolute paths right now and this feature would is essential. A lot of our build is already configured to use absolute paths and converting it all to relative would be tedious.",
      "PostedDate": "2014-06-08T04:35:16.7-07:00",
      "Id": 149163
    },
    {
      "Message": "If it's not going to be added soon, is anyone up for modifying the ts compiler to support this? I'm thinking of doing that, it doesn't seem to be big work, just a small preprocessor step.",
      "PostedDate": "2014-06-12T02:57:51.027-07:00",
      "Id": 149472
    }
  ]
}