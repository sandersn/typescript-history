{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "We follow ES6 here for the precedence of the lambda expression, compared to function expressions.\n\ne.g consider the following confusing examples if we (and the ES6 design) would allow the last sample:\n\n````\n()=> foo ()\n\n() => () => { foo }()\n```` ",
    "ClosedDate": "2014-02-13T12:46:56.663-08:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "In JavaScript, you can create an immediately-invoked function expression in two ways:\r\n\r\n1. The JSLint-preferred method\r\n```\r\n(function () {\r\n    // Code here\r\n}());\r\n```\r\n\r\n2. The \"Dog balls\" method (naming courtesy Douglas Crockford)\r\n```\r\n(function () {\r\n    // Code here\r\n})();\r\n```\r\n\r\nIn TypeScript, you can do:\r\n\r\n```\r\n(() => {\r\n    // Code here...\r\n})();\r\n```\r\n\r\nBut you cannot do:\r\n\r\n```\r\n(() => {\r\n    // Code here\r\n}());\r\n```\r\n\r\nIs there a reason for this, or is it a bug?",
    "LastUpdatedDate": "2014-03-31T16:05:10.147-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-02-13T09:13:46.543-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "By Design"
    },
    "Summary": "Lambda functions don't play well as immediately-invoked function expressions",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 2178
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Wouldn't the confusion be eliminated if the invocation only happened on lambda statements that used curly braces?",
      "PostedDate": "2014-02-16T11:28:51.313-08:00",
      "Id": 133720
    },
    {
      "Message": "Parser rules can't really be conditional like that",
      "PostedDate": "2014-03-31T16:05:10.147-07:00",
      "Id": 140109
    }
  ]
}