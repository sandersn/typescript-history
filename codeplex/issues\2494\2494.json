{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:09.97-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Presently, using amd or requirejs style modules changes the meaning of file scope to no longer be global scope, but internal to a module. This complicates single file projects, forcing definitions to be split into a separate file:\r\n\r\n    module 'foo' { ... } // // error TS2195: Ambient external module declaration must be defined in global context. \r\n    import foo = require('foo'); \r\n\r\nI propose two new extensions to fix this design oversight, and suggest deprecating top-level imports:\r\n\r\n1) explicit external module definitions\r\n\r\nin an amd compiled typescript file, an external module definition shall compile into the appropriate define call with an explicit module name:\r\n\r\n    // .ts\r\n    module 'main' { import foo = require('foo'); ... }\r\n    // produces .js\r\n    define('main', ['require', 'exports', 'foo'], function(require, exports, foo) { ... });\r\n\r\n2) one explicit anonymous external module definition per file\r\n\r\nThis behavior subsumes the old top-level imports behavior. It has the non-effect of file-scope *remaining* a global scope, which is less surprising for users than the current behavior where file-scope is difficult to predict.\r\n\r\n    // .ts\r\n    module { import foo = require('foo'); ... }\r\n    // produces .js\r\n    define(['require', 'exports', 'foo'], function(require, exports, foo) { ... });\r\n\r\nThis critically allows the user both ambient definitions in the same file, as well as appropriately mixing module and non-module definitions in the same file:\r\n\r\n    module { \r\n      import foo = require('foo'); \r\n      ... /* definitions relying on foo */\r\n    }\r\n    ... /* definitions not relying on foo, which should be global -- e.g. document event handlers */",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-05-08T10:03:11.927-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Support non-toplevel external module definitions",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 3,
    "Id": 2494
  },
  "FileAttachments": [],
  "Comments": []
}