{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This is by design. I'd recommend the Language Spec forum if you want to go in to more details on this. Thanks!",
    "ClosedDate": "2013-01-04T09:30:36.453-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Here is an example:\r\n\r\nhttp://gist.github.com/4449351\r\n\r\nBasically, the type system as defined in the manual for version 0.8 and implemented in 0.8 series of tsc is not sound. The gist above is just one example of the problem - the subtyping relation allows the following inference:\r\n\r\nA :> B\r\n-----------------------------\r\n(A -> void) :> (B -> void)\r\n\r\nThis is to say the type system is not much of a guarantee.\r\n\r\nI believe this a red-flag language design problem. There are languages out there with sound structural typing for objects, say OCaml. It might be complicated but it should be possible to have a sound type system. If type-unsafe operations are desired, I would prefer them to be explicit - as in F# we are aware that downcasts may fail with runtime errors, but by sticking to the core safe features we expect compiling programs to be free from runtime typing errors.\r\n",
    "LastUpdatedDate": "2013-01-04T09:30:36.453-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-01-03T18:20:19.103-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Subtyping is not sound in 0.8",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 595
  },
  "FileAttachments": [],
  "Comments": []
}