{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:26.893-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Such a construct - the most elegant way to add custom members to \"standard\" objects, an obvious thing in Javascript, useful for data encapsulation:\r\n\r\n```\r\nclass X { };\r\n\r\ninterface D<T extends X> extends T {\r\n    a: any;\r\n};\r\n\r\n// use case:\r\nvar x: D<StandardApiClass> = new StandardApiClass();\r\nx.a = \"custom data\";\r\n```\r\ndoes not work in Typescript. The part saying \"T extends X\" explicitly marks T as a class or interface, yet the compiler complains that an interface can only extend another interface or class. Am I doing something wrong or it's a bug?",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-04-06T04:40:05.433-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Generic decorators",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 2390
  },
  "FileAttachments": [],
  "Comments": []
}