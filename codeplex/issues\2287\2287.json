{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:11.003-07:00",
    "CommentCount": 2,
    "Custom": null,
    "Description": "I can't find a way to refer to the global namespace in type annotations.\r\n\r\n```\r\nclass C {\r\n\tm: number;\r\n}\r\n\r\nmodule M {\r\n\tclass C {\r\n\t\tn: number;\r\n\t\to: C; // Outer C?\r\n\t}\r\n\t\r\n\tvar c = new C();\r\n\tc.o.m;\r\n}\r\n```\r\n\r\nA workaround is to use an interface that extends from C, ... but it feels like a hack:\r\n\r\n```\r\nclass C {\r\n\tm: number;\r\n}\r\n\r\ninterface X extends C {}\r\n\r\nmodule M.N {\r\n\tclass C {\r\n\t\tn: number;\r\n\t\to: X; // Outer C?\r\n\t}\r\n\t\r\n\tvar c = new C();\r\n\tc.o.m;\r\n}\r\n```",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2014-03-09T23:08:38.397-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Need a way to refer to the Global Namespace.",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 4,
    "Id": 2287
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Definitely would be nice to have",
      "PostedDate": "2014-03-10T09:51:09.107-07:00",
      "Id": 136410
    },
    {
      "Message": "Also, names should by default be taken from the closest module scope. \n\ne.g. If I create:\n\n    module A { export Interface 'MouseEvent' ...\n\nThen functions which are in module A (or submodules of A) should use that interface ahead of the global 'MouseEvent' type. At the moment, you cannot shadow a global type and presumably this is because then there would be no way to reference the global type. Hence we need a way to reference the global namespace!",
      "PostedDate": "2014-03-13T08:01:42.693-07:00",
      "Id": 136748
    }
  ]
}