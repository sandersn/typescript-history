[
  {
    "Id": "929038",
    "ThreadId": "399972",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I am trying to use the --out option with the typescript compiler so that I can get just one output file with all the dependent files concatenated. Unfortunately, it does not seem to work. Firstly, according to the documentation:</p>\r\n<pre>Syntax:   tsc [options] [file ..]\n\nExamples: tsc hello.ts\n          tsc --out foo.js foo.ts\n          tsc @args.txt</pre>\r\n<p>I should be able to use it like: tsc --out foo.js foo.ts, but doing that gives the following error: module emit collides with emitted script:&nbsp;</p>\r\n<p>So you cannot use the same filename for output as input. Now, I have two files: animal.ts and fox.ts:</p>\r\n<p>animal.ts</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">export</span> <span style=\"color:blue\">class</span> Animal{\n  legs : number;\n  color : string;\n  process(){\n    console.log(<span style=\"color:#a31515\">&quot;Processing an animal...&quot;</span>)\n  }\n}</pre>\r\n</div>\r\n<p>and fox.ts</p>\r\n<pre>import AnimalModule = module(&quot;./animal&quot;);\n\nexport class Fox extends AnimalModule.Animal {\n  legs = 4;\n  bar : string;\n  process(){\n    console.log(&quot;Processing Fox&quot;);\n  }\n}</pre>\r\n<p>Now if I run tsc --out result.js fox.ts I get the following in result.js:</p>\r\n<pre>var __extends = this.__extends || function (d, b) {\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n}</pre>\r\n<p>whereas fox.js and animal.js have been generated correctly (although I would expect no other outputs than result.js):</p>\r\n<p>fox.js:</p>\r\n<pre>var AnimalModule = require(&quot;./animal&quot;)\nvar Fox = (function (_super) {\n    __extends(Fox, _super);\n    function Fox() {\n        _super.apply(this, arguments);\n\n        this.legs = 4;\n    }\n    Fox.prototype.process = function () {\n        console.log(&quot;Processing Fox&quot;);\n    };\n    return Fox;\n})(AnimalModule.Animal);\nexports.Fox = Fox;\n</pre>\r\n<p>animal.js:</p>\r\n<pre>var Animal = (function () {\n    function Animal() { }\n    Animal.prototype.process = function () {\n        console.log(&quot;Processing an animal...&quot;);\n    };\n    return Animal;\n})();\nexports.Animal = Animal;</pre>\r\n<p>So what is going in?</p>\r\n<p>Thanks in advance,</p>\r\n<p>Manuel Astudillo.</p>\r\n",
    "PostedDate": "2012-10-18T14:22:28.523-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "929039",
    "ThreadId": "399972",
    "Html": "<p>I forgot to mention that I am using this with node js version 0.6.20 and typescript version 0.8.0</p>",
    "PostedDate": "2012-10-18T14:23:37.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "929512",
    "ThreadId": "399972",
    "Html": "This discussion has been copied to a work item. Click <a href=\"http://typescript.codeplex.com/workitem/294\">here</a> to go to the work item and continue the discussion.",
    "PostedDate": "2012-10-19T09:43:12.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "929577",
    "ThreadId": "399972",
    "Html": "\r\n<p>...</p>\r\n",
    "PostedDate": "2012-10-19T12:18:04.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "929665",
    "ThreadId": "399972",
    "Html": "<p>I moved this over to the issue tracker to get feedback there whether or not this was expected (and if it's a bug, to help get it fixed).&nbsp; Hope that helps.</p>",
    "PostedDate": "2012-10-19T16:29:57.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]