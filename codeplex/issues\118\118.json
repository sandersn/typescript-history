{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:17:22.377-07:00",
    "CommentCount": 12,
    "Custom": null,
    "Description": "Two of the nice \"syntax sugar\" features that CoffeeScript presents over vanilla JavaScript relate to working with nulls.\r\n\r\nThe \"?\" operator coalesces nulls into the right hand side of the operator (similar to C#'s \"??\" operator). Example:\r\n\r\n```TypeScript\r\nvar a = null;\r\n\r\nvar b = a ?? 5;\r\n\r\n//b is now 5\r\n```\r\n\r\n The \"?.\" is used for chains of property access. If any of the properties along the chain is null or undefined, undefined is returned. Example:\r\n\r\n \r\n```TypeScript\r\nvar a = {\r\n  b: {\r\n    c: 5\r\n  }\r\n};\r\na.b = null;\r\n\r\nvar d = a?.b?.c ;\r\n\r\n//d is now undefined rather than having thrown an exception.\r\n``` \r\n\r\nI think it would be great for TypeScript to support both types of operators. They are just syntax sugar, but are still very useful and make very common boilerplate code much more concise. They also complement the ternary operator really nicely. \r\n\r\n\r\n(By the way, when is C# going to get the \".?\" operator already???)",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "TypeScript 2.x",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "typescript",
    "ReportedDate": "2012-10-05T11:27:52.77-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Null syntax sugar",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 61,
    "Id": 118
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I agree with the ?. null property operator, but does TypeScript need the ?? operator? The || operator almost does the same thing, except it's like a falsy value coalescing operator, rather than a null coalescing operator.",
      "PostedDate": "2012-10-05T13:15:52.663-07:00",
      "Id": 78730
    },
    {
      "Message": "Also, JS lacks ||= and &&= operators.",
      "PostedDate": "2012-10-10T02:12:34.437-07:00",
      "Id": 79278
    },
    {
      "Message": "@peterolson The issue with using || is that it treats the integer value of 0 as false. \n\nTo clarify, I think \"??\" and \".?\" operators should take into account both null and undefined, but not other \"falsey\" values.",
      "PostedDate": "2012-10-11T07:40:52.577-07:00",
      "Id": 79474
    },
    {
      "Message": "Please Implement the ? operator as here:\nhttp://mrhaki.blogspot.ro/2009/08/groovy-goodness-safe-navigation-to.html\nIt was originally asked here, although the question is not correct\nhttp://stackoverflow.com/questions/15260732/does-typescript-support-the-operator-and-whats-it-called",
      "PostedDate": "2013-03-15T07:02:50.61-07:00",
      "Id": 93367
    },
    {
      "Message": "yes, that would be very helpful and should be very easy to add. \nI think ?? is more expressive then ||, as true as peterolson is. And, It would also match C#.",
      "PostedDate": "2013-03-30T17:30:11.967-07:00",
      "Id": 95379
    },
    {
      "Message": "Please consider adding this sooner than 2.0. This is something that is so trivially easy to add in, yet provides such huge benefits. The difference between \"?.\" and having to write out null checks (especially for property chains) is so vast that this should really be a no-brainer. I work with Ruby, Groovy and CoffeeScript, and the null safety/soak and elvis operator are absolutely ubiquitous. Please don't push this off for months/years to a 2.0 release!",
      "PostedDate": "2013-05-24T07:48:36.243-07:00",
      "Id": 101091
    },
    {
      "Message": "Let's not make yet another flavor of CoffeeScript by copying its syntactic sugar (e.g. @instanceVar and optionalVar?). Keep TypeScript closely aligned with the ES6 spec. That's the value.",
      "PostedDate": "2013-06-28T11:33:42.723-07:00",
      "Id": 104558
    },
    {
      "Message": "```\nfunction runme() {\n    var a = (typeof(b) != 'undefined') ? b || 'Hello World' : (typeof(c) != 'undefined')) ? c || 'Hello World' : 'Hellow World';\n    return a;\n}\nalert(runme());\n```\n\nit would cut down on the PureJS method. \nCan you create/define/prototype operators?",
      "PostedDate": "2013-06-28T12:27:30.96-07:00",
      "Id": 104567
    },
    {
      "Message": "If these simple and insanely useful null-safety operators AREN'T in the ES6 spec, then the people putting together the ES6 spec should be hanging their heads in shame. This is such a simple and obvious thing that to not incorporate it would frankly be insane.\n\nThat said, I realize this would be a deviation from the current spec (if the current spec is so short-sighted as to omit this). But it's so ridiculously useful that I think this single deviation would be justified.\n\n ",
      "PostedDate": "2013-07-15T12:23:41.78-07:00",
      "Id": 106085
    },
    {
      "Message": "One more null-related operator that would save a ton of boilerplate code, the `?=` operator.\n\nThis would allow something concise like this:\n\n``` TypeScript\nfunction foo(bar: string) {\n    bar ?= '';\n}\n```\n\ncompiling to:\n\n``` JavaScript\nfunction foo(bar: string) {\n    if(bar === null || typeof bar === 'undefined')\n        bar = '';\n}\n```\n\nEven with optional parameters, you often find yourself writing this kind of boilerplate all the time. It's especially painful in JavaScript, as you have to check for both `null` and `undefined` rather than just `null` as in other languages.",
      "PostedDate": "2013-09-11T09:23:13.963-07:00",
      "Id": 113186
    },
    {
      "Message": "In JS, you don't have to compare with both null and undefined. ```bar == null``` is enough.\n\nSee http://marijnhaverbeke.nl/blog/null-and-undefined.html",
      "PostedDate": "2013-10-11T01:27:03.35-07:00",
      "Id": 118120
    },
    {
      "Message": "Moved to : https://github.com/Microsoft/TypeScript/issues/16",
      "PostedDate": "2015-02-11T20:26:31.623-08:00",
      "Id": 174454
    }
  ]
}