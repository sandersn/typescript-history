[
  {
    "Id": "928988",
    "ThreadId": "399963",
    "Html": "\r\n<p>Look at this example:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">/// &lt;reference path=&quot;lib.d.ts&quot;/&gt; </span>\r\n\r\n<span style=\"color:blue\">var</span> cvElem: HTMLCanvasElement;\r\n\r\n<span style=\"color:green\">// This line throws an error because</span>\r\n<span style=\"color:green\">// document.createElement()'s specified return type is Element</span>\r\ncvElem = document.createElement(<span style=\"color:#a31515\">&quot;canvas&quot;</span>);\r\n</pre>\r\n</div>\r\n<p>In this case, <em>document.createElement()</em> is really returning a <em>HTMLCanvasElement</em> object.</p>\r\n<p>Because the compiler cannot know that, it will throw an error!<br>\r\nSo here's my suggestion/idea for solving that problem:</p>\r\n<p>Implement a special syntax for type casting/disabling compiler errors where the compiler would think you're using incompatible types. I'd go for something like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// C style</span>\r\ncvElem = (HTMLCanvasElement) document.createElement(<span style=\"color:#a31515\">&quot;canvas&quot;</span>);\r\n\r\n<span style=\"color:green\">// C&#43;&#43; style</span>\r\ncvElem = explicit_cast&lt;document.createElement(<span style=\"color:#a31515\">&quot;canvas&quot;</span>)&gt;;\r\n\r\n<span style=\"color:green\">// Just an idea spreading off my mind...</span>\r\n<span style=\"color:green\">// Note the exclamation mark at the end!</span>\r\ncvElem = document.createElement(<span style=\"color:#a31515\">&quot;canvas&quot;</span>)!;\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2012-10-18T13:01:47.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "929000",
    "ThreadId": "399963",
    "Html": "<p>\r\n<pre><div style=\"color: black; background-color: white;\"><pre><span style=\"color: green;\">/// &lt;reference path=\"lib.d.ts\"/&gt; </span>\r\n\r\n<span style=\"color: blue;\">var</span> cvElem: HTMLCanvasElement;\r\n\r\n<span style=\"color: green;\">// This line throws an error because</span>\r\n<span style=\"color: green;\">// document.createElement()'s specified return type is Element</span>\r\ncvElem = &lt;HTMLCanvasElement&gt;document.createElement(<span style=\"color: #a31515;\">\"canvas\"</span>);\r\n</pre>\r\n</div>\r\n<br /></pre>\r\nTry that</p>",
    "PostedDate": "2012-10-18T13:18:28.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "929470",
    "ThreadId": "399963",
    "Html": "<p>Like jmelgaard suggests, there are two different common ways of handling this.&nbsp; In your case, you want to go from a type that is less specific (Element) to one that is more specific (HTMLCanvasElement).&nbsp; In TypeScript, the way to generally do this is to use the type annotation \"var x = &lt;type&gt;expression\"&nbsp;instead of&nbsp;\"var x: type\".</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">var</span> cvElem = &lt;HTMLCanvasElement&gt;document.createElement(<span style=\"color: #a31515;\">\"canvas\"</span>);\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-19T08:52:22.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "930080",
    "ThreadId": "399963",
    "Html": "<p>Excellent, thanks for your solutions and explanation (@jonturner)!</p>",
    "PostedDate": "2012-10-21T11:21:05.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]