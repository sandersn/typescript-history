[
  {
    "Id": "935084",
    "ThreadId": "401505",
    "Html": "\r\n<p>Any plans to add support for class events, like C# for example?</p>\r\n<p>&nbsp;</p>\r\n<p>Ex:</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Field   { \r\n\r\n      event change(instance: Field, newValue : string, oldValue:string) ;\r\n\r\n}\r\n\r\n<span style=\"color:blue\">var</span> field = <span style=\"color:blue\">new</span> Field();\r\n\r\nfield.change &#43;= <span style=\"color:blue\">function</span> (instance: Field, newValue: string, oldValue: string) { \r\n  \r\n}\r\n\r\n\r\n<span style=\"color:green\">//could output this js</span>\r\n\r\nfield.addEventListeners(<span style=\"color:#a31515\">'change'</span>, <span style=\"color:blue\">function</span> (instance: Field, newValue: string, oldValue: string) {\r\n\r\n});\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2012-10-31T18:19:47.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "937409",
    "ThreadId": "401505",
    "Html": "<p>Not currently planned.&nbsp; There are so many different event patterns in JavaScript today, that it is hard to imagine a feature here that would be broadly useful.&nbsp;</p>\r\n<p>A potential future mixin system could make it easier to combine event source behavior into a class definition - but that is something that would be longer term.</p>",
    "PostedDate": "2012-11-06T10:53:46.803-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951683",
    "ThreadId": "401505",
    "Html": "\r\n<p>I'd like some kind on built in eventing system too.</p>\r\n<p>I have converted our backbone.js project over to typescript but the events off of the models are still loose.</p>\r\n<p>Is there a pattern I could follow to have Views classes subscribe to strongly typed events from a Model class in Typescript?</p>\r\n<p>Thanks,<br>\r\nJon</p>\r\n",
    "PostedDate": "2012-12-05T06:27:14.993-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951764",
    "ThreadId": "401505",
    "Html": "\r\n<p>Jon,<br>\r\nIf I recall correctly, the event listening/dispatching paradigm is pretty much based on a normal Observer design pattern. If you just want DOM-less event dispatching in TypeScript, I've already wrote a simple little library to do just that. You can find it\r\n on GitHub as <a href=\"https://github.com/jmvrbanac/EventDispatcher-ts\">EventDispatcher-ts</a>. I've only ever used it on pure ts classes that weren't already inheriting from another base, but you should still be able to make it work if you do it right. I hope\r\n this helps!</p>\r\n<p>John Vrbanac</p>\r\n",
    "PostedDate": "2012-12-05T08:49:46.78-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951858",
    "ThreadId": "401505",
    "Html": "\r\n<p>Awesome work John!</p>\r\n<p>Yes, I'm looking for non-DOM events. &nbsp;I have a single page app with many views and one model.</p>\r\n<p>Views set data on the model, then I want other views to get notified (ideally in a strongly typed fashion) by the model.</p>\r\n<p>I will take a look at your helpers there. &nbsp;</p>\r\n<p>Thanks much!<br>\r\nJon&nbsp;</p>\r\n",
    "PostedDate": "2012-12-05T11:58:27.423-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]