[
  {
    "Id": "1111442",
    "ThreadId": "463363",
    "Html": "Hi,\r<br />\ntwo weeks ago I have done some refactoring, basically changing some setters/getters into functions. Coming from .net world, I was expecting that I will get compiler errors, but there was none. Here is an example:<br />\n<pre><code>class Foo {\n    func(a: number): number {\n        console.log(a);\n        return a;\n    }\n}\n\nvar foo = new Foo();\n\nvar f1 = foo.func;  // this is OK\nvar f2 = foo.func(3); // and also this\nfoo.func; // BUT shouldn't be this compiler error???</code></pre>\n\nfoo.func; has no runtime effect and is almost always error. I think that it is processed as NOP by javascript engine. The same is true for the following statement:\r<br />\n<br />\nvar a=3;\r<br />\na; // compiler error???\r<br />\n<br />\nMaybe I’m not aware and there are situation where this can be used but in real situation this is almost every time spelling error, refactoring…<br />\n",
    "PostedDate": "2013-10-24T00:55:33.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1111706",
    "ThreadId": "463363",
    "Html": "While it's basically a NOP, it's still a valid JavaScript statement.<br />\n\r<br />\nThat said, one thing we could do, or a rule that linting tools could add, would be to warn on expressions that don't appear to have an effect.  This would only be a best effort, as I believe that if you use a getter as a standalone statement, it could still have side effects .<br />\n",
    "PostedDate": "2013-10-24T09:16:26.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1111976",
    "ThreadId": "463363",
    "Html": "Yes, it’s completely valid statement and also getters used standalone can still have effect on program execution. But in C# even getters(get properties) can’t be used standalone, you get compiler error. It’s also very confusing because if used standalone, it can be getter or setter, OK it's getter but very confusing.\r<br />\n<br />\nSo I hope that this kind of lint tools will make the way to type script compiler and rise the confidence. I daily switch different development environment and only in ts I find myself producing intentional errors to see compiler reaction. You can generate warning for the issues that don’t prevent js generation and developers can then switch on/off particular warning. And of course by default all warnings should be switched on.\r<br />\n<br />\nFor the standalone statement for preventing warning you could also parenthesis, like this:<br />\n<pre><code>var a = 3;\na; // warning XXXX; you can disable it\n(a); // no warning even if warning XXXX is enabled.</code></pre>\n\n",
    "PostedDate": "2013-10-25T00:51:53.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1112182",
    "ThreadId": "463363",
    "Html": "There's a solid linting project here: <a href=\"https://github.com/palantir/tslint\" rel=\"nofollow\">https://github.com/palantir/tslint</a> .  There's no NOOP detection yet but it could be added and I'm sure would be appreciated.<br />\n",
    "PostedDate": "2013-10-25T10:09:20.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1117164",
    "ThreadId": "463363",
    "Html": "Grajkowski, thanks for the link, I will give it a try. But still, IMO this lint stuff should be part of typescript warning system.<br />\n",
    "PostedDate": "2013-11-04T06:05:55.14-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]