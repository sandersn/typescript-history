[
  {
    "Id": "1150601",
    "ThreadId": "483998",
    "Html": "<a href=\"https://github.com/lbovet/typson\" rel=\"nofollow\">Typson</a> is a pure-javascript tool running in node.js or the browser to generate json-schemas out of TypeScript interfaces.\r<br />\n<br />\nIts primary goal is to provide a full expressive typed language to define JSON structure definitions in a modular way (with IDE support, syntax and type checking). TypeScript has been chosen thanks to its JSON compatibility and pure-javascript implementation.\r<br />\n<br />\nI think, it may also be of use for TypeScript developers for exposing their type definitions accross technology boundaries.<br />\n",
    "PostedDate": "2014-01-07T13:24:01.153-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1150850",
    "ThreadId": "483998",
    "Html": "That looks interesting. \r<br />\n<br />\nCan you elaborate on the intended usage of Typson? The blurb is rather abstract, what do you mean when you say &quot;exposing their type definitions accross technology boundaries&quot;?\r<br />\n<br />\nDoes that mean using it in a browser? What if I want to use the JSON for generating test objects? How would I incorporate Typeson into a Visual Studio build process?<br />\n",
    "PostedDate": "2014-01-08T05:16:17.127-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1150995",
    "ThreadId": "483998",
    "Html": "I have no definitive idea of what could be the different uses of Typson for TypeScript developers. It is possible that someone would use it in a way I did not imagine.\r<br />\n<br />\nJSON is nowadays a common format for many cases from data exchange between applications to persistence. Its simplicity makes interoperability very easy to realize.\r<br />\n<br />\nJSON schema is an attempt at standardizing the way we describe JSON data. There is an emergence of tools that uses JSON schema: validators, document generators, code generators (and vice-versa), see <a href=\"http://json-schema.org/implementations.html\" rel=\"nofollow\">http://json-schema.org/implementations.html</a>. There is quite a need for such a standard, I think.\r<br />\n<br />\nTwo cases I imagined where it could be useful:\r<br />\n<br />\n1) A pure browser TypeScript application that renders/manipulate data. The data structure would surely be defined as TypeScript interfaces. Typson would provide a JSON schema version of this data structure. One may want to connect this application to different servers providing this data. These servers can be implemented in any technology (PHP, .NET, Java, Node.js, ...). So, one can use the JSON schema to document and validate the JSON data. We can even generate the server classes out of the JSON schema.\r<br />\n<br />\n2) A Node.js server-side application written in TypeScript that expose a JSON/REST API to clients (any technology). Here again, one can generate the documentation (e.g. with Swagger) out of the TypeScript interfaces, validate the data sent by clients and also generate the client-side types.\r<br />\n<br />\nThis is actually a contract-last approach to interface definition.\r<br />\n<br />\nThere are some JSON schema tools able to generate fake data from JSON schema, so the use case you describe makes sense.\r<br />\n<br />\nNow, I am not a Visual Studio user, so I don't exactly know how this could be integrated in a build process, but I imagine that spawning the node.js version of Typson during the build process is possible (after all, the TypeScript compiler is a node.js module).<br />\n",
    "PostedDate": "2014-01-08T10:17:59.18-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1239991",
    "ThreadId": "483998",
    "Html": "This is interesting because currently we're using YUIDoc to generate API docs for our library. However, it's extra verbose because we have to duplicate annotations that TS already can tell us.<br />\n<br />\nI may look into using your project as input to my Assemble YUI doc generator and generate documentation from Typson instead, if it can meet our needs. Thanks for posting.<br />\n<br />\nEdit: I see you also have Docson. This combo looks pretty awesome. I wonder if it can support what we currently get out of YUI (namely, custom templating, line numbers and filenames (to link back to GitHub), private members, derived members, inherited members, etc.). For example, here's what our Assemble YUI generator creates from our YUIDoc TS files:<br />\n<br />\n<a href=\"http://excaliburjs.com/docs/api/\" rel=\"nofollow\">http://excaliburjs.com/docs/api/</a><br />\n",
    "PostedDate": "2014-04-30T12:04:52.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]