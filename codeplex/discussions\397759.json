[
  {
    "Id": "920782",
    "ThreadId": "397759",
    "Html": "\r\n<p>If SomeOtherClass implements the interface which can be extracted by SomeClass, it should be usable in all places which expect SomeClass. For example the following should work:&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Student {\n    fullname : string;\n    constructor(<span style=\"color:blue\">public</span> firstname, <span style=\"color:blue\">public</span> middleinitial, <span style=\"color:blue\">public</span> lastname) {\n        <span style=\"color:blue\">this</span>.fullname = firstname &#43; <span style=\"color:#a31515\">&quot; &quot;</span> &#43; middleinitial &#43; <span style=\"color:#a31515\">&quot; &quot;</span> &#43; lastname;\n    }\n}\n\n<span style=\"color:green\">// The class definition also defines (implicitly) the interface version of this type:</span>\n\n<span style=\"color:green\">//interface Student { </span>\n<span style=\"color:green\">//    firstname: string; </span>\n<span style=\"color:green\">//    lastname: string; </span>\n<span style=\"color:green\">//    middleinitial: string; </span>\n<span style=\"color:green\">//    fullname: string; </span>\n<span style=\"color:green\">//}</span>\n\n\n<span style=\"color:blue\">class</span> MockStudent {\n    fullname : string;\n    mockdata: number;\n    constructor(<span style=\"color:blue\">public</span> firstname, <span style=\"color:blue\">public</span> middleinitial, <span style=\"color:blue\">public</span> lastname) {\n        <span style=\"color:blue\">this</span>.fullname = firstname &#43; <span style=\"color:#a31515\">&quot; &quot;</span> &#43; middleinitial &#43; <span style=\"color:#a31515\">&quot; &quot;</span> &#43; lastname;\n        <span style=\"color:blue\">this</span>.mockdata = 1;\n    }\n}\n\n\n<span style=\"color:green\">// In this context, &quot;Student&quot; is not a class but the implicitly defined interface:</span>\n\n<span style=\"color:blue\">function</span> greeter(person:Student) {\n    <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Hello, &quot;</span> &#43; person.firstname &#43; <span style=\"color:#a31515\">&quot; &quot;</span> &#43; person.lastname;\n}\n\n<span style=\"color:green\">// As a result, this will work - because MockStudent implements everything that Student's implicit interface does.</span>\ngreeter(<span style=\"color:blue\">new</span> MockStudent(<span style=\"color:#a31515\">&quot;test&quot;</span>, <span style=\"color:#a31515\">&quot;x&quot;</span>, <span style=\"color:#a31515\">&quot;test&quot;</span>)); \n\n<span style=\"color:green\">// ... and without the interface boilerplate. </span>\n\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Do we really want another language with elaborate and complex dependency injection frameworks?</p>\r\n<p>If a function takes a db:MySQLDatabase argument, I really want it to also work with my mdb: MockDatabase implementation for my unit testing framework. Of course, that is provided that MockDatabase implements all members that MySQLDatabase implements.</p>\r\n<p>Lets say that there is a cool chart drawing library class which is initialized with a canvas (this canvas becomes a private variable)</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">function</span> init(canvas: Canvas) {\n<span style=\"color:green\">// stuff</span>\n}</pre>\r\n</div>\r\n<p>Then time passes and someone writes a really fast webgl-based canvas. If TypeScript works as it does now, this old chart drawing library is useless. To make it useful, one would have to write a common interface ICanvas, then replace all occuranes of the\r\n &quot;Canvas&quot; type in the old library to be &quot;ICanvas&quot; (not to mention all other classes used internally by Canvas).&nbsp;Developers never seem to remember the need for this until its too late, and changing this is a nightmare.</p>\r\n<p>If instead the type specifier means &quot;any class that implements all the things implemented in Canvas&quot;, then this new webgl Canvas library would be easily usable with the old drawing library. Just initialize it with the new WebglCanvas which implements everything\r\n that Canvas implements. No changes required anywhere.</p>\r\n<p>Is there *any* reason why things shouldn't work this way?</p>\r\n",
    "PostedDate": "2012-10-02T11:49:50.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922629",
    "ThreadId": "397759",
    "Html": "<p>Classes in TypeScript are structurally-typed.&nbsp; They have a&nbsp;hidden member&nbsp;that allows them to be used nominally (meaning the way programmers of C# and other OO languages are accustomed).&nbsp; To get something that is purely structural, you need to use interfaces.&nbsp; We want to be able to tell whether the user is asking for the structural (interface) or a nominal (class) style.&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-05T13:28:35.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "922646",
    "ThreadId": "397759",
    "Html": "<p>We're discussing the same issue in the&nbsp;<a href=\"http://typescript.codeplex.com/discussions/398062\">Class Brands and Type-Checking Weirdness</a>&nbsp;thread. Please take a look at my proposal there which allows for both structural and nominal typing while making structural typing the default. Specifically, the proposal is that 'class MyClass' is conceptually or literally equivalent to defining 'interface MyClass' which contains the instance properties, but no hidden member for the brand AND 'interface MyClass$ extends MyClass { $MyClass$brand : string }'. In this way when you define a property or parameter of type 'MyClass', you mean 'something that looks like MyClass' &nbsp;(structural) and when you define a property or parameter of type 'MyClass$', you mean something that is of type 'MyClass' or a subclass (nominal).</p>",
    "PostedDate": "2012-10-05T14:05:35.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]