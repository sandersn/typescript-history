{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "As part of our move to GitHub, we're closing our CodePlex suggestions and asking that people move them to the GitHub issue tracker for further discussion.  Some feature requests may already be active on GitHub, so please make sure to look for an existing issue before filing a new one.\n\nYou can find our GitHub issue tracker here:\nhttps://github.com/microsoft/typeScript/issues\n",
    "ClosedDate": "2014-07-28T15:18:11.063-07:00",
    "CommentCount": 3,
    "Custom": null,
    "Description": "We are using RequireJS to tie together our application from several projects. We also use RequireJS to pull in dependencies during unit testing (we need the real js objects in order to mock them).\r\n\r\nBy using require.config we can point out where the tests should fetch the modules. However, TypeScript requires the module paths to mirror the file system. We need to be able to tell the compiler that when a path starts with 'abc' then look in this folder, 'def' then look in this folder etc.\r\nWithout this feature we can't separate our tests from our production code.\r\n\r\n",
    "LastUpdatedDate": "2017-11-27T11:51:33.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "typescript",
    "ReportedDate": "2013-04-15T08:42:58.843-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "External"
    },
    "Summary": "Require.config(-ish?) file to tell typescript compiler how to interpret AMD paths",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 11,
    "Id": 911
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "We are aware of the desire for more configurability here.  Assigning to Jonathan for tracking this request.",
      "PostedDate": "2013-04-18T11:10:00.477-07:00",
      "Id": 97388
    },
    {
      "Message": "Another example where this would be useful is in the case of MVC Areas where you might want to keep related scripts in their areas, near their views, but allow for clean AMD \"canonical names\".\n\nFor instance, you might have a directory structure like this:\n\nAreas/A1/Views/Index.cshtml\nAreas/A1/Scripts/area1.ts\nAreas/A2/Views/Index.cshtml\nAreas/A2/Scripts/area2.ts\n\nWith require you can set up a config file like this:\n\nrequire.config({\n  map: {\n  'a1': '/Areas/A1/Scripts/',\n  'a2': '/Areas/A2/Scripts/'\n  }\n})\n\nThen, for instance, you can use \"a1/area1\" as the dependency name in a define or require call.\n\nAt the very least, I think you should be able to define a \"canonical\" AMD dependency name in the TypeScript require, even if you still have to point to the physical TS file. For instance, perhaps something like: import area1 = require({ \"a1/area1\": \"../../A1/Scripts/area1\" }) so that the compiled define show define([..., \"a1/area1\"], ...) and yet the TypeScript still has the physical path to the TS source.",
      "PostedDate": "2013-09-17T11:22:30.65-07:00",
      "Id": 114803
    },
    {
      "Message": "Another issue about the same thing: https://typescript.codeplex.com/workitem/934",
      "PostedDate": "2014-04-19T16:07:00.707-07:00",
      "Id": 142422
    }
  ]
}